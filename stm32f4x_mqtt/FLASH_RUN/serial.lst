   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"serial.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "serial.c"
  20              		.section	.text.NVIC_SystemReset,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NVIC_SystemReset:
  27              	.LFB121:
  28              		.file 2 "/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h"
   1:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**************************************************************************//**
   2:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  * @file     core_cm4.h
   3:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  * @version  V4.30
   5:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  * @date     20. October 2015
   6:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  ******************************************************************************/
   7:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
   9:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    All rights reserved.
  10:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  11:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  12:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  13:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  14:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  15:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  16:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  17:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****      to endorse or promote products derived from this software without
  19:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****      specific prior written permission.
  20:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    *
  21:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    ---------------------------------------------------------------------------*/
  33:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  34:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  35:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #if   defined ( __ICCARM__ )
  36:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  39:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
  40:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  41:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  42:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  43:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  44:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #include <stdint.h>
  45:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  46:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #ifdef __cplusplus
  47:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  extern "C" {
  48:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
  49:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  50:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
  51:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  54:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  56:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  57:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****      Unions are used for effective representation of core registers.
  59:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  60:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  62:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
  63:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  64:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  65:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*******************************************************************************
  66:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  *                 CMSIS definitions
  67:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  ******************************************************************************/
  68:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
  69:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup Cortex_M4
  70:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
  71:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
  72:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  73:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*  CMSIS CM4 definitions */
  74:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  77:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  79:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core *
  80:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  81:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  82:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #if   defined ( __CC_ARM )
  83:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  86:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  87:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  91:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  92:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined ( __GNUC__ )
  93:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __STATIC_INLINE  static inline
  96:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
  97:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined ( __ICCARM__ )
  98:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __STATIC_INLINE  static inline
 101:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 102:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined ( __TMS470__ )
 103:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __STATIC_INLINE  static inline
 105:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 106:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined ( __TASKING__ )
 107:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __STATIC_INLINE  static inline
 110:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 111:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined ( __CSMC__ )
 112:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __packed
 113:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define __STATIC_INLINE  static inline
 116:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 117:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #else
 118:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #error Unknown compiler
 119:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
 120:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 121:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** */
 124:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #if defined ( __CC_ARM )
 125:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 126:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 127:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 128:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #else
 129:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 131:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #endif
 132:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #else
 133:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 134:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 135:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 136:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #if defined __ARM_PCS_VFP
 138:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 139:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 140:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #else
 141:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 143:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #endif
 144:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #else
 145:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 146:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 147:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 148:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined ( __GNUC__ )
 149:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 151:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 152:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #else
 153:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 155:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #endif
 156:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #else
 157:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 158:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 159:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 160:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined ( __ICCARM__ )
 161:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #if defined __ARMVFP__
 162:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 163:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 164:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #else
 165:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 167:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #endif
 168:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #else
 169:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 170:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 171:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 172:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined ( __TMS470__ )
 173:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 174:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 175:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 176:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #else
 177:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 179:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #endif
 180:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #else
 181:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 182:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 183:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 184:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined ( __TASKING__ )
 185:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #if defined __FPU_VFP__
 186:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 187:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 188:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #else
 189:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 191:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #endif
 192:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #else
 193:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 194:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 195:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 196:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #elif defined ( __CSMC__ )
 197:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 198:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 199:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       1U
 200:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #else
 201:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****       #define __FPU_USED       0U
 203:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #endif
 204:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #else
 205:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __FPU_USED         0U
 206:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 207:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 208:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
 209:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 210:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 214:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #ifdef __cplusplus
 215:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
 216:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
 217:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 218:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 219:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 220:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #ifndef __CMSIS_GENERIC
 221:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 222:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 223:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 224:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 225:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #ifdef __cplusplus
 226:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  extern "C" {
 227:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
 228:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 229:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* check device defines and use defaults */
 230:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 231:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #ifndef __CM4_REV
 232:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __CM4_REV               0x0000U
 233:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 234:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 235:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 236:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #ifndef __FPU_PRESENT
 237:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __FPU_PRESENT             0U
 238:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 240:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 241:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #ifndef __MPU_PRESENT
 242:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __MPU_PRESENT             0U
 243:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 244:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 245:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 246:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 247:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __NVIC_PRIO_BITS          4U
 248:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 249:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 250:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 251:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 252:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 253:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 254:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #endif
 255:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
 256:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 257:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 258:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 259:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 260:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 261:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 262:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     \li to specify the access to peripheral variables.
 263:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 264:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** */
 265:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #ifdef __cplusplus
 266:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 267:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #else
 268:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 269:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
 270:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 271:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 272:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 273:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* following defines should be used for structure members */
 274:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 275:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 276:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 277:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 278:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@} end of group Cortex_M4 */
 279:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 280:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 281:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 282:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*******************************************************************************
 283:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  *                 Register Abstraction
 284:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   Core Register contain:
 285:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   - Core Register
 286:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   - Core NVIC Register
 287:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   - Core SCB Register
 288:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   - Core SysTick Register
 289:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   - Core Debug Register
 290:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   - Core MPU Register
 291:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   - Core FPU Register
 292:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  ******************************************************************************/
 293:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 294:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 295:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 296:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** */
 297:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 298:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 299:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup    CMSIS_core_register
 300:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 301:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief      Core Register type definitions.
 302:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
 303:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 304:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 305:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 306:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 307:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 308:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef union
 309:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
 310:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   struct
 311:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   {
 312:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 313:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 314:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 315:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 316:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 317:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 318:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 319:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 320:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 321:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 322:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } APSR_Type;
 323:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 324:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* APSR Register Definitions */
 325:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 326:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 327:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 328:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 329:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 330:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 331:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 332:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 333:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 334:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 335:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 336:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 337:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 338:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 339:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 340:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 341:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 342:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 343:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 344:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 345:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 346:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 347:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef union
 348:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
 349:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   struct
 350:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   {
 351:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 352:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 353:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 354:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 355:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } IPSR_Type;
 356:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 357:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* IPSR Register Definitions */
 358:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 359:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 360:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 361:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 362:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 363:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 364:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 365:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef union
 366:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
 367:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   struct
 368:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   {
 369:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 370:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 371:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 372:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 373:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 374:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 375:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 376:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 377:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 378:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 379:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 380:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 381:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 382:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } xPSR_Type;
 383:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 384:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* xPSR Register Definitions */
 385:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 386:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 387:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 388:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 389:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 390:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 391:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 392:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 393:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 394:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 395:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 396:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 397:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 398:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 399:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 400:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 401:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 402:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 403:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 404:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 405:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 406:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 407:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 408:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 409:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 410:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 411:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 412:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 413:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 414:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 415:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 416:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef union
 417:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
 418:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   struct
 419:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   {
 420:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 421:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 422:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 423:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 424:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 425:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 426:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } CONTROL_Type;
 427:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 428:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* CONTROL Register Definitions */
 429:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 430:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 431:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 432:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 433:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 434:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 435:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 436:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 437:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 438:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@} end of group CMSIS_CORE */
 439:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 440:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 441:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 442:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup    CMSIS_core_register
 443:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 444:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 445:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
 446:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 447:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 448:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 449:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 450:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 451:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef struct
 452:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
 453:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 454:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED0[24U];
 455:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 456:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RSERVED1[24U];
 457:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 458:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED2[24U];
 459:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 460:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED3[24U];
 461:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 462:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED4[56U];
 463:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 464:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED5[644U];
 465:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 466:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }  NVIC_Type;
 467:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 468:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 469:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 470:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 471:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 472:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 473:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 474:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 475:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 476:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
 477:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 478:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 479:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
 480:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 481:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 482:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 483:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 484:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 485:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef struct
 486:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
 487:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 488:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 489:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 490:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 491:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 492:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 493:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 494:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 495:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 496:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 497:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 498:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 499:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 500:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 501:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 502:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 503:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 504:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 505:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 506:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED0[5U];
 507:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 508:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } SCB_Type;
 509:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 510:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SCB CPUID Register Definitions */
 511:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 512:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 513:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 514:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 515:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 516:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 517:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 518:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 519:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 520:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 521:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 522:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 523:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 524:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 525:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 526:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 527:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 528:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 529:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 530:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 531:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 532:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 533:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 534:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 535:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 536:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 537:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 538:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 539:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 540:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 541:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 542:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 543:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 544:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 545:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 546:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 547:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 548:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 549:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 550:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 551:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 552:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 553:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 554:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 555:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 556:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 557:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 558:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 559:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 560:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 561:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 562:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 563:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 564:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 565:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 566:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 567:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 568:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 569:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 570:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 571:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 572:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 573:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 574:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 575:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 576:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 577:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 578:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 579:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 580:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 581:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 582:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 583:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SCB System Control Register Definitions */
 584:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 585:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 586:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 587:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 588:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 589:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 590:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 591:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 592:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 593:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 594:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 595:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 596:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 597:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 598:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 599:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 600:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 601:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 602:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 603:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 604:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 605:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 606:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 607:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 608:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 609:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 610:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 611:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 612:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 613:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 614:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 615:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 616:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 617:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 618:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 619:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 620:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 621:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 622:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 623:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 624:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 625:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 626:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 627:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 628:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 629:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 630:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 631:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 632:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 633:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 634:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 635:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 636:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 637:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 638:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 639:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 640:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 641:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 642:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 643:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 644:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 645:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 646:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 647:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 648:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 649:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 650:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 651:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 652:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 653:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 654:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 655:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 656:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 657:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 658:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 659:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 660:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 661:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 662:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 663:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 664:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 665:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 666:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 667:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 668:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 669:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 670:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 671:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 672:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 673:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 674:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 675:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 676:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 677:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 678:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 679:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 680:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 681:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 682:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 683:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 684:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 685:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 686:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 687:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 688:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 689:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 690:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 691:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@} end of group CMSIS_SCB */
 692:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 693:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 694:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 695:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
 696:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 697:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 698:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
 699:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 700:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 701:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 702:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 703:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 704:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef struct
 705:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
 706:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED0[1U];
 707:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 708:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 709:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } SCnSCB_Type;
 710:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 711:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 712:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 713:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 714:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 715:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Auxiliary Control Register Definitions */
 716:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 717:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 718:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 719:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 720:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 721:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 722:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 723:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 724:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 725:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 726:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 727:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 728:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 729:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 730:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 731:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 732:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 733:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 734:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 735:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
 736:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 737:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 738:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
 739:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 740:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 741:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 742:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 743:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 744:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef struct
 745:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
 746:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 747:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 748:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 749:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 750:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } SysTick_Type;
 751:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 752:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 753:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 754:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 755:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 756:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 757:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 758:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 759:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 760:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 761:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 762:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 763:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 764:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 765:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SysTick Reload Register Definitions */
 766:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 767:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 768:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 769:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SysTick Current Register Definitions */
 770:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 771:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 772:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 773:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* SysTick Calibration Register Definitions */
 774:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 775:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 776:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 777:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 778:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 779:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 780:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 781:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 782:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 783:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 784:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 785:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 786:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 787:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
 788:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 789:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 790:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
 791:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 792:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 793:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 794:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 795:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 796:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef struct
 797:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
 798:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __OM  union
 799:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   {
 800:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 801:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 802:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 803:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 804:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED0[864U];
 805:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 806:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED1[15U];
 807:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 808:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED2[15U];
 809:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 810:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED3[29U];
 811:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 812:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 813:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 814:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED4[43U];
 815:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 816:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 817:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED5[6U];
 818:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 819:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 820:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 821:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 822:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 823:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 824:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 825:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 826:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 827:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 828:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 829:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 830:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } ITM_Type;
 831:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 832:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 833:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 834:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 835:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 836:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* ITM Trace Control Register Definitions */
 837:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 838:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 839:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 840:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 841:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 842:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 843:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 844:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 845:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 846:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 847:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 848:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 849:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 850:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 851:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 852:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 853:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 854:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 855:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 856:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 857:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 858:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 859:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 860:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 861:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 862:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 863:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 864:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* ITM Integration Write Register Definitions */
 865:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 866:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 867:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 868:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* ITM Integration Read Register Definitions */
 869:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 870:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 871:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 872:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 873:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 874:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 875:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 876:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 880:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 883:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 886:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 888:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 889:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 890:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
 891:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
 894:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 895:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 896:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
 897:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
 899:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef struct
 900:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
 901:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED0[1U];
 913:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED1[1U];
 917:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED2[1U];
 921:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } DWT_Type;
 925:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 926:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* DWT Control Register Definitions */
 927:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 930:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 933:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 936:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 939:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 942:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 945:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 948:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 951:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 954:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 957:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 960:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 963:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 966:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 969:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 972:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 975:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 978:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 981:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 985:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 989:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 993:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
 997:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1001:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1005:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1009:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1012:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1015:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1018:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1021:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1024:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1027:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1030:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1033:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1035:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1036:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1037:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
1038:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
1041:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1042:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1043:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1044:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1046:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef struct
1047:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1048:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED0[2U];
1051:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED1[55U];
1053:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED2[131U];
1055:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED3[759U];
1059:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1060:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED4[1U];
1063:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED5[39U];
1067:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED7[8U];
1070:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } TPI_Type;
1073:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1074:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1078:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1082:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1086:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1089:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1092:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1095:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1099:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1102:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1106:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1110:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1113:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1116:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1119:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1122:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1125:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1128:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1130:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1131:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1132:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1133:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1134:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1135:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1136:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1137:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1138:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1139:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1140:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1141:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1142:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1143:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1144:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1145:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1146:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1147:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1148:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1149:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1150:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1151:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1152:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1153:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1154:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1155:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1156:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1157:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1158:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1159:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1160:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1161:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1162:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI DEVID Register Definitions */
1163:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1164:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1165:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1166:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1167:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1168:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1169:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1170:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1171:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1172:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1173:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1174:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1175:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1176:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1177:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1178:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1179:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1180:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1181:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1182:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1183:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1184:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1185:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1186:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1187:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1188:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1189:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1190:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1191:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1192:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1193:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
1194:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1195:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1196:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
1197:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1198:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1199:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1200:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1201:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1202:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef struct
1203:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1204:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1205:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1206:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1207:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1208:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1209:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1210:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1211:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1212:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1213:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1214:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1215:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } MPU_Type;
1216:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1217:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* MPU Type Register Definitions */
1218:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1219:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1220:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1221:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1222:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1223:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1224:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1225:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1226:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1227:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* MPU Control Register Definitions */
1228:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1229:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1230:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1231:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1232:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1233:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1234:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1235:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1236:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1237:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* MPU Region Number Register Definitions */
1238:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1239:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1240:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1241:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1242:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1243:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1244:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1245:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1246:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1247:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1248:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1249:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1250:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1251:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1252:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1253:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1254:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1255:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1256:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1257:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1258:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1259:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1260:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1261:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1262:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1263:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1264:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1265:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1266:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1267:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1268:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1269:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1270:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1271:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1272:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1273:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1274:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1275:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1276:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1277:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1278:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1279:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1280:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1281:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1282:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@} end of group CMSIS_MPU */
1283:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
1284:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1285:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1286:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1287:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1288:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
1289:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1290:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1291:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
1292:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1293:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1294:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1295:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1296:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1297:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef struct
1298:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1299:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****         uint32_t RESERVED0[1U];
1300:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1301:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1302:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1303:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1304:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1305:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } FPU_Type;
1306:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1307:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1308:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1309:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1310:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1311:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1312:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1313:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1314:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1315:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1316:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1317:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1318:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1319:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1320:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1321:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1322:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1323:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1324:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1325:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1326:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1327:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1328:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1329:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1330:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1331:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1332:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1333:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1334:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1335:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1336:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1337:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1338:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1339:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1340:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1341:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1342:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1343:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1344:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1345:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1346:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1347:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1348:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1349:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1350:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1351:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1352:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1353:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1354:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1355:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1356:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1357:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1358:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1359:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1360:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1361:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1362:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1363:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1364:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1365:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1366:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1367:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1368:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1369:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1370:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1371:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1372:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1373:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1374:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1375:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1376:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1377:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1378:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1379:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1380:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1381:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1382:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1383:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1384:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1385:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1386:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1387:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1388:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1389:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1390:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@} end of group CMSIS_FPU */
1391:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
1392:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1393:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1394:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1395:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup  CMSIS_core_register
1396:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1397:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1398:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
1399:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1400:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1401:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1402:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1403:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1404:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** typedef struct
1405:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1406:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1407:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1408:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1409:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1410:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** } CoreDebug_Type;
1411:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1412:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1413:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1414:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1415:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1416:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1417:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1418:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1419:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1420:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1421:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1422:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1423:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1424:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1425:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1426:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1427:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1428:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1429:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1430:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1431:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1432:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1433:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1434:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1435:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1436:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1437:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1438:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1439:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1440:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1441:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1442:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1443:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1444:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1445:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1446:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1447:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1448:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1449:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1450:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1451:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1452:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1453:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1454:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1455:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1456:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1457:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1458:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1459:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1460:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1461:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1462:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1463:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1464:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1465:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1466:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1467:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1468:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1469:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1470:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1471:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1472:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1473:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1474:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1475:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1476:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1477:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1478:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1479:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1480:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1481:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1482:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1483:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1484:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1485:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1486:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1487:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1488:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1489:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1490:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1491:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1492:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1493:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1494:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1495:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1496:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1497:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1498:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1499:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1500:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup    CMSIS_core_register
1501:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1502:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1503:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
1504:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1505:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1506:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1507:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1508:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param[in] field  Name of the register bit field.
1509:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param[in] value  Value of the bit field.
1510:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \return           Masked and shifted value.
1511:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** */
1512:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1513:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1514:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1515:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1516:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param[in] field  Name of the register bit field.
1517:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param[in] value  Value of register.
1518:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \return           Masked and shifted bit field value.
1519:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** */
1520:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1521:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1522:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1523:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1524:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1525:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1526:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup    CMSIS_core_register
1527:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1528:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1529:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
1530:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1531:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1532:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1533:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1534:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1535:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1536:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1537:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1538:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1539:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1540:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1541:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1542:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1543:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1544:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1545:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1546:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1547:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1548:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1549:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1550:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1551:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1552:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1553:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1554:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
1555:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1556:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1557:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1558:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1559:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** #endif
1560:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1561:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*@} */
1562:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1563:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1564:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1565:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /*******************************************************************************
1566:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  *                Hardware Abstraction Layer
1567:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   Core Function Interface contains:
1568:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   - Core NVIC Functions
1569:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   - Core SysTick Functions
1570:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   - Core Debug Functions
1571:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   - Core Register Access Functions
1572:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  ******************************************************************************/
1573:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1574:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1575:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** */
1576:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1577:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1578:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1579:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1580:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1581:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1582:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1583:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1584:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   @{
1585:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1586:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1587:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1588:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Set Priority Grouping
1589:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1590:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1591:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            Only values from 0..7 are used.
1592:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            In case of a conflict between priority grouping and available
1593:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1594:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1595:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1596:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1597:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1598:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t reg_value;
1599:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1600:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1601:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1602:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1603:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   reg_value  =  (reg_value                                   |
1604:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1605:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1606:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   SCB->AIRCR =  reg_value;
1607:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1608:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1609:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1610:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1611:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Get Priority Grouping
1612:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1613:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1614:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1615:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1616:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1617:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1618:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1619:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1620:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1621:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1622:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Enable External Interrupt
1623:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1624:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1625:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1626:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1627:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1628:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1629:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1630:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1631:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1632:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1633:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Disable External Interrupt
1634:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1635:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1636:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1637:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1638:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1639:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1640:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1641:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1642:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1643:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1644:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Get Pending Interrupt
1645:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1646:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1647:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \return             0  Interrupt status is not pending.
1648:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \return             1  Interrupt status is pending.
1649:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1650:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1651:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1652:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1653:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1654:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1655:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1656:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1657:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Set Pending Interrupt
1658:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Sets the pending bit of an external interrupt.
1659:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1660:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1661:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1662:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1663:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1664:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1665:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1666:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1667:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1668:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Clear Pending Interrupt
1669:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Clears the pending bit of an external interrupt.
1670:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1671:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1672:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1673:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1674:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1675:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1676:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1677:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1678:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1679:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Get Active Interrupt
1680:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Reads the active register in NVIC and returns the active bit.
1681:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1682:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \return             0  Interrupt status is not active.
1683:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \return             1  Interrupt status is active.
1684:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1685:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1686:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1687:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1688:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1689:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1690:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1691:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1692:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Set Interrupt Priority
1693:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Sets the priority of an interrupt.
1694:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \note    The priority cannot be set for every core interrupt.
1695:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1696:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]  priority  Priority to set.
1697:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1698:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1699:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1700:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   if ((int32_t)(IRQn) < 0)
1701:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   {
1702:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1703:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   }
1704:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   else
1705:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   {
1706:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1707:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   }
1708:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1709:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1710:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1711:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1712:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Get Interrupt Priority
1713:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Reads the priority of an interrupt.
1714:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
1715:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            or negative to specify an internal (core) interrupt.
1716:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1717:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \return             Interrupt Priority.
1718:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1719:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1720:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1721:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1722:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1723:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   if ((int32_t)(IRQn) < 0)
1724:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   {
1725:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1726:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   }
1727:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   else
1728:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   {
1729:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1730:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   }
1731:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1732:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1733:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1734:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1735:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Encode Priority
1736:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1737:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            preemptive priority value, and subpriority value.
1738:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            In case of a conflict between priority grouping and available
1739:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1740:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1741:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1742:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1743:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1744:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1745:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1746:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1747:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1748:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t PreemptPriorityBits;
1749:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t SubPriorityBits;
1750:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1751:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1752:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1753:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1754:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   return (
1755:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1756:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1757:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****          );
1758:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1759:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1760:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1761:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1762:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   Decode Priority
1763:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Decodes an interrupt priority value with a given priority group to
1764:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            preemptive priority value and subpriority value.
1765:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            In case of a conflict between priority grouping and available
1766:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1767:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1768:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1769:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1770:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1771:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1772:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1773:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
1774:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1775:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t PreemptPriorityBits;
1776:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   uint32_t SubPriorityBits;
1777:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1778:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1779:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1780:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1781:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1782:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1783:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** }
1784:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1785:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1786:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** /**
1787:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \brief   System Reset
1788:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   \details Initiates a system reset request to reset the MCU.
1789:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****  */
1790:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1791:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** {
  29              		.loc 2 1791 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
1792:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __DSB();                                                          /* Ensure all outstanding memor
  35              		.loc 2 1792 3 view .LVU1
  36              	.LBB12:
  37              	.LBI12:
  38              		.file 3 "/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h"
   1:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**************************************************************************//**
   2:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  * @version  V4.30
   5:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  * @date     20. October 2015
   6:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  ******************************************************************************/
   7:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
   9:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    All rights reserved.
  10:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****      specific prior written permission.
  20:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    *
  21:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  34:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  35:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  38:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #endif
  45:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  46:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  47:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   @{
  51:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
  52:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  53:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
  54:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
  58:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
  60:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
  62:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  63:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  64:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
  65:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
  69:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
  71:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
  73:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  74:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  75:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
  76:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Get Control Register
  77:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \return               Control Register value
  79:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
  80:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
  82:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   uint32_t result;
  83:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  84:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   return(result);
  86:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
  87:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  88:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  89:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
  90:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Set Control Register
  91:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
  94:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
  96:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
  98:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
  99:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 100:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 101:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \return               IPSR Register value
 104:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 105:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 107:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   uint32_t result;
 108:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 109:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   return(result);
 111:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 112:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 113:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 114:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 115:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Get APSR Register
 116:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \return               APSR Register value
 118:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 119:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 121:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   uint32_t result;
 122:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 123:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   return(result);
 125:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 126:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 127:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 128:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 129:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 132:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****     \return               xPSR Register value
 133:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 134:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 136:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   uint32_t result;
 137:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 138:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   return(result);
 140:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 141:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 142:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 143:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 144:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \return               PSP Register value
 147:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 148:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 150:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   register uint32_t result;
 151:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 152:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   return(result);
 154:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 155:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 156:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 157:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 158:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 162:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 164:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   //__ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : );  
 166:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 167:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 168:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 169:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 170:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 171:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 172:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \return               MSP Register value
 173:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 174:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 175:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 176:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   register uint32_t result;
 177:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 178:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 179:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   return(result);
 180:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 181:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 182:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 183:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 184:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 185:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 186:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 187:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 188:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 189:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 190:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 191:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   //__ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 192:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : );  
 193:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 194:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 195:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 196:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 197:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Get Priority Mask
 198:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 199:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \return               Priority Mask value
 200:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 201:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 202:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 203:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   uint32_t result;
 204:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 205:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 206:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   return(result);
 207:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 208:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 209:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 210:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 211:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Set Priority Mask
 212:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 213:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 214:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 215:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 216:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 217:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 218:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 219:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 220:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 221:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 222:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 223:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 224:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Enable FIQ
 225:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 226:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 227:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 228:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 229:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 230:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 231:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 232:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 233:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 234:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 235:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Disable FIQ
 236:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 237:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 238:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 239:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 240:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 241:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 242:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 243:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 244:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 245:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 246:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Get Base Priority
 247:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 248:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \return               Base Priority register value
 249:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 250:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 251:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 252:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   uint32_t result;
 253:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 254:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 255:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   return(result);
 256:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 257:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 258:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 259:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 260:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority
 261:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 262:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 263:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 264:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 265:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 266:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 267:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 268:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 269:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 270:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 271:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 272:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 273:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 274:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 275:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 276:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 277:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 278:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 279:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 280:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 281:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 282:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 283:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Get Fault Mask
 284:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 285:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \return               Fault Mask register value
 286:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 287:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 288:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 289:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   uint32_t result;
 290:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 291:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 292:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   return(result);
 293:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 294:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 295:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 296:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 297:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Set Fault Mask
 298:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 299:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 300:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 301:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 302:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 303:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 304:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 305:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 306:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 307:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 308:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 309:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 310:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 311:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 312:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Get FPSCR
 313:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 314:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 315:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 316:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 317:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 318:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 319:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   uint32_t result;
 320:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 321:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 322:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 323:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 324:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 325:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   return(result);
 326:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #else
 327:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****    return(0);
 328:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #endif
 329:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 330:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 331:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 332:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 333:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Set FPSCR
 334:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 335:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 336:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 337:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 338:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 339:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 340:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 341:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 342:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 343:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("");
 344:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #endif
 345:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 346:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 347:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 348:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 349:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 350:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 351:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 352:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 353:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 354:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 355:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 356:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   Access to dedicated instructions
 357:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   @{
 358:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** */
 359:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 360:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 361:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 362:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 363:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 364:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 365:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 366:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #else
 367:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 368:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 369:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** #endif
 370:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 371:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 372:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   No Operation
 373:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 374:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 375:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 376:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 377:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("nop");
 378:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 379:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 380:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 381:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 382:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Wait For Interrupt
 383:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 384:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 385:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 386:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 387:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("wfi");
 388:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 389:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 390:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 391:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 392:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Wait For Event
 393:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 394:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 395:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 396:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 397:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 398:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("wfe");
 399:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 400:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 401:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 402:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 403:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Send Event
 404:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 405:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 406:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 407:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 408:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("sev");
 409:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 410:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 411:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 412:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 413:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 414:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 415:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 416:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****            after the instruction has been completed.
 417:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 418:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 419:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 420:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 421:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 422:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 423:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** 
 424:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** /**
 425:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 426:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 427:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 428:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****  */
 429:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
  39              		.loc 3 429 53 view .LVU2
  40              	.LBB13:
 430:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 431:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  41              		.loc 3 431 3 view .LVU3
  42              		.syntax unified
  43              	@ 431 "/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h" 1
  44 0000 BFF34F8F 		dsb 0xF
  45              	@ 0 "" 2
  46              		.thumb
  47              		.syntax unified
  48              	.LBE13:
  49              	.LBE12:
1793:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****                                                                        buffered write are completed
1794:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
  50              		.loc 2 1794 3 view .LVU4
1795:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  51              		.loc 2 1795 32 is_stmt 0 view .LVU5
  52 0004 0549     		ldr	r1, .L3
1794:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  53              		.loc 2 1794 17 view .LVU6
  54 0006 064B     		ldr	r3, .L3+4
  55              		.loc 2 1795 32 view .LVU7
  56 0008 CA68     		ldr	r2, [r1, #12]
  57              		.loc 2 1795 40 view .LVU8
  58 000a 02F4E062 		and	r2, r2, #1792
1794:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  59              		.loc 2 1794 17 view .LVU9
  60 000e 1343     		orrs	r3, r3, r2
1794:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
  61              		.loc 2 1794 15 view .LVU10
  62 0010 CB60     		str	r3, [r1, #12]
1796:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1797:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   __DSB();                                                          /* Ensure completion of memory 
  63              		.loc 2 1797 3 is_stmt 1 view .LVU11
  64              	.LBB14:
  65              	.LBI14:
 429:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
  66              		.loc 3 429 53 view .LVU12
  67              	.LBB15:
  68              		.loc 3 431 3 view .LVU13
  69              		.syntax unified
  70              	@ 431 "/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h" 1
  71 0012 BFF34F8F 		dsb 0xF
  72              	@ 0 "" 2
  73              		.thumb
  74              		.syntax unified
  75              	.L2:
  76              	.LBE15:
  77              	.LBE14:
1798:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h **** 
1799:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   for(;;)                                                           /* wait until reset */
  78              		.loc 2 1799 3 view .LVU14
1800:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   {
1801:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****     __NOP();
  79              		.loc 2 1801 5 discriminator 1 view .LVU15
  80              	.LBB16:
  81              	.LBI16:
 375:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
  82              		.loc 3 375 53 view .LVU16
  83              	.LBB17:
 377:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
  84              		.loc 3 377 3 view .LVU17
  85              		.syntax unified
  86              	@ 377 "/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h" 1
  87 0016 00BF     		nop
  88              	@ 0 "" 2
  89              		.thumb
  90              		.syntax unified
  91              	.LBE17:
  92              	.LBE16:
1799:/project/stm32fx_iolib/stm32fxxx/cmsis/core_cm4.h ****   {
  93              		.loc 2 1799 3 view .LVU18
  94 0018 FDE7     		b	.L2
  95              	.L4:
  96 001a 00BF     		.align	2
  97              	.L3:
  98 001c 00ED00E0 		.word	-536810240
  99 0020 0400FA05 		.word	100270084
 100              		.cfi_endproc
 101              	.LFE121:
 103              		.section	.text.flash_read,"ax",%progbits
 104              		.align	1
 105              		.global	flash_read
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 110              	flash_read:
 111              	.LFB126:
   1:serial.c      **** /********************************************************************************/
   2:serial.c      **** /* serial.c                                                                     */
   3:serial.c      **** /* STM32F407ZGT6                                                                */
   4:serial.c      **** /* (Lee ChangWoo HL2IRW  hl2irw@daum.net 010-8573-6860)                 	*/
   5:serial.c      **** /* stm32f4x_test								*/
   6:serial.c      **** /********************************************************************************/
   7:serial.c      **** #include <stdint.h>
   8:serial.c      **** #include <stdio.h>
   9:serial.c      **** #include <stdarg.h>
  10:serial.c      **** #include <stdlib.h>
  11:serial.c      **** #include <string.h>
  12:serial.c      **** #include "hwdefs.h"
  13:serial.c      **** #include "source/prototype.h"
  14:serial.c      **** 
  15:serial.c      **** #define SOH				0x01
  16:serial.c      **** #define STX				0x02
  17:serial.c      **** #define ETX				0x03
  18:serial.c      **** #define EOT				0x04
  19:serial.c      **** #define ENQ				0x05
  20:serial.c      **** #define ACK				0x06
  21:serial.c      **** #define NAK				0x15
  22:serial.c      **** 
  23:serial.c      **** 
  24:serial.c      **** #define BASE64_PAD                      (char)'='
  25:serial.c      **** #define BASE64DE_FIRST                  (char)'+'
  26:serial.c      **** #define BASE64DE_LAST                   (char)'z'
  27:serial.c      **** #define BASE64_ENCODE_OUT_SIZE(s)       ((unsigned short)((((s) + 2) / 3) * 4 + 1))
  28:serial.c      **** #define BASE64_DECODE_OUT_SIZE(s)       ((unsigned short)(((s) / 4) * 3))
  29:serial.c      **** 
  30:serial.c      **** /* BASE 64 encode table */
  31:serial.c      **** static const char base64en[64] = {
  32:serial.c      ****       'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
  33:serial.c      ****       'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
  34:serial.c      ****       'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
  35:serial.c      ****       'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
  36:serial.c      ****       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
  37:serial.c      ****       'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
  38:serial.c      ****       'w', 'x', 'y', 'z', '0', '1', '2', '3',
  39:serial.c      ****       '4', '5', '6', '7', '8', '9', '+', '/',
  40:serial.c      **** };
  41:serial.c      **** 
  42:serial.c      **** 
  43:serial.c      **** /* ASCII order for BASE 64 decode, 255 in unused character */
  44:serial.c      **** static const unsigned char base64de[128] = {
  45:serial.c      ****       /*  nul, soh, stx, etx, eot, enq, ack, bel, */
  46:serial.c      ****           255, 255, 255, 255, 255, 255, 255, 255,
  47:serial.c      ****       /*  bs,  ht,  nl,  vt,  np,  cr,  so,  si, */
  48:serial.c      ****           255, 255, 255, 255, 255, 255, 255, 255,
  49:serial.c      ****       /*  dle, dc1, dc2, dc3, dc4, nak, syn, etb, */
  50:serial.c      ****           255, 255, 255, 255, 255, 255, 255, 255,
  51:serial.c      ****       /*  can,  em, sub, esc,  fs,  gs,  rs,  us, */
  52:serial.c      ****           255, 255, 255, 255, 255, 255, 255, 255,
  53:serial.c      ****       /*  sp, '!', '"', '#', '$', '%', '&', ''', */
  54:serial.c      ****           255, 255, 255, 255, 255, 255, 255, 255,
  55:serial.c      ****       /*  '(', ')', '*', '+', ',', '-', '.', '/', */
  56:serial.c      ****           255, 255, 255,  62, 255, 255, 255,  63,
  57:serial.c      ****       /* '0', '1', '2', '3', '4', '5', '6', '7', */
  58:serial.c      ****           52,  53,  54,  55,  56,  57,  58,  59,
  59:serial.c      ****       /* '8', '9', ':', ';', '<', '=', '>', '?', */
  60:serial.c      ****           60,  61, 255, 255, 255, 255, 255, 255,
  61:serial.c      ****       /* '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', */
  62:serial.c      ****           255,   0,   1,  2,   3,   4,   5,    6,
  63:serial.c      ****       /* 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', */
  64:serial.c      ****           7,   8,   9,  10,  11,  12,  13,  14,
  65:serial.c      ****       /* 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', */
  66:serial.c      ****           15,  16,  17,  18,  19,  20,  21,  22,
  67:serial.c      ****       /* 'X', 'Y', 'Z', '[', '\', ']', '^', '_', */
  68:serial.c      ****           23,  24,  25, 255, 255, 255, 255, 255,
  69:serial.c      ****       /* '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', */
  70:serial.c      ****           255,  26,  27,  28,  29,  30,  31,  32,
  71:serial.c      ****       /* 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', */
  72:serial.c      ****           33,  34,  35,  36,  37,  38,  39,  40,
  73:serial.c      ****       /* 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', */
  74:serial.c      ****           41,  42,  43,  44,  45,  46,  47,  48,
  75:serial.c      ****       /* 'x', 'y', 'z', '{', '|', '}', '~', del, */
  76:serial.c      ****           49,  50,  51, 255, 255, 255, 255, 255
  77:serial.c      **** };
  78:serial.c      **** 
  79:serial.c      **** 
  80:serial.c      **** #define ADDR_FLASH_SECTOR_0     	((unsigned int)0x08000000)	/* Sector 0, 16 Kbyte */
  81:serial.c      **** #define ADDR_FLASH_SECTOR_1     	((unsigned int)0x08004000)	/* Sector 1, 16 Kbyte */
  82:serial.c      **** #define ADDR_FLASH_SECTOR_2     	((unsigned int)0x08008000)	/* Sector 2, 16 Kbyte */
  83:serial.c      **** #define ADDR_FLASH_SECTOR_3     	((unsigned int)0x0800C000)	/* Sector 3, 16 Kbyte */
  84:serial.c      **** #define ADDR_FLASH_SECTOR_4     	((unsigned int)0x08010000)	/* Sector 4, 64 Kbyte */
  85:serial.c      **** #define ADDR_FLASH_SECTOR_5     	((unsigned int)0x08020000)	/* Sector 5, 128 Kbyte */
  86:serial.c      **** #define ADDR_FLASH_SECTOR_6     	((unsigned int)0x08040000)	/* Sector 6, 128 Kbyte */
  87:serial.c      **** #define ADDR_FLASH_SECTOR_7     	((unsigned int)0x08060000)	/* Sector 7, 128 Kbyte */
  88:serial.c      **** #define ADDR_FLASH_SECTOR_8     	((unsigned int)0x08080000)	/* Sector 8, 128 Kbyte */
  89:serial.c      **** #define ADDR_FLASH_SECTOR_9     	((unsigned int)0x080A0000)	/* Sector 9, 128 Kbyte */
  90:serial.c      **** #define ADDR_FLASH_SECTOR_10    	((unsigned int)0x080C0000)	/* Sector 10, 128 Kbyte */
  91:serial.c      **** #define ADDR_FLASH_SECTOR_11    	((unsigned int)0x080E0000)	/* Sector 11, 128 Kbyte */
  92:serial.c      **** 
  93:serial.c      **** 
  94:serial.c      **** volatile unsigned short rxcnt1,txcnt1,maxtx1,rxcnt2,txcnt2,maxtx2,rxcnt3,txcnt3,maxtx3;
  95:serial.c      **** volatile unsigned char rxck1,rxck2,rxck3,rx_led,tx_led,this_id;
  96:serial.c      **** volatile unsigned int flash_address;
  97:serial.c      **** unsigned int flash_buff[256];
  98:serial.c      **** 
  99:serial.c      **** 
 100:serial.c      **** char rxbuff1[256],txbuff1[256],rxbuff2[256],txbuff2[256];
 101:serial.c      **** char rxbuff3[2048],txbuff3[2048],net_rx[2048],tcp_tx[2048];
 102:serial.c      **** unsigned char USART1_PORT,USART3_PORT;
 103:serial.c      **** char sbuff[256],message[17],rx_message[17];
 104:serial.c      **** 
 105:serial.c      **** volatile unsigned char dhcp_disable,mqtt_mode,keep_alive_time;
 106:serial.c      **** volatile unsigned short mqtt_port,pwr_error,tcp_length,rx_length,rx_offset,reboot_count,tcp_txcnt,
 107:serial.c      ****                         tcp_rxcnt,rx_topic_length,ssid_error,status_time,mqtt_connect_count,mqtt_ch
 108:serial.c      ****                         send_count,mqtt_sub_count;
 109:serial.c      **** volatile unsigned int time_out,main_time,ap_mode_time,time_req,m_ip,m_gw,m_nm;
 110:serial.c      **** volatile unsigned char gid,reset_flag,pwr_flag,mode_flag,ip_flag,mux_flag,server_flag,ssid_flag,sen
 111:serial.c      ****                        send_data_flag,reboot_flag,wifi_power,mqtt_connect,mqtt_send,tcp_send,host_f
 112:serial.c      ****                        ssid_check,mqtt_protocol,ap_mode,wifi_ch,ntp_flag,ntp_req_flag,mqtt_cfg_flag
 113:serial.c      ****                        mqtt_connect_flag,mqtt_sub_flag;
 114:serial.c      **** char ssid[32],passwd[32],host_url[64],ntp_url[64],login_id[32],login_pw[32],tx_topic[32],rx_topic[3
 115:serial.c      **** volatile unsigned char led1,led2,buz;
 116:serial.c      **** volatile unsigned short dac;
 117:serial.c      **** 
 118:serial.c      **** extern FLASH_Status FLASHStatus;
 119:serial.c      **** extern volatile short adc_voltage1,adc_voltage2,adc_temperature;
 120:serial.c      **** extern volatile unsigned char read_key,remote;
 121:serial.c      **** extern volatile unsigned short send_dac;
 122:serial.c      **** 
 123:serial.c      **** 
 124:serial.c      **** 
 125:serial.c      **** 
 126:serial.c      **** void flash_read (void)
 127:serial.c      **** {
 112              		.loc 1 127 1 view -0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 128:serial.c      ****       unsigned int idx;
 116              		.loc 1 128 7 view .LVU20
 129:serial.c      ****       FLASH_Unlock();
 117              		.loc 1 129 7 view .LVU21
 127:serial.c      ****       unsigned int idx;
 118              		.loc 1 127 1 is_stmt 0 view .LVU22
 119 0000 08B5     		push	{r3, lr}
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 3, -8
 122              		.cfi_offset 14, -4
 123              		.loc 1 129 7 view .LVU23
 124 0002 FFF7FEFF 		bl	FLASH_Unlock
 125              	.LVL0:
 130:serial.c      ****       flash_address = (unsigned int)0x08004000;
 126              		.loc 1 130 7 is_stmt 1 view .LVU24
 127              		.loc 1 130 21 is_stmt 0 view .LVU25
 128 0006 0849     		ldr	r1, .L8
 129 0008 084B     		ldr	r3, .L8+4
 130 000a 094A     		ldr	r2, .L8+8
 131 000c 0B60     		str	r3, [r1]
 131:serial.c      ****       for (idx=0;idx<256;idx++) {
 132              		.loc 1 131 7 is_stmt 1 view .LVU26
 133              	.LVL1:
 134              		.loc 1 131 21 discriminator 1 view .LVU27
 130:serial.c      ****       flash_address = (unsigned int)0x08004000;
 135              		.loc 1 130 21 is_stmt 0 view .LVU28
 136 000e 0023     		movs	r3, #0
 137              	.LVL2:
 138              	.L6:
 132:serial.c      ****           flash_buff[idx] = (*(volatile unsigned int *)(flash_address + (idx * 4)));
 139              		.loc 1 132 11 is_stmt 1 view .LVU29
 140              		.loc 1 132 71 is_stmt 0 view .LVU30
 141 0010 0868     		ldr	r0, [r1]
 142              		.loc 1 132 30 view .LVU31
 143 0012 C058     		ldr	r0, [r0, r3]
 144              		.loc 1 132 27 view .LVU32
 145 0014 42F8040B 		str	r0, [r2], #4
 131:serial.c      ****       for (idx=0;idx<256;idx++) {
 146              		.loc 1 131 29 is_stmt 1 discriminator 3 view .LVU33
 131:serial.c      ****       for (idx=0;idx<256;idx++) {
 147              		.loc 1 131 21 discriminator 1 view .LVU34
 148 0018 0433     		adds	r3, r3, #4
 149 001a B3F5806F 		cmp	r3, #1024
 150 001e F7D1     		bne	.L6
 133:serial.c      ****       }
 134:serial.c      ****       FLASH_Lock();
 151              		.loc 1 134 7 view .LVU35
 135:serial.c      **** }
 152              		.loc 1 135 1 is_stmt 0 view .LVU36
 153 0020 BDE80840 		pop	{r3, lr}
 154              		.cfi_restore 14
 155              		.cfi_restore 3
 156              		.cfi_def_cfa_offset 0
 134:serial.c      **** }
 157              		.loc 1 134 7 view .LVU37
 158 0024 FFF7FEBF 		b	FLASH_Lock
 159              	.LVL3:
 160              	.L9:
 161              		.align	2
 162              	.L8:
 163 0028 00000000 		.word	flash_address
 164 002c 00400008 		.word	134234112
 165 0030 00000000 		.word	flash_buff
 166              		.cfi_endproc
 167              	.LFE126:
 169              		.section	.text.flash_write,"ax",%progbits
 170              		.align	1
 171              		.global	flash_write
 172              		.syntax unified
 173              		.thumb
 174              		.thumb_func
 176              	flash_write:
 177              	.LFB127:
 136:serial.c      **** 
 137:serial.c      **** 
 138:serial.c      **** void flash_write (void)
 139:serial.c      **** {
 178              		.loc 1 139 1 is_stmt 1 view -0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 140:serial.c      ****       unsigned int idx;
 182              		.loc 1 140 7 view .LVU39
 141:serial.c      ****       flash_address = (unsigned int)0x08004000;
 183              		.loc 1 141 7 view .LVU40
 139:serial.c      ****       unsigned int idx;
 184              		.loc 1 139 1 is_stmt 0 view .LVU41
 185 0000 70B5     		push	{r4, r5, r6, lr}
 186              		.cfi_def_cfa_offset 16
 187              		.cfi_offset 4, -16
 188              		.cfi_offset 5, -12
 189              		.cfi_offset 6, -8
 190              		.cfi_offset 14, -4
 191              		.loc 1 141 21 view .LVU42
 192 0002 0E4E     		ldr	r6, .L13
 193 0004 0E4B     		ldr	r3, .L13+4
 194 0006 3360     		str	r3, [r6]
 142:serial.c      ****       __disable_irq();
 195              		.loc 1 142 7 is_stmt 1 view .LVU43
 196              	.LBB18:
 197              	.LBI18:
  69:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 198              		.loc 3 69 57 view .LVU44
 199              	.LBB19:
  71:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 200              		.loc 3 71 3 view .LVU45
 201              		.syntax unified
 202              	@ 71 "/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h" 1
 203 0008 72B6     		cpsid i
 204              	@ 0 "" 2
 205              		.thumb
 206              		.syntax unified
 207              	.LBE19:
 208              	.LBE18:
 143:serial.c      ****       FLASH_Unlock();
 209              		.loc 1 143 7 view .LVU46
 210 000a FFF7FEFF 		bl	FLASH_Unlock
 211              	.LVL4:
 144:serial.c      ****       FLASHStatus = FLASH_EraseSector(FLASH_Sector_1, VoltageRange_3);
 212              		.loc 1 144 7 view .LVU47
 213              		.loc 1 144 21 is_stmt 0 view .LVU48
 214 000e 0221     		movs	r1, #2
 215 0010 0820     		movs	r0, #8
 216 0012 FFF7FEFF 		bl	FLASH_EraseSector
 217              	.LVL5:
 218              		.loc 1 144 19 discriminator 1 view .LVU49
 219 0016 0B4B     		ldr	r3, .L13+8
 220 0018 0B4D     		ldr	r5, .L13+12
 221 001a 1870     		strb	r0, [r3]
 145:serial.c      ****       for (idx=0;idx<256;idx++) {
 222              		.loc 1 145 7 is_stmt 1 view .LVU50
 223              	.LVL6:
 224              		.loc 1 145 21 discriminator 1 view .LVU51
 144:serial.c      ****       FLASHStatus = FLASH_EraseSector(FLASH_Sector_1, VoltageRange_3);
 225              		.loc 1 144 19 is_stmt 0 discriminator 1 view .LVU52
 226 001c 0024     		movs	r4, #0
 227              	.LVL7:
 228              	.L11:
 146:serial.c      ****           FLASH_ProgramWord(flash_address + (idx * 4),flash_buff[idx]);
 229              		.loc 1 146 11 is_stmt 1 view .LVU53
 230 001e 3068     		ldr	r0, [r6]
 231 0020 55F8041B 		ldr	r1, [r5], #4
 232 0024 2044     		add	r0, r0, r4
 145:serial.c      ****       for (idx=0;idx<256;idx++) {
 233              		.loc 1 145 21 is_stmt 0 discriminator 1 view .LVU54
 234 0026 0434     		adds	r4, r4, #4
 235              		.loc 1 146 11 view .LVU55
 236 0028 FFF7FEFF 		bl	FLASH_ProgramWord
 237              	.LVL8:
 145:serial.c      ****       for (idx=0;idx<256;idx++) {
 238              		.loc 1 145 29 is_stmt 1 discriminator 3 view .LVU56
 145:serial.c      ****       for (idx=0;idx<256;idx++) {
 239              		.loc 1 145 21 discriminator 1 view .LVU57
 240 002c B4F5806F 		cmp	r4, #1024
 241 0030 F5D1     		bne	.L11
 147:serial.c      ****       }
 148:serial.c      ****       FLASH_Lock();
 242              		.loc 1 148 7 view .LVU58
 243 0032 FFF7FEFF 		bl	FLASH_Lock
 244              	.LVL9:
 149:serial.c      ****       __enable_irq();
 245              		.loc 1 149 7 view .LVU59
 246              	.LBB20:
 247              	.LBI20:
  58:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** {
 248              		.loc 3 58 57 view .LVU60
 249              	.LBB21:
  60:/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h **** }
 250              		.loc 3 60 3 view .LVU61
 251              		.syntax unified
 252              	@ 60 "/project/stm32fx_iolib/stm32fxxx/cmsis/cmsis_gcc.h" 1
 253 0036 62B6     		cpsie i
 254              	@ 0 "" 2
 255              		.thumb
 256              		.syntax unified
 257              	.LBE21:
 258              	.LBE20:
 150:serial.c      **** }
 259              		.loc 1 150 1 is_stmt 0 view .LVU62
 260 0038 70BD     		pop	{r4, r5, r6, pc}
 261              	.L14:
 262 003a 00BF     		.align	2
 263              	.L13:
 264 003c 00000000 		.word	flash_address
 265 0040 00400008 		.word	134234112
 266 0044 00000000 		.word	FLASHStatus
 267 0048 00000000 		.word	flash_buff
 268              		.cfi_endproc
 269              	.LFE127:
 271              		.section	.text.write_wifi_data,"ax",%progbits
 272              		.align	1
 273              		.global	write_wifi_data
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 278              	write_wifi_data:
 279              	.LFB128:
 151:serial.c      **** 
 152:serial.c      **** 
 153:serial.c      **** void write_wifi_data (void)
 154:serial.c      **** {
 280              		.loc 1 154 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 155:serial.c      ****       flash_buff[0] = wifi_power;
 285              		.loc 1 155 7 view .LVU64
 154:serial.c      ****       flash_buff[0] = wifi_power;
 286              		.loc 1 154 1 is_stmt 0 view .LVU65
 287 0000 70B4     		push	{r4, r5, r6}
 288              		.cfi_def_cfa_offset 12
 289              		.cfi_offset 4, -12
 290              		.cfi_offset 5, -8
 291              		.cfi_offset 6, -4
 292              		.loc 1 155 21 view .LVU66
 293 0002 424B     		ldr	r3, .L32
 294 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 295 0006 424B     		ldr	r3, .L32+4
 296 0008 1A60     		str	r2, [r3]
 156:serial.c      ****       flash_buff[1] = dhcp_disable;
 297              		.loc 1 156 7 is_stmt 1 view .LVU67
 298              		.loc 1 156 21 is_stmt 0 view .LVU68
 299 000a 424A     		ldr	r2, .L32+8
 300 000c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 301 000e 5A60     		str	r2, [r3, #4]
 157:serial.c      ****       flash_buff[2] = keep_alive_time;
 302              		.loc 1 157 7 is_stmt 1 view .LVU69
 303              		.loc 1 157 21 is_stmt 0 view .LVU70
 304 0010 414A     		ldr	r2, .L32+12
 305 0012 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 306 0014 9A60     		str	r2, [r3, #8]
 158:serial.c      ****       flash_buff[3] = mqtt_mode;
 307              		.loc 1 158 7 is_stmt 1 view .LVU71
 308              		.loc 1 158 21 is_stmt 0 view .LVU72
 309 0016 414A     		ldr	r2, .L32+16
 310 0018 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 311 001a DA60     		str	r2, [r3, #12]
 159:serial.c      ****       flash_buff[4] = mqtt_port;
 312              		.loc 1 159 7 is_stmt 1 view .LVU73
 313              		.loc 1 159 21 is_stmt 0 view .LVU74
 314 001c 404A     		ldr	r2, .L32+20
 315 001e 1288     		ldrh	r2, [r2]
 316 0020 92B2     		uxth	r2, r2
 317 0022 1A61     		str	r2, [r3, #16]
 160:serial.c      ****       flash_buff[5] = ap_mode;
 318              		.loc 1 160 7 is_stmt 1 view .LVU75
 319              		.loc 1 160 21 is_stmt 0 view .LVU76
 320 0024 3F4A     		ldr	r2, .L32+24
 321 0026 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 322 0028 5A61     		str	r2, [r3, #20]
 161:serial.c      ****       flash_buff[6] = m_ip;
 323              		.loc 1 161 7 is_stmt 1 view .LVU77
 324              		.loc 1 161 21 is_stmt 0 view .LVU78
 325 002a 3F4A     		ldr	r2, .L32+28
 326 002c 1268     		ldr	r2, [r2]
 327 002e 9A61     		str	r2, [r3, #24]
 162:serial.c      ****       flash_buff[7] = m_gw;
 328              		.loc 1 162 7 is_stmt 1 view .LVU79
 329              		.loc 1 162 21 is_stmt 0 view .LVU80
 330 0030 3E4A     		ldr	r2, .L32+32
 331 0032 1268     		ldr	r2, [r2]
 332 0034 DA61     		str	r2, [r3, #28]
 163:serial.c      ****       flash_buff[8] = m_nm;
 333              		.loc 1 163 7 is_stmt 1 view .LVU81
 334              		.loc 1 163 21 is_stmt 0 view .LVU82
 335 0036 3E4A     		ldr	r2, .L32+36
 336 0038 1268     		ldr	r2, [r2]
 337 003a 1A62     		str	r2, [r3, #32]
 164:serial.c      ****       memcpy((char *)&flash_buff[9],ssid,32);
 338              		.loc 1 164 7 is_stmt 1 view .LVU83
 339 003c 3D4A     		ldr	r2, .L32+40
 340 003e 03F12405 		add	r5, r3, #36
 341 0042 02F12006 		add	r6, r2, #32
 342              	.L16:
 343 0046 1068     		ldr	r0, [r2]	@ unaligned
 344 0048 5168     		ldr	r1, [r2, #4]	@ unaligned
 345 004a 2C46     		mov	r4, r5
 346 004c 03C4     		stmia	r4!, {r0, r1}
 347 004e 0832     		adds	r2, r2, #8
 348 0050 B242     		cmp	r2, r6
 349 0052 2546     		mov	r5, r4
 350 0054 F7D1     		bne	.L16
 165:serial.c      ****       memcpy((char *)&flash_buff[17],passwd,32);
 351              		.loc 1 165 7 view .LVU84
 352 0056 384A     		ldr	r2, .L32+44
 353 0058 384D     		ldr	r5, .L32+48
 354 005a 02F12006 		add	r6, r2, #32
 355              	.L17:
 356 005e 1068     		ldr	r0, [r2]	@ unaligned
 357 0060 5168     		ldr	r1, [r2, #4]	@ unaligned
 358 0062 2C46     		mov	r4, r5
 359 0064 03C4     		stmia	r4!, {r0, r1}
 360 0066 0832     		adds	r2, r2, #8
 361 0068 B242     		cmp	r2, r6
 362 006a 2546     		mov	r5, r4
 363 006c F7D1     		bne	.L17
 166:serial.c      ****       memcpy((char *)&flash_buff[25],host_url,64);
 364              		.loc 1 166 7 view .LVU85
 365 006e 344A     		ldr	r2, .L32+52
 366 0070 344D     		ldr	r5, .L32+56
 367 0072 02F14006 		add	r6, r2, #64
 368              	.L18:
 369 0076 1068     		ldr	r0, [r2]	@ unaligned
 370 0078 5168     		ldr	r1, [r2, #4]	@ unaligned
 371 007a 2C46     		mov	r4, r5
 372 007c 03C4     		stmia	r4!, {r0, r1}
 373 007e 0832     		adds	r2, r2, #8
 374 0080 B242     		cmp	r2, r6
 375 0082 2546     		mov	r5, r4
 376 0084 F7D1     		bne	.L18
 167:serial.c      ****       memcpy((char *)&flash_buff[41],ntp_url,64);
 377              		.loc 1 167 7 view .LVU86
 378 0086 304A     		ldr	r2, .L32+60
 379 0088 304D     		ldr	r5, .L32+64
 380 008a 02F14006 		add	r6, r2, #64
 381              	.L19:
 382 008e 1068     		ldr	r0, [r2]	@ unaligned
 383 0090 5168     		ldr	r1, [r2, #4]	@ unaligned
 384 0092 2C46     		mov	r4, r5
 385 0094 03C4     		stmia	r4!, {r0, r1}
 386 0096 0832     		adds	r2, r2, #8
 387 0098 B242     		cmp	r2, r6
 388 009a 2546     		mov	r5, r4
 389 009c F7D1     		bne	.L19
 168:serial.c      ****       memcpy((char *)&flash_buff[57],login_id,32);
 390              		.loc 1 168 7 view .LVU87
 391 009e 2C4A     		ldr	r2, .L32+68
 392 00a0 2C4D     		ldr	r5, .L32+72
 393 00a2 02F12006 		add	r6, r2, #32
 394              	.L20:
 395 00a6 1068     		ldr	r0, [r2]	@ unaligned
 396 00a8 5168     		ldr	r1, [r2, #4]	@ unaligned
 397 00aa 2C46     		mov	r4, r5
 398 00ac 03C4     		stmia	r4!, {r0, r1}
 399 00ae 0832     		adds	r2, r2, #8
 400 00b0 B242     		cmp	r2, r6
 401 00b2 2546     		mov	r5, r4
 402 00b4 F7D1     		bne	.L20
 169:serial.c      ****       memcpy((char *)&flash_buff[65],login_pw,32);
 403              		.loc 1 169 7 view .LVU88
 404 00b6 284A     		ldr	r2, .L32+76
 405 00b8 284D     		ldr	r5, .L32+80
 406 00ba 02F12006 		add	r6, r2, #32
 407              	.L21:
 408 00be 1068     		ldr	r0, [r2]	@ unaligned
 409 00c0 5168     		ldr	r1, [r2, #4]	@ unaligned
 410 00c2 2C46     		mov	r4, r5
 411 00c4 03C4     		stmia	r4!, {r0, r1}
 412 00c6 0832     		adds	r2, r2, #8
 413 00c8 B242     		cmp	r2, r6
 414 00ca 2546     		mov	r5, r4
 415 00cc F7D1     		bne	.L21
 170:serial.c      ****       memcpy((char *)&flash_buff[73],tx_topic,32);
 416              		.loc 1 170 7 view .LVU89
 417 00ce 244A     		ldr	r2, .L32+84
 418 00d0 244D     		ldr	r5, .L32+88
 419 00d2 02F12006 		add	r6, r2, #32
 420              	.L22:
 421 00d6 1068     		ldr	r0, [r2]	@ unaligned
 422 00d8 5168     		ldr	r1, [r2, #4]	@ unaligned
 423 00da 2C46     		mov	r4, r5
 424 00dc 03C4     		stmia	r4!, {r0, r1}
 425 00de 0832     		adds	r2, r2, #8
 426 00e0 B242     		cmp	r2, r6
 427 00e2 2546     		mov	r5, r4
 428 00e4 F7D1     		bne	.L22
 171:serial.c      ****       memcpy((char *)&flash_buff[81],rx_topic,32);
 429              		.loc 1 171 7 view .LVU90
 430 00e6 204A     		ldr	r2, .L32+92
 431 00e8 204D     		ldr	r5, .L32+96
 432 00ea 02F12006 		add	r6, r2, #32
 433              	.L23:
 434 00ee 1068     		ldr	r0, [r2]	@ unaligned
 435 00f0 5168     		ldr	r1, [r2, #4]	@ unaligned
 436 00f2 2C46     		mov	r4, r5
 437 00f4 03C4     		stmia	r4!, {r0, r1}
 438 00f6 0832     		adds	r2, r2, #8
 439 00f8 B242     		cmp	r2, r6
 440 00fa 2546     		mov	r5, r4
 441 00fc F7D1     		bne	.L23
 172:serial.c      ****       flash_buff[90] = 0x68666805;
 442              		.loc 1 172 7 view .LVU91
 443              		.loc 1 172 22 is_stmt 0 view .LVU92
 444 00fe 1C4A     		ldr	r2, .L32+100
 445 0100 C3F86821 		str	r2, [r3, #360]
 173:serial.c      ****       flash_write();
 446              		.loc 1 173 7 is_stmt 1 view .LVU93
 174:serial.c      **** }
 447              		.loc 1 174 1 is_stmt 0 view .LVU94
 448 0104 70BC     		pop	{r4, r5, r6}
 449              		.cfi_restore 6
 450              		.cfi_restore 5
 451              		.cfi_restore 4
 452              		.cfi_def_cfa_offset 0
 173:serial.c      ****       flash_write();
 453              		.loc 1 173 7 view .LVU95
 454 0106 FFF7FEBF 		b	flash_write
 455              	.LVL10:
 456              	.L33:
 457 010a 00BF     		.align	2
 458              	.L32:
 459 010c 00000000 		.word	wifi_power
 460 0110 00000000 		.word	flash_buff
 461 0114 00000000 		.word	dhcp_disable
 462 0118 00000000 		.word	keep_alive_time
 463 011c 00000000 		.word	mqtt_mode
 464 0120 00000000 		.word	mqtt_port
 465 0124 00000000 		.word	ap_mode
 466 0128 00000000 		.word	m_ip
 467 012c 00000000 		.word	m_gw
 468 0130 00000000 		.word	m_nm
 469 0134 00000000 		.word	ssid
 470 0138 00000000 		.word	passwd
 471 013c 44000000 		.word	flash_buff+68
 472 0140 00000000 		.word	host_url
 473 0144 64000000 		.word	flash_buff+100
 474 0148 00000000 		.word	ntp_url
 475 014c A4000000 		.word	flash_buff+164
 476 0150 00000000 		.word	login_id
 477 0154 E4000000 		.word	flash_buff+228
 478 0158 00000000 		.word	login_pw
 479 015c 04010000 		.word	flash_buff+260
 480 0160 00000000 		.word	tx_topic
 481 0164 24010000 		.word	flash_buff+292
 482 0168 00000000 		.word	rx_topic
 483 016c 44010000 		.word	flash_buff+324
 484 0170 05686668 		.word	1751541765
 485              		.cfi_endproc
 486              	.LFE128:
 488              		.section	.text.read_wifi_data,"ax",%progbits
 489              		.align	1
 490              		.global	read_wifi_data
 491              		.syntax unified
 492              		.thumb
 493              		.thumb_func
 495              	read_wifi_data:
 496              	.LFB129:
 175:serial.c      **** 
 176:serial.c      **** 
 177:serial.c      **** void read_wifi_data (void)
 178:serial.c      **** {
 497              		.loc 1 178 1 is_stmt 1 view -0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 0
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 179:serial.c      ****       unsigned int check_wifi;
 501              		.loc 1 179 7 view .LVU97
 180:serial.c      ****       flash_read();
 502              		.loc 1 180 7 view .LVU98
 178:serial.c      ****       unsigned int check_wifi;
 503              		.loc 1 178 1 is_stmt 0 view .LVU99
 504 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 505              		.cfi_def_cfa_offset 40
 506              		.cfi_offset 3, -40
 507              		.cfi_offset 4, -36
 508              		.cfi_offset 5, -32
 509              		.cfi_offset 6, -28
 510              		.cfi_offset 7, -24
 511              		.cfi_offset 8, -20
 512              		.cfi_offset 9, -16
 513              		.cfi_offset 10, -12
 514              		.cfi_offset 11, -8
 515              		.cfi_offset 14, -4
 516              		.loc 1 180 7 view .LVU100
 517 0004 FFF7FEFF 		bl	flash_read
 518              	.LVL11:
 181:serial.c      ****       wifi_power = flash_buff[0];
 519              		.loc 1 181 7 is_stmt 1 view .LVU101
 520              		.loc 1 181 30 is_stmt 0 view .LVU102
 521 0008 624B     		ldr	r3, .L52
 522              		.loc 1 181 18 view .LVU103
 523 000a DFF8A881 		ldr	r8, .L52+32
 524 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 182:serial.c      ****       dhcp_disable = flash_buff[1];
 525              		.loc 1 182 20 view .LVU104
 526 0010 DFF8A4E1 		ldr	lr, .L52+36
 181:serial.c      ****       wifi_power = flash_buff[0];
 527              		.loc 1 181 18 view .LVU105
 528 0014 88F80020 		strb	r2, [r8]
 529              		.loc 1 182 7 is_stmt 1 view .LVU106
 183:serial.c      ****       keep_alive_time = flash_buff[2];
 530              		.loc 1 183 23 is_stmt 0 view .LVU107
 531 0018 DFF8A0C1 		ldr	ip, .L52+40
 182:serial.c      ****       dhcp_disable = flash_buff[1];
 532              		.loc 1 182 20 view .LVU108
 533 001c 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 534 001e 8EF80020 		strb	r2, [lr]
 535              		.loc 1 183 7 is_stmt 1 view .LVU109
 184:serial.c      ****       mqtt_mode = flash_buff[3];
 536              		.loc 1 184 17 is_stmt 0 view .LVU110
 537 0022 5D4F     		ldr	r7, .L52+4
 183:serial.c      ****       keep_alive_time = flash_buff[2];
 538              		.loc 1 183 23 view .LVU111
 539 0024 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 540 0026 8CF80020 		strb	r2, [ip]
 541              		.loc 1 184 7 is_stmt 1 view .LVU112
 185:serial.c      ****       mqtt_port = flash_buff[4];
 542              		.loc 1 185 17 is_stmt 0 view .LVU113
 543 002a 5C4E     		ldr	r6, .L52+8
 184:serial.c      ****       mqtt_mode = flash_buff[3];
 544              		.loc 1 184 17 view .LVU114
 545 002c 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
 546 002e 3A70     		strb	r2, [r7]
 547              		.loc 1 185 7 is_stmt 1 view .LVU115
 186:serial.c      ****       ap_mode = flash_buff[5];
 548              		.loc 1 186 15 is_stmt 0 view .LVU116
 549 0030 5B4D     		ldr	r5, .L52+12
 185:serial.c      ****       mqtt_port = flash_buff[4];
 550              		.loc 1 185 17 view .LVU117
 551 0032 1A8A     		ldrh	r2, [r3, #16]
 552 0034 3280     		strh	r2, [r6]	@ movhi
 553              		.loc 1 186 7 is_stmt 1 view .LVU118
 187:serial.c      ****       m_ip = flash_buff[6];
 554              		.loc 1 187 12 is_stmt 0 view .LVU119
 555 0036 5B4C     		ldr	r4, .L52+16
 186:serial.c      ****       ap_mode = flash_buff[5];
 556              		.loc 1 186 15 view .LVU120
 557 0038 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 558 003a 2A70     		strb	r2, [r5]
 559              		.loc 1 187 7 is_stmt 1 view .LVU121
 560              		.loc 1 187 24 is_stmt 0 view .LVU122
 561 003c 9A69     		ldr	r2, [r3, #24]
 562              		.loc 1 187 12 view .LVU123
 563 003e 2260     		str	r2, [r4]
 188:serial.c      ****       m_gw = flash_buff[7];
 564              		.loc 1 188 7 is_stmt 1 view .LVU124
 565              		.loc 1 188 12 is_stmt 0 view .LVU125
 566 0040 594A     		ldr	r2, .L52+20
 567              		.loc 1 188 24 view .LVU126
 568 0042 D969     		ldr	r1, [r3, #28]
 569              		.loc 1 188 12 view .LVU127
 570 0044 1160     		str	r1, [r2]
 189:serial.c      ****       m_nm = flash_buff[8];
 571              		.loc 1 189 7 is_stmt 1 view .LVU128
 572              		.loc 1 189 12 is_stmt 0 view .LVU129
 573 0046 594A     		ldr	r2, .L52+24
 574              		.loc 1 189 24 view .LVU130
 575 0048 196A     		ldr	r1, [r3, #32]
 190:serial.c      ****       memcpy(ssid, (char *)&flash_buff[9],32);
 576              		.loc 1 190 7 view .LVU131
 577 004a DFF87491 		ldr	r9, .L52+44
 189:serial.c      ****       m_nm = flash_buff[8];
 578              		.loc 1 189 12 view .LVU132
 579 004e 1160     		str	r1, [r2]
 580              		.loc 1 190 7 is_stmt 1 view .LVU133
 581 0050 03F1240A 		add	r10, r3, #36
 582 0054 03F1440B 		add	fp, r3, #68
 583              	.L35:
 584 0058 5246     		mov	r2, r10
 585 005a 03CA     		ldmia	r2!, {r0, r1}
 586 005c 5A45     		cmp	r2, fp
 587 005e C9F80000 		str	r0, [r9]	@ unaligned
 588 0062 C9F80410 		str	r1, [r9, #4]	@ unaligned
 589 0066 9246     		mov	r10, r2
 590 0068 09F10809 		add	r9, r9, #8
 591 006c F4D1     		bne	.L35
 191:serial.c      ****       memcpy(passwd, (char *)&flash_buff[17],32);
 592              		.loc 1 191 7 view .LVU134
 593 006e DFF854A1 		ldr	r10, .L52+48
 594 0072 DFF85491 		ldr	r9, .L52+52
 595 0076 0AF1200B 		add	fp, r10, #32
 596              	.L36:
 597 007a 5246     		mov	r2, r10
 598 007c 03CA     		ldmia	r2!, {r0, r1}
 599 007e 5A45     		cmp	r2, fp
 600 0080 C9F80000 		str	r0, [r9]	@ unaligned
 601 0084 C9F80410 		str	r1, [r9, #4]	@ unaligned
 602 0088 9246     		mov	r10, r2
 603 008a 09F10809 		add	r9, r9, #8
 604 008e F4D1     		bne	.L36
 192:serial.c      ****       memcpy(host_url, (char *)&flash_buff[25],64);
 605              		.loc 1 192 7 view .LVU135
 606 0090 DFF838A1 		ldr	r10, .L52+56
 607 0094 DFF83891 		ldr	r9, .L52+60
 608 0098 0AF1400B 		add	fp, r10, #64
 609              	.L37:
 610 009c 5246     		mov	r2, r10
 611 009e 03CA     		ldmia	r2!, {r0, r1}
 612 00a0 5A45     		cmp	r2, fp
 613 00a2 C9F80000 		str	r0, [r9]	@ unaligned
 614 00a6 C9F80410 		str	r1, [r9, #4]	@ unaligned
 615 00aa 9246     		mov	r10, r2
 616 00ac 09F10809 		add	r9, r9, #8
 617 00b0 F4D1     		bne	.L37
 193:serial.c      ****       memcpy(ntp_url, (char *)&flash_buff[41],64);
 618              		.loc 1 193 7 view .LVU136
 619 00b2 DFF820A1 		ldr	r10, .L52+64
 620 00b6 DFF82091 		ldr	r9, .L52+68
 621 00ba 0AF1400B 		add	fp, r10, #64
 622              	.L38:
 623 00be 5246     		mov	r2, r10
 624 00c0 03CA     		ldmia	r2!, {r0, r1}
 625 00c2 5A45     		cmp	r2, fp
 626 00c4 C9F80000 		str	r0, [r9]	@ unaligned
 627 00c8 C9F80410 		str	r1, [r9, #4]	@ unaligned
 628 00cc 9246     		mov	r10, r2
 629 00ce 09F10809 		add	r9, r9, #8
 630 00d2 F4D1     		bne	.L38
 194:serial.c      ****       memcpy(login_id, (char *)&flash_buff[57],32);
 631              		.loc 1 194 7 view .LVU137
 632 00d4 DFF804A1 		ldr	r10, .L52+72
 633 00d8 DFF80491 		ldr	r9, .L52+76
 634 00dc 0AF1200B 		add	fp, r10, #32
 635              	.L39:
 636 00e0 5246     		mov	r2, r10
 637 00e2 03CA     		ldmia	r2!, {r0, r1}
 638 00e4 5A45     		cmp	r2, fp
 639 00e6 C9F80000 		str	r0, [r9]	@ unaligned
 640 00ea C9F80410 		str	r1, [r9, #4]	@ unaligned
 641 00ee 9246     		mov	r10, r2
 642 00f0 09F10809 		add	r9, r9, #8
 643 00f4 F4D1     		bne	.L39
 195:serial.c      ****       memcpy(login_pw, (char *)&flash_buff[65],32);
 644              		.loc 1 195 7 view .LVU138
 645 00f6 DFF8ECA0 		ldr	r10, .L52+80
 646 00fa DFF8EC90 		ldr	r9, .L52+84
 647 00fe 0AF1200B 		add	fp, r10, #32
 648              	.L40:
 649 0102 5246     		mov	r2, r10
 650 0104 03CA     		ldmia	r2!, {r0, r1}
 651 0106 5A45     		cmp	r2, fp
 652 0108 C9F80000 		str	r0, [r9]	@ unaligned
 653 010c C9F80410 		str	r1, [r9, #4]	@ unaligned
 654 0110 9246     		mov	r10, r2
 655 0112 09F10809 		add	r9, r9, #8
 656 0116 F4D1     		bne	.L40
 196:serial.c      ****       memcpy(tx_topic, (char *)&flash_buff[73],32);
 657              		.loc 1 196 7 view .LVU139
 658 0118 DFF8D0A0 		ldr	r10, .L52+88
 659 011c DFF8D090 		ldr	r9, .L52+92
 660 0120 0AF1200B 		add	fp, r10, #32
 661              	.L41:
 662 0124 5246     		mov	r2, r10
 663 0126 03CA     		ldmia	r2!, {r0, r1}
 664 0128 5A45     		cmp	r2, fp
 665 012a C9F80000 		str	r0, [r9]	@ unaligned
 666 012e C9F80410 		str	r1, [r9, #4]	@ unaligned
 667 0132 9246     		mov	r10, r2
 668 0134 09F10809 		add	r9, r9, #8
 669 0138 F4D1     		bne	.L41
 197:serial.c      ****       memcpy(rx_topic, (char *)&flash_buff[81],32);
 670              		.loc 1 197 7 view .LVU140
 671 013a DFF8B8A0 		ldr	r10, .L52+96
 672 013e DFF8B890 		ldr	r9, .L52+100
 673 0142 0AF1200B 		add	fp, r10, #32
 674              	.L42:
 675 0146 5246     		mov	r2, r10
 676 0148 03CA     		ldmia	r2!, {r0, r1}
 677 014a 5A45     		cmp	r2, fp
 678 014c C9F80000 		str	r0, [r9]	@ unaligned
 679 0150 C9F80410 		str	r1, [r9, #4]	@ unaligned
 680 0154 9246     		mov	r10, r2
 681 0156 09F10809 		add	r9, r9, #8
 682 015a F4D1     		bne	.L42
 198:serial.c      ****       check_wifi = flash_buff[90];
 683              		.loc 1 198 7 view .LVU141
 684              	.LVL12:
 199:serial.c      ****       if (check_wifi != 0x68666805) {
 685              		.loc 1 199 7 view .LVU142
 686              		.loc 1 199 10 is_stmt 0 view .LVU143
 687 015c D3F86821 		ldr	r2, [r3, #360]
 688 0160 134B     		ldr	r3, .L52+28
 689 0162 9A42     		cmp	r2, r3
 690 0164 13D0     		beq	.L34
 200:serial.c      ****          wifi_power = 40;
 691              		.loc 1 200 10 is_stmt 1 view .LVU144
 692              		.loc 1 200 21 is_stmt 0 view .LVU145
 693 0166 2823     		movs	r3, #40
 694 0168 88F80030 		strb	r3, [r8]
 201:serial.c      ****          dhcp_disable = 0;
 695              		.loc 1 201 10 is_stmt 1 view .LVU146
 202:serial.c      ****          keep_alive_time = 60;
 696              		.loc 1 202 26 is_stmt 0 view .LVU147
 697 016c 3C22     		movs	r2, #60
 201:serial.c      ****          dhcp_disable = 0;
 698              		.loc 1 201 23 view .LVU148
 699 016e 0023     		movs	r3, #0
 700 0170 8EF80030 		strb	r3, [lr]
 701              		.loc 1 202 10 is_stmt 1 view .LVU149
 702              		.loc 1 202 26 is_stmt 0 view .LVU150
 703 0174 8CF80020 		strb	r2, [ip]
 203:serial.c      ****          mqtt_mode = 0;
 704              		.loc 1 203 10 is_stmt 1 view .LVU151
 204:serial.c      ****          mqtt_port = 1883;
 705              		.loc 1 204 20 is_stmt 0 view .LVU152
 706 0178 40F25B72 		movw	r2, #1883
 203:serial.c      ****          mqtt_mode = 0;
 707              		.loc 1 203 20 view .LVU153
 708 017c 3B70     		strb	r3, [r7]
 709              		.loc 1 204 10 is_stmt 1 view .LVU154
 710              		.loc 1 204 20 is_stmt 0 view .LVU155
 711 017e 3280     		strh	r2, [r6]	@ movhi
 205:serial.c      ****          ap_mode = 1;
 712              		.loc 1 205 10 is_stmt 1 view .LVU156
 713              		.loc 1 205 18 is_stmt 0 view .LVU157
 714 0180 0122     		movs	r2, #1
 715 0182 2A70     		strb	r2, [r5]
 206:serial.c      ****          m_ip = 0;
 716              		.loc 1 206 10 is_stmt 1 view .LVU158
 207:serial.c      ****          m_gw = 0;
 717              		.loc 1 207 15 is_stmt 0 view .LVU159
 718 0184 084A     		ldr	r2, .L52+20
 206:serial.c      ****          m_ip = 0;
 719              		.loc 1 206 15 view .LVU160
 720 0186 2360     		str	r3, [r4]
 721              		.loc 1 207 10 is_stmt 1 view .LVU161
 722              		.loc 1 207 15 is_stmt 0 view .LVU162
 723 0188 1360     		str	r3, [r2]
 208:serial.c      ****          m_nm = 0;
 724              		.loc 1 208 10 is_stmt 1 view .LVU163
 725              		.loc 1 208 15 is_stmt 0 view .LVU164
 726 018a 084A     		ldr	r2, .L52+24
 727 018c 1360     		str	r3, [r2]
 728              	.L34:
 209:serial.c      ****       }
 210:serial.c      **** }
 729              		.loc 1 210 1 view .LVU165
 730 018e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 731              	.L53:
 732 0192 00BF     		.align	2
 733              	.L52:
 734 0194 00000000 		.word	flash_buff
 735 0198 00000000 		.word	mqtt_mode
 736 019c 00000000 		.word	mqtt_port
 737 01a0 00000000 		.word	ap_mode
 738 01a4 00000000 		.word	m_ip
 739 01a8 00000000 		.word	m_gw
 740 01ac 00000000 		.word	m_nm
 741 01b0 05686668 		.word	1751541765
 742 01b4 00000000 		.word	wifi_power
 743 01b8 00000000 		.word	dhcp_disable
 744 01bc 00000000 		.word	keep_alive_time
 745 01c0 00000000 		.word	ssid
 746 01c4 44000000 		.word	flash_buff+68
 747 01c8 00000000 		.word	passwd
 748 01cc 64000000 		.word	flash_buff+100
 749 01d0 00000000 		.word	host_url
 750 01d4 A4000000 		.word	flash_buff+164
 751 01d8 00000000 		.word	ntp_url
 752 01dc E4000000 		.word	flash_buff+228
 753 01e0 00000000 		.word	login_id
 754 01e4 04010000 		.word	flash_buff+260
 755 01e8 00000000 		.word	login_pw
 756 01ec 24010000 		.word	flash_buff+292
 757 01f0 00000000 		.word	tx_topic
 758 01f4 44010000 		.word	flash_buff+324
 759 01f8 00000000 		.word	rx_topic
 760              		.cfi_endproc
 761              	.LFE129:
 763              		.section	.text.base64_encode,"ax",%progbits
 764              		.align	1
 765              		.global	base64_encode
 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
 770              	base64_encode:
 771              	.LVL13:
 772              	.LFB130:
 211:serial.c      **** 
 212:serial.c      **** 
 213:serial.c      **** unsigned short base64_encode (const unsigned char* in, unsigned short inlen, char* out)
 214:serial.c      **** {
 773              		.loc 1 214 1 is_stmt 1 view -0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 215:serial.c      ****       short s;
 777              		.loc 1 215 7 view .LVU167
 216:serial.c      ****       unsigned short i;
 778              		.loc 1 216 7 view .LVU168
 217:serial.c      ****       unsigned short j;
 779              		.loc 1 217 7 view .LVU169
 218:serial.c      ****       unsigned char c;
 780              		.loc 1 218 7 view .LVU170
 219:serial.c      ****       unsigned char l;
 781              		.loc 1 219 7 view .LVU171
 220:serial.c      ****       s = 0;
 782              		.loc 1 220 7 view .LVU172
 221:serial.c      ****       l = 0;
 783              		.loc 1 221 7 view .LVU173
 222:serial.c      ****       for (i=j=0;i<inlen;i++) {
 784              		.loc 1 222 7 view .LVU174
 214:serial.c      ****       short s;
 785              		.loc 1 214 1 is_stmt 0 view .LVU175
 786 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 787              		.cfi_def_cfa_offset 20
 788              		.cfi_offset 4, -20
 789              		.cfi_offset 5, -16
 790              		.cfi_offset 6, -12
 791              		.cfi_offset 7, -8
 792              		.cfi_offset 14, -4
 221:serial.c      ****       l = 0;
 793              		.loc 1 221 9 view .LVU176
 794 0002 0023     		movs	r3, #0
 223:serial.c      ****           c = in[i];
 224:serial.c      ****           switch (s) {
 225:serial.c      ****              case 0:
 226:serial.c      ****                s = 1;
 227:serial.c      ****                out[j++] = base64en[(c >> 2) & 0x3F];
 228:serial.c      ****                break;
 229:serial.c      ****              case 1:
 230:serial.c      ****                s = 2;
 231:serial.c      ****                out[j++] = base64en[((l & 0x3) << 4) | ((c >> 4) & 0xF)];
 795              		.loc 1 231 35 view .LVU177
 796 0004 314F     		ldr	r7, .L63
 797 0006 0546     		mov	r5, r0
 798 0008 0144     		add	r1, r1, r0
 799              	.LVL14:
 220:serial.c      ****       l = 0;
 800              		.loc 1 220 9 view .LVU178
 801 000a 9C46     		mov	ip, r3
 222:serial.c      ****           c = in[i];
 802              		.loc 1 222 15 view .LVU179
 803 000c 1846     		mov	r0, r3
 804              	.LVL15:
 805              	.L55:
 222:serial.c      ****           c = in[i];
 806              		.loc 1 222 19 is_stmt 1 discriminator 1 view .LVU180
 807 000e A942     		cmp	r1, r5
 227:serial.c      ****                break;
 808              		.loc 1 227 19 is_stmt 0 view .LVU181
 809 0010 02EB0004 		add	r4, r2, r0
 222:serial.c      ****           c = in[i];
 810              		.loc 1 222 19 discriminator 1 view .LVU182
 811 0014 08D1     		bne	.L59
 232:serial.c      ****                break;
 233:serial.c      ****              case 2:
 234:serial.c      ****                s = 0;
 235:serial.c      ****                out[j++] = base64en[((l & 0xF) << 2) | ((c >> 6) & 0x3)];
 236:serial.c      ****                out[j++] = base64en[c & 0x3F];
 237:serial.c      ****                break;
 238:serial.c      ****           }
 239:serial.c      ****           l = c;
 240:serial.c      ****       }
 241:serial.c      ****       switch (s) {
 812              		.loc 1 241 7 is_stmt 1 view .LVU183
 813 0016 BCF1010F 		cmp	ip, #1
 814 001a 3AD0     		beq	.L60
 815 001c BCF1020F 		cmp	ip, #2
 816 0020 47D0     		beq	.L61
 817              	.LVL16:
 818              	.L62:
 242:serial.c      ****          case 1:
 243:serial.c      ****            out[j++] = base64en[(l & 0x3) << 4];
 244:serial.c      ****            out[j++] = BASE64_PAD;
 245:serial.c      ****            out[j++] = BASE64_PAD;
 246:serial.c      ****            break;
 247:serial.c      ****          case 2:
 248:serial.c      ****            out[j++] = base64en[(l & 0xF) << 2];
 249:serial.c      ****            out[j++] = BASE64_PAD;
 250:serial.c      ****            break;
 251:serial.c      ****       }
 252:serial.c      ****       out[j] = 0;
 819              		.loc 1 252 7 view .LVU184
 820              		.loc 1 252 14 is_stmt 0 view .LVU185
 821 0022 0023     		movs	r3, #0
 822 0024 1354     		strb	r3, [r2, r0]
 253:serial.c      ****       return j;
 823              		.loc 1 253 7 is_stmt 1 view .LVU186
 254:serial.c      **** }
 824              		.loc 1 254 1 is_stmt 0 view .LVU187
 825 0026 F0BD     		pop	{r4, r5, r6, r7, pc}
 826              	.LVL17:
 827              	.L59:
 223:serial.c      ****           switch (s) {
 828              		.loc 1 223 11 is_stmt 1 view .LVU188
 224:serial.c      ****              case 0:
 829              		.loc 1 224 11 is_stmt 0 view .LVU189
 830 0028 BCF1010F 		cmp	ip, #1
 223:serial.c      ****           switch (s) {
 831              		.loc 1 223 13 view .LVU190
 832 002c 15F8016B 		ldrb	r6, [r5], #1	@ zero_extendqisi2
 833              	.LVL18:
 224:serial.c      ****              case 0:
 834              		.loc 1 224 11 is_stmt 1 view .LVU191
 835 0030 0ED0     		beq	.L56
 836 0032 BCF1020F 		cmp	ip, #2
 837 0036 17D0     		beq	.L57
 838 0038 BCF1000F 		cmp	ip, #0
 839 003c 06D1     		bne	.L58
 226:serial.c      ****                out[j++] = base64en[(c >> 2) & 0x3F];
 840              		.loc 1 226 16 view .LVU192
 841              	.LVL19:
 227:serial.c      ****                break;
 842              		.loc 1 227 16 view .LVU193
 227:serial.c      ****                break;
 843              		.loc 1 227 45 is_stmt 0 view .LVU194
 844 003e B308     		lsrs	r3, r6, #2
 845              	.LVL20:
 227:serial.c      ****                break;
 846              		.loc 1 227 21 view .LVU195
 847 0040 0130     		adds	r0, r0, #1
 848              	.LVL21:
 227:serial.c      ****                break;
 849              		.loc 1 227 25 view .LVU196
 850 0042 FB5C     		ldrb	r3, [r7, r3]	@ zero_extendqisi2
 851 0044 2370     		strb	r3, [r4]
 227:serial.c      ****                break;
 852              		.loc 1 227 21 view .LVU197
 853 0046 80B2     		uxth	r0, r0
 854              	.LVL22:
 228:serial.c      ****              case 1:
 855              		.loc 1 228 16 is_stmt 1 view .LVU198
 226:serial.c      ****                out[j++] = base64en[(c >> 2) & 0x3F];
 856              		.loc 1 226 18 is_stmt 0 view .LVU199
 857 0048 4FF0010C 		mov	ip, #1
 858              	.LVL23:
 859              	.L58:
 239:serial.c      ****       }
 860              		.loc 1 239 11 is_stmt 1 view .LVU200
 222:serial.c      ****           c = in[i];
 861              		.loc 1 222 27 discriminator 2 view .LVU201
 239:serial.c      ****       }
 862              		.loc 1 239 13 is_stmt 0 view .LVU202
 863 004c 3346     		mov	r3, r6
 864 004e DEE7     		b	.L55
 865              	.LVL24:
 866              	.L56:
 230:serial.c      ****                out[j++] = base64en[((l & 0x3) << 4) | ((c >> 4) & 0xF)];
 867              		.loc 1 230 16 is_stmt 1 view .LVU203
 231:serial.c      ****                break;
 868              		.loc 1 231 16 view .LVU204
 231:serial.c      ****                break;
 869              		.loc 1 231 47 is_stmt 0 view .LVU205
 870 0050 1B01     		lsls	r3, r3, #4
 871              	.LVL25:
 231:serial.c      ****                break;
 872              		.loc 1 231 47 view .LVU206
 873 0052 03F03003 		and	r3, r3, #48
 231:serial.c      ****                break;
 874              		.loc 1 231 53 view .LVU207
 875 0056 43EA1613 		orr	r3, r3, r6, lsr #4
 231:serial.c      ****                break;
 876              		.loc 1 231 21 view .LVU208
 877 005a 0130     		adds	r0, r0, #1
 878              	.LVL26:
 231:serial.c      ****                break;
 879              		.loc 1 231 25 view .LVU209
 880 005c FB5C     		ldrb	r3, [r7, r3]	@ zero_extendqisi2
 881 005e 2370     		strb	r3, [r4]
 231:serial.c      ****                break;
 882              		.loc 1 231 21 view .LVU210
 883 0060 80B2     		uxth	r0, r0
 884              	.LVL27:
 232:serial.c      ****              case 2:
 885              		.loc 1 232 16 is_stmt 1 view .LVU211
 230:serial.c      ****                out[j++] = base64en[((l & 0x3) << 4) | ((c >> 4) & 0xF)];
 886              		.loc 1 230 18 is_stmt 0 view .LVU212
 887 0062 4FF0020C 		mov	ip, #2
 232:serial.c      ****              case 2:
 888              		.loc 1 232 16 view .LVU213
 889 0066 F1E7     		b	.L58
 890              	.LVL28:
 891              	.L57:
 234:serial.c      ****                out[j++] = base64en[((l & 0xF) << 2) | ((c >> 6) & 0x3)];
 892              		.loc 1 234 16 is_stmt 1 view .LVU214
 235:serial.c      ****                out[j++] = base64en[c & 0x3F];
 893              		.loc 1 235 16 view .LVU215
 235:serial.c      ****                out[j++] = base64en[c & 0x3F];
 894              		.loc 1 235 47 is_stmt 0 view .LVU216
 895 0068 9B00     		lsls	r3, r3, #2
 896              	.LVL29:
 235:serial.c      ****                out[j++] = base64en[c & 0x3F];
 897              		.loc 1 235 47 view .LVU217
 898 006a 03F03C03 		and	r3, r3, #60
 235:serial.c      ****                out[j++] = base64en[c & 0x3F];
 899              		.loc 1 235 53 view .LVU218
 900 006e 43EA9613 		orr	r3, r3, r6, lsr #6
 235:serial.c      ****                out[j++] = base64en[c & 0x3F];
 901              		.loc 1 235 21 view .LVU219
 902 0072 00F1010C 		add	ip, r0, #1
 235:serial.c      ****                out[j++] = base64en[c & 0x3F];
 903              		.loc 1 235 25 view .LVU220
 904 0076 FB5C     		ldrb	r3, [r7, r3]	@ zero_extendqisi2
 905 0078 2370     		strb	r3, [r4]
 236:serial.c      ****                break;
 906              		.loc 1 236 38 view .LVU221
 907 007a 06F03F03 		and	r3, r6, #63
 235:serial.c      ****                out[j++] = base64en[c & 0x3F];
 908              		.loc 1 235 21 view .LVU222
 909 007e 1FFA8CFC 		uxth	ip, ip
 910              	.LVL30:
 236:serial.c      ****                break;
 911              		.loc 1 236 16 is_stmt 1 view .LVU223
 236:serial.c      ****                break;
 912              		.loc 1 236 25 is_stmt 0 view .LVU224
 913 0082 FB5C     		ldrb	r3, [r7, r3]	@ zero_extendqisi2
 914 0084 02F80C30 		strb	r3, [r2, ip]
 236:serial.c      ****                break;
 915              		.loc 1 236 21 view .LVU225
 916 0088 0230     		adds	r0, r0, #2
 917 008a 80B2     		uxth	r0, r0
 918              	.LVL31:
 237:serial.c      ****           }
 919              		.loc 1 237 16 is_stmt 1 view .LVU226
 234:serial.c      ****                out[j++] = base64en[((l & 0xF) << 2) | ((c >> 6) & 0x3)];
 920              		.loc 1 234 18 is_stmt 0 view .LVU227
 921 008c 4FF0000C 		mov	ip, #0
 237:serial.c      ****           }
 922              		.loc 1 237 16 view .LVU228
 923 0090 DCE7     		b	.L58
 924              	.LVL32:
 925              	.L60:
 243:serial.c      ****            out[j++] = BASE64_PAD;
 926              		.loc 1 243 12 is_stmt 1 view .LVU229
 243:serial.c      ****            out[j++] = BASE64_PAD;
 927              		.loc 1 243 42 is_stmt 0 view .LVU230
 928 0092 1B01     		lsls	r3, r3, #4
 929              	.LVL33:
 243:serial.c      ****            out[j++] = BASE64_PAD;
 930              		.loc 1 243 21 view .LVU231
 931 0094 0D49     		ldr	r1, .L63
 243:serial.c      ****            out[j++] = BASE64_PAD;
 932              		.loc 1 243 42 view .LVU232
 933 0096 03F03003 		and	r3, r3, #48
 243:serial.c      ****            out[j++] = BASE64_PAD;
 934              		.loc 1 243 21 view .LVU233
 935 009a CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 936 009c 2370     		strb	r3, [r4]
 244:serial.c      ****            out[j++] = BASE64_PAD;
 937              		.loc 1 244 12 is_stmt 1 view .LVU234
 243:serial.c      ****            out[j++] = BASE64_PAD;
 938              		.loc 1 243 17 is_stmt 0 view .LVU235
 939 009e 411C     		adds	r1, r0, #1
 244:serial.c      ****            out[j++] = BASE64_PAD;
 940              		.loc 1 244 17 view .LVU236
 941 00a0 831C     		adds	r3, r0, #2
 942 00a2 9BB2     		uxth	r3, r3
 943              	.LVL34:
 244:serial.c      ****            out[j++] = BASE64_PAD;
 944              		.loc 1 244 17 view .LVU237
 945 00a4 89B2     		uxth	r1, r1
 244:serial.c      ****            out[j++] = BASE64_PAD;
 946              		.loc 1 244 21 view .LVU238
 947 00a6 3D24     		movs	r4, #61
 245:serial.c      ****            break;
 948              		.loc 1 245 17 view .LVU239
 949 00a8 0330     		adds	r0, r0, #3
 244:serial.c      ****            out[j++] = BASE64_PAD;
 950              		.loc 1 244 21 view .LVU240
 951 00aa 5454     		strb	r4, [r2, r1]
 245:serial.c      ****            break;
 952              		.loc 1 245 12 is_stmt 1 view .LVU241
 245:serial.c      ****            break;
 953              		.loc 1 245 17 is_stmt 0 view .LVU242
 954 00ac 80B2     		uxth	r0, r0
 955              	.LVL35:
 245:serial.c      ****            break;
 956              		.loc 1 245 21 view .LVU243
 957 00ae D454     		strb	r4, [r2, r3]
 246:serial.c      ****          case 2:
 958              		.loc 1 246 12 is_stmt 1 view .LVU244
 959 00b0 B7E7     		b	.L62
 960              	.LVL36:
 961              	.L61:
 248:serial.c      ****            out[j++] = BASE64_PAD;
 962              		.loc 1 248 12 view .LVU245
 248:serial.c      ****            out[j++] = BASE64_PAD;
 963              		.loc 1 248 42 is_stmt 0 view .LVU246
 964 00b2 9B00     		lsls	r3, r3, #2
 965              	.LVL37:
 248:serial.c      ****            out[j++] = BASE64_PAD;
 966              		.loc 1 248 21 view .LVU247
 967 00b4 054D     		ldr	r5, .L63
 968              	.LVL38:
 248:serial.c      ****            out[j++] = BASE64_PAD;
 969              		.loc 1 248 42 view .LVU248
 970 00b6 03F03C03 		and	r3, r3, #60
 248:serial.c      ****            out[j++] = BASE64_PAD;
 971              		.loc 1 248 17 view .LVU249
 972 00ba 411C     		adds	r1, r0, #1
 248:serial.c      ****            out[j++] = BASE64_PAD;
 973              		.loc 1 248 21 view .LVU250
 974 00bc EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 975 00be 2370     		strb	r3, [r4]
 248:serial.c      ****            out[j++] = BASE64_PAD;
 976              		.loc 1 248 17 view .LVU251
 977 00c0 89B2     		uxth	r1, r1
 978              	.LVL39:
 249:serial.c      ****            break;
 979              		.loc 1 249 12 is_stmt 1 view .LVU252
 249:serial.c      ****            break;
 980              		.loc 1 249 17 is_stmt 0 view .LVU253
 981 00c2 0230     		adds	r0, r0, #2
 249:serial.c      ****            break;
 982              		.loc 1 249 21 view .LVU254
 983 00c4 3D23     		movs	r3, #61
 984 00c6 5354     		strb	r3, [r2, r1]
 249:serial.c      ****            break;
 985              		.loc 1 249 17 view .LVU255
 986 00c8 80B2     		uxth	r0, r0
 987              	.LVL40:
 250:serial.c      ****       }
 988              		.loc 1 250 12 is_stmt 1 view .LVU256
 989 00ca AAE7     		b	.L62
 990              	.L64:
 991              		.align	2
 992              	.L63:
 993 00cc 00000000 		.word	base64en
 994              		.cfi_endproc
 995              	.LFE130:
 997              		.section	.text.base64_decode,"ax",%progbits
 998              		.align	1
 999              		.global	base64_decode
 1000              		.syntax unified
 1001              		.thumb
 1002              		.thumb_func
 1004              	base64_decode:
 1005              	.LVL41:
 1006              	.LFB131:
 255:serial.c      **** 
 256:serial.c      **** 
 257:serial.c      **** unsigned short base64_decode (const char* in, unsigned short inlen, unsigned char* out)
 258:serial.c      **** {
 1007              		.loc 1 258 1 view -0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 0
 1010              		@ frame_needed = 0, uses_anonymous_args = 0
 259:serial.c      ****       unsigned short i;
 1011              		.loc 1 259 7 view .LVU258
 260:serial.c      ****       unsigned short j;
 1012              		.loc 1 260 7 view .LVU259
 261:serial.c      ****       unsigned char c;
 1013              		.loc 1 261 7 view .LVU260
 262:serial.c      ****       if (inlen & 0x3) {
 1014              		.loc 1 262 7 view .LVU261
 258:serial.c      ****       unsigned short i;
 1015              		.loc 1 258 1 is_stmt 0 view .LVU262
 1016 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1017              		.cfi_def_cfa_offset 20
 1018              		.cfi_offset 4, -20
 1019              		.cfi_offset 5, -16
 1020              		.cfi_offset 6, -12
 1021              		.cfi_offset 7, -8
 1022              		.cfi_offset 14, -4
 258:serial.c      ****       unsigned short i;
 1023              		.loc 1 258 1 view .LVU263
 1024 0002 0746     		mov	r7, r0
 1025              		.loc 1 262 10 view .LVU264
 1026 0004 11F00300 		ands	r0, r1, #3
 1027              	.LVL42:
 1028              		.loc 1 262 10 view .LVU265
 1029 0008 38D0     		beq	.L74
 1030              	.L68:
 263:serial.c      ****          return 0;
 1031              		.loc 1 263 17 view .LVU266
 1032 000a 0020     		movs	r0, #0
 1033              	.L67:
 264:serial.c      ****       }
 265:serial.c      ****       for (i=j=0;i<inlen;i++) {
 266:serial.c      ****           if (in[i] == BASE64_PAD) {
 267:serial.c      ****              break;
 268:serial.c      ****           }
 269:serial.c      ****           if (in[i] < BASE64DE_FIRST || in[i] > BASE64DE_LAST) {
 270:serial.c      ****              return 0;
 271:serial.c      ****           }
 272:serial.c      ****           c = base64de[(unsigned char)in[i]];
 273:serial.c      ****           if (c == 255) {
 274:serial.c      ****                         return 0;
 275:serial.c      ****           }
 276:serial.c      ****           switch (i & 0x3) {
 277:serial.c      ****              case 0:
 278:serial.c      ****                out[j] = (c << 2) & 0xFF;
 279:serial.c      ****                break;
 280:serial.c      ****              case 1:
 281:serial.c      ****                out[j++] |= (c >> 4) & 0x3;
 282:serial.c      ****                out[j] = (c & 0xF) << 4;
 283:serial.c      ****                break;
 284:serial.c      ****              case 2:
 285:serial.c      ****                out[j++] |= (c >> 2) & 0xF;
 286:serial.c      ****                out[j] = (c & 0x3) << 6;
 287:serial.c      ****                break;
 288:serial.c      ****              case 3:
 289:serial.c      ****                out[j++] |= c;
 290:serial.c      ****                break;
 291:serial.c      ****           }
 292:serial.c      ****       }
 293:serial.c      ****       return j;
 294:serial.c      **** }
 1034              		.loc 1 294 1 view .LVU267
 1035 000c F0BD     		pop	{r4, r5, r6, r7, pc}
 1036              	.LVL43:
 1037              	.L71:
 281:serial.c      ****                out[j] = (c & 0xF) << 4;
 1038              		.loc 1 281 16 is_stmt 1 view .LVU268
 281:serial.c      ****                out[j] = (c & 0xF) << 4;
 1039              		.loc 1 281 25 is_stmt 0 view .LVU269
 1040 000e 94F800E0 		ldrb	lr, [r4]	@ zero_extendqisi2
 1041 0012 C3F30115 		ubfx	r5, r3, #4, #2
 281:serial.c      ****                out[j] = (c & 0xF) << 4;
 1042              		.loc 1 281 21 view .LVU270
 1043 0016 0130     		adds	r0, r0, #1
 1044              	.LVL44:
 281:serial.c      ****                out[j] = (c & 0xF) << 4;
 1045              		.loc 1 281 25 view .LVU271
 1046 0018 45EA0E05 		orr	r5, r5, lr
 281:serial.c      ****                out[j] = (c & 0xF) << 4;
 1047              		.loc 1 281 21 view .LVU272
 1048 001c 80B2     		uxth	r0, r0
 1049              	.LVL45:
 281:serial.c      ****                out[j] = (c & 0xF) << 4;
 1050              		.loc 1 281 25 view .LVU273
 1051 001e 2570     		strb	r5, [r4]
 282:serial.c      ****                break;
 1052              		.loc 1 282 16 is_stmt 1 view .LVU274
 282:serial.c      ****                break;
 1053              		.loc 1 282 23 is_stmt 0 view .LVU275
 1054 0020 1B01     		lsls	r3, r3, #4
 1055              	.LVL46:
 1056              	.L81:
 286:serial.c      ****                break;
 1057              		.loc 1 286 23 view .LVU276
 1058 0022 1354     		strb	r3, [r2, r0]
 287:serial.c      ****              case 3:
 1059              		.loc 1 287 16 is_stmt 1 view .LVU277
 1060              	.L72:
 265:serial.c      ****           if (in[i] == BASE64_PAD) {
 1061              		.loc 1 265 27 discriminator 2 view .LVU278
 1062              	.LVL47:
 265:serial.c      ****           if (in[i] == BASE64_PAD) {
 1063              		.loc 1 265 27 is_stmt 0 discriminator 2 view .LVU279
 1064 0024 0136     		adds	r6, r6, #1
 1065              	.LVL48:
 1066              	.L66:
 265:serial.c      ****           if (in[i] == BASE64_PAD) {
 1067              		.loc 1 265 27 discriminator 2 view .LVU280
 1068 0026 B5B2     		uxth	r5, r6
 1069              	.LVL49:
 265:serial.c      ****           if (in[i] == BASE64_PAD) {
 1070              		.loc 1 265 19 is_stmt 1 discriminator 1 view .LVU281
 1071 0028 8D42     		cmp	r5, r1
 1072 002a EFD2     		bcs	.L67
 266:serial.c      ****              break;
 1073              		.loc 1 266 11 view .LVU282
 266:serial.c      ****              break;
 1074              		.loc 1 266 17 is_stmt 0 view .LVU283
 1075 002c BB5D     		ldrb	r3, [r7, r6]	@ zero_extendqisi2
 266:serial.c      ****              break;
 1076              		.loc 1 266 14 view .LVU284
 1077 002e 3D2B     		cmp	r3, #61
 1078 0030 ECD0     		beq	.L67
 269:serial.c      ****              return 0;
 1079              		.loc 1 269 11 is_stmt 1 view .LVU285
 269:serial.c      ****              return 0;
 1080              		.loc 1 269 14 is_stmt 0 view .LVU286
 1081 0032 A3F12B04 		sub	r4, r3, #43
 1082 0036 4F2C     		cmp	r4, #79
 1083 0038 E7D8     		bhi	.L68
 272:serial.c      ****           if (c == 255) {
 1084              		.loc 1 272 11 is_stmt 1 view .LVU287
 272:serial.c      ****           if (c == 255) {
 1085              		.loc 1 272 13 is_stmt 0 view .LVU288
 1086 003a 1CF80330 		ldrb	r3, [ip, r3]	@ zero_extendqisi2
 1087              	.LVL50:
 273:serial.c      ****                         return 0;
 1088              		.loc 1 273 11 is_stmt 1 view .LVU289
 273:serial.c      ****                         return 0;
 1089              		.loc 1 273 14 is_stmt 0 view .LVU290
 1090 003e FF2B     		cmp	r3, #255
 1091 0040 E3D0     		beq	.L68
 276:serial.c      ****              case 0:
 1092              		.loc 1 276 11 is_stmt 1 view .LVU291
 1093 0042 05F00305 		and	r5, r5, #3
 1094              	.LVL51:
 276:serial.c      ****              case 0:
 1095              		.loc 1 276 11 is_stmt 0 view .LVU292
 1096 0046 022D     		cmp	r5, #2
 278:serial.c      ****                break;
 1097              		.loc 1 278 19 view .LVU293
 1098 0048 02EB0004 		add	r4, r2, r0
 276:serial.c      ****              case 0:
 1099              		.loc 1 276 11 view .LVU294
 1100 004c 06D0     		beq	.L69
 1101 004e 032D     		cmp	r5, #3
 1102 0050 0FD0     		beq	.L70
 1103 0052 012D     		cmp	r5, #1
 1104 0054 DBD0     		beq	.L71
 278:serial.c      ****                break;
 1105              		.loc 1 278 16 is_stmt 1 view .LVU295
 278:serial.c      ****                break;
 1106              		.loc 1 278 23 is_stmt 0 view .LVU296
 1107 0056 9B00     		lsls	r3, r3, #2
 1108              	.LVL52:
 1109              	.L82:
 289:serial.c      ****                break;
 1110              		.loc 1 289 25 view .LVU297
 1111 0058 2370     		strb	r3, [r4]
 1112              	.LVL53:
 290:serial.c      ****           }
 1113              		.loc 1 290 16 is_stmt 1 view .LVU298
 1114 005a E3E7     		b	.L72
 1115              	.LVL54:
 1116              	.L69:
 285:serial.c      ****                out[j] = (c & 0x3) << 6;
 1117              		.loc 1 285 16 view .LVU299
 285:serial.c      ****                out[j] = (c & 0x3) << 6;
 1118              		.loc 1 285 25 is_stmt 0 view .LVU300
 1119 005c 94F800E0 		ldrb	lr, [r4]	@ zero_extendqisi2
 1120 0060 C3F38305 		ubfx	r5, r3, #2, #4
 285:serial.c      ****                out[j] = (c & 0x3) << 6;
 1121              		.loc 1 285 21 view .LVU301
 1122 0064 0130     		adds	r0, r0, #1
 1123              	.LVL55:
 285:serial.c      ****                out[j] = (c & 0x3) << 6;
 1124              		.loc 1 285 25 view .LVU302
 1125 0066 45EA0E05 		orr	r5, r5, lr
 285:serial.c      ****                out[j] = (c & 0x3) << 6;
 1126              		.loc 1 285 21 view .LVU303
 1127 006a 80B2     		uxth	r0, r0
 1128              	.LVL56:
 285:serial.c      ****                out[j] = (c & 0x3) << 6;
 1129              		.loc 1 285 25 view .LVU304
 1130 006c 2570     		strb	r5, [r4]
 286:serial.c      ****                break;
 1131              		.loc 1 286 16 is_stmt 1 view .LVU305
 286:serial.c      ****                break;
 1132              		.loc 1 286 23 is_stmt 0 view .LVU306
 1133 006e 9B01     		lsls	r3, r3, #6
 1134              	.LVL57:
 286:serial.c      ****                break;
 1135              		.loc 1 286 23 view .LVU307
 1136 0070 D7E7     		b	.L81
 1137              	.LVL58:
 1138              	.L70:
 289:serial.c      ****                break;
 1139              		.loc 1 289 16 is_stmt 1 view .LVU308
 289:serial.c      ****                break;
 1140              		.loc 1 289 25 is_stmt 0 view .LVU309
 1141 0072 2578     		ldrb	r5, [r4]	@ zero_extendqisi2
 289:serial.c      ****                break;
 1142              		.loc 1 289 21 view .LVU310
 1143 0074 0130     		adds	r0, r0, #1
 1144              	.LVL59:
 289:serial.c      ****                break;
 1145              		.loc 1 289 21 view .LVU311
 1146 0076 80B2     		uxth	r0, r0
 1147              	.LVL60:
 289:serial.c      ****                break;
 1148              		.loc 1 289 25 view .LVU312
 1149 0078 2B43     		orrs	r3, r3, r5
 1150              	.LVL61:
 289:serial.c      ****                break;
 1151              		.loc 1 289 25 view .LVU313
 1152 007a EDE7     		b	.L82
 1153              	.LVL62:
 1154              	.L74:
 272:serial.c      ****           if (c == 255) {
 1155              		.loc 1 272 13 view .LVU314
 1156 007c DFF804C0 		ldr	ip, .L83
 1157 0080 0646     		mov	r6, r0
 1158 0082 D0E7     		b	.L66
 1159              	.L84:
 1160              		.align	2
 1161              	.L83:
 1162 0084 00000000 		.word	base64de
 1163              		.cfi_endproc
 1164              	.LFE131:
 1166              		.section	.text.USART1_IRQHandler,"ax",%progbits
 1167              		.align	1
 1168              		.global	USART1_IRQHandler
 1169              		.syntax unified
 1170              		.thumb
 1171              		.thumb_func
 1173              	USART1_IRQHandler:
 1174              	.LFB132:
 295:serial.c      **** 
 296:serial.c      **** 
 297:serial.c      **** void USART1_IRQHandler (void)
 298:serial.c      **** {
 1175              		.loc 1 298 1 is_stmt 1 view -0
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 0
 1178              		@ frame_needed = 0, uses_anonymous_args = 0
 299:serial.c      ****       if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 1179              		.loc 1 299 7 view .LVU316
 298:serial.c      ****       if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 1180              		.loc 1 298 1 is_stmt 0 view .LVU317
 1181 0000 10B5     		push	{r4, lr}
 1182              		.cfi_def_cfa_offset 8
 1183              		.cfi_offset 4, -8
 1184              		.cfi_offset 14, -4
 1185              		.loc 1 299 11 view .LVU318
 1186 0002 2E48     		ldr	r0, .L100
 1187 0004 40F22551 		movw	r1, #1317
 1188 0008 FFF7FEFF 		bl	USART_GetITStatus
 1189              	.LVL63:
 1190              		.loc 1 299 10 discriminator 1 view .LVU319
 1191 000c B0B1     		cbz	r0, .L86
 300:serial.c      ****          /* Read one byte from the receive data register */
 301:serial.c      ****          rxbuff1[rxcnt1] = USART_ReceiveData(USART1);
 1192              		.loc 1 301 10 is_stmt 1 view .LVU320
 1193              		.loc 1 301 28 is_stmt 0 view .LVU321
 1194 000e 2B48     		ldr	r0, .L100
 1195 0010 FFF7FEFF 		bl	USART_ReceiveData
 1196              	.LVL64:
 1197              		.loc 1 301 17 discriminator 1 view .LVU322
 1198 0014 2A4A     		ldr	r2, .L100+4
 1199              		.loc 1 301 26 discriminator 1 view .LVU323
 1200 0016 2B49     		ldr	r1, .L100+8
 1201              		.loc 1 301 17 discriminator 1 view .LVU324
 1202 0018 1388     		ldrh	r3, [r2]
 1203 001a 9BB2     		uxth	r3, r3
 1204              		.loc 1 301 26 discriminator 1 view .LVU325
 1205 001c C854     		strb	r0, [r1, r3]
 302:serial.c      ****          //USART_SendData(USART3, rxbuff1[rxcnt1]);
 303:serial.c      ****          //rxcnt1 = 0;
 304:serial.c      ****          rxcnt1++;
 1206              		.loc 1 304 10 is_stmt 1 view .LVU326
 1207              		.loc 1 304 16 is_stmt 0 view .LVU327
 1208 001e 1388     		ldrh	r3, [r2]
 305:serial.c      ****          rx_led = 1;
 306:serial.c      ****          rxck1 = 0;
 307:serial.c      ****          USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 1209              		.loc 1 307 10 view .LVU328
 1210 0020 2648     		ldr	r0, .L100
 304:serial.c      ****          rx_led = 1;
 1211              		.loc 1 304 16 view .LVU329
 1212 0022 0133     		adds	r3, r3, #1
 1213 0024 9BB2     		uxth	r3, r3
 1214 0026 1380     		strh	r3, [r2]	@ movhi
 305:serial.c      ****          rx_led = 1;
 1215              		.loc 1 305 10 is_stmt 1 view .LVU330
 305:serial.c      ****          rx_led = 1;
 1216              		.loc 1 305 17 is_stmt 0 view .LVU331
 1217 0028 274B     		ldr	r3, .L100+12
 1218 002a 0122     		movs	r2, #1
 1219 002c 1A70     		strb	r2, [r3]
 306:serial.c      ****          USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 1220              		.loc 1 306 10 is_stmt 1 view .LVU332
 306:serial.c      ****          USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 1221              		.loc 1 306 16 is_stmt 0 view .LVU333
 1222 002e 274B     		ldr	r3, .L100+16
 1223 0030 0022     		movs	r2, #0
 1224              		.loc 1 307 10 view .LVU334
 1225 0032 40F22551 		movw	r1, #1317
 306:serial.c      ****          USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 1226              		.loc 1 306 16 view .LVU335
 1227 0036 1A70     		strb	r2, [r3]
 1228              		.loc 1 307 10 is_stmt 1 view .LVU336
 1229 0038 FFF7FEFF 		bl	USART_ClearITPendingBit
 1230              	.LVL65:
 1231              	.L86:
 308:serial.c      ****       }
 309:serial.c      ****       if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET) {
 1232              		.loc 1 309 7 view .LVU337
 1233              		.loc 1 309 11 is_stmt 0 view .LVU338
 1234 003c 1F48     		ldr	r0, .L100
 1235 003e 40F22771 		movw	r1, #1831
 1236 0042 FFF7FEFF 		bl	USART_GetITStatus
 1237              	.LVL66:
 1238              		.loc 1 309 10 discriminator 1 view .LVU339
 1239 0046 B8B1     		cbz	r0, .L87
 310:serial.c      ****          /* Write one byte to the transmit data register */
 311:serial.c      ****       	 if (txcnt1 < maxtx1) {
 1240              		.loc 1 311 9 is_stmt 1 view .LVU340
 1241              		.loc 1 311 20 is_stmt 0 view .LVU341
 1242 0048 214C     		ldr	r4, .L100+20
 1243 004a 224B     		ldr	r3, .L100+24
 1244 004c 2288     		ldrh	r2, [r4]
 1245 004e 1B88     		ldrh	r3, [r3]
 1246 0050 92B2     		uxth	r2, r2
 1247 0052 9BB2     		uxth	r3, r3
 1248              		.loc 1 311 12 view .LVU342
 1249 0054 9A42     		cmp	r2, r3
 1250 0056 24D2     		bcs	.L88
 312:serial.c      ****             USART_SendData(USART1, txbuff1[txcnt1]);
 1251              		.loc 1 312 13 is_stmt 1 view .LVU343
 1252              		.loc 1 312 43 is_stmt 0 view .LVU344
 1253 0058 2388     		ldrh	r3, [r4]
 1254              		.loc 1 312 13 view .LVU345
 1255 005a 1F4A     		ldr	r2, .L100+28
 1256 005c 1748     		ldr	r0, .L100
 1257              		.loc 1 312 43 view .LVU346
 1258 005e 9BB2     		uxth	r3, r3
 1259              		.loc 1 312 13 view .LVU347
 1260 0060 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1261 0062 FFF7FEFF 		bl	USART_SendData
 1262              	.LVL67:
 313:serial.c      ****       	    txcnt1++;
 1263              		.loc 1 313 12 is_stmt 1 view .LVU348
 1264              		.loc 1 313 18 is_stmt 0 view .LVU349
 1265 0066 2388     		ldrh	r3, [r4]
 1266 0068 0133     		adds	r3, r3, #1
 1267 006a 9BB2     		uxth	r3, r3
 1268 006c 2380     		strh	r3, [r4]	@ movhi
 1269              	.L89:
 314:serial.c      ****       	 } else {
 315:serial.c      ****       	    /* Disable the USART1 Transmit interrupt */
 316:serial.c      ****       	    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 317:serial.c      ****       	    USART_ITConfig(USART1, USART_IT_TC, ENABLE);
 318:serial.c      ****       	 }
 319:serial.c      ****       	 USART_ClearITPendingBit(USART1, USART_IT_TXE);
 1270              		.loc 1 319 9 is_stmt 1 view .LVU350
 1271 006e 1348     		ldr	r0, .L100
 1272 0070 40F22771 		movw	r1, #1831
 1273 0074 FFF7FEFF 		bl	USART_ClearITPendingBit
 1274              	.LVL68:
 1275              	.L87:
 320:serial.c      ****       }
 321:serial.c      ****       if (USART_GetITStatus(USART1, USART_IT_TC) != RESET) {
 1276              		.loc 1 321 7 view .LVU351
 1277              		.loc 1 321 11 is_stmt 0 view .LVU352
 1278 0078 1048     		ldr	r0, .L100
 1279 007a 40F22661 		movw	r1, #1574
 1280 007e FFF7FEFF 		bl	USART_GetITStatus
 1281              	.LVL69:
 1282              		.loc 1 321 10 discriminator 1 view .LVU353
 1283 0082 68B1     		cbz	r0, .L85
 322:serial.c      ****       	 USART_ITConfig(USART1, USART_IT_TC, DISABLE);
 1284              		.loc 1 322 9 is_stmt 1 view .LVU354
 1285 0084 0022     		movs	r2, #0
 1286 0086 0D48     		ldr	r0, .L100
 1287 0088 40F22661 		movw	r1, #1574
 1288 008c FFF7FEFF 		bl	USART_ITConfig
 1289              	.LVL70:
 323:serial.c      ****       	 USART_ClearITPendingBit(USART1, USART_IT_TC);
 1290              		.loc 1 323 9 view .LVU355
 1291 0090 0A48     		ldr	r0, .L100
 1292 0092 40F22661 		movw	r1, #1574
 1293 0096 FFF7FEFF 		bl	USART_ClearITPendingBit
 1294              	.LVL71:
 324:serial.c      ****          tx_led = 0;
 1295              		.loc 1 324 10 view .LVU356
 1296              		.loc 1 324 17 is_stmt 0 view .LVU357
 1297 009a 104B     		ldr	r3, .L100+32
 1298 009c 0022     		movs	r2, #0
 1299 009e 1A70     		strb	r2, [r3]
 1300              	.L85:
 325:serial.c      ****       }
 326:serial.c      **** }
 1301              		.loc 1 326 1 view .LVU358
 1302 00a0 10BD     		pop	{r4, pc}
 1303              	.L88:
 316:serial.c      ****       	    USART_ITConfig(USART1, USART_IT_TC, ENABLE);
 1304              		.loc 1 316 12 is_stmt 1 view .LVU359
 1305 00a2 0648     		ldr	r0, .L100
 1306 00a4 0022     		movs	r2, #0
 1307 00a6 40F22771 		movw	r1, #1831
 1308 00aa FFF7FEFF 		bl	USART_ITConfig
 1309              	.LVL72:
 317:serial.c      ****       	 }
 1310              		.loc 1 317 12 view .LVU360
 1311 00ae 0348     		ldr	r0, .L100
 1312 00b0 0122     		movs	r2, #1
 1313 00b2 40F22661 		movw	r1, #1574
 1314 00b6 FFF7FEFF 		bl	USART_ITConfig
 1315              	.LVL73:
 1316 00ba D8E7     		b	.L89
 1317              	.L101:
 1318              		.align	2
 1319              	.L100:
 1320 00bc 00100140 		.word	1073811456
 1321 00c0 00000000 		.word	rxcnt1
 1322 00c4 00000000 		.word	rxbuff1
 1323 00c8 00000000 		.word	rx_led
 1324 00cc 00000000 		.word	rxck1
 1325 00d0 00000000 		.word	txcnt1
 1326 00d4 00000000 		.word	maxtx1
 1327 00d8 00000000 		.word	txbuff1
 1328 00dc 00000000 		.word	tx_led
 1329              		.cfi_endproc
 1330              	.LFE132:
 1332              		.section	.text.USART2_IRQHandler,"ax",%progbits
 1333              		.align	1
 1334              		.global	USART2_IRQHandler
 1335              		.syntax unified
 1336              		.thumb
 1337              		.thumb_func
 1339              	USART2_IRQHandler:
 1340              	.LFB133:
 327:serial.c      **** 
 328:serial.c      **** 
 329:serial.c      **** void USART2_IRQHandler (void)
 330:serial.c      **** {
 1341              		.loc 1 330 1 view -0
 1342              		.cfi_startproc
 1343              		@ args = 0, pretend = 0, frame = 0
 1344              		@ frame_needed = 0, uses_anonymous_args = 0
 331:serial.c      ****       if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
 1345              		.loc 1 331 7 view .LVU362
 330:serial.c      ****       if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
 1346              		.loc 1 330 1 is_stmt 0 view .LVU363
 1347 0000 10B5     		push	{r4, lr}
 1348              		.cfi_def_cfa_offset 8
 1349              		.cfi_offset 4, -8
 1350              		.cfi_offset 14, -4
 1351              		.loc 1 331 11 view .LVU364
 1352 0002 3048     		ldr	r0, .L117
 1353 0004 40F22551 		movw	r1, #1317
 1354 0008 FFF7FEFF 		bl	USART_GetITStatus
 1355              	.LVL74:
 1356              		.loc 1 331 10 discriminator 1 view .LVU365
 1357 000c B0B1     		cbz	r0, .L103
 332:serial.c      ****          /* Read one byte from the receive data register */
 333:serial.c      ****          rxbuff2[rxcnt2] = USART_ReceiveData(USART2);
 1358              		.loc 1 333 10 is_stmt 1 view .LVU366
 1359              		.loc 1 333 28 is_stmt 0 view .LVU367
 1360 000e 2D48     		ldr	r0, .L117
 1361 0010 FFF7FEFF 		bl	USART_ReceiveData
 1362              	.LVL75:
 1363              		.loc 1 333 17 discriminator 1 view .LVU368
 1364 0014 2C4A     		ldr	r2, .L117+4
 1365              		.loc 1 333 26 discriminator 1 view .LVU369
 1366 0016 2D49     		ldr	r1, .L117+8
 1367              		.loc 1 333 17 discriminator 1 view .LVU370
 1368 0018 1388     		ldrh	r3, [r2]
 1369 001a 9BB2     		uxth	r3, r3
 1370              		.loc 1 333 26 discriminator 1 view .LVU371
 1371 001c C854     		strb	r0, [r1, r3]
 334:serial.c      ****          rxcnt2++;
 1372              		.loc 1 334 10 is_stmt 1 view .LVU372
 1373              		.loc 1 334 16 is_stmt 0 view .LVU373
 1374 001e 1388     		ldrh	r3, [r2]
 335:serial.c      ****          rx_led = 1;
 336:serial.c      ****          rxck2 = 0;
 337:serial.c      ****          USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 1375              		.loc 1 337 10 view .LVU374
 1376 0020 2848     		ldr	r0, .L117
 334:serial.c      ****          rxcnt2++;
 1377              		.loc 1 334 16 view .LVU375
 1378 0022 0133     		adds	r3, r3, #1
 1379 0024 9BB2     		uxth	r3, r3
 1380 0026 1380     		strh	r3, [r2]	@ movhi
 335:serial.c      ****          rx_led = 1;
 1381              		.loc 1 335 10 is_stmt 1 view .LVU376
 335:serial.c      ****          rx_led = 1;
 1382              		.loc 1 335 17 is_stmt 0 view .LVU377
 1383 0028 294B     		ldr	r3, .L117+12
 1384 002a 0122     		movs	r2, #1
 1385 002c 1A70     		strb	r2, [r3]
 336:serial.c      ****          USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 1386              		.loc 1 336 10 is_stmt 1 view .LVU378
 336:serial.c      ****          USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 1387              		.loc 1 336 16 is_stmt 0 view .LVU379
 1388 002e 294B     		ldr	r3, .L117+16
 1389 0030 0022     		movs	r2, #0
 1390              		.loc 1 337 10 view .LVU380
 1391 0032 40F22551 		movw	r1, #1317
 336:serial.c      ****          USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 1392              		.loc 1 336 16 view .LVU381
 1393 0036 1A70     		strb	r2, [r3]
 1394              		.loc 1 337 10 is_stmt 1 view .LVU382
 1395 0038 FFF7FEFF 		bl	USART_ClearITPendingBit
 1396              	.LVL76:
 1397              	.L103:
 338:serial.c      ****       }
 339:serial.c      ****       if (USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
 1398              		.loc 1 339 7 view .LVU383
 1399              		.loc 1 339 11 is_stmt 0 view .LVU384
 1400 003c 2148     		ldr	r0, .L117
 1401 003e 40F22771 		movw	r1, #1831
 1402 0042 FFF7FEFF 		bl	USART_GetITStatus
 1403              	.LVL77:
 1404              		.loc 1 339 10 discriminator 1 view .LVU385
 1405 0046 B8B1     		cbz	r0, .L104
 340:serial.c      ****          /* Write one byte to the transmit data register */
 341:serial.c      ****       	 if (txcnt2 < maxtx2) {
 1406              		.loc 1 341 9 is_stmt 1 view .LVU386
 1407              		.loc 1 341 20 is_stmt 0 view .LVU387
 1408 0048 234C     		ldr	r4, .L117+20
 1409 004a 244B     		ldr	r3, .L117+24
 1410 004c 2288     		ldrh	r2, [r4]
 1411 004e 1B88     		ldrh	r3, [r3]
 1412 0050 92B2     		uxth	r2, r2
 1413 0052 9BB2     		uxth	r3, r3
 1414              		.loc 1 341 12 view .LVU388
 1415 0054 9A42     		cmp	r2, r3
 1416 0056 27D2     		bcs	.L105
 342:serial.c      ****             USART_SendData(USART2, txbuff2[txcnt2]);
 1417              		.loc 1 342 13 is_stmt 1 view .LVU389
 1418              		.loc 1 342 43 is_stmt 0 view .LVU390
 1419 0058 2388     		ldrh	r3, [r4]
 1420              		.loc 1 342 13 view .LVU391
 1421 005a 214A     		ldr	r2, .L117+28
 1422 005c 1948     		ldr	r0, .L117
 1423              		.loc 1 342 43 view .LVU392
 1424 005e 9BB2     		uxth	r3, r3
 1425              		.loc 1 342 13 view .LVU393
 1426 0060 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1427 0062 FFF7FEFF 		bl	USART_SendData
 1428              	.LVL78:
 343:serial.c      ****       	    txcnt2++;
 1429              		.loc 1 343 12 is_stmt 1 view .LVU394
 1430              		.loc 1 343 18 is_stmt 0 view .LVU395
 1431 0066 2388     		ldrh	r3, [r4]
 1432 0068 0133     		adds	r3, r3, #1
 1433 006a 9BB2     		uxth	r3, r3
 1434 006c 2380     		strh	r3, [r4]	@ movhi
 1435              	.L106:
 344:serial.c      ****       	 } else {
 345:serial.c      ****       	    /* Disable the USART2 Transmit interrupt */
 346:serial.c      ****       	    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 347:serial.c      ****       	    USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 348:serial.c      ****       	 }
 349:serial.c      ****       	 USART_ClearITPendingBit(USART2, USART_IT_TXE);
 1436              		.loc 1 349 9 is_stmt 1 view .LVU396
 1437 006e 1548     		ldr	r0, .L117
 1438 0070 40F22771 		movw	r1, #1831
 1439 0074 FFF7FEFF 		bl	USART_ClearITPendingBit
 1440              	.LVL79:
 1441              	.L104:
 350:serial.c      ****       }
 351:serial.c      ****       if (USART_GetITStatus(USART2, USART_IT_TC) != RESET) {
 1442              		.loc 1 351 7 view .LVU397
 1443              		.loc 1 351 11 is_stmt 0 view .LVU398
 1444 0078 1248     		ldr	r0, .L117
 1445 007a 40F22661 		movw	r1, #1574
 1446 007e FFF7FEFF 		bl	USART_GetITStatus
 1447              	.LVL80:
 1448              		.loc 1 351 10 discriminator 1 view .LVU399
 1449 0082 80B1     		cbz	r0, .L102
 352:serial.c      ****       	 USART_ITConfig(USART2, USART_IT_TC, DISABLE);
 1450              		.loc 1 352 9 is_stmt 1 view .LVU400
 1451 0084 0022     		movs	r2, #0
 1452 0086 0F48     		ldr	r0, .L117
 1453 0088 40F22661 		movw	r1, #1574
 1454 008c FFF7FEFF 		bl	USART_ITConfig
 1455              	.LVL81:
 353:serial.c      ****       	 USART_ClearITPendingBit(USART2, USART_IT_TC);
 1456              		.loc 1 353 9 view .LVU401
 1457 0090 0C48     		ldr	r0, .L117
 1458 0092 40F22661 		movw	r1, #1574
 1459 0096 FFF7FEFF 		bl	USART_ClearITPendingBit
 1460              	.LVL82:
 354:serial.c      ****          tx_led = 0;
 1461              		.loc 1 354 10 view .LVU402
 1462              		.loc 1 354 17 is_stmt 0 view .LVU403
 1463 009a 124A     		ldr	r2, .L117+32
 1464 009c 0023     		movs	r3, #0
 1465 009e 1370     		strb	r3, [r2]
 355:serial.c      ****          TXEN_485 = 0;
 1466              		.loc 1 355 10 is_stmt 1 view .LVU404
 1467              		.loc 1 355 19 is_stmt 0 view .LVU405
 1468 00a0 114A     		ldr	r2, .L117+36
 1469 00a2 C2F8A032 		str	r3, [r2, #672]
 1470              	.L102:
 356:serial.c      ****       }
 357:serial.c      **** }
 1471              		.loc 1 357 1 view .LVU406
 1472 00a6 10BD     		pop	{r4, pc}
 1473              	.L105:
 346:serial.c      ****       	    USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 1474              		.loc 1 346 12 is_stmt 1 view .LVU407
 1475 00a8 0648     		ldr	r0, .L117
 1476 00aa 0022     		movs	r2, #0
 1477 00ac 40F22771 		movw	r1, #1831
 1478 00b0 FFF7FEFF 		bl	USART_ITConfig
 1479              	.LVL83:
 347:serial.c      ****       	 }
 1480              		.loc 1 347 12 view .LVU408
 1481 00b4 0348     		ldr	r0, .L117
 1482 00b6 0122     		movs	r2, #1
 1483 00b8 40F22661 		movw	r1, #1574
 1484 00bc FFF7FEFF 		bl	USART_ITConfig
 1485              	.LVL84:
 1486 00c0 D5E7     		b	.L106
 1487              	.L118:
 1488 00c2 00BF     		.align	2
 1489              	.L117:
 1490 00c4 00440040 		.word	1073759232
 1491 00c8 00000000 		.word	rxcnt2
 1492 00cc 00000000 		.word	rxbuff2
 1493 00d0 00000000 		.word	rx_led
 1494 00d4 00000000 		.word	rxck2
 1495 00d8 00000000 		.word	txcnt2
 1496 00dc 00000000 		.word	maxtx2
 1497 00e0 00000000 		.word	txbuff2
 1498 00e4 00000000 		.word	tx_led
 1499 00e8 00004342 		.word	1111687168
 1500              		.cfi_endproc
 1501              	.LFE133:
 1503              		.section	.text.USART3_IRQHandler,"ax",%progbits
 1504              		.align	1
 1505              		.global	USART3_IRQHandler
 1506              		.syntax unified
 1507              		.thumb
 1508              		.thumb_func
 1510              	USART3_IRQHandler:
 1511              	.LFB134:
 358:serial.c      **** 
 359:serial.c      **** 
 360:serial.c      **** void USART3_IRQHandler (void)
 361:serial.c      **** {
 1512              		.loc 1 361 1 view -0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 0
 1515              		@ frame_needed = 0, uses_anonymous_args = 0
 362:serial.c      ****       if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) {
 1516              		.loc 1 362 7 view .LVU410
 361:serial.c      ****       if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) {
 1517              		.loc 1 361 1 is_stmt 0 view .LVU411
 1518 0000 10B5     		push	{r4, lr}
 1519              		.cfi_def_cfa_offset 8
 1520              		.cfi_offset 4, -8
 1521              		.cfi_offset 14, -4
 1522              		.loc 1 362 11 view .LVU412
 1523 0002 3148     		ldr	r0, .L134
 1524 0004 40F22551 		movw	r1, #1317
 1525 0008 FFF7FEFF 		bl	USART_GetITStatus
 1526              	.LVL85:
 1527              		.loc 1 362 10 discriminator 1 view .LVU413
 1528 000c E0B1     		cbz	r0, .L120
 363:serial.c      ****          /* Read one byte from the receive data register */
 364:serial.c      ****          rxbuff3[rxcnt3] = USART_ReceiveData(USART3);
 1529              		.loc 1 364 10 is_stmt 1 view .LVU414
 1530              		.loc 1 364 17 is_stmt 0 discriminator 1 view .LVU415
 1531 000e 2F4C     		ldr	r4, .L134+4
 1532              		.loc 1 364 28 view .LVU416
 1533 0010 2D48     		ldr	r0, .L134
 1534 0012 FFF7FEFF 		bl	USART_ReceiveData
 1535              	.LVL86:
 1536              		.loc 1 364 17 discriminator 1 view .LVU417
 1537 0016 2388     		ldrh	r3, [r4]
 1538              		.loc 1 364 26 discriminator 1 view .LVU418
 1539 0018 2D4A     		ldr	r2, .L134+8
 1540              		.loc 1 364 17 discriminator 1 view .LVU419
 1541 001a 9BB2     		uxth	r3, r3
 1542              		.loc 1 364 26 discriminator 1 view .LVU420
 1543 001c D054     		strb	r0, [r2, r3]
 365:serial.c      ****          USART_SendData(USART1, rxbuff3[rxcnt3]);
 1544              		.loc 1 365 10 is_stmt 1 view .LVU421
 1545              		.loc 1 365 40 is_stmt 0 view .LVU422
 1546 001e 2388     		ldrh	r3, [r4]
 1547              		.loc 1 365 10 view .LVU423
 1548 0020 2C48     		ldr	r0, .L134+12
 1549              		.loc 1 365 40 view .LVU424
 1550 0022 9BB2     		uxth	r3, r3
 1551              		.loc 1 365 10 view .LVU425
 1552 0024 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1553 0026 FFF7FEFF 		bl	USART_SendData
 1554              	.LVL87:
 366:serial.c      ****          //rxcnt3 = 0;
 367:serial.c      ****          rxcnt3++;
 1555              		.loc 1 367 10 is_stmt 1 view .LVU426
 1556              		.loc 1 367 16 is_stmt 0 view .LVU427
 1557 002a 2388     		ldrh	r3, [r4]
 368:serial.c      ****          rx_led = 1;
 369:serial.c      ****          rxck3 = 0;
 370:serial.c      ****          USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 1558              		.loc 1 370 10 view .LVU428
 1559 002c 2648     		ldr	r0, .L134
 367:serial.c      ****          rx_led = 1;
 1560              		.loc 1 367 16 view .LVU429
 1561 002e 0133     		adds	r3, r3, #1
 1562 0030 9BB2     		uxth	r3, r3
 1563 0032 2380     		strh	r3, [r4]	@ movhi
 368:serial.c      ****          rx_led = 1;
 1564              		.loc 1 368 10 is_stmt 1 view .LVU430
 368:serial.c      ****          rx_led = 1;
 1565              		.loc 1 368 17 is_stmt 0 view .LVU431
 1566 0034 284B     		ldr	r3, .L134+16
 1567 0036 0122     		movs	r2, #1
 1568 0038 1A70     		strb	r2, [r3]
 369:serial.c      ****          USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 1569              		.loc 1 369 10 is_stmt 1 view .LVU432
 369:serial.c      ****          USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 1570              		.loc 1 369 16 is_stmt 0 view .LVU433
 1571 003a 284B     		ldr	r3, .L134+20
 1572 003c 0022     		movs	r2, #0
 1573              		.loc 1 370 10 view .LVU434
 1574 003e 40F22551 		movw	r1, #1317
 369:serial.c      ****          USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 1575              		.loc 1 369 16 view .LVU435
 1576 0042 1A70     		strb	r2, [r3]
 1577              		.loc 1 370 10 is_stmt 1 view .LVU436
 1578 0044 FFF7FEFF 		bl	USART_ClearITPendingBit
 1579              	.LVL88:
 1580              	.L120:
 371:serial.c      ****       }
 372:serial.c      ****       if (USART_GetITStatus(USART3, USART_IT_TXE) != RESET) {
 1581              		.loc 1 372 7 view .LVU437
 1582              		.loc 1 372 11 is_stmt 0 view .LVU438
 1583 0048 1F48     		ldr	r0, .L134
 1584 004a 40F22771 		movw	r1, #1831
 1585 004e FFF7FEFF 		bl	USART_GetITStatus
 1586              	.LVL89:
 1587              		.loc 1 372 10 discriminator 1 view .LVU439
 1588 0052 B8B1     		cbz	r0, .L121
 373:serial.c      ****          /* Write one byte to the transmit data register */
 374:serial.c      ****       	 if (txcnt3 < maxtx3) {
 1589              		.loc 1 374 9 is_stmt 1 view .LVU440
 1590              		.loc 1 374 20 is_stmt 0 view .LVU441
 1591 0054 224C     		ldr	r4, .L134+24
 1592 0056 234B     		ldr	r3, .L134+28
 1593 0058 2288     		ldrh	r2, [r4]
 1594 005a 1B88     		ldrh	r3, [r3]
 1595 005c 92B2     		uxth	r2, r2
 1596 005e 9BB2     		uxth	r3, r3
 1597              		.loc 1 374 12 view .LVU442
 1598 0060 9A42     		cmp	r2, r3
 1599 0062 24D2     		bcs	.L122
 375:serial.c      ****             USART_SendData(USART3, txbuff3[txcnt3]);
 1600              		.loc 1 375 13 is_stmt 1 view .LVU443
 1601              		.loc 1 375 43 is_stmt 0 view .LVU444
 1602 0064 2388     		ldrh	r3, [r4]
 1603              		.loc 1 375 13 view .LVU445
 1604 0066 204A     		ldr	r2, .L134+32
 1605 0068 1748     		ldr	r0, .L134
 1606              		.loc 1 375 43 view .LVU446
 1607 006a 9BB2     		uxth	r3, r3
 1608              		.loc 1 375 13 view .LVU447
 1609 006c D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1610 006e FFF7FEFF 		bl	USART_SendData
 1611              	.LVL90:
 376:serial.c      ****       	    txcnt3++;
 1612              		.loc 1 376 12 is_stmt 1 view .LVU448
 1613              		.loc 1 376 18 is_stmt 0 view .LVU449
 1614 0072 2388     		ldrh	r3, [r4]
 1615 0074 0133     		adds	r3, r3, #1
 1616 0076 9BB2     		uxth	r3, r3
 1617 0078 2380     		strh	r3, [r4]	@ movhi
 1618              	.L123:
 377:serial.c      ****       	 } else {
 378:serial.c      ****       	    /* Disable the USART3 Transmit interrupt */
 379:serial.c      ****       	    USART_ITConfig(USART3, USART_IT_TXE, DISABLE);
 380:serial.c      ****       	    USART_ITConfig(USART3, USART_IT_TC, ENABLE);
 381:serial.c      ****       	 }
 382:serial.c      ****       	 USART_ClearITPendingBit(USART3, USART_IT_TXE);
 1619              		.loc 1 382 9 is_stmt 1 view .LVU450
 1620 007a 1348     		ldr	r0, .L134
 1621 007c 40F22771 		movw	r1, #1831
 1622 0080 FFF7FEFF 		bl	USART_ClearITPendingBit
 1623              	.LVL91:
 1624              	.L121:
 383:serial.c      ****       }
 384:serial.c      ****       if (USART_GetITStatus(USART3, USART_IT_TC) != RESET) {
 1625              		.loc 1 384 7 view .LVU451
 1626              		.loc 1 384 11 is_stmt 0 view .LVU452
 1627 0084 1048     		ldr	r0, .L134
 1628 0086 40F22661 		movw	r1, #1574
 1629 008a FFF7FEFF 		bl	USART_GetITStatus
 1630              	.LVL92:
 1631              		.loc 1 384 10 discriminator 1 view .LVU453
 1632 008e 68B1     		cbz	r0, .L119
 385:serial.c      ****       	 USART_ITConfig(USART3, USART_IT_TC, DISABLE);
 1633              		.loc 1 385 9 is_stmt 1 view .LVU454
 1634 0090 0022     		movs	r2, #0
 1635 0092 0D48     		ldr	r0, .L134
 1636 0094 40F22661 		movw	r1, #1574
 1637 0098 FFF7FEFF 		bl	USART_ITConfig
 1638              	.LVL93:
 386:serial.c      ****       	 USART_ClearITPendingBit(USART3, USART_IT_TC);
 1639              		.loc 1 386 9 view .LVU455
 1640 009c 0A48     		ldr	r0, .L134
 1641 009e 40F22661 		movw	r1, #1574
 1642 00a2 FFF7FEFF 		bl	USART_ClearITPendingBit
 1643              	.LVL94:
 387:serial.c      ****          tx_led = 0;
 1644              		.loc 1 387 10 view .LVU456
 1645              		.loc 1 387 17 is_stmt 0 view .LVU457
 1646 00a6 114B     		ldr	r3, .L134+36
 1647 00a8 0022     		movs	r2, #0
 1648 00aa 1A70     		strb	r2, [r3]
 1649              	.L119:
 388:serial.c      ****       }
 389:serial.c      **** }
 1650              		.loc 1 389 1 view .LVU458
 1651 00ac 10BD     		pop	{r4, pc}
 1652              	.L122:
 379:serial.c      ****       	    USART_ITConfig(USART3, USART_IT_TC, ENABLE);
 1653              		.loc 1 379 12 is_stmt 1 view .LVU459
 1654 00ae 0648     		ldr	r0, .L134
 1655 00b0 0022     		movs	r2, #0
 1656 00b2 40F22771 		movw	r1, #1831
 1657 00b6 FFF7FEFF 		bl	USART_ITConfig
 1658              	.LVL95:
 380:serial.c      ****       	 }
 1659              		.loc 1 380 12 view .LVU460
 1660 00ba 0348     		ldr	r0, .L134
 1661 00bc 0122     		movs	r2, #1
 1662 00be 40F22661 		movw	r1, #1574
 1663 00c2 FFF7FEFF 		bl	USART_ITConfig
 1664              	.LVL96:
 1665 00c6 D8E7     		b	.L123
 1666              	.L135:
 1667              		.align	2
 1668              	.L134:
 1669 00c8 00480040 		.word	1073760256
 1670 00cc 00000000 		.word	rxcnt3
 1671 00d0 00000000 		.word	rxbuff3
 1672 00d4 00100140 		.word	1073811456
 1673 00d8 00000000 		.word	rx_led
 1674 00dc 00000000 		.word	rxck3
 1675 00e0 00000000 		.word	txcnt3
 1676 00e4 00000000 		.word	maxtx3
 1677 00e8 00000000 		.word	txbuff3
 1678 00ec 00000000 		.word	tx_led
 1679              		.cfi_endproc
 1680              	.LFE134:
 1682              		.section	.text.tx_enable1,"ax",%progbits
 1683              		.align	1
 1684              		.global	tx_enable1
 1685              		.syntax unified
 1686              		.thumb
 1687              		.thumb_func
 1689              	tx_enable1:
 1690              	.LVL97:
 1691              	.LFB135:
 390:serial.c      **** 
 391:serial.c      **** 
 392:serial.c      **** void tx_enable1 (unsigned char max)
 393:serial.c      **** {
 1692              		.loc 1 393 1 view -0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 0
 1695              		@ frame_needed = 0, uses_anonymous_args = 0
 394:serial.c      ****       maxtx1 = max;
 1696              		.loc 1 394 7 view .LVU462
 393:serial.c      ****       maxtx1 = max;
 1697              		.loc 1 393 1 is_stmt 0 view .LVU463
 1698 0000 08B5     		push	{r3, lr}
 1699              		.cfi_def_cfa_offset 8
 1700              		.cfi_offset 3, -8
 1701              		.cfi_offset 14, -4
 1702              		.loc 1 394 14 view .LVU464
 1703 0002 074B     		ldr	r3, .L137
 1704 0004 1880     		strh	r0, [r3]	@ movhi
 395:serial.c      ****       txcnt1 = 0;
 1705              		.loc 1 395 7 is_stmt 1 view .LVU465
 1706              		.loc 1 395 14 is_stmt 0 view .LVU466
 1707 0006 074B     		ldr	r3, .L137+4
 396:serial.c      ****       USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 1708              		.loc 1 396 7 view .LVU467
 1709 0008 0748     		ldr	r0, .L137+8
 1710              	.LVL98:
 395:serial.c      ****       txcnt1 = 0;
 1711              		.loc 1 395 14 view .LVU468
 1712 000a 0022     		movs	r2, #0
 1713 000c 1A80     		strh	r2, [r3]	@ movhi
 1714              	.LVL99:
 1715              		.loc 1 396 7 is_stmt 1 view .LVU469
 1716 000e 40F22771 		movw	r1, #1831
 1717 0012 0122     		movs	r2, #1
 1718 0014 FFF7FEFF 		bl	USART_ITConfig
 1719              	.LVL100:
 397:serial.c      ****       tx_led = 1;
 1720              		.loc 1 397 7 view .LVU470
 1721              		.loc 1 397 14 is_stmt 0 view .LVU471
 1722 0018 044B     		ldr	r3, .L137+12
 1723 001a 0122     		movs	r2, #1
 1724 001c 1A70     		strb	r2, [r3]
 398:serial.c      **** }
 1725              		.loc 1 398 1 view .LVU472
 1726 001e 08BD     		pop	{r3, pc}
 1727              	.L138:
 1728              		.align	2
 1729              	.L137:
 1730 0020 00000000 		.word	maxtx1
 1731 0024 00000000 		.word	txcnt1
 1732 0028 00100140 		.word	1073811456
 1733 002c 00000000 		.word	tx_led
 1734              		.cfi_endproc
 1735              	.LFE135:
 1737              		.section	.text.tx_enable2,"ax",%progbits
 1738              		.align	1
 1739              		.global	tx_enable2
 1740              		.syntax unified
 1741              		.thumb
 1742              		.thumb_func
 1744              	tx_enable2:
 1745              	.LVL101:
 1746              	.LFB136:
 399:serial.c      **** 
 400:serial.c      **** 
 401:serial.c      **** void tx_enable2 (unsigned char max)
 402:serial.c      **** {
 1747              		.loc 1 402 1 is_stmt 1 view -0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 403:serial.c      ****       TXEN_485 = 1;
 1751              		.loc 1 403 7 view .LVU474
 1752              		.loc 1 403 16 is_stmt 0 view .LVU475
 1753 0000 094B     		ldr	r3, .L140
 402:serial.c      ****       TXEN_485 = 1;
 1754              		.loc 1 402 1 view .LVU476
 1755 0002 10B5     		push	{r4, lr}
 1756              		.cfi_def_cfa_offset 8
 1757              		.cfi_offset 4, -8
 1758              		.cfi_offset 14, -4
 1759              		.loc 1 403 16 view .LVU477
 1760 0004 0124     		movs	r4, #1
 1761 0006 C3F8A042 		str	r4, [r3, #672]
 404:serial.c      ****       maxtx2 = max;
 1762              		.loc 1 404 7 is_stmt 1 view .LVU478
 1763              		.loc 1 404 14 is_stmt 0 view .LVU479
 1764 000a 084B     		ldr	r3, .L140+4
 1765 000c 1880     		strh	r0, [r3]	@ movhi
 405:serial.c      ****       txcnt2 = 0;
 1766              		.loc 1 405 7 is_stmt 1 view .LVU480
 1767              		.loc 1 405 14 is_stmt 0 view .LVU481
 1768 000e 084B     		ldr	r3, .L140+8
 406:serial.c      ****       USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 1769              		.loc 1 406 7 view .LVU482
 1770 0010 0848     		ldr	r0, .L140+12
 1771              	.LVL102:
 405:serial.c      ****       txcnt2 = 0;
 1772              		.loc 1 405 14 view .LVU483
 1773 0012 0022     		movs	r2, #0
 1774 0014 1A80     		strh	r2, [r3]	@ movhi
 1775              	.LVL103:
 1776              		.loc 1 406 7 is_stmt 1 view .LVU484
 1777 0016 40F22771 		movw	r1, #1831
 1778 001a 2246     		mov	r2, r4
 1779 001c FFF7FEFF 		bl	USART_ITConfig
 1780              	.LVL104:
 407:serial.c      ****       tx_led = 1;
 1781              		.loc 1 407 7 view .LVU485
 1782              		.loc 1 407 14 is_stmt 0 view .LVU486
 1783 0020 054B     		ldr	r3, .L140+16
 1784 0022 1C70     		strb	r4, [r3]
 408:serial.c      **** }
 1785              		.loc 1 408 1 view .LVU487
 1786 0024 10BD     		pop	{r4, pc}
 1787              	.L141:
 1788 0026 00BF     		.align	2
 1789              	.L140:
 1790 0028 00004342 		.word	1111687168
 1791 002c 00000000 		.word	maxtx2
 1792 0030 00000000 		.word	txcnt2
 1793 0034 00440040 		.word	1073759232
 1794 0038 00000000 		.word	tx_led
 1795              		.cfi_endproc
 1796              	.LFE136:
 1798              		.section	.text.tx_enable3,"ax",%progbits
 1799              		.align	1
 1800              		.global	tx_enable3
 1801              		.syntax unified
 1802              		.thumb
 1803              		.thumb_func
 1805              	tx_enable3:
 1806              	.LVL105:
 1807              	.LFB137:
 409:serial.c      **** 
 410:serial.c      **** 
 411:serial.c      **** void tx_enable3 (unsigned char max)
 412:serial.c      **** {
 1808              		.loc 1 412 1 is_stmt 1 view -0
 1809              		.cfi_startproc
 1810              		@ args = 0, pretend = 0, frame = 0
 1811              		@ frame_needed = 0, uses_anonymous_args = 0
 413:serial.c      ****       maxtx3 = max;
 1812              		.loc 1 413 7 view .LVU489
 412:serial.c      ****       maxtx3 = max;
 1813              		.loc 1 412 1 is_stmt 0 view .LVU490
 1814 0000 08B5     		push	{r3, lr}
 1815              		.cfi_def_cfa_offset 8
 1816              		.cfi_offset 3, -8
 1817              		.cfi_offset 14, -4
 1818              		.loc 1 413 14 view .LVU491
 1819 0002 074B     		ldr	r3, .L143
 1820 0004 1880     		strh	r0, [r3]	@ movhi
 414:serial.c      ****       txcnt3 = 0;
 1821              		.loc 1 414 7 is_stmt 1 view .LVU492
 1822              		.loc 1 414 14 is_stmt 0 view .LVU493
 1823 0006 074B     		ldr	r3, .L143+4
 415:serial.c      ****       USART_ITConfig(USART3, USART_IT_TXE, ENABLE);
 1824              		.loc 1 415 7 view .LVU494
 1825 0008 0748     		ldr	r0, .L143+8
 1826              	.LVL106:
 414:serial.c      ****       txcnt3 = 0;
 1827              		.loc 1 414 14 view .LVU495
 1828 000a 0022     		movs	r2, #0
 1829 000c 1A80     		strh	r2, [r3]	@ movhi
 1830              	.LVL107:
 1831              		.loc 1 415 7 is_stmt 1 view .LVU496
 1832 000e 40F22771 		movw	r1, #1831
 1833 0012 0122     		movs	r2, #1
 1834 0014 FFF7FEFF 		bl	USART_ITConfig
 1835              	.LVL108:
 416:serial.c      ****       tx_led = 1;
 1836              		.loc 1 416 7 view .LVU497
 1837              		.loc 1 416 14 is_stmt 0 view .LVU498
 1838 0018 044B     		ldr	r3, .L143+12
 1839 001a 0122     		movs	r2, #1
 1840 001c 1A70     		strb	r2, [r3]
 417:serial.c      **** }
 1841              		.loc 1 417 1 view .LVU499
 1842 001e 08BD     		pop	{r3, pc}
 1843              	.L144:
 1844              		.align	2
 1845              	.L143:
 1846 0020 00000000 		.word	maxtx3
 1847 0024 00000000 		.word	txcnt3
 1848 0028 00480040 		.word	1073760256
 1849 002c 00000000 		.word	tx_led
 1850              		.cfi_endproc
 1851              	.LFE137:
 1853              		.section	.text.receive_check1,"ax",%progbits
 1854              		.align	1
 1855              		.global	receive_check1
 1856              		.syntax unified
 1857              		.thumb
 1858              		.thumb_func
 1860              	receive_check1:
 1861              	.LFB138:
 418:serial.c      **** 
 419:serial.c      **** 
 420:serial.c      **** void receive_check1 (void)
 421:serial.c      **** {
 1862              		.loc 1 421 1 is_stmt 1 view -0
 1863              		.cfi_startproc
 1864              		@ args = 0, pretend = 0, frame = 0
 1865              		@ frame_needed = 0, uses_anonymous_args = 0
 422:serial.c      ****       unsigned char bcc,idx;
 1866              		.loc 1 422 7 view .LVU501
 423:serial.c      ****       if (rxcnt1) {
 1867              		.loc 1 423 7 view .LVU502
 421:serial.c      ****       unsigned char bcc,idx;
 1868              		.loc 1 421 1 is_stmt 0 view .LVU503
 1869 0000 38B5     		push	{r3, r4, r5, lr}
 1870              		.cfi_def_cfa_offset 16
 1871              		.cfi_offset 3, -16
 1872              		.cfi_offset 4, -12
 1873              		.cfi_offset 5, -8
 1874              		.cfi_offset 14, -4
 1875              		.loc 1 423 11 view .LVU504
 1876 0002 184C     		ldr	r4, .L152
 1877 0004 2388     		ldrh	r3, [r4]
 1878 0006 9BB2     		uxth	r3, r3
 1879              		.loc 1 423 10 view .LVU505
 1880 0008 43B3     		cbz	r3, .L146
 424:serial.c      ****          if ((rxbuff1[0] == STX) && (rxbuff1[5] == ETX) && ((rxbuff1[1] == this_id) || (rxbuff1[1] 
 1881              		.loc 1 424 10 is_stmt 1 view .LVU506
 1882              		.loc 1 424 22 is_stmt 0 view .LVU507
 1883 000a 174A     		ldr	r2, .L152+4
 1884              		.loc 1 424 13 view .LVU508
 1885 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1886 000e 022B     		cmp	r3, #2
 1887 0010 1CD1     		bne	.L147
 1888              		.loc 1 424 34 discriminator 1 view .LVU509
 1889 0012 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
 1890 0014 032B     		cmp	r3, #3
 1891 0016 19D1     		bne	.L147
 1892              		.loc 1 424 73 discriminator 2 view .LVU510
 1893 0018 1449     		ldr	r1, .L152+8
 1894              		.loc 1 424 69 discriminator 2 view .LVU511
 1895 001a 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 1896              		.loc 1 424 73 discriminator 2 view .LVU512
 1897 001c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1898              		.loc 1 424 57 discriminator 2 view .LVU513
 1899 001e 8B42     		cmp	r3, r1
 1900 0020 01D0     		beq	.L148
 1901              		.loc 1 424 85 discriminator 3 view .LVU514
 1902 0022 212B     		cmp	r3, #33
 1903 0024 12D1     		bne	.L147
 1904              	.L148:
 1905              	.LVL109:
 425:serial.c      **** 	    bcc = rxbuff1[0];
 426:serial.c      **** 	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff1[idx];
 1906              		.loc 1 426 30 is_stmt 1 discriminator 3 view .LVU515
 1907              		.loc 1 426 49 is_stmt 0 discriminator 3 view .LVU516
 1908 0026 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 1909 0028 D578     		ldrb	r5, [r2, #3]	@ zero_extendqisi2
 1910 002a 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 427:serial.c      ****             if (bcc == rxbuff1[6]) {
 1911              		.loc 1 427 16 view .LVU517
 1912 002c 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1913              		.loc 1 426 34 discriminator 3 view .LVU518
 1914 002e 83F00203 		eor	r3, r3, #2
 1915              	.LVL110:
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1916              		.loc 1 426 26 is_stmt 1 discriminator 3 view .LVU519
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1917              		.loc 1 426 20 discriminator 1 view .LVU520
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1918              		.loc 1 426 30 discriminator 3 view .LVU521
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1919              		.loc 1 426 34 is_stmt 0 discriminator 3 view .LVU522
 1920 0032 4340     		eors	r3, r3, r0
 1921              	.LVL111:
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1922              		.loc 1 426 26 is_stmt 1 discriminator 3 view .LVU523
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1923              		.loc 1 426 20 discriminator 1 view .LVU524
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1924              		.loc 1 426 30 discriminator 3 view .LVU525
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1925              		.loc 1 426 34 is_stmt 0 discriminator 3 view .LVU526
 1926 0034 6B40     		eors	r3, r3, r5
 1927              	.LVL112:
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1928              		.loc 1 426 26 is_stmt 1 discriminator 3 view .LVU527
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1929              		.loc 1 426 20 discriminator 1 view .LVU528
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1930              		.loc 1 426 30 discriminator 3 view .LVU529
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1931              		.loc 1 426 34 is_stmt 0 discriminator 3 view .LVU530
 1932 0036 4B40     		eors	r3, r3, r1
 1933              	.LVL113:
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1934              		.loc 1 426 26 is_stmt 1 discriminator 3 view .LVU531
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1935              		.loc 1 426 20 discriminator 1 view .LVU532
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1936              		.loc 1 426 30 discriminator 3 view .LVU533
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1937              		.loc 1 426 26 discriminator 3 view .LVU534
 426:serial.c      ****             if (bcc == rxbuff1[6]) {
 1938              		.loc 1 426 20 discriminator 1 view .LVU535
 1939              		.loc 1 427 13 view .LVU536
 1940              		.loc 1 427 16 is_stmt 0 view .LVU537
 1941 0038 83F00303 		eor	r3, r3, #3
 1942              	.LVL114:
 1943              		.loc 1 427 16 view .LVU538
 1944 003c 9A42     		cmp	r2, r3
 1945 003e 05D1     		bne	.L147
 428:serial.c      **** 	       if ((rxbuff1[2] == 0xFF) && (rxbuff1[3] == 0xFF) && (rxbuff1[4] == 0xFF)) {
 1946              		.loc 1 428 9 is_stmt 1 view .LVU539
 1947              		.loc 1 428 58 is_stmt 0 discriminator 2 view .LVU540
 1948 0040 2840     		ands	r0, r0, r5
 1949 0042 0140     		ands	r1, r1, r0
 1950 0044 FF29     		cmp	r1, #255
 1951 0046 01D1     		bne	.L147
 429:serial.c      **** 	       	  NVIC_SystemReset();
 1952              		.loc 1 429 12 is_stmt 1 view .LVU541
 1953 0048 FFF7FEFF 		bl	NVIC_SystemReset
 1954              	.LVL115:
 1955              	.L147:
 430:serial.c      **** 	       }
 431:serial.c      **** 	    }
 432:serial.c      ****          }
 433:serial.c      ****          bzero(rxbuff1,rxcnt1);
 1956              		.loc 1 433 10 view .LVU542
 1957 004c 2288     		ldrh	r2, [r4]
 1958 004e 0648     		ldr	r0, .L152+4
 1959 0050 92B2     		uxth	r2, r2
 1960 0052 0021     		movs	r1, #0
 1961 0054 FFF7FEFF 		bl	memset
 1962              	.LVL116:
 434:serial.c      ****          rxcnt1 = 0;
 1963              		.loc 1 434 10 view .LVU543
 1964              		.loc 1 434 17 is_stmt 0 view .LVU544
 1965 0058 0023     		movs	r3, #0
 1966 005a 2380     		strh	r3, [r4]	@ movhi
 1967              	.L146:
 435:serial.c      ****       }
 436:serial.c      ****       rx_led = 0;
 1968              		.loc 1 436 7 is_stmt 1 view .LVU545
 1969              		.loc 1 436 14 is_stmt 0 view .LVU546
 1970 005c 044B     		ldr	r3, .L152+12
 1971 005e 0022     		movs	r2, #0
 1972 0060 1A70     		strb	r2, [r3]
 437:serial.c      **** }
 1973              		.loc 1 437 1 view .LVU547
 1974 0062 38BD     		pop	{r3, r4, r5, pc}
 1975              	.L153:
 1976              		.align	2
 1977              	.L152:
 1978 0064 00000000 		.word	rxcnt1
 1979 0068 00000000 		.word	rxbuff1
 1980 006c 00000000 		.word	this_id
 1981 0070 00000000 		.word	rx_led
 1982              		.cfi_endproc
 1983              	.LFE138:
 1985              		.section	.text.receive_check2,"ax",%progbits
 1986              		.align	1
 1987              		.global	receive_check2
 1988              		.syntax unified
 1989              		.thumb
 1990              		.thumb_func
 1992              	receive_check2:
 1993              	.LFB139:
 438:serial.c      **** 
 439:serial.c      **** 
 440:serial.c      **** void receive_check2 (void)
 441:serial.c      **** {
 1994              		.loc 1 441 1 is_stmt 1 view -0
 1995              		.cfi_startproc
 1996              		@ args = 0, pretend = 0, frame = 0
 1997              		@ frame_needed = 0, uses_anonymous_args = 0
 442:serial.c      ****       unsigned char bcc,idx;
 1998              		.loc 1 442 7 view .LVU549
 443:serial.c      ****       if (rxcnt2) {
 1999              		.loc 1 443 7 view .LVU550
 441:serial.c      ****       unsigned char bcc,idx;
 2000              		.loc 1 441 1 is_stmt 0 view .LVU551
 2001 0000 38B5     		push	{r3, r4, r5, lr}
 2002              		.cfi_def_cfa_offset 16
 2003              		.cfi_offset 3, -16
 2004              		.cfi_offset 4, -12
 2005              		.cfi_offset 5, -8
 2006              		.cfi_offset 14, -4
 2007              		.loc 1 443 11 view .LVU552
 2008 0002 184C     		ldr	r4, .L161
 2009 0004 2388     		ldrh	r3, [r4]
 2010 0006 9BB2     		uxth	r3, r3
 2011              		.loc 1 443 10 view .LVU553
 2012 0008 43B3     		cbz	r3, .L155
 444:serial.c      ****          if ((rxbuff2[0] == STX) && (rxbuff2[5] == ETX) && ((rxbuff2[1] == this_id) || (rxbuff2[1] 
 2013              		.loc 1 444 10 is_stmt 1 view .LVU554
 2014              		.loc 1 444 22 is_stmt 0 view .LVU555
 2015 000a 174A     		ldr	r2, .L161+4
 2016              		.loc 1 444 13 view .LVU556
 2017 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2018 000e 022B     		cmp	r3, #2
 2019 0010 1CD1     		bne	.L156
 2020              		.loc 1 444 34 discriminator 1 view .LVU557
 2021 0012 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
 2022 0014 032B     		cmp	r3, #3
 2023 0016 19D1     		bne	.L156
 2024              		.loc 1 444 73 discriminator 2 view .LVU558
 2025 0018 1449     		ldr	r1, .L161+8
 2026              		.loc 1 444 69 discriminator 2 view .LVU559
 2027 001a 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 2028              		.loc 1 444 73 discriminator 2 view .LVU560
 2029 001c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2030              		.loc 1 444 57 discriminator 2 view .LVU561
 2031 001e 8B42     		cmp	r3, r1
 2032 0020 01D0     		beq	.L157
 2033              		.loc 1 444 85 discriminator 3 view .LVU562
 2034 0022 212B     		cmp	r3, #33
 2035 0024 12D1     		bne	.L156
 2036              	.L157:
 2037              	.LVL117:
 445:serial.c      **** 	    bcc = rxbuff2[0];
 446:serial.c      **** 	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff2[idx];
 2038              		.loc 1 446 30 is_stmt 1 discriminator 3 view .LVU563
 2039              		.loc 1 446 49 is_stmt 0 discriminator 3 view .LVU564
 2040 0026 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 2041 0028 D578     		ldrb	r5, [r2, #3]	@ zero_extendqisi2
 2042 002a 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 447:serial.c      ****             if (bcc == rxbuff2[6]) {
 2043              		.loc 1 447 16 view .LVU565
 2044 002c 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2045              		.loc 1 446 34 discriminator 3 view .LVU566
 2046 002e 83F00203 		eor	r3, r3, #2
 2047              	.LVL118:
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2048              		.loc 1 446 26 is_stmt 1 discriminator 3 view .LVU567
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2049              		.loc 1 446 20 discriminator 1 view .LVU568
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2050              		.loc 1 446 30 discriminator 3 view .LVU569
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2051              		.loc 1 446 34 is_stmt 0 discriminator 3 view .LVU570
 2052 0032 4340     		eors	r3, r3, r0
 2053              	.LVL119:
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2054              		.loc 1 446 26 is_stmt 1 discriminator 3 view .LVU571
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2055              		.loc 1 446 20 discriminator 1 view .LVU572
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2056              		.loc 1 446 30 discriminator 3 view .LVU573
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2057              		.loc 1 446 34 is_stmt 0 discriminator 3 view .LVU574
 2058 0034 6B40     		eors	r3, r3, r5
 2059              	.LVL120:
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2060              		.loc 1 446 26 is_stmt 1 discriminator 3 view .LVU575
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2061              		.loc 1 446 20 discriminator 1 view .LVU576
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2062              		.loc 1 446 30 discriminator 3 view .LVU577
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2063              		.loc 1 446 34 is_stmt 0 discriminator 3 view .LVU578
 2064 0036 4B40     		eors	r3, r3, r1
 2065              	.LVL121:
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2066              		.loc 1 446 26 is_stmt 1 discriminator 3 view .LVU579
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2067              		.loc 1 446 20 discriminator 1 view .LVU580
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2068              		.loc 1 446 30 discriminator 3 view .LVU581
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2069              		.loc 1 446 26 discriminator 3 view .LVU582
 446:serial.c      ****             if (bcc == rxbuff2[6]) {
 2070              		.loc 1 446 20 discriminator 1 view .LVU583
 2071              		.loc 1 447 13 view .LVU584
 2072              		.loc 1 447 16 is_stmt 0 view .LVU585
 2073 0038 83F00303 		eor	r3, r3, #3
 2074              	.LVL122:
 2075              		.loc 1 447 16 view .LVU586
 2076 003c 9A42     		cmp	r2, r3
 2077 003e 05D1     		bne	.L156
 448:serial.c      **** 	       if ((rxbuff2[2] == 0xFF) && (rxbuff2[3] == 0xFF) && (rxbuff2[4] == 0xFF)) {
 2078              		.loc 1 448 9 is_stmt 1 view .LVU587
 2079              		.loc 1 448 58 is_stmt 0 discriminator 2 view .LVU588
 2080 0040 2840     		ands	r0, r0, r5
 2081 0042 0140     		ands	r1, r1, r0
 2082 0044 FF29     		cmp	r1, #255
 2083 0046 01D1     		bne	.L156
 449:serial.c      **** 	       	  NVIC_SystemReset();
 2084              		.loc 1 449 12 is_stmt 1 view .LVU589
 2085 0048 FFF7FEFF 		bl	NVIC_SystemReset
 2086              	.LVL123:
 2087              	.L156:
 450:serial.c      **** 	       }
 451:serial.c      **** 	    }
 452:serial.c      ****          }
 453:serial.c      ****          bzero(rxbuff2,rxcnt2);
 2088              		.loc 1 453 10 view .LVU590
 2089 004c 2288     		ldrh	r2, [r4]
 2090 004e 0648     		ldr	r0, .L161+4
 2091 0050 92B2     		uxth	r2, r2
 2092 0052 0021     		movs	r1, #0
 2093 0054 FFF7FEFF 		bl	memset
 2094              	.LVL124:
 454:serial.c      ****          rxcnt2 = 0;
 2095              		.loc 1 454 10 view .LVU591
 2096              		.loc 1 454 17 is_stmt 0 view .LVU592
 2097 0058 0023     		movs	r3, #0
 2098 005a 2380     		strh	r3, [r4]	@ movhi
 2099              	.L155:
 455:serial.c      ****       }
 456:serial.c      ****       rx_led = 0;
 2100              		.loc 1 456 7 is_stmt 1 view .LVU593
 2101              		.loc 1 456 14 is_stmt 0 view .LVU594
 2102 005c 044B     		ldr	r3, .L161+12
 2103 005e 0022     		movs	r2, #0
 2104 0060 1A70     		strb	r2, [r3]
 457:serial.c      **** }
 2105              		.loc 1 457 1 view .LVU595
 2106 0062 38BD     		pop	{r3, r4, r5, pc}
 2107              	.L162:
 2108              		.align	2
 2109              	.L161:
 2110 0064 00000000 		.word	rxcnt2
 2111 0068 00000000 		.word	rxbuff2
 2112 006c 00000000 		.word	this_id
 2113 0070 00000000 		.word	rx_led
 2114              		.cfi_endproc
 2115              	.LFE139:
 2117              		.section	.text.receive_check3,"ax",%progbits
 2118              		.align	1
 2119              		.global	receive_check3
 2120              		.syntax unified
 2121              		.thumb
 2122              		.thumb_func
 2124              	receive_check3:
 2125              	.LFB140:
 458:serial.c      **** 
 459:serial.c      **** 
 460:serial.c      **** void receive_check3 (void)
 461:serial.c      **** {
 2126              		.loc 1 461 1 is_stmt 1 view -0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 0
 2129              		@ frame_needed = 0, uses_anonymous_args = 0
 462:serial.c      ****       unsigned char bcc,idx;
 2130              		.loc 1 462 7 view .LVU597
 463:serial.c      ****       if (rxcnt3) {
 2131              		.loc 1 463 7 view .LVU598
 461:serial.c      ****       unsigned char bcc,idx;
 2132              		.loc 1 461 1 is_stmt 0 view .LVU599
 2133 0000 38B5     		push	{r3, r4, r5, lr}
 2134              		.cfi_def_cfa_offset 16
 2135              		.cfi_offset 3, -16
 2136              		.cfi_offset 4, -12
 2137              		.cfi_offset 5, -8
 2138              		.cfi_offset 14, -4
 2139              		.loc 1 463 11 view .LVU600
 2140 0002 184C     		ldr	r4, .L170
 2141 0004 2388     		ldrh	r3, [r4]
 2142 0006 9BB2     		uxth	r3, r3
 2143              		.loc 1 463 10 view .LVU601
 2144 0008 43B3     		cbz	r3, .L164
 464:serial.c      ****          if ((rxbuff3[0] == STX) && (rxbuff3[5] == ETX) && ((rxbuff3[1] == this_id) || (rxbuff3[1] 
 2145              		.loc 1 464 10 is_stmt 1 view .LVU602
 2146              		.loc 1 464 22 is_stmt 0 view .LVU603
 2147 000a 174A     		ldr	r2, .L170+4
 2148              		.loc 1 464 13 view .LVU604
 2149 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2150 000e 022B     		cmp	r3, #2
 2151 0010 1CD1     		bne	.L165
 2152              		.loc 1 464 34 discriminator 1 view .LVU605
 2153 0012 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
 2154 0014 032B     		cmp	r3, #3
 2155 0016 19D1     		bne	.L165
 2156              		.loc 1 464 73 discriminator 2 view .LVU606
 2157 0018 1449     		ldr	r1, .L170+8
 2158              		.loc 1 464 69 discriminator 2 view .LVU607
 2159 001a 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 2160              		.loc 1 464 73 discriminator 2 view .LVU608
 2161 001c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2162              		.loc 1 464 57 discriminator 2 view .LVU609
 2163 001e 8B42     		cmp	r3, r1
 2164 0020 01D0     		beq	.L166
 2165              		.loc 1 464 85 discriminator 3 view .LVU610
 2166 0022 212B     		cmp	r3, #33
 2167 0024 12D1     		bne	.L165
 2168              	.L166:
 2169              	.LVL125:
 465:serial.c      **** 	    bcc = rxbuff3[0];
 466:serial.c      **** 	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff3[idx];
 2170              		.loc 1 466 30 is_stmt 1 discriminator 3 view .LVU611
 2171              		.loc 1 466 49 is_stmt 0 discriminator 3 view .LVU612
 2172 0026 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 2173 0028 D578     		ldrb	r5, [r2, #3]	@ zero_extendqisi2
 2174 002a 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 467:serial.c      ****             if (bcc == rxbuff3[6]) {
 2175              		.loc 1 467 16 view .LVU613
 2176 002c 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2177              		.loc 1 466 34 discriminator 3 view .LVU614
 2178 002e 83F00203 		eor	r3, r3, #2
 2179              	.LVL126:
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2180              		.loc 1 466 26 is_stmt 1 discriminator 3 view .LVU615
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2181              		.loc 1 466 20 discriminator 1 view .LVU616
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2182              		.loc 1 466 30 discriminator 3 view .LVU617
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2183              		.loc 1 466 34 is_stmt 0 discriminator 3 view .LVU618
 2184 0032 4340     		eors	r3, r3, r0
 2185              	.LVL127:
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2186              		.loc 1 466 26 is_stmt 1 discriminator 3 view .LVU619
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2187              		.loc 1 466 20 discriminator 1 view .LVU620
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2188              		.loc 1 466 30 discriminator 3 view .LVU621
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2189              		.loc 1 466 34 is_stmt 0 discriminator 3 view .LVU622
 2190 0034 6B40     		eors	r3, r3, r5
 2191              	.LVL128:
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2192              		.loc 1 466 26 is_stmt 1 discriminator 3 view .LVU623
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2193              		.loc 1 466 20 discriminator 1 view .LVU624
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2194              		.loc 1 466 30 discriminator 3 view .LVU625
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2195              		.loc 1 466 34 is_stmt 0 discriminator 3 view .LVU626
 2196 0036 4B40     		eors	r3, r3, r1
 2197              	.LVL129:
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2198              		.loc 1 466 26 is_stmt 1 discriminator 3 view .LVU627
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2199              		.loc 1 466 20 discriminator 1 view .LVU628
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2200              		.loc 1 466 30 discriminator 3 view .LVU629
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2201              		.loc 1 466 26 discriminator 3 view .LVU630
 466:serial.c      ****             if (bcc == rxbuff3[6]) {
 2202              		.loc 1 466 20 discriminator 1 view .LVU631
 2203              		.loc 1 467 13 view .LVU632
 2204              		.loc 1 467 16 is_stmt 0 view .LVU633
 2205 0038 83F00303 		eor	r3, r3, #3
 2206              	.LVL130:
 2207              		.loc 1 467 16 view .LVU634
 2208 003c 9A42     		cmp	r2, r3
 2209 003e 05D1     		bne	.L165
 468:serial.c      **** 	       if ((rxbuff3[2] == 0xFF) && (rxbuff3[3] == 0xFF) && (rxbuff3[4] == 0xFF)) {
 2210              		.loc 1 468 9 is_stmt 1 view .LVU635
 2211              		.loc 1 468 58 is_stmt 0 discriminator 2 view .LVU636
 2212 0040 2840     		ands	r0, r0, r5
 2213 0042 0140     		ands	r1, r1, r0
 2214 0044 FF29     		cmp	r1, #255
 2215 0046 01D1     		bne	.L165
 469:serial.c      **** 	       	  NVIC_SystemReset();
 2216              		.loc 1 469 12 is_stmt 1 view .LVU637
 2217 0048 FFF7FEFF 		bl	NVIC_SystemReset
 2218              	.LVL131:
 2219              	.L165:
 470:serial.c      **** 	       }
 471:serial.c      **** 	    }
 472:serial.c      ****          }
 473:serial.c      ****          bzero(rxbuff3,rxcnt3);
 2220              		.loc 1 473 10 view .LVU638
 2221 004c 2288     		ldrh	r2, [r4]
 2222 004e 0648     		ldr	r0, .L170+4
 2223 0050 92B2     		uxth	r2, r2
 2224 0052 0021     		movs	r1, #0
 2225 0054 FFF7FEFF 		bl	memset
 2226              	.LVL132:
 474:serial.c      ****          rxcnt3 = 0;
 2227              		.loc 1 474 10 view .LVU639
 2228              		.loc 1 474 17 is_stmt 0 view .LVU640
 2229 0058 0023     		movs	r3, #0
 2230 005a 2380     		strh	r3, [r4]	@ movhi
 2231              	.L164:
 475:serial.c      ****       }
 476:serial.c      ****       rx_led = 0;
 2232              		.loc 1 476 7 is_stmt 1 view .LVU641
 2233              		.loc 1 476 14 is_stmt 0 view .LVU642
 2234 005c 044B     		ldr	r3, .L170+12
 2235 005e 0022     		movs	r2, #0
 2236 0060 1A70     		strb	r2, [r3]
 477:serial.c      **** }
 2237              		.loc 1 477 1 view .LVU643
 2238 0062 38BD     		pop	{r3, r4, r5, pc}
 2239              	.L171:
 2240              		.align	2
 2241              	.L170:
 2242 0064 00000000 		.word	rxcnt3
 2243 0068 00000000 		.word	rxbuff3
 2244 006c 00000000 		.word	this_id
 2245 0070 00000000 		.word	rx_led
 2246              		.cfi_endproc
 2247              	.LFE140:
 2249              		.section	.text.uasrt_send,"ax",%progbits
 2250              		.align	1
 2251              		.global	uasrt_send
 2252              		.syntax unified
 2253              		.thumb
 2254              		.thumb_func
 2256              	uasrt_send:
 2257              	.LVL133:
 2258              	.LFB141:
 478:serial.c      **** 
 479:serial.c      **** 
 480:serial.c      **** void uasrt_send (char *buff,int length)
 481:serial.c      **** {
 2259              		.loc 1 481 1 is_stmt 1 view -0
 2260              		.cfi_startproc
 2261              		@ args = 0, pretend = 0, frame = 0
 2262              		@ frame_needed = 0, uses_anonymous_args = 0
 482:serial.c      ****       while (tx_led);
 2263              		.loc 1 482 7 view .LVU645
 2264              		.loc 1 482 14 is_stmt 0 discriminator 1 view .LVU646
 2265 0000 0B4A     		ldr	r2, .L175
 481:serial.c      ****       while (tx_led);
 2266              		.loc 1 481 1 view .LVU647
 2267 0002 38B5     		push	{r3, r4, r5, lr}
 2268              		.cfi_def_cfa_offset 16
 2269              		.cfi_offset 3, -16
 2270              		.cfi_offset 4, -12
 2271              		.cfi_offset 5, -8
 2272              		.cfi_offset 14, -4
 481:serial.c      ****       while (tx_led);
 2273              		.loc 1 481 1 view .LVU648
 2274 0004 0546     		mov	r5, r0
 2275 0006 0C46     		mov	r4, r1
 2276              	.LVL134:
 2277              	.L173:
 2278              		.loc 1 482 14 is_stmt 1 discriminator 1 view .LVU649
 2279 0008 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2280 000a 03F0FF01 		and	r1, r3, #255
 2281 000e 002B     		cmp	r3, #0
 2282 0010 FAD1     		bne	.L173
 483:serial.c      ****       bzero(txbuff1,256);
 2283              		.loc 1 483 7 view .LVU650
 2284 0012 4FF48072 		mov	r2, #256
 2285 0016 0748     		ldr	r0, .L175+4
 2286              	.LVL135:
 2287              		.loc 1 483 7 is_stmt 0 view .LVU651
 2288 0018 FFF7FEFF 		bl	memset
 2289              	.LVL136:
 484:serial.c      ****       memcpy(txbuff1,buff,length);
 2290              		.loc 1 484 7 is_stmt 1 view .LVU652
 2291 001c 2246     		mov	r2, r4
 2292 001e 2946     		mov	r1, r5
 2293 0020 0448     		ldr	r0, .L175+4
 2294 0022 FFF7FEFF 		bl	memcpy
 2295              	.LVL137:
 485:serial.c      ****       tx_enable1(length);
 2296              		.loc 1 485 7 view .LVU653
 2297 0026 E0B2     		uxtb	r0, r4
 486:serial.c      **** }
 2298              		.loc 1 486 1 is_stmt 0 view .LVU654
 2299 0028 BDE83840 		pop	{r3, r4, r5, lr}
 2300              		.cfi_restore 14
 2301              		.cfi_restore 5
 2302              		.cfi_restore 4
 2303              		.cfi_restore 3
 2304              		.cfi_def_cfa_offset 0
 2305              	.LVL138:
 485:serial.c      ****       tx_enable1(length);
 2306              		.loc 1 485 7 view .LVU655
 2307 002c FFF7FEBF 		b	tx_enable1
 2308              	.LVL139:
 2309              	.L176:
 2310              		.align	2
 2311              	.L175:
 2312 0030 00000000 		.word	tx_led
 2313 0034 00000000 		.word	txbuff1
 2314              		.cfi_endproc
 2315              	.LFE141:
 2317              		.section	.text.s_printf,"ax",%progbits
 2318              		.align	1
 2319              		.global	s_printf
 2320              		.syntax unified
 2321              		.thumb
 2322              		.thumb_func
 2324              	s_printf:
 2325              	.LVL140:
 2326              	.LFB142:
 487:serial.c      **** 
 488:serial.c      **** 
 489:serial.c      **** void s_printf (char *form,...)
 490:serial.c      **** {
 2327              		.loc 1 490 1 is_stmt 1 view -0
 2328              		.cfi_startproc
 2329              		@ args = 4, pretend = 16, frame = 8
 2330              		@ frame_needed = 0, uses_anonymous_args = 1
 491:serial.c      ****       va_list argptr;
 2331              		.loc 1 491 7 view .LVU657
 492:serial.c      ****       va_start(argptr,form);
 2332              		.loc 1 492 7 view .LVU658
 490:serial.c      ****       va_list argptr;
 2333              		.loc 1 490 1 is_stmt 0 view .LVU659
 2334 0000 0FB4     		push	{r0, r1, r2, r3}
 2335              		.cfi_def_cfa_offset 16
 2336              		.cfi_offset 0, -16
 2337              		.cfi_offset 1, -12
 2338              		.cfi_offset 2, -8
 2339              		.cfi_offset 3, -4
 2340 0002 13B5     		push	{r0, r1, r4, lr}
 2341              		.cfi_def_cfa_offset 32
 2342              		.cfi_offset 4, -24
 2343              		.cfi_offset 14, -20
 493:serial.c      ****       vsprintf(sbuff,form,argptr);
 2344              		.loc 1 493 7 view .LVU660
 2345 0004 094C     		ldr	r4, .L178
 490:serial.c      ****       va_list argptr;
 2346              		.loc 1 490 1 view .LVU661
 2347 0006 04AA     		add	r2, sp, #16
 2348              		.loc 1 493 7 view .LVU662
 2349 0008 2046     		mov	r0, r4
 490:serial.c      ****       va_list argptr;
 2350              		.loc 1 490 1 view .LVU663
 2351 000a 52F8041B 		ldr	r1, [r2], #4
 492:serial.c      ****       va_start(argptr,form);
 2352              		.loc 1 492 7 view .LVU664
 2353 000e 0192     		str	r2, [sp, #4]
 2354              		.loc 1 493 7 is_stmt 1 view .LVU665
 2355 0010 FFF7FEFF 		bl	vsprintf
 2356              	.LVL141:
 494:serial.c      ****       uasrt_send(sbuff,strlen(sbuff));
 2357              		.loc 1 494 7 view .LVU666
 2358              		.loc 1 494 24 is_stmt 0 view .LVU667
 2359 0014 2046     		mov	r0, r4
 2360 0016 FFF7FEFF 		bl	strlen
 2361              	.LVL142:
 2362 001a 0146     		mov	r1, r0
 2363              		.loc 1 494 7 discriminator 1 view .LVU668
 2364 001c 2046     		mov	r0, r4
 2365 001e FFF7FEFF 		bl	uasrt_send
 2366              	.LVL143:
 495:serial.c      ****       va_end(argptr);
 2367              		.loc 1 495 7 is_stmt 1 view .LVU669
 496:serial.c      **** }
 2368              		.loc 1 496 1 is_stmt 0 view .LVU670
 2369 0022 02B0     		add	sp, sp, #8
 2370              		.cfi_def_cfa_offset 24
 2371              		@ sp needed
 2372 0024 BDE81040 		pop	{r4, lr}
 2373              		.cfi_restore 14
 2374              		.cfi_restore 4
 2375              		.cfi_def_cfa_offset 16
 2376 0028 04B0     		add	sp, sp, #16
 2377              		.cfi_restore 3
 2378              		.cfi_restore 2
 2379              		.cfi_restore 1
 2380              		.cfi_restore 0
 2381              		.cfi_def_cfa_offset 0
 2382 002a 7047     		bx	lr
 2383              	.L179:
 2384              		.align	2
 2385              	.L178:
 2386 002c 00000000 		.word	sbuff
 2387              		.cfi_endproc
 2388              	.LFE142:
 2390              		.section	.text.send_server_data,"ax",%progbits
 2391              		.align	1
 2392              		.global	send_server_data
 2393              		.syntax unified
 2394              		.thumb
 2395              		.thumb_func
 2397              	send_server_data:
 2398              	.LVL144:
 2399              	.LFB143:
 497:serial.c      **** 
 498:serial.c      **** 
 499:serial.c      **** void send_server_data (unsigned char ack)
 500:serial.c      **** {
 2400              		.loc 1 500 1 is_stmt 1 view -0
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 0
 2403              		@ frame_needed = 0, uses_anonymous_args = 0
 501:serial.c      ****       unsigned short idx,encode;
 2404              		.loc 1 501 7 view .LVU672
 502:serial.c      ****       unsigned char bcc;
 2405              		.loc 1 502 7 view .LVU673
 503:serial.c      ****       tcp_tx[0] = STX;
 2406              		.loc 1 503 7 view .LVU674
 2407              		.loc 1 503 17 is_stmt 0 view .LVU675
 2408 0000 644B     		ldr	r3, .L208
 2409 0002 0222     		movs	r2, #2
 500:serial.c      ****       unsigned short idx,encode;
 2410              		.loc 1 500 1 view .LVU676
 2411 0004 10B5     		push	{r4, lr}
 2412              		.cfi_def_cfa_offset 8
 2413              		.cfi_offset 4, -8
 2414              		.cfi_offset 14, -4
 2415              		.loc 1 503 17 view .LVU677
 2416 0006 1A70     		strb	r2, [r3]
 504:serial.c      ****       tcp_tx[1] = 0x41;
 2417              		.loc 1 504 7 is_stmt 1 view .LVU678
 505:serial.c      ****       tcp_tx[2] = ack;
 2418              		.loc 1 505 17 is_stmt 0 view .LVU679
 2419 0008 9870     		strb	r0, [r3, #2]
 504:serial.c      ****       tcp_tx[1] = 0x41;
 2420              		.loc 1 504 17 view .LVU680
 2421 000a 4122     		movs	r2, #65
 506:serial.c      ****       switch (ack) {
 2422              		.loc 1 506 7 view .LVU681
 2423 000c 1138     		subs	r0, r0, #17
 2424              	.LVL145:
 504:serial.c      ****       tcp_tx[1] = 0x41;
 2425              		.loc 1 504 17 view .LVU682
 2426 000e 5A70     		strb	r2, [r3, #1]
 505:serial.c      ****       tcp_tx[2] = ack;
 2427              		.loc 1 505 7 is_stmt 1 view .LVU683
 2428              		.loc 1 506 7 view .LVU684
 2429 0010 0528     		cmp	r0, #5
 2430 0012 3ED8     		bhi	.L181
 2431 0014 DFE800F0 		tbb	[pc, r0]
 2432              	.L183:
 2433 0018 03       		.byte	(.L188-.L183)/2
 2434 0019 69       		.byte	(.L187-.L183)/2
 2435 001a 7E       		.byte	(.L186-.L183)/2
 2436 001b 89       		.byte	(.L185-.L183)/2
 2437 001c 94       		.byte	(.L184-.L183)/2
 2438 001d A9       		.byte	(.L182-.L183)/2
 2439              		.p2align 1
 2440              	.L188:
 507:serial.c      ****          case 0x10:
 508:serial.c      ****          case 0x30:
 509:serial.c      ****          case 0x31:
 510:serial.c      ****          case 0x32:
 511:serial.c      ****          case 0x33:
 512:serial.c      ****          case 0x34:
 513:serial.c      ****          case 0x35:
 514:serial.c      ****          case 0x50:
 515:serial.c      ****            break;
 516:serial.c      ****          case 0x11:
 517:serial.c      ****            tcp_tx[3] = wifi_power;
 2441              		.loc 1 517 12 view .LVU685
 2442              		.loc 1 517 22 is_stmt 0 view .LVU686
 2443 001e 5E4A     		ldr	r2, .L208+4
 2444 0020 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2445 0022 DA70     		strb	r2, [r3, #3]
 518:serial.c      ****            tcp_tx[4] = dhcp_disable;
 2446              		.loc 1 518 12 is_stmt 1 view .LVU687
 2447              		.loc 1 518 22 is_stmt 0 view .LVU688
 2448 0024 5D4A     		ldr	r2, .L208+8
 2449 0026 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2450 0028 1A71     		strb	r2, [r3, #4]
 519:serial.c      ****            tcp_tx[5] = keep_alive_time;
 2451              		.loc 1 519 12 is_stmt 1 view .LVU689
 2452              		.loc 1 519 22 is_stmt 0 view .LVU690
 2453 002a 5D4A     		ldr	r2, .L208+12
 2454 002c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2455 002e 5A71     		strb	r2, [r3, #5]
 520:serial.c      ****            tcp_tx[6] = mqtt_mode;
 2456              		.loc 1 520 12 is_stmt 1 view .LVU691
 2457              		.loc 1 520 22 is_stmt 0 view .LVU692
 2458 0030 5C4A     		ldr	r2, .L208+16
 2459 0032 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2460 0034 9A71     		strb	r2, [r3, #6]
 521:serial.c      ****            tcp_tx[7] = ap_mode;
 2461              		.loc 1 521 12 is_stmt 1 view .LVU693
 2462              		.loc 1 521 22 is_stmt 0 view .LVU694
 2463 0036 5C4A     		ldr	r2, .L208+20
 2464 0038 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2465 003a DA71     		strb	r2, [r3, #7]
 522:serial.c      ****            tcp_tx[8] = (m_ip >> 24) & 0xFF;
 2466              		.loc 1 522 12 is_stmt 1 view .LVU695
 2467              		.loc 1 522 30 is_stmt 0 view .LVU696
 2468 003c 5B4A     		ldr	r2, .L208+24
 2469 003e 1168     		ldr	r1, [r2]
 2470 0040 090E     		lsrs	r1, r1, #24
 2471              		.loc 1 522 22 view .LVU697
 2472 0042 1972     		strb	r1, [r3, #8]
 523:serial.c      ****            tcp_tx[9] = (m_ip >> 16) & 0xFF;
 2473              		.loc 1 523 12 is_stmt 1 view .LVU698
 2474              		.loc 1 523 30 is_stmt 0 view .LVU699
 2475 0044 1168     		ldr	r1, [r2]
 2476 0046 090C     		lsrs	r1, r1, #16
 2477              		.loc 1 523 22 view .LVU700
 2478 0048 5972     		strb	r1, [r3, #9]
 524:serial.c      ****            tcp_tx[10] = (m_ip >> 8) & 0xFF;
 2479              		.loc 1 524 12 is_stmt 1 view .LVU701
 2480              		.loc 1 524 31 is_stmt 0 view .LVU702
 2481 004a 1168     		ldr	r1, [r2]
 525:serial.c      ****            tcp_tx[11] = (m_ip >> 0) & 0xFF;
 2482              		.loc 1 525 23 view .LVU703
 2483 004c 1268     		ldr	r2, [r2]
 2484 004e DA72     		strb	r2, [r3, #11]
 526:serial.c      ****            tcp_tx[12] = (m_gw >> 24) & 0xFF;
 2485              		.loc 1 526 31 view .LVU704
 2486 0050 574A     		ldr	r2, .L208+28
 524:serial.c      ****            tcp_tx[10] = (m_ip >> 8) & 0xFF;
 2487              		.loc 1 524 31 view .LVU705
 2488 0052 090A     		lsrs	r1, r1, #8
 524:serial.c      ****            tcp_tx[10] = (m_ip >> 8) & 0xFF;
 2489              		.loc 1 524 23 view .LVU706
 2490 0054 9972     		strb	r1, [r3, #10]
 525:serial.c      ****            tcp_tx[11] = (m_ip >> 0) & 0xFF;
 2491              		.loc 1 525 12 is_stmt 1 view .LVU707
 2492              		.loc 1 526 12 view .LVU708
 2493              		.loc 1 526 31 is_stmt 0 view .LVU709
 2494 0056 1168     		ldr	r1, [r2]
 2495 0058 090E     		lsrs	r1, r1, #24
 2496              		.loc 1 526 23 view .LVU710
 2497 005a 1973     		strb	r1, [r3, #12]
 527:serial.c      ****            tcp_tx[13] = (m_gw >> 16) & 0xFF;
 2498              		.loc 1 527 12 is_stmt 1 view .LVU711
 2499              		.loc 1 527 31 is_stmt 0 view .LVU712
 2500 005c 1168     		ldr	r1, [r2]
 2501 005e 090C     		lsrs	r1, r1, #16
 2502              		.loc 1 527 23 view .LVU713
 2503 0060 5973     		strb	r1, [r3, #13]
 528:serial.c      ****            tcp_tx[14] = (m_gw >> 8) & 0xFF;
 2504              		.loc 1 528 12 is_stmt 1 view .LVU714
 2505              		.loc 1 528 31 is_stmt 0 view .LVU715
 2506 0062 1168     		ldr	r1, [r2]
 529:serial.c      ****            tcp_tx[15] = (m_gw >> 0) & 0xFF;
 2507              		.loc 1 529 23 view .LVU716
 2508 0064 1268     		ldr	r2, [r2]
 2509 0066 DA73     		strb	r2, [r3, #15]
 530:serial.c      ****            tcp_tx[16] = (m_nm >> 24) & 0xFF;
 2510              		.loc 1 530 31 view .LVU717
 2511 0068 524A     		ldr	r2, .L208+32
 528:serial.c      ****            tcp_tx[14] = (m_gw >> 8) & 0xFF;
 2512              		.loc 1 528 31 view .LVU718
 2513 006a 090A     		lsrs	r1, r1, #8
 528:serial.c      ****            tcp_tx[14] = (m_gw >> 8) & 0xFF;
 2514              		.loc 1 528 23 view .LVU719
 2515 006c 9973     		strb	r1, [r3, #14]
 529:serial.c      ****            tcp_tx[15] = (m_gw >> 0) & 0xFF;
 2516              		.loc 1 529 12 is_stmt 1 view .LVU720
 2517              		.loc 1 530 12 view .LVU721
 2518              		.loc 1 530 31 is_stmt 0 view .LVU722
 2519 006e 1168     		ldr	r1, [r2]
 2520 0070 090E     		lsrs	r1, r1, #24
 2521              		.loc 1 530 23 view .LVU723
 2522 0072 1974     		strb	r1, [r3, #16]
 531:serial.c      ****            tcp_tx[17] = (m_nm >> 16) & 0xFF;
 2523              		.loc 1 531 12 is_stmt 1 view .LVU724
 2524              		.loc 1 531 31 is_stmt 0 view .LVU725
 2525 0074 1168     		ldr	r1, [r2]
 2526 0076 090C     		lsrs	r1, r1, #16
 2527              		.loc 1 531 23 view .LVU726
 2528 0078 5974     		strb	r1, [r3, #17]
 532:serial.c      ****            tcp_tx[18] = (m_nm >> 8) & 0xFF;
 2529              		.loc 1 532 12 is_stmt 1 view .LVU727
 2530              		.loc 1 532 31 is_stmt 0 view .LVU728
 2531 007a 1168     		ldr	r1, [r2]
 2532 007c 090A     		lsrs	r1, r1, #8
 2533              		.loc 1 532 23 view .LVU729
 2534 007e 9974     		strb	r1, [r3, #18]
 533:serial.c      ****            tcp_tx[19] = (m_nm >> 0) & 0xFF;
 2535              		.loc 1 533 12 is_stmt 1 view .LVU730
 534:serial.c      ****            tcp_tx[20] = (mqtt_port >> 8) & 0xFF;
 2536              		.loc 1 534 23 is_stmt 0 view .LVU731
 2537 0080 4D49     		ldr	r1, .L208+36
 533:serial.c      ****            tcp_tx[19] = (m_nm >> 0) & 0xFF;
 2538              		.loc 1 533 23 view .LVU732
 2539 0082 1268     		ldr	r2, [r2]
 2540 0084 DA74     		strb	r2, [r3, #19]
 2541              		.loc 1 534 12 is_stmt 1 view .LVU733
 2542              		.loc 1 534 23 is_stmt 0 view .LVU734
 2543 0086 0A88     		ldrh	r2, [r1]
 2544 0088 C2F30722 		ubfx	r2, r2, #8, #8
 2545 008c 1A75     		strb	r2, [r3, #20]
 535:serial.c      ****            tcp_tx[21] = mqtt_port & 0xFF;
 2546              		.loc 1 535 12 is_stmt 1 view .LVU735
 2547              		.loc 1 535 23 is_stmt 0 view .LVU736
 2548 008e 0A88     		ldrh	r2, [r1]
 2549 0090 5A75     		strb	r2, [r3, #21]
 536:serial.c      ****            break;
 2550              		.loc 1 536 12 is_stmt 1 view .LVU737
 2551              	.LVL146:
 2552              	.L181:
 537:serial.c      ****          case 0x12:
 538:serial.c      ****            memcpy(tcp_tx + 3, ssid, 32);
 539:serial.c      ****            memcpy(tcp_tx + 35, passwd, 32);
 540:serial.c      ****            break;
 541:serial.c      ****          case 0x13:
 542:serial.c      ****            memcpy(tcp_tx + 3, host_url, 64);
 543:serial.c      ****            break;
 544:serial.c      ****          case 0x14:
 545:serial.c      ****            memcpy(tcp_tx + 3, ntp_url, 64);
 546:serial.c      ****            break;
 547:serial.c      ****          case 0x15:
 548:serial.c      ****            memcpy(tcp_tx + 3, login_id, 32);
 549:serial.c      ****            memcpy(tcp_tx + 35, login_pw, 32);
 550:serial.c      ****            break;
 551:serial.c      ****          case 0x16:
 552:serial.c      ****            memcpy(tcp_tx + 3, tx_topic, 32);
 553:serial.c      ****            memcpy(tcp_tx + 35, rx_topic, 32);
 554:serial.c      ****            break;
 555:serial.c      ****       }
 556:serial.c      ****       tcp_tx[67] = ETX;
 2553              		.loc 1 556 7 view .LVU738
 2554              		.loc 1 556 18 is_stmt 0 view .LVU739
 2555 0092 0322     		movs	r2, #3
 2556 0094 3F48     		ldr	r0, .L208
 2557 0096 83F84320 		strb	r2, [r3, #67]
 557:serial.c      ****       bcc = tcp_tx[0];
 2558              		.loc 1 557 7 is_stmt 1 view .LVU740
 2559              	.LVL147:
 558:serial.c      ****       for (idx=1;idx<68;idx++) bcc = bcc ^ tcp_tx[idx];
 2560              		.loc 1 558 7 view .LVU741
 2561              		.loc 1 558 21 discriminator 1 view .LVU742
 557:serial.c      ****       bcc = tcp_tx[0];
 2562              		.loc 1 557 11 is_stmt 0 view .LVU743
 2563 009a 0221     		movs	r1, #2
 556:serial.c      ****       bcc = tcp_tx[0];
 2564              		.loc 1 556 18 view .LVU744
 2565 009c 4322     		movs	r2, #67
 2566              	.LVL148:
 2567              	.L197:
 2568              		.loc 1 558 32 is_stmt 1 discriminator 3 view .LVU745
 2569              		.loc 1 558 36 is_stmt 0 discriminator 3 view .LVU746
 2570 009e 10F8014F 		ldrb	r4, [r0, #1]!	@ zero_extendqisi2
 2571              	.LVL149:
 2572              		.loc 1 558 21 discriminator 1 view .LVU747
 2573 00a2 013A     		subs	r2, r2, #1
 2574 00a4 92B2     		uxth	r2, r2
 2575              		.loc 1 558 36 discriminator 3 view .LVU748
 2576 00a6 6140     		eors	r1, r1, r4
 2577              	.LVL150:
 2578              		.loc 1 558 28 is_stmt 1 discriminator 3 view .LVU749
 2579              		.loc 1 558 21 discriminator 1 view .LVU750
 2580 00a8 002A     		cmp	r2, #0
 2581 00aa F8D1     		bne	.L197
 559:serial.c      ****       tcp_tx[68] = bcc;
 2582              		.loc 1 559 7 view .LVU751
 560:serial.c      ****       tcp_txcnt = 69;
 2583              		.loc 1 560 17 is_stmt 0 view .LVU752
 2584 00ac 434C     		ldr	r4, .L208+40
 559:serial.c      ****       tcp_tx[68] = bcc;
 2585              		.loc 1 559 18 view .LVU753
 2586 00ae 83F84410 		strb	r1, [r3, #68]
 2587              		.loc 1 560 7 is_stmt 1 view .LVU754
 2588              		.loc 1 560 17 is_stmt 0 view .LVU755
 2589 00b2 4523     		movs	r3, #69
 2590 00b4 2380     		strh	r3, [r4]	@ movhi
 561:serial.c      ****       txcnt3 = base64_encode((unsigned char*)tcp_tx, tcp_txcnt, txbuff3);
 2591              		.loc 1 561 7 is_stmt 1 view .LVU756
 2592              		.loc 1 561 16 is_stmt 0 view .LVU757
 2593 00b6 2188     		ldrh	r1, [r4]
 2594              	.LVL151:
 2595              		.loc 1 561 16 view .LVU758
 2596 00b8 414A     		ldr	r2, .L208+44
 2597 00ba 3648     		ldr	r0, .L208
 2598              	.LVL152:
 2599              		.loc 1 561 16 view .LVU759
 2600 00bc 89B2     		uxth	r1, r1
 2601 00be FFF7FEFF 		bl	base64_encode
 2602              	.LVL153:
 2603              		.loc 1 561 14 discriminator 1 view .LVU760
 2604 00c2 404B     		ldr	r3, .L208+48
 562:serial.c      ****       encode = BASE64_ENCODE_OUT_SIZE(tcp_txcnt);
 563:serial.c      ****       if (txcnt3 != (encode - 1)) {
 564:serial.c      ****          //txcnt3 = 0;
 565:serial.c      ****       }
 566:serial.c      ****       tcp_length = txcnt3;
 567:serial.c      ****       memcpy(tcp_tx,txbuff3,tcp_length);
 2605              		.loc 1 567 7 view .LVU761
 2606 00c4 3E49     		ldr	r1, .L208+44
 561:serial.c      ****       txcnt3 = base64_encode((unsigned char*)tcp_tx, tcp_txcnt, txbuff3);
 2607              		.loc 1 561 14 discriminator 1 view .LVU762
 2608 00c6 1880     		strh	r0, [r3]	@ movhi
 562:serial.c      ****       encode = BASE64_ENCODE_OUT_SIZE(tcp_txcnt);
 2609              		.loc 1 562 7 is_stmt 1 view .LVU763
 562:serial.c      ****       encode = BASE64_ENCODE_OUT_SIZE(tcp_txcnt);
 2610              		.loc 1 562 16 is_stmt 0 view .LVU764
 2611 00c8 2288     		ldrh	r2, [r4]
 2612              	.LVL154:
 563:serial.c      ****          //txcnt3 = 0;
 2613              		.loc 1 563 7 is_stmt 1 view .LVU765
 563:serial.c      ****          //txcnt3 = 0;
 2614              		.loc 1 563 18 is_stmt 0 view .LVU766
 2615 00ca 1A88     		ldrh	r2, [r3]
 565:serial.c      ****       tcp_length = txcnt3;
 2616              		.loc 1 565 7 is_stmt 1 view .LVU767
 566:serial.c      ****       memcpy(tcp_tx,txbuff3,tcp_length);
 2617              		.loc 1 566 7 view .LVU768
 566:serial.c      ****       memcpy(tcp_tx,txbuff3,tcp_length);
 2618              		.loc 1 566 18 is_stmt 0 view .LVU769
 2619 00cc 1B88     		ldrh	r3, [r3]
 2620 00ce 3E4A     		ldr	r2, .L208+52
 2621              		.loc 1 567 7 view .LVU770
 2622 00d0 3048     		ldr	r0, .L208
 566:serial.c      ****       memcpy(tcp_tx,txbuff3,tcp_length);
 2623              		.loc 1 566 18 view .LVU771
 2624 00d2 9BB2     		uxth	r3, r3
 2625 00d4 1380     		strh	r3, [r2]	@ movhi
 2626              		.loc 1 567 7 is_stmt 1 view .LVU772
 2627 00d6 1288     		ldrh	r2, [r2]
 2628 00d8 92B2     		uxth	r2, r2
 2629 00da FFF7FEFF 		bl	memcpy
 2630              	.LVL155:
 568:serial.c      ****       tcp_send = 1;
 2631              		.loc 1 568 7 view .LVU773
 2632              		.loc 1 568 16 is_stmt 0 view .LVU774
 2633 00de 3B4A     		ldr	r2, .L208+56
 2634 00e0 0123     		movs	r3, #1
 2635 00e2 1370     		strb	r3, [r2]
 569:serial.c      ****       send_flag = 1;
 2636              		.loc 1 569 7 is_stmt 1 view .LVU775
 2637              		.loc 1 569 17 is_stmt 0 view .LVU776
 2638 00e4 3A4A     		ldr	r2, .L208+60
 2639 00e6 1370     		strb	r3, [r2]
 570:serial.c      **** }
 2640              		.loc 1 570 1 view .LVU777
 2641 00e8 10BD     		pop	{r4, pc}
 2642              	.LVL156:
 2643              	.L187:
 538:serial.c      ****            memcpy(tcp_tx + 35, passwd, 32);
 2644              		.loc 1 538 12 is_stmt 1 view .LVU778
 2645 00ea 3A4A     		ldr	r2, .L208+64
 2646 00ec 3A49     		ldr	r1, .L208+68
 2647 00ee 02F12000 		add	r0, r2, #32
 2648              	.LVL157:
 2649              	.L189:
 538:serial.c      ****            memcpy(tcp_tx + 35, passwd, 32);
 2650              		.loc 1 538 12 is_stmt 0 view .LVU779
 2651 00f2 52F8044B 		ldr	r4, [r2], #4	@ unaligned
 2652 00f6 41F8044B 		str	r4, [r1], #4	@ unaligned
 2653 00fa 8242     		cmp	r2, r0
 2654 00fc F9D1     		bne	.L189
 539:serial.c      ****            break;
 2655              		.loc 1 539 12 is_stmt 1 view .LVU780
 2656 00fe 374A     		ldr	r2, .L208+72
 2657 0100 3749     		ldr	r1, .L208+76
 2658 0102 02F12000 		add	r0, r2, #32
 2659              	.L190:
 2660 0106 52F8044B 		ldr	r4, [r2], #4	@ unaligned
 2661 010a 41F8044B 		str	r4, [r1], #4	@ unaligned
 2662 010e 8242     		cmp	r2, r0
 2663 0110 F9D1     		bne	.L190
 2664 0112 BEE7     		b	.L181
 2665              	.LVL158:
 2666              	.L186:
 542:serial.c      ****            break;
 2667              		.loc 1 542 12 view .LVU781
 2668 0114 334A     		ldr	r2, .L208+80
 2669 0116 3049     		ldr	r1, .L208+68
 2670 0118 02F14000 		add	r0, r2, #64
 2671              	.LVL159:
 2672              	.L191:
 542:serial.c      ****            break;
 2673              		.loc 1 542 12 is_stmt 0 view .LVU782
 2674 011c 52F8044B 		ldr	r4, [r2], #4	@ unaligned
 2675 0120 41F8044B 		str	r4, [r1], #4	@ unaligned
 2676 0124 8242     		cmp	r2, r0
 2677 0126 F9D1     		bne	.L191
 2678 0128 B3E7     		b	.L181
 2679              	.LVL160:
 2680              	.L185:
 545:serial.c      ****            break;
 2681              		.loc 1 545 12 is_stmt 1 view .LVU783
 2682 012a 2F4A     		ldr	r2, .L208+84
 2683 012c 2A49     		ldr	r1, .L208+68
 2684 012e 02F14000 		add	r0, r2, #64
 2685              	.LVL161:
 2686              	.L192:
 545:serial.c      ****            break;
 2687              		.loc 1 545 12 is_stmt 0 view .LVU784
 2688 0132 52F8044B 		ldr	r4, [r2], #4	@ unaligned
 2689 0136 41F8044B 		str	r4, [r1], #4	@ unaligned
 2690 013a 8242     		cmp	r2, r0
 2691 013c F9D1     		bne	.L192
 2692 013e A8E7     		b	.L181
 2693              	.LVL162:
 2694              	.L184:
 548:serial.c      ****            memcpy(tcp_tx + 35, login_pw, 32);
 2695              		.loc 1 548 12 is_stmt 1 view .LVU785
 2696 0140 2A4A     		ldr	r2, .L208+88
 2697 0142 2549     		ldr	r1, .L208+68
 2698 0144 02F12000 		add	r0, r2, #32
 2699              	.LVL163:
 2700              	.L193:
 548:serial.c      ****            memcpy(tcp_tx + 35, login_pw, 32);
 2701              		.loc 1 548 12 is_stmt 0 view .LVU786
 2702 0148 52F8044B 		ldr	r4, [r2], #4	@ unaligned
 2703 014c 41F8044B 		str	r4, [r1], #4	@ unaligned
 2704 0150 8242     		cmp	r2, r0
 2705 0152 F9D1     		bne	.L193
 549:serial.c      ****            break;
 2706              		.loc 1 549 12 is_stmt 1 view .LVU787
 2707 0154 264A     		ldr	r2, .L208+92
 2708 0156 2249     		ldr	r1, .L208+76
 2709 0158 02F12000 		add	r0, r2, #32
 2710              	.L194:
 2711 015c 52F8044B 		ldr	r4, [r2], #4	@ unaligned
 2712 0160 41F8044B 		str	r4, [r1], #4	@ unaligned
 2713 0164 8242     		cmp	r2, r0
 2714 0166 F9D1     		bne	.L194
 2715 0168 93E7     		b	.L181
 2716              	.LVL164:
 2717              	.L182:
 552:serial.c      ****            memcpy(tcp_tx + 35, rx_topic, 32);
 2718              		.loc 1 552 12 view .LVU788
 2719 016a 224A     		ldr	r2, .L208+96
 2720 016c 1A49     		ldr	r1, .L208+68
 2721 016e 02F12000 		add	r0, r2, #32
 2722              	.LVL165:
 2723              	.L195:
 552:serial.c      ****            memcpy(tcp_tx + 35, rx_topic, 32);
 2724              		.loc 1 552 12 is_stmt 0 view .LVU789
 2725 0172 52F8044B 		ldr	r4, [r2], #4	@ unaligned
 2726 0176 41F8044B 		str	r4, [r1], #4	@ unaligned
 2727 017a 8242     		cmp	r2, r0
 2728 017c F9D1     		bne	.L195
 553:serial.c      ****            break;
 2729              		.loc 1 553 12 is_stmt 1 view .LVU790
 2730 017e 1E4A     		ldr	r2, .L208+100
 2731 0180 1749     		ldr	r1, .L208+76
 2732 0182 02F12000 		add	r0, r2, #32
 2733              	.L196:
 2734 0186 52F8044B 		ldr	r4, [r2], #4	@ unaligned
 2735 018a 41F8044B 		str	r4, [r1], #4	@ unaligned
 2736 018e 8242     		cmp	r2, r0
 2737 0190 F9D1     		bne	.L196
 2738 0192 7EE7     		b	.L181
 2739              	.L209:
 2740              		.align	2
 2741              	.L208:
 2742 0194 00000000 		.word	tcp_tx
 2743 0198 00000000 		.word	wifi_power
 2744 019c 00000000 		.word	dhcp_disable
 2745 01a0 00000000 		.word	keep_alive_time
 2746 01a4 00000000 		.word	mqtt_mode
 2747 01a8 00000000 		.word	ap_mode
 2748 01ac 00000000 		.word	m_ip
 2749 01b0 00000000 		.word	m_gw
 2750 01b4 00000000 		.word	m_nm
 2751 01b8 00000000 		.word	mqtt_port
 2752 01bc 00000000 		.word	tcp_txcnt
 2753 01c0 00000000 		.word	txbuff3
 2754 01c4 00000000 		.word	txcnt3
 2755 01c8 00000000 		.word	tcp_length
 2756 01cc 00000000 		.word	tcp_send
 2757 01d0 00000000 		.word	send_flag
 2758 01d4 00000000 		.word	ssid
 2759 01d8 03000000 		.word	tcp_tx+3
 2760 01dc 00000000 		.word	passwd
 2761 01e0 23000000 		.word	tcp_tx+35
 2762 01e4 00000000 		.word	host_url
 2763 01e8 00000000 		.word	ntp_url
 2764 01ec 00000000 		.word	login_id
 2765 01f0 00000000 		.word	login_pw
 2766 01f4 00000000 		.word	tx_topic
 2767 01f8 00000000 		.word	rx_topic
 2768              		.cfi_endproc
 2769              	.LFE143:
 2771              		.section	.text.send_board_data,"ax",%progbits
 2772              		.align	1
 2773              		.global	send_board_data
 2774              		.syntax unified
 2775              		.thumb
 2776              		.thumb_func
 2778              	send_board_data:
 2779              	.LFB144:
 571:serial.c      **** 
 572:serial.c      **** 
 573:serial.c      **** void send_board_data (void)
 574:serial.c      **** {
 2780              		.loc 1 574 1 view -0
 2781              		.cfi_startproc
 2782              		@ args = 0, pretend = 0, frame = 0
 2783              		@ frame_needed = 0, uses_anonymous_args = 0
 575:serial.c      ****       unsigned short idx,encode;
 2784              		.loc 1 575 7 view .LVU792
 576:serial.c      ****       unsigned char bcc;
 2785              		.loc 1 576 7 view .LVU793
 577:serial.c      ****       tcp_tx[0] = STX;
 2786              		.loc 1 577 7 view .LVU794
 2787              		.loc 1 577 17 is_stmt 0 view .LVU795
 2788 0000 2B4B     		ldr	r3, .L213
 578:serial.c      ****       tcp_tx[1] = 0x42;
 579:serial.c      ****       tcp_tx[2] = (adc_temperature >> 8) & 0xFF;
 2789              		.loc 1 579 17 view .LVU796
 2790 0002 2C48     		ldr	r0, .L213+4
 578:serial.c      ****       tcp_tx[1] = 0x42;
 2791              		.loc 1 578 17 view .LVU797
 2792 0004 4221     		movs	r1, #66
 574:serial.c      ****       unsigned short idx,encode;
 2793              		.loc 1 574 1 view .LVU798
 2794 0006 10B5     		push	{r4, lr}
 2795              		.cfi_def_cfa_offset 8
 2796              		.cfi_offset 4, -8
 2797              		.cfi_offset 14, -4
 578:serial.c      ****       tcp_tx[1] = 0x42;
 2798              		.loc 1 578 17 view .LVU799
 2799 0008 5970     		strb	r1, [r3, #1]
 2800              		.loc 1 579 17 view .LVU800
 2801 000a 0188     		ldrh	r1, [r0]
 2802 000c 41F30721 		sbfx	r1, r1, #8, #8
 2803 0010 9970     		strb	r1, [r3, #2]
 580:serial.c      ****       tcp_tx[3] = adc_temperature & 0xFF;
 2804              		.loc 1 580 17 view .LVU801
 2805 0012 0188     		ldrh	r1, [r0]
 581:serial.c      ****       tcp_tx[4] = (adc_voltage1 >> 8) & 0xFF;
 2806              		.loc 1 581 17 view .LVU802
 2807 0014 2848     		ldr	r0, .L213+8
 580:serial.c      ****       tcp_tx[3] = adc_temperature & 0xFF;
 2808              		.loc 1 580 17 view .LVU803
 2809 0016 D970     		strb	r1, [r3, #3]
 2810              		.loc 1 581 17 view .LVU804
 2811 0018 0188     		ldrh	r1, [r0]
 2812 001a 41F30721 		sbfx	r1, r1, #8, #8
 2813 001e 1971     		strb	r1, [r3, #4]
 582:serial.c      ****       tcp_tx[5] = adc_voltage1 & 0xFF;
 2814              		.loc 1 582 17 view .LVU805
 2815 0020 0188     		ldrh	r1, [r0]
 583:serial.c      ****       tcp_tx[6] = (adc_voltage2 >> 8) & 0xFF;
 2816              		.loc 1 583 17 view .LVU806
 2817 0022 2648     		ldr	r0, .L213+12
 582:serial.c      ****       tcp_tx[5] = adc_voltage1 & 0xFF;
 2818              		.loc 1 582 17 view .LVU807
 2819 0024 5971     		strb	r1, [r3, #5]
 2820              		.loc 1 583 17 view .LVU808
 2821 0026 0188     		ldrh	r1, [r0]
 2822 0028 41F30721 		sbfx	r1, r1, #8, #8
 2823 002c 9971     		strb	r1, [r3, #6]
 584:serial.c      ****       tcp_tx[7] = adc_voltage2 & 0xFF;
 2824              		.loc 1 584 17 view .LVU809
 2825 002e 0188     		ldrh	r1, [r0]
 2826 0030 D971     		strb	r1, [r3, #7]
 585:serial.c      ****       tcp_tx[8] = (dac >> 8) & 0xFF;
 2827              		.loc 1 585 17 view .LVU810
 2828 0032 2349     		ldr	r1, .L213+16
 2829 0034 0988     		ldrh	r1, [r1]
 2830 0036 C1F30721 		ubfx	r1, r1, #8, #8
 2831 003a 1972     		strb	r1, [r3, #8]
 586:serial.c      ****       tcp_tx[9] = send_dac & 0xFF;
 2832              		.loc 1 586 17 view .LVU811
 2833 003c 2149     		ldr	r1, .L213+20
 2834 003e 0988     		ldrh	r1, [r1]
 2835 0040 5972     		strb	r1, [r3, #9]
 587:serial.c      ****       tcp_tx[10] = read_key;
 2836              		.loc 1 587 18 view .LVU812
 2837 0042 2149     		ldr	r1, .L213+24
 2838 0044 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2839 0046 9972     		strb	r1, [r3, #10]
 588:serial.c      ****       tcp_tx[11] = led1;
 2840              		.loc 1 588 18 view .LVU813
 2841 0048 2049     		ldr	r1, .L213+28
 2842 004a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2843 004c D972     		strb	r1, [r3, #11]
 589:serial.c      ****       tcp_tx[12] = led2;
 2844              		.loc 1 589 18 view .LVU814
 2845 004e 2049     		ldr	r1, .L213+32
 2846 0050 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2847 0052 1973     		strb	r1, [r3, #12]
 590:serial.c      ****       tcp_tx[13] = buz;
 2848              		.loc 1 590 18 view .LVU815
 2849 0054 1F49     		ldr	r1, .L213+36
 2850 0056 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 2851 0058 5973     		strb	r1, [r3, #13]
 577:serial.c      ****       tcp_tx[1] = 0x42;
 2852              		.loc 1 577 17 view .LVU816
 2853 005a 0222     		movs	r2, #2
 591:serial.c      ****       tcp_tx[14] = ETX;
 2854              		.loc 1 591 18 view .LVU817
 2855 005c 0321     		movs	r1, #3
 2856 005e 9973     		strb	r1, [r3, #14]
 577:serial.c      ****       tcp_tx[1] = 0x42;
 2857              		.loc 1 577 17 view .LVU818
 2858 0060 1A70     		strb	r2, [r3]
 578:serial.c      ****       tcp_tx[2] = (adc_temperature >> 8) & 0xFF;
 2859              		.loc 1 578 7 is_stmt 1 view .LVU819
 579:serial.c      ****       tcp_tx[3] = adc_temperature & 0xFF;
 2860              		.loc 1 579 7 view .LVU820
 580:serial.c      ****       tcp_tx[4] = (adc_voltage1 >> 8) & 0xFF;
 2861              		.loc 1 580 7 view .LVU821
 581:serial.c      ****       tcp_tx[5] = adc_voltage1 & 0xFF;
 2862              		.loc 1 581 7 view .LVU822
 582:serial.c      ****       tcp_tx[6] = (adc_voltage2 >> 8) & 0xFF;
 2863              		.loc 1 582 7 view .LVU823
 583:serial.c      ****       tcp_tx[7] = adc_voltage2 & 0xFF;
 2864              		.loc 1 583 7 view .LVU824
 584:serial.c      ****       tcp_tx[8] = (dac >> 8) & 0xFF;
 2865              		.loc 1 584 7 view .LVU825
 585:serial.c      ****       tcp_tx[9] = send_dac & 0xFF;
 2866              		.loc 1 585 7 view .LVU826
 586:serial.c      ****       tcp_tx[10] = read_key;
 2867              		.loc 1 586 7 view .LVU827
 587:serial.c      ****       tcp_tx[11] = led1;
 2868              		.loc 1 587 7 view .LVU828
 588:serial.c      ****       tcp_tx[12] = led2;
 2869              		.loc 1 588 7 view .LVU829
 589:serial.c      ****       tcp_tx[13] = buz;
 2870              		.loc 1 589 7 view .LVU830
 590:serial.c      ****       tcp_tx[14] = ETX;
 2871              		.loc 1 590 7 view .LVU831
 2872              		.loc 1 591 7 view .LVU832
 592:serial.c      ****       bcc = tcp_tx[0];
 2873              		.loc 1 592 7 view .LVU833
 2874              	.LVL166:
 593:serial.c      ****       for (idx=1;idx<15;idx++) bcc = bcc ^ tcp_tx[idx];
 2875              		.loc 1 593 7 view .LVU834
 2876              		.loc 1 593 21 discriminator 1 view .LVU835
 591:serial.c      ****       bcc = tcp_tx[0];
 2877              		.loc 1 591 18 is_stmt 0 view .LVU836
 2878 0062 0E21     		movs	r1, #14
 2879 0064 1846     		mov	r0, r3
 2880              	.LVL167:
 2881              	.L211:
 2882              		.loc 1 593 32 is_stmt 1 discriminator 3 view .LVU837
 2883              		.loc 1 593 36 is_stmt 0 discriminator 3 view .LVU838
 2884 0066 13F8014F 		ldrb	r4, [r3, #1]!	@ zero_extendqisi2
 2885              	.LVL168:
 2886              		.loc 1 593 21 discriminator 1 view .LVU839
 2887 006a 0139     		subs	r1, r1, #1
 2888 006c 89B2     		uxth	r1, r1
 2889              		.loc 1 593 36 discriminator 3 view .LVU840
 2890 006e 6240     		eors	r2, r2, r4
 2891              	.LVL169:
 2892              		.loc 1 593 28 is_stmt 1 discriminator 3 view .LVU841
 2893              		.loc 1 593 21 discriminator 1 view .LVU842
 2894 0070 0029     		cmp	r1, #0
 2895 0072 F8D1     		bne	.L211
 594:serial.c      ****       tcp_tx[15] = bcc;
 2896              		.loc 1 594 7 view .LVU843
 595:serial.c      ****       tcp_txcnt = 16;
 2897              		.loc 1 595 17 is_stmt 0 view .LVU844
 2898 0074 184C     		ldr	r4, .L213+40
 594:serial.c      ****       tcp_tx[15] = bcc;
 2899              		.loc 1 594 18 view .LVU845
 2900 0076 C273     		strb	r2, [r0, #15]
 2901              		.loc 1 595 7 is_stmt 1 view .LVU846
 2902              		.loc 1 595 17 is_stmt 0 view .LVU847
 2903 0078 1023     		movs	r3, #16
 2904              	.LVL170:
 2905              		.loc 1 595 17 view .LVU848
 2906 007a 2380     		strh	r3, [r4]	@ movhi
 596:serial.c      ****       txcnt3 = base64_encode((unsigned char*)tcp_tx, tcp_txcnt, txbuff3);
 2907              		.loc 1 596 7 is_stmt 1 view .LVU849
 2908              		.loc 1 596 16 is_stmt 0 view .LVU850
 2909 007c 2188     		ldrh	r1, [r4]
 2910 007e 174A     		ldr	r2, .L213+44
 2911              	.LVL171:
 2912              		.loc 1 596 16 view .LVU851
 2913 0080 0B48     		ldr	r0, .L213
 2914              		.loc 1 596 16 view .LVU852
 2915 0082 89B2     		uxth	r1, r1
 2916 0084 FFF7FEFF 		bl	base64_encode
 2917              	.LVL172:
 2918              		.loc 1 596 14 discriminator 1 view .LVU853
 2919 0088 154B     		ldr	r3, .L213+48
 597:serial.c      ****       encode = BASE64_ENCODE_OUT_SIZE(tcp_txcnt);
 598:serial.c      ****       if (txcnt3 != (encode - 1)) {
 599:serial.c      ****          //txcnt3 = 0;
 600:serial.c      ****       }
 601:serial.c      ****       tcp_length = txcnt3;
 602:serial.c      ****       memcpy(tcp_tx,txbuff3,tcp_length);
 2920              		.loc 1 602 7 view .LVU854
 2921 008a 1449     		ldr	r1, .L213+44
 596:serial.c      ****       txcnt3 = base64_encode((unsigned char*)tcp_tx, tcp_txcnt, txbuff3);
 2922              		.loc 1 596 14 discriminator 1 view .LVU855
 2923 008c 1880     		strh	r0, [r3]	@ movhi
 597:serial.c      ****       encode = BASE64_ENCODE_OUT_SIZE(tcp_txcnt);
 2924              		.loc 1 597 7 is_stmt 1 view .LVU856
 597:serial.c      ****       encode = BASE64_ENCODE_OUT_SIZE(tcp_txcnt);
 2925              		.loc 1 597 16 is_stmt 0 view .LVU857
 2926 008e 2288     		ldrh	r2, [r4]
 2927              	.LVL173:
 598:serial.c      ****          //txcnt3 = 0;
 2928              		.loc 1 598 7 is_stmt 1 view .LVU858
 598:serial.c      ****          //txcnt3 = 0;
 2929              		.loc 1 598 18 is_stmt 0 view .LVU859
 2930 0090 1A88     		ldrh	r2, [r3]
 600:serial.c      ****       tcp_length = txcnt3;
 2931              		.loc 1 600 7 is_stmt 1 view .LVU860
 601:serial.c      ****       memcpy(tcp_tx,txbuff3,tcp_length);
 2932              		.loc 1 601 7 view .LVU861
 601:serial.c      ****       memcpy(tcp_tx,txbuff3,tcp_length);
 2933              		.loc 1 601 18 is_stmt 0 view .LVU862
 2934 0092 1B88     		ldrh	r3, [r3]
 2935 0094 134A     		ldr	r2, .L213+52
 2936              		.loc 1 602 7 view .LVU863
 2937 0096 0648     		ldr	r0, .L213
 601:serial.c      ****       memcpy(tcp_tx,txbuff3,tcp_length);
 2938              		.loc 1 601 18 view .LVU864
 2939 0098 9BB2     		uxth	r3, r3
 2940 009a 1380     		strh	r3, [r2]	@ movhi
 2941              		.loc 1 602 7 is_stmt 1 view .LVU865
 2942 009c 1288     		ldrh	r2, [r2]
 2943 009e 92B2     		uxth	r2, r2
 2944 00a0 FFF7FEFF 		bl	memcpy
 2945              	.LVL174:
 603:serial.c      ****       mqtt_send = 1;
 2946              		.loc 1 603 7 view .LVU866
 2947              		.loc 1 603 17 is_stmt 0 view .LVU867
 2948 00a4 104A     		ldr	r2, .L213+56
 2949 00a6 0123     		movs	r3, #1
 2950 00a8 1370     		strb	r3, [r2]
 604:serial.c      ****       send_flag = 1;
 2951              		.loc 1 604 7 is_stmt 1 view .LVU868
 2952              		.loc 1 604 17 is_stmt 0 view .LVU869
 2953 00aa 104A     		ldr	r2, .L213+60
 2954 00ac 1370     		strb	r3, [r2]
 605:serial.c      **** }
 2955              		.loc 1 605 1 view .LVU870
 2956 00ae 10BD     		pop	{r4, pc}
 2957              	.L214:
 2958              		.align	2
 2959              	.L213:
 2960 00b0 00000000 		.word	tcp_tx
 2961 00b4 00000000 		.word	adc_temperature
 2962 00b8 00000000 		.word	adc_voltage1
 2963 00bc 00000000 		.word	adc_voltage2
 2964 00c0 00000000 		.word	dac
 2965 00c4 00000000 		.word	send_dac
 2966 00c8 00000000 		.word	read_key
 2967 00cc 00000000 		.word	led1
 2968 00d0 00000000 		.word	led2
 2969 00d4 00000000 		.word	buz
 2970 00d8 00000000 		.word	tcp_txcnt
 2971 00dc 00000000 		.word	txbuff3
 2972 00e0 00000000 		.word	txcnt3
 2973 00e4 00000000 		.word	tcp_length
 2974 00e8 00000000 		.word	mqtt_send
 2975 00ec 00000000 		.word	send_flag
 2976              		.cfi_endproc
 2977              	.LFE144:
 2979              		.section	.rodata.rx_check.str1.1,"aMS",%progbits,1
 2980              	.LC0:
 2981 0000 52583A20 		.ascii	"RX:                  \000"
 2981      20202020 
 2981      20202020 
 2981      20202020 
 2981      20202020 
 2982              	.LC1:
 2983 0016 52583A20 		.ascii	"RX: %s \000"
 2983      25732000 
 2984              		.section	.text.rx_check,"ax",%progbits
 2985              		.align	1
 2986              		.global	rx_check
 2987              		.syntax unified
 2988              		.thumb
 2989              		.thumb_func
 2991              	rx_check:
 2992              	.LVL175:
 2993              	.LFB145:
 606:serial.c      **** 
 607:serial.c      **** 
 608:serial.c      **** void rx_check (char *rxbuff, unsigned short rxcnt)
 609:serial.c      **** {
 2994              		.loc 1 609 1 is_stmt 1 view -0
 2995              		.cfi_startproc
 2996              		@ args = 0, pretend = 0, frame = 0
 2997              		@ frame_needed = 0, uses_anonymous_args = 0
 610:serial.c      ****       unsigned short idx,decode;
 2998              		.loc 1 610 7 view .LVU872
 611:serial.c      ****       unsigned char bcc;
 2999              		.loc 1 611 7 view .LVU873
 612:serial.c      ****       tcp_rxcnt = base64_decode(rxbuff, rxcnt, (unsigned char *)net_rx);
 3000              		.loc 1 612 7 view .LVU874
 609:serial.c      ****       unsigned short idx,decode;
 3001              		.loc 1 609 1 is_stmt 0 view .LVU875
 3002 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3003              		.cfi_def_cfa_offset 32
 3004              		.cfi_offset 4, -32
 3005              		.cfi_offset 5, -28
 3006              		.cfi_offset 6, -24
 3007              		.cfi_offset 7, -20
 3008              		.cfi_offset 8, -16
 3009              		.cfi_offset 9, -12
 3010              		.cfi_offset 10, -8
 3011              		.cfi_offset 14, -4
 3012              		.loc 1 612 19 view .LVU876
 3013 0004 AB4C     		ldr	r4, .L270
 3014              		.loc 1 612 17 discriminator 1 view .LVU877
 3015 0006 AC4D     		ldr	r5, .L270+4
 3016              		.loc 1 612 19 view .LVU878
 3017 0008 2246     		mov	r2, r4
 3018 000a FFF7FEFF 		bl	base64_decode
 3019              	.LVL176:
 613:serial.c      ****       decode = BASE64_DECODE_OUT_SIZE(rxcnt);
 614:serial.c      ****       if (decode) {
 3020              		.loc 1 614 10 view .LVU879
 3021 000e 0329     		cmp	r1, #3
 612:serial.c      ****       decode = BASE64_DECODE_OUT_SIZE(rxcnt);
 3022              		.loc 1 612 17 discriminator 1 view .LVU880
 3023 0010 2880     		strh	r0, [r5]	@ movhi
 613:serial.c      ****       decode = BASE64_DECODE_OUT_SIZE(rxcnt);
 3024              		.loc 1 613 7 is_stmt 1 view .LVU881
 3025              	.LVL177:
 3026              		.loc 1 614 7 view .LVU882
 3027              		.loc 1 614 10 is_stmt 0 view .LVU883
 3028 0012 40F29881 		bls	.L215
 3029              	.LBB24:
 3030              	.LBI24:
 608:serial.c      **** {
 3031              		.loc 1 608 6 is_stmt 1 view .LVU884
 3032              	.LVL178:
 3033              	.LBB25:
 615:serial.c      ****          if ((net_rx[0] == STX) && (net_rx[1] == 0x41) && (net_rx[67] == ETX) && (tcp_rxcnt >= 69))
 3034              		.loc 1 615 10 view .LVU885
 3035              		.loc 1 615 21 is_stmt 0 view .LVU886
 3036 0016 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 3037              		.loc 1 615 13 view .LVU887
 3038 0018 022A     		cmp	r2, #2
 3039 001a 3DD1     		bne	.L218
 3040              		.loc 1 615 33 discriminator 1 view .LVU888
 3041 001c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 3042 001e 412B     		cmp	r3, #65
 3043 0020 3AD1     		bne	.L218
 3044              		.loc 1 615 56 discriminator 2 view .LVU889
 3045 0022 94F84330 		ldrb	r3, [r4, #67]	@ zero_extendqisi2
 3046 0026 032B     		cmp	r3, #3
 3047 0028 36D1     		bne	.L218
 3048              		.loc 1 615 93 discriminator 3 view .LVU890
 3049 002a 2B88     		ldrh	r3, [r5]
 3050 002c 9BB2     		uxth	r3, r3
 3051              		.loc 1 615 79 discriminator 3 view .LVU891
 3052 002e 442B     		cmp	r3, #68
 3053 0030 32D9     		bls	.L218
 3054 0032 2146     		mov	r1, r4
 3055              	.LVL179:
 3056              		.loc 1 615 79 discriminator 3 view .LVU892
 3057 0034 4323     		movs	r3, #67
 3058              	.L219:
 3059              	.LVL180:
 616:serial.c      ****             bcc = net_rx[0];
 617:serial.c      ****             for (idx=1;idx<68;idx++) bcc = bcc ^ net_rx[idx];
 3060              		.loc 1 617 38 is_stmt 1 discriminator 3 view .LVU893
 3061              		.loc 1 617 42 is_stmt 0 discriminator 3 view .LVU894
 3062 0036 11F8010F 		ldrb	r0, [r1, #1]!	@ zero_extendqisi2
 3063              	.LVL181:
 3064              		.loc 1 617 27 discriminator 1 view .LVU895
 3065 003a 013B     		subs	r3, r3, #1
 3066 003c 9BB2     		uxth	r3, r3
 3067              		.loc 1 617 42 discriminator 3 view .LVU896
 3068 003e 4240     		eors	r2, r2, r0
 3069              	.LVL182:
 3070              		.loc 1 617 34 is_stmt 1 discriminator 3 view .LVU897
 3071              		.loc 1 617 27 discriminator 1 view .LVU898
 3072 0040 002B     		cmp	r3, #0
 3073 0042 F8D1     		bne	.L219
 618:serial.c      ****             if (bcc == net_rx[68]) {
 3074              		.loc 1 618 13 view .LVU899
 3075              		.loc 1 618 16 is_stmt 0 view .LVU900
 3076 0044 94F84410 		ldrb	r1, [r4, #68]	@ zero_extendqisi2
 3077              	.LVL183:
 3078              		.loc 1 618 16 view .LVU901
 3079 0048 9142     		cmp	r1, r2
 3080 004a 25D1     		bne	.L218
 619:serial.c      ****                ap_mode_time = 0;
 3081              		.loc 1 619 16 is_stmt 1 view .LVU902
 620:serial.c      ****                switch (net_rx[2]) {
 3082              		.loc 1 620 30 is_stmt 0 view .LVU903
 3083 004c A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 619:serial.c      ****                ap_mode_time = 0;
 3084              		.loc 1 619 29 view .LVU904
 3085 004e 9B4A     		ldr	r2, .L270+8
 3086              	.LVL184:
 3087              		.loc 1 620 16 view .LVU905
 3088 0050 2528     		cmp	r0, #37
 619:serial.c      ****                ap_mode_time = 0;
 3089              		.loc 1 619 29 view .LVU906
 3090 0052 1360     		str	r3, [r2]
 3091              		.loc 1 620 16 is_stmt 1 view .LVU907
 3092 0054 1DD8     		bhi	.L220
 3093 0056 0F28     		cmp	r0, #15
 3094 0058 1ED9     		bls	.L218
 3095 005a A0F11003 		sub	r3, r0, #16
 3096 005e 152B     		cmp	r3, #21
 3097 0060 1AD8     		bhi	.L218
 3098 0062 DFE813F0 		tbh	[pc, r3, lsl #1]
 3099              	.L222:
 3100 0066 A200     		.2byte	(.L267-.L222)/2
 3101 0068 A200     		.2byte	(.L267-.L222)/2
 3102 006a A200     		.2byte	(.L267-.L222)/2
 3103 006c A200     		.2byte	(.L267-.L222)/2
 3104 006e A200     		.2byte	(.L267-.L222)/2
 3105 0070 A200     		.2byte	(.L267-.L222)/2
 3106 0072 A200     		.2byte	(.L267-.L222)/2
 3107 0074 1900     		.2byte	(.L218-.L222)/2
 3108 0076 1900     		.2byte	(.L218-.L222)/2
 3109 0078 1900     		.2byte	(.L218-.L222)/2
 3110 007a 1900     		.2byte	(.L218-.L222)/2
 3111 007c 1900     		.2byte	(.L218-.L222)/2
 3112 007e 1900     		.2byte	(.L218-.L222)/2
 3113 0080 1900     		.2byte	(.L218-.L222)/2
 3114 0082 1900     		.2byte	(.L218-.L222)/2
 3115 0084 1900     		.2byte	(.L218-.L222)/2
 3116 0086 A500     		.2byte	(.L227-.L222)/2
 3117 0088 C600     		.2byte	(.L226-.L222)/2
 3118 008a DC00     		.2byte	(.L225-.L222)/2
 3119 008c E800     		.2byte	(.L224-.L222)/2
 3120 008e F400     		.2byte	(.L223-.L222)/2
 3121 0090 0A01     		.2byte	(.L221-.L222)/2
 3122              		.p2align 1
 3123              	.L220:
 3124 0092 5028     		cmp	r0, #80
 3125 0094 00F08680 		beq	.L229
 3126              	.LVL185:
 3127              	.L218:
 621:serial.c      ****                   case 0x10:
 622:serial.c      ****                   case 0x11:
 623:serial.c      ****                   case 0x12:
 624:serial.c      ****                   case 0x13:
 625:serial.c      ****                   case 0x14:
 626:serial.c      ****                   case 0x15:
 627:serial.c      ****                   case 0x16:
 628:serial.c      ****                     send_server_data(net_rx[2]);
 629:serial.c      ****                     break;
 630:serial.c      ****                   case 0x50:
 631:serial.c      ****                     reboot_flag = 1;
 632:serial.c      ****                     send_server_data(0x50);
 633:serial.c      ****                     break;
 634:serial.c      ****                   case 0x20:
 635:serial.c      ****                     wifi_power = net_rx[3];
 636:serial.c      ****                     dhcp_disable = net_rx[4];
 637:serial.c      ****                     keep_alive_time = net_rx[5];
 638:serial.c      ****                     mqtt_mode = net_rx[6];
 639:serial.c      ****                     ap_mode = net_rx[7];
 640:serial.c      ****                     m_ip = (net_rx[8] & 0xFF) << 24 | (net_rx[9] & 0xFF) << 16 | (net_rx[10] & 0xFF
 641:serial.c      ****                     m_gw = (net_rx[12] & 0xFF) << 24 | (net_rx[13] & 0xFF) << 16 | (net_rx[14] & 0x
 642:serial.c      ****                     m_nm = (net_rx[16] & 0xFF) << 24 | (net_rx[17] & 0xFF) << 16 | (net_rx[18] & 0x
 643:serial.c      ****                     mqtt_port = (unsigned short)(((net_rx[20] & 0xFF) << 8) + (net_rx[21] & 0xFF));
 644:serial.c      ****                     send_server_data(0x30);
 645:serial.c      ****                     break;
 646:serial.c      ****                   case 0x21:
 647:serial.c      ****                     memcpy(ssid, net_rx + 3, 32);
 648:serial.c      ****                     memcpy(passwd, net_rx + 35, 32);
 649:serial.c      ****                     send_server_data(0x31);
 650:serial.c      ****                     break;
 651:serial.c      ****                   case 0x22:
 652:serial.c      ****                     memcpy(host_url, net_rx + 3, 64);
 653:serial.c      ****                     send_server_data(0x32);
 654:serial.c      ****                     break;
 655:serial.c      ****                   case 0x23:
 656:serial.c      ****                     memcpy(ntp_url, net_rx + 3, 64);
 657:serial.c      ****                     send_server_data(0x33);
 658:serial.c      ****                     break;
 659:serial.c      ****                   case 0x24:
 660:serial.c      ****                     memcpy(login_id, net_rx + 3, 32);
 661:serial.c      ****                     memcpy(login_pw, net_rx + 35, 32);
 662:serial.c      ****                     send_server_data(0x34);
 663:serial.c      ****                     break;
 664:serial.c      ****                   case 0x25:
 665:serial.c      ****                     memcpy(tx_topic, net_rx + 3, 32);
 666:serial.c      ****                     memcpy(rx_topic, net_rx + 35, 32);
 667:serial.c      ****                     send_server_data(0x35);
 668:serial.c      ****                     write_wifi_data();
 669:serial.c      ****                     break;
 670:serial.c      ****                }
 671:serial.c      ****             }
 672:serial.c      ****          }
 673:serial.c      ****          if ((net_rx[0] == STX) && (net_rx[1] == 0x42) && (net_rx[23] == ETX) && (tcp_rxcnt >= 25))
 3128              		.loc 1 673 10 view .LVU908
 3129              		.loc 1 673 21 is_stmt 0 view .LVU909
 3130 0098 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 3131              		.loc 1 673 13 view .LVU910
 3132 009a 022A     		cmp	r2, #2
 3133 009c 40F05381 		bne	.L215
 3134              		.loc 1 673 33 discriminator 1 view .LVU911
 3135 00a0 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 3136 00a2 422B     		cmp	r3, #66
 3137 00a4 40F04F81 		bne	.L215
 3138              		.loc 1 673 56 discriminator 2 view .LVU912
 3139 00a8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 3140 00aa 032B     		cmp	r3, #3
 3141 00ac 40F04B81 		bne	.L215
 3142              		.loc 1 673 93 discriminator 3 view .LVU913
 3143 00b0 2B88     		ldrh	r3, [r5]
 3144 00b2 9BB2     		uxth	r3, r3
 3145              		.loc 1 673 79 discriminator 3 view .LVU914
 3146 00b4 182B     		cmp	r3, #24
 3147 00b6 40F24681 		bls	.L215
 3148 00ba 7E49     		ldr	r1, .L270
 3149 00bc 1723     		movs	r3, #23
 3150              	.L239:
 3151              	.LVL186:
 674:serial.c      ****             bcc = net_rx[0];
 675:serial.c      ****             for (idx=1;idx<24;idx++) bcc = bcc ^ net_rx[idx];
 3152              		.loc 1 675 38 is_stmt 1 discriminator 3 view .LVU915
 3153              		.loc 1 675 42 is_stmt 0 discriminator 3 view .LVU916
 3154 00be 11F8010F 		ldrb	r0, [r1, #1]!	@ zero_extendqisi2
 3155              	.LVL187:
 3156              		.loc 1 675 27 discriminator 1 view .LVU917
 3157 00c2 013B     		subs	r3, r3, #1
 3158 00c4 9BB2     		uxth	r3, r3
 3159              		.loc 1 675 42 discriminator 3 view .LVU918
 3160 00c6 4240     		eors	r2, r2, r0
 3161              	.LVL188:
 3162              		.loc 1 675 34 is_stmt 1 discriminator 3 view .LVU919
 3163              		.loc 1 675 27 discriminator 1 view .LVU920
 3164 00c8 002B     		cmp	r3, #0
 3165 00ca F8D1     		bne	.L239
 676:serial.c      ****             if (bcc == net_rx[24]) {
 3166              		.loc 1 676 13 view .LVU921
 3167              		.loc 1 676 16 is_stmt 0 view .LVU922
 3168 00cc 217E     		ldrb	r1, [r4, #24]	@ zero_extendqisi2
 3169              	.LVL189:
 3170              		.loc 1 676 16 view .LVU923
 3171 00ce 9142     		cmp	r1, r2
 3172 00d0 40F03981 		bne	.L215
 677:serial.c      ****                ap_mode_time = 0;
 3173              		.loc 1 677 16 is_stmt 1 view .LVU924
 3174              		.loc 1 677 29 is_stmt 0 view .LVU925
 3175 00d4 794A     		ldr	r2, .L270+8
 3176              	.LVL190:
 678:serial.c      ****                remote = net_rx[2];
 3177              		.loc 1 678 23 view .LVU926
 3178 00d6 DFF85C92 		ldr	r9, .L270+128
 677:serial.c      ****                ap_mode_time = 0;
 3179              		.loc 1 677 29 view .LVU927
 3180 00da 1360     		str	r3, [r2]
 3181              		.loc 1 678 16 is_stmt 1 view .LVU928
 679:serial.c      ****                led1 = net_rx[3];
 3182              		.loc 1 679 21 is_stmt 0 view .LVU929
 3183 00dc DFF85882 		ldr	r8, .L270+132
 678:serial.c      ****                remote = net_rx[2];
 3184              		.loc 1 678 31 view .LVU930
 3185 00e0 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 678:serial.c      ****                remote = net_rx[2];
 3186              		.loc 1 678 23 view .LVU931
 3187 00e2 89F80030 		strb	r3, [r9]
 3188              		.loc 1 679 16 is_stmt 1 view .LVU932
 680:serial.c      ****                led2 = net_rx[4];
 3189              		.loc 1 680 21 is_stmt 0 view .LVU933
 3190 00e6 764F     		ldr	r7, .L270+12
 679:serial.c      ****                led1 = net_rx[3];
 3191              		.loc 1 679 29 view .LVU934
 3192 00e8 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 679:serial.c      ****                led1 = net_rx[3];
 3193              		.loc 1 679 21 view .LVU935
 3194 00ea 88F80030 		strb	r3, [r8]
 3195              		.loc 1 680 16 is_stmt 1 view .LVU936
 681:serial.c      ****                buz = net_rx[5];
 3196              		.loc 1 681 20 is_stmt 0 view .LVU937
 3197 00ee 754D     		ldr	r5, .L270+16
 680:serial.c      ****                led2 = net_rx[4];
 3198              		.loc 1 680 29 view .LVU938
 3199 00f0 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 680:serial.c      ****                led2 = net_rx[4];
 3200              		.loc 1 680 21 view .LVU939
 3201 00f2 3B70     		strb	r3, [r7]
 3202              		.loc 1 681 16 is_stmt 1 view .LVU940
 3203              		.loc 1 681 28 is_stmt 0 view .LVU941
 3204 00f4 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 3205              		.loc 1 681 20 view .LVU942
 3206 00f6 2B70     		strb	r3, [r5]
 682:serial.c      ****                dac = (net_rx[6] & 0xFF) << 8 | (net_rx[7] & 0xFF);
 3207              		.loc 1 682 16 is_stmt 1 view .LVU943
 3208 00f8 E388     		ldrh	r3, [r4, #6]	@ unaligned
 3209              		.loc 1 682 20 is_stmt 0 view .LVU944
 3210 00fa 734C     		ldr	r4, .L270+20
 683:serial.c      ****                memcpy(rx_message,net_rx + 8,16);
 3211              		.loc 1 683 16 view .LVU945
 3212 00fc 734A     		ldr	r2, .L270+24
 3213 00fe 5BBA     		rev16	r3, r3
 682:serial.c      ****                dac = (net_rx[6] & 0xFF) << 8 | (net_rx[7] & 0xFF);
 3214              		.loc 1 682 20 view .LVU946
 3215 0100 2380     		strh	r3, [r4]	@ movhi
 3216              		.loc 1 683 16 is_stmt 1 view .LVU947
 3217 0102 734B     		ldr	r3, .L270+28
 3218 0104 1646     		mov	r6, r2
 3219 0106 03F11001 		add	r1, r3, #16
 3220              	.L240:
 3221 010a 53F8040B 		ldr	r0, [r3], #4	@ unaligned
 3222 010e 42F8040B 		str	r0, [r2], #4	@ unaligned
 3223 0112 8B42     		cmp	r3, r1
 3224 0114 F9D1     		bne	.L240
 684:serial.c      ****                send_board_data();
 3225              		.loc 1 684 16 view .LVU948
 3226 0116 FFF7FEFF 		bl	send_board_data
 3227              	.LVL191:
 685:serial.c      ****                if (remote) {
 3228              		.loc 1 685 16 view .LVU949
 3229              		.loc 1 685 20 is_stmt 0 view .LVU950
 3230 011a 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 3231              		.loc 1 685 19 view .LVU951
 3232 011e 002B     		cmp	r3, #0
 3233 0120 00F01181 		beq	.L215
 686:serial.c      ****                	  if (led1) LED_OUT0 = 0;else LED_OUT0 = 1;
 3234              		.loc 1 686 19 is_stmt 1 view .LVU952
 3235              		.loc 1 686 23 is_stmt 0 view .LVU953
 3236 0124 98F80020 		ldrb	r2, [r8]	@ zero_extendqisi2
 3237 0128 6A4B     		ldr	r3, .L270+32
 3238              		.loc 1 686 22 view .LVU954
 3239 012a 002A     		cmp	r2, #0
 3240 012c 00F0BF80 		beq	.L241
 3241              		.loc 1 686 29 is_stmt 1 discriminator 1 view .LVU955
 3242              		.loc 1 686 38 is_stmt 0 discriminator 1 view .LVU956
 3243 0130 0022     		movs	r2, #0
 3244              	.L268:
 3245              		.loc 1 686 56 discriminator 2 view .LVU957
 3246 0132 C3F8A422 		str	r2, [r3, #676]
 687:serial.c      ****                	  if (led2) LED_OUT1 = 0;else LED_OUT1 = 1;
 3247              		.loc 1 687 19 is_stmt 1 view .LVU958
 3248              		.loc 1 687 23 is_stmt 0 view .LVU959
 3249 0136 3A78     		ldrb	r2, [r7]	@ zero_extendqisi2
 3250 0138 664B     		ldr	r3, .L270+32
 3251              		.loc 1 687 22 view .LVU960
 3252 013a 002A     		cmp	r2, #0
 3253 013c 00F0FE80 		beq	.L243
 3254              		.loc 1 687 29 is_stmt 1 discriminator 1 view .LVU961
 3255              		.loc 1 687 38 is_stmt 0 discriminator 1 view .LVU962
 3256 0140 0022     		movs	r2, #0
 3257              	.L269:
 3258              		.loc 1 687 56 discriminator 2 view .LVU963
 3259 0142 C3F8A822 		str	r2, [r3, #680]
 688:serial.c      ****                	  if (buz) BEEP = 1;else BEEP = 0;
 3260              		.loc 1 688 19 is_stmt 1 view .LVU964
 3261              		.loc 1 688 23 is_stmt 0 view .LVU965
 3262 0146 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 3263 0148 624B     		ldr	r3, .L270+32
 3264              		.loc 1 688 22 view .LVU966
 3265 014a 02F0FF01 		and	r1, r2, #255
 3266 014e 002A     		cmp	r2, #0
 3267 0150 00F0F680 		beq	.L245
 3268              		.loc 1 688 28 is_stmt 1 discriminator 1 view .LVU967
 3269              		.loc 1 688 33 is_stmt 0 discriminator 1 view .LVU968
 3270 0154 0122     		movs	r2, #1
 3271 0156 C3F8A022 		str	r2, [r3, #672]
 3272              	.L246:
 689:serial.c      ****                	  Dac1_Set_Voltage(dac);
 3273              		.loc 1 689 19 is_stmt 1 view .LVU969
 3274 015a 2088     		ldrh	r0, [r4]
 690:serial.c      ****                	  rx_message[16] = 0;
 691:serial.c      ****                	  message[16] = 0;
 3275              		.loc 1 691 31 is_stmt 0 view .LVU970
 3276 015c 5E4C     		ldr	r4, .L270+36
 689:serial.c      ****                	  Dac1_Set_Voltage(dac);
 3277              		.loc 1 689 19 view .LVU971
 3278 015e 80B2     		uxth	r0, r0
 3279 0160 FFF7FEFF 		bl	Dac1_Set_Voltage
 3280              	.LVL192:
 690:serial.c      ****                	  rx_message[16] = 0;
 3281              		.loc 1 690 19 is_stmt 1 view .LVU972
 690:serial.c      ****                	  rx_message[16] = 0;
 3282              		.loc 1 690 34 is_stmt 0 view .LVU973
 3283 0164 0023     		movs	r3, #0
 692:serial.c      ****                	  if (strcmp(rx_message,message)) {
 3284              		.loc 1 692 23 view .LVU974
 3285 0166 5948     		ldr	r0, .L270+24
 690:serial.c      ****                	  rx_message[16] = 0;
 3286              		.loc 1 690 34 view .LVU975
 3287 0168 3374     		strb	r3, [r6, #16]
 691:serial.c      ****                	  if (strcmp(rx_message,message)) {
 3288              		.loc 1 691 19 is_stmt 1 view .LVU976
 3289              		.loc 1 692 23 is_stmt 0 view .LVU977
 3290 016a 2146     		mov	r1, r4
 691:serial.c      ****                	  if (strcmp(rx_message,message)) {
 3291              		.loc 1 691 31 view .LVU978
 3292 016c 2374     		strb	r3, [r4, #16]
 3293              		.loc 1 692 19 is_stmt 1 view .LVU979
 3294              		.loc 1 692 23 is_stmt 0 view .LVU980
 3295 016e FFF7FEFF 		bl	strcmp
 3296              	.LVL193:
 3297              		.loc 1 692 22 discriminator 1 view .LVU981
 3298 0172 0028     		cmp	r0, #0
 3299 0174 00F0E780 		beq	.L215
 693:serial.c      ****                	     memcpy(message,rx_message,16);
 3300              		.loc 1 693 22 is_stmt 1 view .LVU982
 3301 0178 544B     		ldr	r3, .L270+24
 3302 017a 03F11002 		add	r2, r3, #16
 3303              	.L247:
 3304 017e 53F8041B 		ldr	r1, [r3], #4	@ unaligned
 3305 0182 44F8041B 		str	r1, [r4], #4	@ unaligned
 3306 0186 9342     		cmp	r3, r2
 3307 0188 F9D1     		bne	.L247
 694:serial.c      ****                	     lcd_printf(1,8,"RX:                  ");
 3308              		.loc 1 694 22 view .LVU983
 3309 018a 544A     		ldr	r2, .L270+40
 3310 018c 0821     		movs	r1, #8
 3311 018e 0120     		movs	r0, #1
 3312 0190 FFF7FEFF 		bl	lcd_printf
 3313              	.LVL194:
 695:serial.c      ****                	     lcd_printf(1,8,"RX: %s ",message);
 3314              		.loc 1 695 22 view .LVU984
 3315              	.LBE25:
 3316              	.LBE24:
 696:serial.c      ****                   }
 697:serial.c      ****                }
 698:serial.c      ****             }
 699:serial.c      ****          }
 700:serial.c      ****       }
 701:serial.c      **** }
 3317              		.loc 1 701 1 is_stmt 0 view .LVU985
 3318 0194 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 3319              		.cfi_remember_state
 3320              		.cfi_restore 14
 3321              		.cfi_restore 10
 3322              		.cfi_restore 9
 3323              		.cfi_restore 8
 3324              		.cfi_restore 7
 3325              		.cfi_restore 6
 3326              		.cfi_restore 5
 3327              		.cfi_restore 4
 3328              		.cfi_def_cfa_offset 0
 3329              	.LBB27:
 3330              	.LBB26:
 695:serial.c      ****                	     lcd_printf(1,8,"RX: %s ",message);
 3331              		.loc 1 695 22 view .LVU986
 3332 0198 4F4B     		ldr	r3, .L270+36
 3333 019a 514A     		ldr	r2, .L270+44
 3334 019c 0821     		movs	r1, #8
 3335 019e 0120     		movs	r0, #1
 3336 01a0 FFF7FEBF 		b	lcd_printf
 3337              	.LVL195:
 3338              	.L229:
 3339              		.cfi_restore_state
 631:serial.c      ****                     send_server_data(0x50);
 3340              		.loc 1 631 21 is_stmt 1 view .LVU987
 631:serial.c      ****                     send_server_data(0x50);
 3341              		.loc 1 631 33 is_stmt 0 view .LVU988
 3342 01a4 4F4B     		ldr	r3, .L270+48
 3343 01a6 0122     		movs	r2, #1
 3344 01a8 1A70     		strb	r2, [r3]
 632:serial.c      ****                     break;
 3345              		.loc 1 632 21 is_stmt 1 view .LVU989
 3346              	.L267:
 662:serial.c      ****                     break;
 3347              		.loc 1 662 21 is_stmt 0 view .LVU990
 3348 01aa FFF7FEFF 		bl	send_server_data
 3349              	.LVL196:
 663:serial.c      ****                   case 0x25:
 3350              		.loc 1 663 21 is_stmt 1 view .LVU991
 3351 01ae 73E7     		b	.L218
 3352              	.L227:
 635:serial.c      ****                     dhcp_disable = net_rx[4];
 3353              		.loc 1 635 21 view .LVU992
 635:serial.c      ****                     dhcp_disable = net_rx[4];
 3354              		.loc 1 635 32 is_stmt 0 view .LVU993
 3355 01b0 4D4B     		ldr	r3, .L270+52
 635:serial.c      ****                     dhcp_disable = net_rx[4];
 3356              		.loc 1 635 40 view .LVU994
 3357 01b2 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 635:serial.c      ****                     dhcp_disable = net_rx[4];
 3358              		.loc 1 635 32 view .LVU995
 3359 01b4 1A70     		strb	r2, [r3]
 636:serial.c      ****                     keep_alive_time = net_rx[5];
 3360              		.loc 1 636 21 is_stmt 1 view .LVU996
 636:serial.c      ****                     keep_alive_time = net_rx[5];
 3361              		.loc 1 636 34 is_stmt 0 view .LVU997
 3362 01b6 4D4B     		ldr	r3, .L270+56
 636:serial.c      ****                     keep_alive_time = net_rx[5];
 3363              		.loc 1 636 42 view .LVU998
 3364 01b8 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 636:serial.c      ****                     keep_alive_time = net_rx[5];
 3365              		.loc 1 636 34 view .LVU999
 3366 01ba 1A70     		strb	r2, [r3]
 637:serial.c      ****                     mqtt_mode = net_rx[6];
 3367              		.loc 1 637 21 is_stmt 1 view .LVU1000
 637:serial.c      ****                     mqtt_mode = net_rx[6];
 3368              		.loc 1 637 37 is_stmt 0 view .LVU1001
 3369 01bc 4C4B     		ldr	r3, .L270+60
 637:serial.c      ****                     mqtt_mode = net_rx[6];
 3370              		.loc 1 637 45 view .LVU1002
 3371 01be 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 637:serial.c      ****                     mqtt_mode = net_rx[6];
 3372              		.loc 1 637 37 view .LVU1003
 3373 01c0 1A70     		strb	r2, [r3]
 638:serial.c      ****                     ap_mode = net_rx[7];
 3374              		.loc 1 638 21 is_stmt 1 view .LVU1004
 638:serial.c      ****                     ap_mode = net_rx[7];
 3375              		.loc 1 638 31 is_stmt 0 view .LVU1005
 3376 01c2 4C4B     		ldr	r3, .L270+64
 638:serial.c      ****                     ap_mode = net_rx[7];
 3377              		.loc 1 638 39 view .LVU1006
 3378 01c4 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 638:serial.c      ****                     ap_mode = net_rx[7];
 3379              		.loc 1 638 31 view .LVU1007
 3380 01c6 1A70     		strb	r2, [r3]
 639:serial.c      ****                     m_ip = (net_rx[8] & 0xFF) << 24 | (net_rx[9] & 0xFF) << 16 | (net_rx[10] & 0xFF
 3381              		.loc 1 639 21 is_stmt 1 view .LVU1008
 639:serial.c      ****                     m_ip = (net_rx[8] & 0xFF) << 24 | (net_rx[9] & 0xFF) << 16 | (net_rx[10] & 0xFF
 3382              		.loc 1 639 29 is_stmt 0 view .LVU1009
 3383 01c8 4B4B     		ldr	r3, .L270+68
 639:serial.c      ****                     m_ip = (net_rx[8] & 0xFF) << 24 | (net_rx[9] & 0xFF) << 16 | (net_rx[10] & 0xFF
 3384              		.loc 1 639 37 view .LVU1010
 3385 01ca E279     		ldrb	r2, [r4, #7]	@ zero_extendqisi2
 639:serial.c      ****                     m_ip = (net_rx[8] & 0xFF) << 24 | (net_rx[9] & 0xFF) << 16 | (net_rx[10] & 0xFF
 3386              		.loc 1 639 29 view .LVU1011
 3387 01cc 1A70     		strb	r2, [r3]
 640:serial.c      ****                     m_gw = (net_rx[12] & 0xFF) << 24 | (net_rx[13] & 0xFF) << 16 | (net_rx[14] & 0x
 3388              		.loc 1 640 21 is_stmt 1 view .LVU1012
 3389 01ce A368     		ldr	r3, [r4, #8]	@ unaligned
 640:serial.c      ****                     m_gw = (net_rx[12] & 0xFF) << 24 | (net_rx[13] & 0xFF) << 16 | (net_rx[14] & 0x
 3390              		.loc 1 640 26 is_stmt 0 view .LVU1013
 3391 01d0 4A4A     		ldr	r2, .L270+72
 3392 01d2 1BBA     		rev	r3, r3
 3393 01d4 1360     		str	r3, [r2]
 641:serial.c      ****                     m_nm = (net_rx[16] & 0xFF) << 24 | (net_rx[17] & 0xFF) << 16 | (net_rx[18] & 0x
 3394              		.loc 1 641 21 is_stmt 1 view .LVU1014
 3395 01d6 E368     		ldr	r3, [r4, #12]	@ unaligned
 641:serial.c      ****                     m_nm = (net_rx[16] & 0xFF) << 24 | (net_rx[17] & 0xFF) << 16 | (net_rx[18] & 0x
 3396              		.loc 1 641 26 is_stmt 0 view .LVU1015
 3397 01d8 494A     		ldr	r2, .L270+76
 3398 01da 1BBA     		rev	r3, r3
 3399 01dc 1360     		str	r3, [r2]
 642:serial.c      ****                     mqtt_port = (unsigned short)(((net_rx[20] & 0xFF) << 8) + (net_rx[21] & 0xFF));
 3400              		.loc 1 642 21 is_stmt 1 view .LVU1016
 3401 01de 2369     		ldr	r3, [r4, #16]	@ unaligned
 642:serial.c      ****                     mqtt_port = (unsigned short)(((net_rx[20] & 0xFF) << 8) + (net_rx[21] & 0xFF));
 3402              		.loc 1 642 26 is_stmt 0 view .LVU1017
 3403 01e0 484A     		ldr	r2, .L270+80
 3404 01e2 1BBA     		rev	r3, r3
 3405 01e4 1360     		str	r3, [r2]
 643:serial.c      ****                     send_server_data(0x30);
 3406              		.loc 1 643 21 is_stmt 1 view .LVU1018
 3407 01e6 A38A     		ldrh	r3, [r4, #20]	@ unaligned
 643:serial.c      ****                     send_server_data(0x30);
 3408              		.loc 1 643 31 is_stmt 0 view .LVU1019
 3409 01e8 474A     		ldr	r2, .L270+84
 3410 01ea 5BBA     		rev16	r3, r3
 3411 01ec 1380     		strh	r3, [r2]	@ movhi
 644:serial.c      ****                     break;
 3412              		.loc 1 644 21 is_stmt 1 view .LVU1020
 3413 01ee 3020     		movs	r0, #48
 3414 01f0 DBE7     		b	.L267
 3415              	.L226:
 647:serial.c      ****                     memcpy(passwd, net_rx + 35, 32);
 3416              		.loc 1 647 21 view .LVU1021
 3417 01f2 464B     		ldr	r3, .L270+88
 3418 01f4 464A     		ldr	r2, .L270+92
 3419 01f6 03F12001 		add	r1, r3, #32
 3420              	.L230:
 3421 01fa 53F8040B 		ldr	r0, [r3], #4	@ unaligned
 3422 01fe 42F8040B 		str	r0, [r2], #4	@ unaligned
 3423 0202 8B42     		cmp	r3, r1
 3424 0204 F9D1     		bne	.L230
 648:serial.c      ****                     send_server_data(0x31);
 3425              		.loc 1 648 21 view .LVU1022
 3426 0206 434B     		ldr	r3, .L270+96
 3427 0208 434A     		ldr	r2, .L270+100
 3428 020a 03F12001 		add	r1, r3, #32
 3429              	.L231:
 3430 020e 53F8040B 		ldr	r0, [r3], #4	@ unaligned
 3431 0212 42F8040B 		str	r0, [r2], #4	@ unaligned
 3432 0216 8B42     		cmp	r3, r1
 3433 0218 F9D1     		bne	.L231
 649:serial.c      ****                     break;
 3434              		.loc 1 649 21 view .LVU1023
 3435 021a 3120     		movs	r0, #49
 3436 021c C5E7     		b	.L267
 3437              	.L225:
 652:serial.c      ****                     send_server_data(0x32);
 3438              		.loc 1 652 21 view .LVU1024
 3439 021e 3B4B     		ldr	r3, .L270+88
 3440 0220 3E4A     		ldr	r2, .L270+104
 3441 0222 03F14001 		add	r1, r3, #64
 3442              	.L232:
 3443 0226 53F8040B 		ldr	r0, [r3], #4	@ unaligned
 3444 022a 42F8040B 		str	r0, [r2], #4	@ unaligned
 3445 022e 8B42     		cmp	r3, r1
 3446 0230 F9D1     		bne	.L232
 653:serial.c      ****                     break;
 3447              		.loc 1 653 21 view .LVU1025
 3448 0232 3220     		movs	r0, #50
 3449 0234 B9E7     		b	.L267
 3450              	.L224:
 656:serial.c      ****                     send_server_data(0x33);
 3451              		.loc 1 656 21 view .LVU1026
 3452 0236 354B     		ldr	r3, .L270+88
 3453 0238 394A     		ldr	r2, .L270+108
 3454 023a 03F14001 		add	r1, r3, #64
 3455              	.L233:
 3456 023e 53F8040B 		ldr	r0, [r3], #4	@ unaligned
 3457 0242 42F8040B 		str	r0, [r2], #4	@ unaligned
 3458 0246 8B42     		cmp	r3, r1
 3459 0248 F9D1     		bne	.L233
 657:serial.c      ****                     break;
 3460              		.loc 1 657 21 view .LVU1027
 3461 024a 3320     		movs	r0, #51
 3462 024c ADE7     		b	.L267
 3463              	.L223:
 660:serial.c      ****                     memcpy(login_pw, net_rx + 35, 32);
 3464              		.loc 1 660 21 view .LVU1028
 3465 024e 2F4B     		ldr	r3, .L270+88
 3466 0250 344A     		ldr	r2, .L270+112
 3467 0252 03F12001 		add	r1, r3, #32
 3468              	.L234:
 3469 0256 53F8040B 		ldr	r0, [r3], #4	@ unaligned
 3470 025a 42F8040B 		str	r0, [r2], #4	@ unaligned
 3471 025e 8B42     		cmp	r3, r1
 3472 0260 F9D1     		bne	.L234
 661:serial.c      ****                     send_server_data(0x34);
 3473              		.loc 1 661 21 view .LVU1029
 3474 0262 2C4B     		ldr	r3, .L270+96
 3475 0264 304A     		ldr	r2, .L270+116
 3476 0266 03F12001 		add	r1, r3, #32
 3477              	.L235:
 3478 026a 53F8040B 		ldr	r0, [r3], #4	@ unaligned
 3479 026e 42F8040B 		str	r0, [r2], #4	@ unaligned
 3480 0272 8B42     		cmp	r3, r1
 3481 0274 F9D1     		bne	.L235
 662:serial.c      ****                     break;
 3482              		.loc 1 662 21 view .LVU1030
 3483 0276 3420     		movs	r0, #52
 3484 0278 97E7     		b	.L267
 3485              	.L221:
 665:serial.c      ****                     memcpy(rx_topic, net_rx + 35, 32);
 3486              		.loc 1 665 21 view .LVU1031
 3487 027a 244B     		ldr	r3, .L270+88
 3488 027c 2B4A     		ldr	r2, .L270+120
 3489 027e 03F12001 		add	r1, r3, #32
 3490              	.L236:
 3491 0282 53F8040B 		ldr	r0, [r3], #4	@ unaligned
 3492 0286 42F8040B 		str	r0, [r2], #4	@ unaligned
 3493 028a 8B42     		cmp	r3, r1
 3494 028c F9D1     		bne	.L236
 666:serial.c      ****                     send_server_data(0x35);
 3495              		.loc 1 666 21 view .LVU1032
 3496 028e 214B     		ldr	r3, .L270+96
 3497 0290 274A     		ldr	r2, .L270+124
 3498 0292 03F12001 		add	r1, r3, #32
 3499              	.L237:
 3500 0296 53F8040B 		ldr	r0, [r3], #4	@ unaligned
 3501 029a 42F8040B 		str	r0, [r2], #4	@ unaligned
 3502 029e 8B42     		cmp	r3, r1
 3503 02a0 F9D1     		bne	.L237
 667:serial.c      ****                     write_wifi_data();
 3504              		.loc 1 667 21 view .LVU1033
 3505 02a2 3520     		movs	r0, #53
 3506 02a4 FFF7FEFF 		bl	send_server_data
 3507              	.LVL197:
 668:serial.c      ****                     break;
 3508              		.loc 1 668 21 view .LVU1034
 3509 02a8 FFF7FEFF 		bl	write_wifi_data
 3510              	.LVL198:
 669:serial.c      ****                }
 3511              		.loc 1 669 21 view .LVU1035
 3512 02ac F4E6     		b	.L218
 3513              	.L241:
 686:serial.c      ****                	  if (led2) LED_OUT1 = 0;else LED_OUT1 = 1;
 3514              		.loc 1 686 47 discriminator 2 view .LVU1036
 686:serial.c      ****                	  if (led2) LED_OUT1 = 0;else LED_OUT1 = 1;
 3515              		.loc 1 686 56 is_stmt 0 discriminator 2 view .LVU1037
 3516 02ae 0122     		movs	r2, #1
 3517 02b0 3FE7     		b	.L268
 3518              	.L271:
 3519 02b2 00BF     		.align	2
 3520              	.L270:
 3521 02b4 00000000 		.word	net_rx
 3522 02b8 00000000 		.word	tcp_rxcnt
 3523 02bc 00000000 		.word	ap_mode_time
 3524 02c0 00000000 		.word	led2
 3525 02c4 00000000 		.word	buz
 3526 02c8 00000000 		.word	dac
 3527 02cc 00000000 		.word	rx_message
 3528 02d0 08000000 		.word	net_rx+8
 3529 02d4 00804242 		.word	1111654400
 3530 02d8 00000000 		.word	message
 3531 02dc 00000000 		.word	.LC0
 3532 02e0 16000000 		.word	.LC1
 3533 02e4 00000000 		.word	reboot_flag
 3534 02e8 00000000 		.word	wifi_power
 3535 02ec 00000000 		.word	dhcp_disable
 3536 02f0 00000000 		.word	keep_alive_time
 3537 02f4 00000000 		.word	mqtt_mode
 3538 02f8 00000000 		.word	ap_mode
 3539 02fc 00000000 		.word	m_ip
 3540 0300 00000000 		.word	m_gw
 3541 0304 00000000 		.word	m_nm
 3542 0308 00000000 		.word	mqtt_port
 3543 030c 03000000 		.word	net_rx+3
 3544 0310 00000000 		.word	ssid
 3545 0314 23000000 		.word	net_rx+35
 3546 0318 00000000 		.word	passwd
 3547 031c 00000000 		.word	host_url
 3548 0320 00000000 		.word	ntp_url
 3549 0324 00000000 		.word	login_id
 3550 0328 00000000 		.word	login_pw
 3551 032c 00000000 		.word	tx_topic
 3552 0330 00000000 		.word	rx_topic
 3553 0334 00000000 		.word	remote
 3554 0338 00000000 		.word	led1
 3555              	.L243:
 687:serial.c      ****                	  if (buz) BEEP = 1;else BEEP = 0;
 3556              		.loc 1 687 47 is_stmt 1 discriminator 2 view .LVU1038
 687:serial.c      ****                	  if (buz) BEEP = 1;else BEEP = 0;
 3557              		.loc 1 687 56 is_stmt 0 discriminator 2 view .LVU1039
 3558 033c 0122     		movs	r2, #1
 3559 033e 00E7     		b	.L269
 3560              	.L245:
 688:serial.c      ****                	  Dac1_Set_Voltage(dac);
 3561              		.loc 1 688 42 is_stmt 1 discriminator 2 view .LVU1040
 688:serial.c      ****                	  Dac1_Set_Voltage(dac);
 3562              		.loc 1 688 47 is_stmt 0 discriminator 2 view .LVU1041
 3563 0340 C3F8A012 		str	r1, [r3, #672]
 3564 0344 09E7     		b	.L246
 3565              	.LVL199:
 3566              	.L215:
 688:serial.c      ****                	  Dac1_Set_Voltage(dac);
 3567              		.loc 1 688 47 discriminator 2 view .LVU1042
 3568              	.LBE26:
 3569              	.LBE27:
 3570              		.loc 1 701 1 view .LVU1043
 3571 0346 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3572              		.cfi_endproc
 3573              	.LFE145:
 3575 034a 00BF     		.section	.text.clear_flag,"ax",%progbits
 3576              		.align	1
 3577              		.global	clear_flag
 3578              		.syntax unified
 3579              		.thumb
 3580              		.thumb_func
 3582              	clear_flag:
 3583              	.LFB146:
 702:serial.c      **** 
 703:serial.c      **** 
 704:serial.c      **** void clear_flag (void)
 705:serial.c      **** {
 3584              		.loc 1 705 1 is_stmt 1 view -0
 3585              		.cfi_startproc
 3586              		@ args = 0, pretend = 0, frame = 0
 3587              		@ frame_needed = 0, uses_anonymous_args = 0
 3588              		@ link register save eliminated.
 706:serial.c      ****      pwr_flag = 0;
 3589              		.loc 1 706 6 view .LVU1045
 3590              		.loc 1 706 15 is_stmt 0 view .LVU1046
 3591 0000 0B4A     		ldr	r2, .L273
 3592 0002 0023     		movs	r3, #0
 3593 0004 1370     		strb	r3, [r2]
 707:serial.c      ****      mode_flag = 0;
 3594              		.loc 1 707 6 is_stmt 1 view .LVU1047
 3595              		.loc 1 707 16 is_stmt 0 view .LVU1048
 3596 0006 0B4A     		ldr	r2, .L273+4
 3597 0008 1370     		strb	r3, [r2]
 708:serial.c      ****      ssid_flag = 0;
 3598              		.loc 1 708 6 is_stmt 1 view .LVU1049
 3599              		.loc 1 708 16 is_stmt 0 view .LVU1050
 3600 000a 0B4A     		ldr	r2, .L273+8
 3601 000c 1370     		strb	r3, [r2]
 709:serial.c      ****      ip_flag = 0;
 3602              		.loc 1 709 6 is_stmt 1 view .LVU1051
 3603              		.loc 1 709 14 is_stmt 0 view .LVU1052
 3604 000e 0B4A     		ldr	r2, .L273+12
 3605 0010 1370     		strb	r3, [r2]
 710:serial.c      ****      mux_flag = 0;
 3606              		.loc 1 710 6 is_stmt 1 view .LVU1053
 3607              		.loc 1 710 15 is_stmt 0 view .LVU1054
 3608 0012 0B4A     		ldr	r2, .L273+16
 3609 0014 1370     		strb	r3, [r2]
 711:serial.c      ****      server_flag = 0;
 3610              		.loc 1 711 6 is_stmt 1 view .LVU1055
 3611              		.loc 1 711 18 is_stmt 0 view .LVU1056
 3612 0016 0B4A     		ldr	r2, .L273+20
 3613 0018 1370     		strb	r3, [r2]
 712:serial.c      ****      mqtt_cfg_flag = 0;
 3614              		.loc 1 712 6 is_stmt 1 view .LVU1057
 3615              		.loc 1 712 20 is_stmt 0 view .LVU1058
 3616 001a 0B4A     		ldr	r2, .L273+24
 3617 001c 1370     		strb	r3, [r2]
 713:serial.c      ****      mqtt_connect_flag = 0;
 3618              		.loc 1 713 6 is_stmt 1 view .LVU1059
 3619              		.loc 1 713 24 is_stmt 0 view .LVU1060
 3620 001e 0B4A     		ldr	r2, .L273+28
 3621 0020 1370     		strb	r3, [r2]
 714:serial.c      ****      mqtt_sub_flag = 0;
 3622              		.loc 1 714 6 is_stmt 1 view .LVU1061
 3623              		.loc 1 714 20 is_stmt 0 view .LVU1062
 3624 0022 0B4A     		ldr	r2, .L273+32
 3625 0024 1370     		strb	r3, [r2]
 715:serial.c      ****      send_flag = 0;
 3626              		.loc 1 715 6 is_stmt 1 view .LVU1063
 3627              		.loc 1 715 16 is_stmt 0 view .LVU1064
 3628 0026 0B4A     		ldr	r2, .L273+36
 3629 0028 1370     		strb	r3, [r2]
 716:serial.c      ****      ntp_req_flag = 0;
 3630              		.loc 1 716 6 is_stmt 1 view .LVU1065
 3631              		.loc 1 716 19 is_stmt 0 view .LVU1066
 3632 002a 0B4A     		ldr	r2, .L273+40
 3633 002c 1370     		strb	r3, [r2]
 717:serial.c      **** }
 3634              		.loc 1 717 1 view .LVU1067
 3635 002e 7047     		bx	lr
 3636              	.L274:
 3637              		.align	2
 3638              	.L273:
 3639 0030 00000000 		.word	pwr_flag
 3640 0034 00000000 		.word	mode_flag
 3641 0038 00000000 		.word	ssid_flag
 3642 003c 00000000 		.word	ip_flag
 3643 0040 00000000 		.word	mux_flag
 3644 0044 00000000 		.word	server_flag
 3645 0048 00000000 		.word	mqtt_cfg_flag
 3646 004c 00000000 		.word	mqtt_connect_flag
 3647 0050 00000000 		.word	mqtt_sub_flag
 3648 0054 00000000 		.word	send_flag
 3649 0058 00000000 		.word	ntp_req_flag
 3650              		.cfi_endproc
 3651              	.LFE146:
 3653              		.section	.rodata.send_data.str1.1,"aMS",%progbits,1
 3654              	.LC2:
 3655 0000 41542B52 		.ascii	"AT+RST\015\012\000"
 3655      53540D0A 
 3655      00
 3656              	.LC3:
 3657 0009 41542B52 		.ascii	"AT+RFPOWER=%d\015\012\000"
 3657      46504F57 
 3657      45523D25 
 3657      640D0A00 
 3658              	.LC4:
 3659 0019 41542B43 		.ascii	"AT+CWMODE=2\015\012\000"
 3659      574D4F44 
 3659      453D320D 
 3659      0A00
 3660              	.LC5:
 3661 0027 41542B43 		.ascii	"AT+CWMODE=1\015\012\000"
 3661      574D4F44 
 3661      453D310D 
 3661      0A00
 3662              	.LC6:
 3663 0035 41542B43 		.ascii	"AT+CWHOSTNAME=\"CHOI\"\015\012\000"
 3663      57484F53 
 3663      544E414D 
 3663      453D2243 
 3663      484F4922 
 3664              	.LC7:
 3665 004c 41542B43 		.ascii	"AT+CWSAP=\"APCHOI\",\"1234567890\",%d,3\015\012\000"
 3665      57534150 
 3665      3D224150 
 3665      43484F49 
 3665      222C2231 
 3666              	.LC8:
 3667 0072 41542B43 		.ascii	"AT+CWJAP=\"%s\",\"%s\"\015\012\000"
 3667      574A4150 
 3667      3D222573 
 3667      222C2225 
 3667      73220D0A 
 3668              	.LC9:
 3669 0087 41542B43 		.ascii	"AT+CIPAP=\"192.168.1.254\",\"192.168.1.254\",\"255."
 3669      49504150 
 3669      3D223139 
 3669      322E3136 
 3669      382E312E 
 3670 00b5 3235352E 		.ascii	"255.255.0\"\015\012\000"
 3670      3235352E 
 3670      30220D0A 
 3670      00
 3671              	.LC10:
 3672 00c2 41542B43 		.ascii	"AT+CIPSTA=\"%d.%d.%d.%d\",\"%d.%d.%d.%d\",\"%d.%d.%"
 3672      49505354 
 3672      413D2225 
 3672      642E2564 
 3672      2E25642E 
 3673 00f0 642E2564 		.ascii	"d.%d\"\015\012\000"
 3673      220D0A00 
 3674              	.LC11:
 3675 00f8 41542B43 		.ascii	"AT+CIPMUX=1\015\012\000"
 3675      49504D55 
 3675      583D310D 
 3675      0A00
 3676              	.LC12:
 3677 0106 41542B43 		.ascii	"AT+CIPSERVER=1,11000\015\012\000"
 3677      49505345 
 3677      52564552 
 3677      3D312C31 
 3677      31303030 
 3678              	.LC13:
 3679 011d 41542B4D 		.ascii	"AT+MQTTUSERCFG=0,%d,\"CHOICHOI\",\"%s\",\"%s\",0,0,"
 3679      51545455 
 3679      53455243 
 3679      46473D30 
 3679      2C25642C 
 3680 014a 22220D0A 		.ascii	"\"\"\015\012\000"
 3680      00
 3681              	.LC14:
 3682 014f 41542B4D 		.ascii	"AT+MQTTCONN=0,\"%s\",%d,1\015\012\000"
 3682      51545443 
 3682      4F4E4E3D 
 3682      302C2225 
 3682      73222C25 
 3683              	.LC15:
 3684 0169 41542B4D 		.ascii	"AT+MQTTSUB=0,\"%s\",1\015\012\000"
 3684      51545453 
 3684      55423D30 
 3684      2C222573 
 3684      222C310D 
 3685              	.LC16:
 3686 017f 41542B43 		.ascii	"AT+CIPSEND=%d,%d\015\012\000"
 3686      49505345 
 3686      4E443D25 
 3686      642C2564 
 3686      0D0A00
 3687              	.LC17:
 3688 0192 41542B4D 		.ascii	"AT+MQTTPUBRAW=0,\"%s\",%d,0,0\015\012\000"
 3688      51545450 
 3688      55425241 
 3688      573D302C 
 3688      22257322 
 3689              	.LC18:
 3690 01b0 41542B43 		.ascii	"AT+CIPSNTPCFG=1,8,\"%s\"\015\012\000"
 3690      4950534E 
 3690      54504346 
 3690      473D312C 
 3690      382C2225 
 3691              	.LC19:
 3692 01c9 41542B43 		.ascii	"AT+CIPSNTPTIME?\015\012\000"
 3692      4950534E 
 3692      54505449 
 3692      4D453F0D 
 3692      0A00
 3693              		.section	.text.send_data,"ax",%progbits
 3694              		.align	1
 3695              		.global	send_data
 3696              		.syntax unified
 3697              		.thumb
 3698              		.thumb_func
 3700              	send_data:
 3701              	.LFB147:
 718:serial.c      **** 
 719:serial.c      **** 
 720:serial.c      **** void send_data (void)
 721:serial.c      **** {
 3702              		.loc 1 721 1 is_stmt 1 view -0
 3703              		.cfi_startproc
 3704              		@ args = 0, pretend = 0, frame = 0
 3705              		@ frame_needed = 0, uses_anonymous_args = 0
 722:serial.c      ****       if (time_out == 0) {
 3706              		.loc 1 722 7 view .LVU1069
 721:serial.c      ****       if (time_out == 0) {
 3707              		.loc 1 721 1 is_stmt 0 view .LVU1070
 3708 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3709              		.cfi_def_cfa_offset 32
 3710              		.cfi_offset 4, -32
 3711              		.cfi_offset 5, -28
 3712              		.cfi_offset 6, -24
 3713              		.cfi_offset 7, -20
 3714              		.cfi_offset 8, -16
 3715              		.cfi_offset 9, -12
 3716              		.cfi_offset 10, -8
 3717              		.cfi_offset 14, -4
 3718              		.loc 1 722 20 view .LVU1071
 3719 0004 864C     		ldr	r4, .L331
 3720 0006 2568     		ldr	r5, [r4]
 721:serial.c      ****       if (time_out == 0) {
 3721              		.loc 1 721 1 view .LVU1072
 3722 0008 8AB0     		sub	sp, sp, #40
 3723              		.cfi_def_cfa_offset 72
 3724              		.loc 1 722 10 view .LVU1073
 3725 000a 002D     		cmp	r5, #0
 3726 000c 40F0BF80 		bne	.L275
 3727              	.LBB30:
 3728              	.LBI30:
 720:serial.c      **** {
 3729              		.loc 1 720 6 is_stmt 1 view .LVU1074
 3730              	.LBB31:
 723:serial.c      ****          if (reset_flag) {
 3731              		.loc 1 723 10 view .LVU1075
 3732              		.loc 1 723 14 is_stmt 0 view .LVU1076
 3733 0010 844B     		ldr	r3, .L331+4
 3734 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3735              		.loc 1 723 13 view .LVU1077
 3736 0014 53B1     		cbz	r3, .L278
 724:serial.c      ****             clear_flag();
 3737              		.loc 1 724 13 is_stmt 1 view .LVU1078
 725:serial.c      ****             sprintf(txbuff3, "AT+RST\r\n");
 3738              		.loc 1 725 13 is_stmt 0 view .LVU1079
 3739 0016 8449     		ldr	r1, .L331+8
 3740 0018 8448     		ldr	r0, .L331+12
 724:serial.c      ****             clear_flag();
 3741              		.loc 1 724 13 view .LVU1080
 3742 001a FFF7FEFF 		bl	clear_flag
 3743              	.LVL200:
 3744              		.loc 1 725 13 is_stmt 1 view .LVU1081
 3745 001e FFF7FEFF 		bl	strcpy
 3746              	.LVL201:
 726:serial.c      ****             mqtt_connect = 0;
 3747              		.loc 1 726 13 view .LVU1082
 3748              		.loc 1 726 26 is_stmt 0 view .LVU1083
 3749 0022 834B     		ldr	r3, .L331+16
 3750 0024 1D70     		strb	r5, [r3]
 727:serial.c      ****             time_out = 1000;
 3751              		.loc 1 727 13 is_stmt 1 view .LVU1084
 3752              	.L323:
 728:serial.c      ****          } else {
 729:serial.c      ****             if (pwr_flag) {
 730:serial.c      ****                if (wifi_power > 80) wifi_power = 80;
 731:serial.c      ****                if (wifi_power < 3) wifi_power = 3;
 732:serial.c      ****                if (pwr_error >= 2) {
 733:serial.c      ****                	   pwr_error = 0;
 734:serial.c      ****                	   wifi_power = 40;
 735:serial.c      ****                }
 736:serial.c      ****                if (wifi_power < 40) wifi_power = 40;
 737:serial.c      ****                sprintf(txbuff3, "AT+RFPOWER=%d\r\n",wifi_power);// 40~80;	old -> min 3
 738:serial.c      ****                time_out = 200;
 739:serial.c      ****             } else {
 740:serial.c      ****                if (mode_flag) {
 741:serial.c      ****                   if (ap_mode) {
 742:serial.c      ****                      sprintf(txbuff3, "AT+CWMODE=2\r\n");       //1 Station, 2 AP, 3 AP+Station
 743:serial.c      ****                   } else {
 744:serial.c      ****                      sprintf(txbuff3, "AT+CWMODE=1\r\n");       //1 Station, 2 AP, 3 AP+Station
 745:serial.c      ****                   }
 746:serial.c      ****                   time_out = 200;
 747:serial.c      ****                } else {
 748:serial.c      ****                   if (host_flag) {
 749:serial.c      ****                      sprintf(txbuff3, "AT+CWHOSTNAME=\"CHOI\"\r\n");	//Host
 750:serial.c      ****                      time_out = 200;
 751:serial.c      ****                   } else {
 752:serial.c      ****                      if (ssid_flag) {
 753:serial.c      ****                         if (ap_mode) {
 754:serial.c      ****                            sprintf(txbuff3, "AT+CWSAP=\"APCHOI\",\"1234567890\",%d,3\r\n",wifi_ch);
 755:serial.c      ****                         } else {
 756:serial.c      ****                            sprintf(txbuff3, "AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,passwd);
 757:serial.c      ****                         }
 758:serial.c      ****                         time_out = 5000;
 759:serial.c      ****                      } else {
 760:serial.c      ****                         if (ip_flag) {
 761:serial.c      ****                            if (ap_mode) {
 762:serial.c      ****                               sprintf(txbuff3, "AT+CIPAP=\"192.168.1.254\",\"192.168.1.254\",\"255.
 763:serial.c      ****                               time_out = 500;
 764:serial.c      ****                            } else {
 765:serial.c      ****                               if (dhcp_disable) {
 766:serial.c      ****                                  sprintf(txbuff3, "AT+CIPSTA=\"%d.%d.%d.%d\",\"%d.%d.%d.%d\",\"%d.%
 767:serial.c      ****                                  (m_ip >> 0) & 0xFF,(m_ip >> 8) & 0xFF,(m_ip >> 16) & 0xFF,(m_ip >>
 768:serial.c      ****                                  (m_gw >> 0) & 0xFF,(m_gw >> 8) & 0xFF,(m_gw >> 16) & 0xFF,(m_gw >>
 769:serial.c      ****                                  (m_nm >> 0) & 0xFF,(m_nm >> 8) & 0xFF,(m_nm >> 16) & 0xFF,(m_nm >>
 770:serial.c      ****                                  time_out = 500;
 771:serial.c      ****                               } else {
 772:serial.c      ****                                  ip_flag = 0;
 773:serial.c      ****                                  time_out = 0;
 774:serial.c      ****                                  mux_flag = 1;
 775:serial.c      ****                               }
 776:serial.c      ****                            }
 777:serial.c      ****                         } else {
 778:serial.c      ****                            if (mux_flag) {
 779:serial.c      ****                               sprintf(txbuff3, "AT+CIPMUX=1\r\n"); // 0 Single, 1 Mult
 780:serial.c      ****                               time_out = 200;
 781:serial.c      ****                            } else {
 782:serial.c      ****                               if (server_flag) {
 783:serial.c      ****                                  sprintf(txbuff3, "AT+CIPSERVER=1,11000\r\n");     // 0 Disable 1 e
 784:serial.c      ****                                  time_out = 200;
 785:serial.c      ****                               } else {
 786:serial.c      ****                                  if (mqtt_cfg_flag) {
 787:serial.c      ****                                     sprintf(txbuff3, "AT+MQTTUSERCFG=0,%d,\"CHOICHOI\",\"%s\",\"%s\
 788:serial.c      ****                                                    mqtt_mode+1,login_id,login_pw);	// Name
 789:serial.c      ****                                     time_out = 200;
 790:serial.c      ****                                  } else {
 791:serial.c      ****                                     if (mqtt_connect_flag) {
 792:serial.c      ****                                        sprintf(txbuff3, "AT+MQTTCONN=0,\"%s\",%d,1\r\n",host_url,mq
 793:serial.c      ****                                        time_out = 5000;
 794:serial.c      ****                                     } else {
 795:serial.c      ****                                        if (mqtt_sub_flag) {
 796:serial.c      ****                                           mqtt_connect = 1;
 797:serial.c      ****                                           sprintf(txbuff3, "AT+MQTTSUB=0,\"%s\",1\r\n",rx_topic);
 798:serial.c      ****                                           time_out = 5000;
 799:serial.c      ****                                        } else {
 800:serial.c      ****                                           if (send_flag) {
 801:serial.c      ****                                              if (ap_mode) {
 802:serial.c      ****                                                 sprintf(txbuff3, "AT+CIPSEND=%d,%d\r\n",gid,tcp_len
 803:serial.c      ****                                                 send_data_flag = 1;
 804:serial.c      ****                                                 time_out = 100;
 805:serial.c      ****                                              } else {
 806:serial.c      ****                                              	if (mqtt_send) {
 807:serial.c      ****                                                    if (mqtt_connect) {
 808:serial.c      ****                                                       sprintf(txbuff3, "AT+MQTTPUBRAW=0,\"%s\",%d,0
 809:serial.c      ****                                                       send_data_flag = 1;
 810:serial.c      ****                                                       mqtt_send = 0;
 811:serial.c      ****                                                       time_out = 100;
 812:serial.c      ****                                                    }
 813:serial.c      ****                                                 }
 814:serial.c      ****                                                 if (tcp_send) {
 815:serial.c      ****                                                    tcp_send = 0;
 816:serial.c      ****                                                    sprintf(txbuff3, "AT+CIPSEND=%d,%d\r\n",gid,tcp_
 817:serial.c      ****                                                     send_data_flag = 1;
 818:serial.c      ****                                                     time_out = 100;
 819:serial.c      ****                                                 }
 820:serial.c      ****                                              }
 821:serial.c      ****                                              send_flag = 0;
 822:serial.c      ****                                           } else {
 823:serial.c      ****                                              if (ntp_flag) {
 824:serial.c      ****                                                 sprintf(txbuff3, "AT+CIPSNTPCFG=1,8,\"%s\"\r\n",ntp
 825:serial.c      ****                                                 time_out = 200;
 826:serial.c      ****                                              } else {
 827:serial.c      ****                                                 if (ntp_req_flag)  {
 828:serial.c      ****                                                    sprintf(txbuff3, "AT+CIPSNTPTIME?\r\n");
 829:serial.c      ****                                                    time_out = 1000;
 3753              		.loc 1 829 52 view .LVU1085
 3754              		.loc 1 829 61 is_stmt 0 view .LVU1086
 3755 0026 4FF47A73 		mov	r3, #1000
 3756 002a 2CE0     		b	.L324
 3757              	.L278:
 729:serial.c      ****                if (wifi_power > 80) wifi_power = 80;
 3758              		.loc 1 729 13 is_stmt 1 view .LVU1087
 729:serial.c      ****                if (wifi_power > 80) wifi_power = 80;
 3759              		.loc 1 729 17 is_stmt 0 view .LVU1088
 3760 002c 814B     		ldr	r3, .L331+20
 3761 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 729:serial.c      ****                if (wifi_power > 80) wifi_power = 80;
 3762              		.loc 1 729 16 view .LVU1089
 3763 0030 F3B1     		cbz	r3, .L280
 730:serial.c      ****                if (wifi_power < 3) wifi_power = 3;
 3764              		.loc 1 730 16 is_stmt 1 view .LVU1090
 730:serial.c      ****                if (wifi_power < 3) wifi_power = 3;
 3765              		.loc 1 730 31 is_stmt 0 view .LVU1091
 3766 0032 814B     		ldr	r3, .L331+24
 732:serial.c      ****                	   pwr_error = 0;
 3767              		.loc 1 732 30 view .LVU1092
 3768 0034 8149     		ldr	r1, .L331+28
 730:serial.c      ****                if (wifi_power < 3) wifi_power = 3;
 3769              		.loc 1 730 31 view .LVU1093
 3770 0036 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 730:serial.c      ****                if (wifi_power < 3) wifi_power = 3;
 3771              		.loc 1 730 19 view .LVU1094
 3772 0038 502A     		cmp	r2, #80
 730:serial.c      ****                if (wifi_power < 3) wifi_power = 3;
 3773              		.loc 1 730 37 is_stmt 1 discriminator 1 view .LVU1095
 730:serial.c      ****                if (wifi_power < 3) wifi_power = 3;
 3774              		.loc 1 730 48 is_stmt 0 discriminator 1 view .LVU1096
 3775 003a 84BF     		itt	hi
 3776 003c 5022     		movhi	r2, #80
 3777 003e 1A70     		strbhi	r2, [r3]
 731:serial.c      ****                if (pwr_error >= 2) {
 3778              		.loc 1 731 16 is_stmt 1 view .LVU1097
 731:serial.c      ****                if (pwr_error >= 2) {
 3779              		.loc 1 731 31 is_stmt 0 view .LVU1098
 3780 0040 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 731:serial.c      ****                if (pwr_error >= 2) {
 3781              		.loc 1 731 19 view .LVU1099
 3782 0042 022A     		cmp	r2, #2
 731:serial.c      ****                if (pwr_error >= 2) {
 3783              		.loc 1 731 36 is_stmt 1 discriminator 1 view .LVU1100
 731:serial.c      ****                if (pwr_error >= 2) {
 3784              		.loc 1 731 47 is_stmt 0 discriminator 1 view .LVU1101
 3785 0044 9CBF     		itt	ls
 3786 0046 0322     		movls	r2, #3
 3787 0048 1A70     		strbls	r2, [r3]
 732:serial.c      ****                	   pwr_error = 0;
 3788              		.loc 1 732 16 is_stmt 1 view .LVU1102
 732:serial.c      ****                	   pwr_error = 0;
 3789              		.loc 1 732 30 is_stmt 0 view .LVU1103
 3790 004a 0A88     		ldrh	r2, [r1]
 3791 004c 92B2     		uxth	r2, r2
 732:serial.c      ****                	   pwr_error = 0;
 3792              		.loc 1 732 19 view .LVU1104
 3793 004e 012A     		cmp	r2, #1
 733:serial.c      ****                	   wifi_power = 40;
 3794              		.loc 1 733 20 is_stmt 1 view .LVU1105
 733:serial.c      ****                	   wifi_power = 40;
 3795              		.loc 1 733 30 is_stmt 0 view .LVU1106
 3796 0050 81BF     		itttt	hi
 3797 0052 0022     		movhi	r2, #0
 3798 0054 0A80     		strhhi	r2, [r1]	@ movhi
 734:serial.c      ****                }
 3799              		.loc 1 734 20 is_stmt 1 view .LVU1107
 734:serial.c      ****                }
 3800              		.loc 1 734 31 is_stmt 0 view .LVU1108
 3801 0056 2822     		movhi	r2, #40
 3802 0058 1A70     		strbhi	r2, [r3]
 736:serial.c      ****                sprintf(txbuff3, "AT+RFPOWER=%d\r\n",wifi_power);// 40~80;	old -> min 3
 3803              		.loc 1 736 16 is_stmt 1 view .LVU1109
 736:serial.c      ****                sprintf(txbuff3, "AT+RFPOWER=%d\r\n",wifi_power);// 40~80;	old -> min 3
 3804              		.loc 1 736 31 is_stmt 0 view .LVU1110
 3805 005a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 737:serial.c      ****                time_out = 200;
 3806              		.loc 1 737 16 view .LVU1111
 3807 005c 7849     		ldr	r1, .L331+32
 736:serial.c      ****                sprintf(txbuff3, "AT+RFPOWER=%d\r\n",wifi_power);// 40~80;	old -> min 3
 3808              		.loc 1 736 19 view .LVU1112
 3809 005e 272A     		cmp	r2, #39
 736:serial.c      ****                sprintf(txbuff3, "AT+RFPOWER=%d\r\n",wifi_power);// 40~80;	old -> min 3
 3810              		.loc 1 736 37 is_stmt 1 discriminator 1 view .LVU1113
 736:serial.c      ****                sprintf(txbuff3, "AT+RFPOWER=%d\r\n",wifi_power);// 40~80;	old -> min 3
 3811              		.loc 1 736 48 is_stmt 0 discriminator 1 view .LVU1114
 3812 0060 9CBF     		itt	ls
 3813 0062 2822     		movls	r2, #40
 3814 0064 1A70     		strbls	r2, [r3]
 737:serial.c      ****                time_out = 200;
 3815              		.loc 1 737 16 is_stmt 1 view .LVU1115
 3816 0066 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3817              	.L328:
 824:serial.c      ****                                                 time_out = 200;
 3818              		.loc 1 824 49 is_stmt 0 view .LVU1116
 3819 0068 7048     		ldr	r0, .L331+12
 3820 006a FFF7FEFF 		bl	sprintf
 3821              	.LVL202:
 825:serial.c      ****                                              } else {
 3822              		.loc 1 825 49 is_stmt 1 view .LVU1117
 3823 006e 09E0     		b	.L325
 3824              	.L280:
 740:serial.c      ****                   if (ap_mode) {
 3825              		.loc 1 740 16 view .LVU1118
 740:serial.c      ****                   if (ap_mode) {
 3826              		.loc 1 740 20 is_stmt 0 view .LVU1119
 3827 0070 744B     		ldr	r3, .L331+36
 3828 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 740:serial.c      ****                   if (ap_mode) {
 3829              		.loc 1 740 19 view .LVU1120
 3830 0074 5BB1     		cbz	r3, .L285
 741:serial.c      ****                      sprintf(txbuff3, "AT+CWMODE=2\r\n");       //1 Station, 2 AP, 3 AP+Station
 3831              		.loc 1 741 19 is_stmt 1 view .LVU1121
 741:serial.c      ****                      sprintf(txbuff3, "AT+CWMODE=2\r\n");       //1 Station, 2 AP, 3 AP+Station
 3832              		.loc 1 741 23 is_stmt 0 view .LVU1122
 3833 0076 744B     		ldr	r3, .L331+40
 3834 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 741:serial.c      ****                      sprintf(txbuff3, "AT+CWMODE=2\r\n");       //1 Station, 2 AP, 3 AP+Station
 3835              		.loc 1 741 22 view .LVU1123
 3836 007a 33B1     		cbz	r3, .L286
 742:serial.c      ****                   } else {
 3837              		.loc 1 742 22 is_stmt 1 view .LVU1124
 3838 007c 7349     		ldr	r1, .L331+44
 3839              	.L321:
 744:serial.c      ****                   }
 3840              		.loc 1 744 22 is_stmt 0 view .LVU1125
 3841 007e 6B48     		ldr	r0, .L331+12
 3842 0080 FFF7FEFF 		bl	strcpy
 3843              	.LVL203:
 3844              	.L325:
 746:serial.c      ****                } else {
 3845              		.loc 1 746 19 is_stmt 1 view .LVU1126
 746:serial.c      ****                } else {
 3846              		.loc 1 746 28 is_stmt 0 view .LVU1127
 3847 0084 C823     		movs	r3, #200
 3848              	.L324:
 3849              		.loc 1 829 61 view .LVU1128
 3850 0086 2360     		str	r3, [r4]
 3851 0088 6CE0     		b	.L279
 3852              	.L286:
 744:serial.c      ****                   }
 3853              		.loc 1 744 22 is_stmt 1 view .LVU1129
 3854 008a 7149     		ldr	r1, .L331+48
 3855 008c F7E7     		b	.L321
 3856              	.L285:
 748:serial.c      ****                      sprintf(txbuff3, "AT+CWHOSTNAME=\"CHOI\"\r\n");	//Host
 3857              		.loc 1 748 19 view .LVU1130
 748:serial.c      ****                      sprintf(txbuff3, "AT+CWHOSTNAME=\"CHOI\"\r\n");	//Host
 3858              		.loc 1 748 23 is_stmt 0 view .LVU1131
 3859 008e 714B     		ldr	r3, .L331+52
 3860 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 748:serial.c      ****                      sprintf(txbuff3, "AT+CWHOSTNAME=\"CHOI\"\r\n");	//Host
 3861              		.loc 1 748 22 view .LVU1132
 3862 0092 0BB1     		cbz	r3, .L288
 749:serial.c      ****                      time_out = 200;
 3863              		.loc 1 749 22 is_stmt 1 view .LVU1133
 3864 0094 7049     		ldr	r1, .L331+56
 3865 0096 F2E7     		b	.L321
 3866              	.L288:
 752:serial.c      ****                         if (ap_mode) {
 3867              		.loc 1 752 22 view .LVU1134
 752:serial.c      ****                         if (ap_mode) {
 3868              		.loc 1 752 26 is_stmt 0 view .LVU1135
 3869 0098 704B     		ldr	r3, .L331+60
 3870 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 752:serial.c      ****                         if (ap_mode) {
 3871              		.loc 1 752 25 view .LVU1136
 3872 009c 93B1     		cbz	r3, .L289
 753:serial.c      ****                            sprintf(txbuff3, "AT+CWSAP=\"APCHOI\",\"1234567890\",%d,3\r\n",wifi_ch);
 3873              		.loc 1 753 25 is_stmt 1 view .LVU1137
 753:serial.c      ****                            sprintf(txbuff3, "AT+CWSAP=\"APCHOI\",\"1234567890\",%d,3\r\n",wifi_ch);
 3874              		.loc 1 753 29 is_stmt 0 view .LVU1138
 3875 009e 6A4B     		ldr	r3, .L331+40
 3876 00a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 753:serial.c      ****                            sprintf(txbuff3, "AT+CWSAP=\"APCHOI\",\"1234567890\",%d,3\r\n",wifi_ch);
 3877              		.loc 1 753 28 view .LVU1139
 3878 00a2 33B1     		cbz	r3, .L290
 754:serial.c      ****                         } else {
 3879              		.loc 1 754 28 is_stmt 1 view .LVU1140
 3880 00a4 6E4B     		ldr	r3, .L331+64
 3881 00a6 6F49     		ldr	r1, .L331+68
 3882 00a8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3883              	.L330:
 797:serial.c      ****                                           time_out = 5000;
 3884              		.loc 1 797 43 is_stmt 0 view .LVU1141
 3885 00aa 6048     		ldr	r0, .L331+12
 3886 00ac FFF7FEFF 		bl	sprintf
 3887              	.LVL204:
 3888 00b0 05E0     		b	.L326
 3889              	.L290:
 756:serial.c      ****                         }
 3890              		.loc 1 756 28 is_stmt 1 view .LVU1142
 3891 00b2 6D4B     		ldr	r3, .L331+72
 3892 00b4 6D4A     		ldr	r2, .L331+76
 3893 00b6 6E49     		ldr	r1, .L331+80
 3894              	.L329:
 792:serial.c      ****                                        time_out = 5000;
 3895              		.loc 1 792 40 is_stmt 0 view .LVU1143
 3896 00b8 5C48     		ldr	r0, .L331+12
 3897 00ba FFF7FEFF 		bl	sprintf
 3898              	.LVL205:
 793:serial.c      ****                                     } else {
 3899              		.loc 1 793 40 is_stmt 1 view .LVU1144
 3900              	.L326:
 798:serial.c      ****                                        } else {
 3901              		.loc 1 798 43 view .LVU1145
 798:serial.c      ****                                        } else {
 3902              		.loc 1 798 52 is_stmt 0 view .LVU1146
 3903 00be 41F28833 		movw	r3, #5000
 3904 00c2 E0E7     		b	.L324
 3905              	.L289:
 760:serial.c      ****                            if (ap_mode) {
 3906              		.loc 1 760 25 is_stmt 1 view .LVU1147
 760:serial.c      ****                            if (ap_mode) {
 3907              		.loc 1 760 29 is_stmt 0 view .LVU1148
 3908 00c4 6B4A     		ldr	r2, .L331+84
 3909 00c6 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 760:serial.c      ****                            if (ap_mode) {
 3910              		.loc 1 760 28 view .LVU1149
 3911 00c8 002B     		cmp	r3, #0
 3912 00ca 63D0     		beq	.L292
 761:serial.c      ****                               sprintf(txbuff3, "AT+CIPAP=\"192.168.1.254\",\"192.168.1.254\",\"255.
 3913              		.loc 1 761 28 is_stmt 1 view .LVU1150
 761:serial.c      ****                               sprintf(txbuff3, "AT+CIPAP=\"192.168.1.254\",\"192.168.1.254\",\"255.
 3914              		.loc 1 761 32 is_stmt 0 view .LVU1151
 3915 00cc 5E4B     		ldr	r3, .L331+40
 3916 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 761:serial.c      ****                               sprintf(txbuff3, "AT+CIPAP=\"192.168.1.254\",\"192.168.1.254\",\"255.
 3917              		.loc 1 761 31 view .LVU1152
 3918 00d0 33B1     		cbz	r3, .L293
 762:serial.c      ****                               time_out = 500;
 3919              		.loc 1 762 31 is_stmt 1 view .LVU1153
 3920 00d2 6949     		ldr	r1, .L331+88
 3921 00d4 5548     		ldr	r0, .L331+12
 3922 00d6 FFF7FEFF 		bl	strcpy
 3923              	.LVL206:
 763:serial.c      ****                            } else {
 3924              		.loc 1 763 31 view .LVU1154
 3925              	.L327:
 770:serial.c      ****                               } else {
 3926              		.loc 1 770 34 view .LVU1155
 770:serial.c      ****                               } else {
 3927              		.loc 1 770 43 is_stmt 0 view .LVU1156
 3928 00da 4FF4FA73 		mov	r3, #500
 3929 00de D2E7     		b	.L324
 3930              	.L293:
 765:serial.c      ****                                  sprintf(txbuff3, "AT+CIPSTA=\"%d.%d.%d.%d\",\"%d.%d.%d.%d\",\"%d.%
 3931              		.loc 1 765 31 is_stmt 1 view .LVU1157
 765:serial.c      ****                                  sprintf(txbuff3, "AT+CIPSTA=\"%d.%d.%d.%d\",\"%d.%d.%d.%d\",\"%d.%
 3932              		.loc 1 765 35 is_stmt 0 view .LVU1158
 3933 00e0 664B     		ldr	r3, .L331+92
 3934 00e2 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 765:serial.c      ****                                  sprintf(txbuff3, "AT+CIPSTA=\"%d.%d.%d.%d\",\"%d.%d.%d.%d\",\"%d.%
 3935              		.loc 1 765 34 view .LVU1159
 3936 00e4 01F0FF03 		and	r3, r1, #255
 3937 00e8 0029     		cmp	r1, #0
 3938 00ea 36D0     		beq	.L294
 766:serial.c      ****                                  (m_ip >> 0) & 0xFF,(m_ip >> 8) & 0xFF,(m_ip >> 16) & 0xFF,(m_ip >>
 3939              		.loc 1 766 34 is_stmt 1 view .LVU1160
 767:serial.c      ****                                  (m_gw >> 0) & 0xFF,(m_gw >> 8) & 0xFF,(m_gw >> 16) & 0xFF,(m_gw >>
 3940              		.loc 1 767 40 is_stmt 0 view .LVU1161
 3941 00ec 6449     		ldr	r1, .L331+96
 3942 00ee 0A68     		ldr	r2, [r1]
 767:serial.c      ****                                  (m_gw >> 0) & 0xFF,(m_gw >> 8) & 0xFF,(m_gw >> 16) & 0xFF,(m_gw >>
 3943              		.loc 1 767 59 view .LVU1162
 3944 00f0 0B68     		ldr	r3, [r1]
 767:serial.c      ****                                  (m_gw >> 0) & 0xFF,(m_gw >> 8) & 0xFF,(m_gw >> 16) & 0xFF,(m_gw >>
 3945              		.loc 1 767 78 view .LVU1163
 3946 00f2 0868     		ldr	r0, [r1]
 767:serial.c      ****                                  (m_gw >> 0) & 0xFF,(m_gw >> 8) & 0xFF,(m_gw >> 16) & 0xFF,(m_gw >>
 3947              		.loc 1 767 98 view .LVU1164
 3948 00f4 0D68     		ldr	r5, [r1]
 768:serial.c      ****                                  (m_nm >> 0) & 0xFF,(m_nm >> 8) & 0xFF,(m_nm >> 16) & 0xFF,(m_nm >>
 3949              		.loc 1 768 40 view .LVU1165
 3950 00f6 6349     		ldr	r1, .L331+100
 3951 00f8 0E68     		ldr	r6, [r1]
 768:serial.c      ****                                  (m_nm >> 0) & 0xFF,(m_nm >> 8) & 0xFF,(m_nm >> 16) & 0xFF,(m_nm >>
 3952              		.loc 1 768 59 view .LVU1166
 3953 00fa 0F68     		ldr	r7, [r1]
 768:serial.c      ****                                  (m_nm >> 0) & 0xFF,(m_nm >> 8) & 0xFF,(m_nm >> 16) & 0xFF,(m_nm >>
 3954              		.loc 1 768 78 view .LVU1167
 3955 00fc D1F800C0 		ldr	ip, [r1]
 768:serial.c      ****                                  (m_nm >> 0) & 0xFF,(m_nm >> 8) & 0xFF,(m_nm >> 16) & 0xFF,(m_nm >>
 3956              		.loc 1 768 98 view .LVU1168
 3957 0100 D1F800E0 		ldr	lr, [r1]
 769:serial.c      ****                                  time_out = 500;
 3958              		.loc 1 769 40 view .LVU1169
 3959 0104 6049     		ldr	r1, .L331+104
 3960 0106 D1F80080 		ldr	r8, [r1]
 769:serial.c      ****                                  time_out = 500;
 3961              		.loc 1 769 59 view .LVU1170
 3962 010a D1F80090 		ldr	r9, [r1]
 769:serial.c      ****                                  time_out = 500;
 3963              		.loc 1 769 78 view .LVU1171
 3964 010e D1F800A0 		ldr	r10, [r1]
 769:serial.c      ****                                  time_out = 500;
 3965              		.loc 1 769 98 view .LVU1172
 3966 0112 0968     		ldr	r1, [r1]
 3967 0114 090E     		lsrs	r1, r1, #24
 766:serial.c      ****                                  (m_ip >> 0) & 0xFF,(m_ip >> 8) & 0xFF,(m_ip >> 16) & 0xFF,(m_ip >>
 3968              		.loc 1 766 34 view .LVU1173
 3969 0116 0991     		str	r1, [sp, #36]
 3970 0118 CAF30741 		ubfx	r1, r10, #16, #8
 3971 011c 0891     		str	r1, [sp, #32]
 3972 011e C9F30721 		ubfx	r1, r9, #8, #8
 3973 0122 0791     		str	r1, [sp, #28]
 3974 0124 5FFA88F1 		uxtb	r1, r8
 3975 0128 0691     		str	r1, [sp, #24]
 768:serial.c      ****                                  (m_nm >> 0) & 0xFF,(m_nm >> 8) & 0xFF,(m_nm >> 16) & 0xFF,(m_nm >>
 3976              		.loc 1 768 98 view .LVU1174
 3977 012a 4FEA1E61 		lsr	r1, lr, #24
 766:serial.c      ****                                  (m_ip >> 0) & 0xFF,(m_ip >> 8) & 0xFF,(m_ip >> 16) & 0xFF,(m_ip >>
 3978              		.loc 1 766 34 view .LVU1175
 3979 012e 0591     		str	r1, [sp, #20]
 3980 0130 C7F30727 		ubfx	r7, r7, #8, #8
 3981 0134 CCF30741 		ubfx	r1, ip, #16, #8
 3982 0138 F6B2     		uxtb	r6, r6
 767:serial.c      ****                                  (m_gw >> 0) & 0xFF,(m_gw >> 8) & 0xFF,(m_gw >> 16) & 0xFF,(m_gw >>
 3983              		.loc 1 767 98 view .LVU1176
 3984 013a 2D0E     		lsrs	r5, r5, #24
 766:serial.c      ****                                  (m_ip >> 0) & 0xFF,(m_ip >> 8) & 0xFF,(m_ip >> 16) & 0xFF,(m_ip >>
 3985              		.loc 1 766 34 view .LVU1177
 3986 013c C0F30740 		ubfx	r0, r0, #16, #8
 3987 0140 0491     		str	r1, [sp, #16]
 3988 0142 0090     		str	r0, [sp]
 3989 0144 5149     		ldr	r1, .L331+108
 3990 0146 0397     		str	r7, [sp, #12]
 3991 0148 0296     		str	r6, [sp, #8]
 3992 014a 0195     		str	r5, [sp, #4]
 3993 014c C3F30723 		ubfx	r3, r3, #8, #8
 3994 0150 D2B2     		uxtb	r2, r2
 3995 0152 3648     		ldr	r0, .L331+12
 3996 0154 FFF7FEFF 		bl	sprintf
 3997              	.LVL207:
 3998 0158 BFE7     		b	.L327
 3999              	.L294:
 772:serial.c      ****                                  time_out = 0;
 4000              		.loc 1 772 34 is_stmt 1 view .LVU1178
 772:serial.c      ****                                  time_out = 0;
 4001              		.loc 1 772 42 is_stmt 0 view .LVU1179
 4002 015a 1370     		strb	r3, [r2]
 773:serial.c      ****                                  mux_flag = 1;
 4003              		.loc 1 773 34 is_stmt 1 view .LVU1180
 773:serial.c      ****                                  mux_flag = 1;
 4004              		.loc 1 773 43 is_stmt 0 view .LVU1181
 4005 015c 2360     		str	r3, [r4]
 774:serial.c      ****                               }
 4006              		.loc 1 774 34 is_stmt 1 view .LVU1182
 774:serial.c      ****                               }
 4007              		.loc 1 774 43 is_stmt 0 view .LVU1183
 4008 015e 4C4B     		ldr	r3, .L331+112
 4009 0160 0122     		movs	r2, #1
 4010 0162 1A70     		strb	r2, [r3]
 4011              	.L279:
 830:serial.c      ****                                                 }
 831:serial.c      ****                                              }
 832:serial.c      ****                                           }
 833:serial.c      ****                                        }
 834:serial.c      ****                                     }
 835:serial.c      ****                                  }
 836:serial.c      ****                               }
 837:serial.c      ****                            }
 838:serial.c      ****                         }
 839:serial.c      ****                      }
 840:serial.c      ****                   }
 841:serial.c      ****                }
 842:serial.c      ****             }
 843:serial.c      ****          }
 844:serial.c      ****          if (time_out) {
 4012              		.loc 1 844 10 is_stmt 1 view .LVU1184
 4013              		.loc 1 844 14 is_stmt 0 view .LVU1185
 4014 0164 2368     		ldr	r3, [r4]
 4015              		.loc 1 844 13 view .LVU1186
 4016 0166 93B1     		cbz	r3, .L275
 845:serial.c      ****             txcnt3 = strlen(txbuff3);
 4017              		.loc 1 845 13 is_stmt 1 view .LVU1187
 4018              		.loc 1 845 22 is_stmt 0 view .LVU1188
 4019 0168 3048     		ldr	r0, .L331+12
 4020 016a FFF7FEFF 		bl	strlen
 4021              	.LVL208:
 4022              		.loc 1 845 20 discriminator 1 view .LVU1189
 4023 016e 494B     		ldr	r3, .L331+116
 4024 0170 80B2     		uxth	r0, r0
 4025 0172 1880     		strh	r0, [r3]	@ movhi
 846:serial.c      ****             tx_enable3(txcnt3);
 4026              		.loc 1 846 13 is_stmt 1 view .LVU1190
 4027 0174 1888     		ldrh	r0, [r3]
 4028 0176 C0B2     		uxtb	r0, r0
 4029 0178 FFF7FEFF 		bl	tx_enable3
 4030              	.LVL209:
 847:serial.c      ****             bzero(rxbuff3,2048);
 4031              		.loc 1 847 13 view .LVU1191
 4032 017c 4FF40062 		mov	r2, #2048
 4033 0180 4548     		ldr	r0, .L331+120
 4034 0182 0021     		movs	r1, #0
 4035 0184 FFF7FEFF 		bl	memset
 4036              	.LVL210:
 848:serial.c      ****             rxcnt3 = 0;
 4037              		.loc 1 848 13 view .LVU1192
 4038              		.loc 1 848 20 is_stmt 0 view .LVU1193
 4039 0188 444B     		ldr	r3, .L331+124
 4040 018a 0022     		movs	r2, #0
 4041 018c 1A80     		strh	r2, [r3]	@ movhi
 4042              	.L275:
 4043              	.LBE31:
 4044              	.LBE30:
 849:serial.c      ****          }
 850:serial.c      ****       }
 851:serial.c      **** }
 4045              		.loc 1 851 1 view .LVU1194
 4046 018e 0AB0     		add	sp, sp, #40
 4047              		.cfi_remember_state
 4048              		.cfi_def_cfa_offset 32
 4049              		@ sp needed
 4050 0190 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4051              	.L292:
 4052              		.cfi_restore_state
 4053              	.LBB33:
 4054              	.LBB32:
 778:serial.c      ****                               sprintf(txbuff3, "AT+CIPMUX=1\r\n"); // 0 Single, 1 Mult
 4055              		.loc 1 778 28 is_stmt 1 view .LVU1195
 778:serial.c      ****                               sprintf(txbuff3, "AT+CIPMUX=1\r\n"); // 0 Single, 1 Mult
 4056              		.loc 1 778 32 is_stmt 0 view .LVU1196
 4057 0194 3E4B     		ldr	r3, .L331+112
 4058 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 778:serial.c      ****                               sprintf(txbuff3, "AT+CIPMUX=1\r\n"); // 0 Single, 1 Mult
 4059              		.loc 1 778 31 view .LVU1197
 4060 0198 0BB1     		cbz	r3, .L295
 779:serial.c      ****                               time_out = 200;
 4061              		.loc 1 779 31 is_stmt 1 view .LVU1198
 4062 019a 4149     		ldr	r1, .L331+128
 4063 019c 6FE7     		b	.L321
 4064              	.L295:
 782:serial.c      ****                                  sprintf(txbuff3, "AT+CIPSERVER=1,11000\r\n");     // 0 Disable 1 e
 4065              		.loc 1 782 31 view .LVU1199
 782:serial.c      ****                                  sprintf(txbuff3, "AT+CIPSERVER=1,11000\r\n");     // 0 Disable 1 e
 4066              		.loc 1 782 35 is_stmt 0 view .LVU1200
 4067 019e 414B     		ldr	r3, .L331+132
 4068 01a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 782:serial.c      ****                                  sprintf(txbuff3, "AT+CIPSERVER=1,11000\r\n");     // 0 Disable 1 e
 4069              		.loc 1 782 34 view .LVU1201
 4070 01a2 0BB1     		cbz	r3, .L296
 783:serial.c      ****                                  time_out = 200;
 4071              		.loc 1 783 34 is_stmt 1 view .LVU1202
 4072 01a4 4049     		ldr	r1, .L331+136
 4073 01a6 6AE7     		b	.L321
 4074              	.L296:
 786:serial.c      ****                                     sprintf(txbuff3, "AT+MQTTUSERCFG=0,%d,\"CHOICHOI\",\"%s\",\"%s\
 4075              		.loc 1 786 34 view .LVU1203
 786:serial.c      ****                                     sprintf(txbuff3, "AT+MQTTUSERCFG=0,%d,\"CHOICHOI\",\"%s\",\"%s\
 4076              		.loc 1 786 38 is_stmt 0 view .LVU1204
 4077 01a8 404B     		ldr	r3, .L331+140
 4078 01aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 786:serial.c      ****                                     sprintf(txbuff3, "AT+MQTTUSERCFG=0,%d,\"CHOICHOI\",\"%s\",\"%s\
 4079              		.loc 1 786 37 view .LVU1205
 4080 01ac 53B1     		cbz	r3, .L297
 787:serial.c      ****                                                    mqtt_mode+1,login_id,login_pw);	// Name
 4081              		.loc 1 787 37 is_stmt 1 view .LVU1206
 4082 01ae 404B     		ldr	r3, .L331+144
 4083 01b0 4049     		ldr	r1, .L331+148
 4084 01b2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4085 01b4 404B     		ldr	r3, .L331+152
 4086 01b6 0093     		str	r3, [sp]
 4087 01b8 0132     		adds	r2, r2, #1
 4088 01ba 404B     		ldr	r3, .L331+156
 4089 01bc 1B48     		ldr	r0, .L331+12
 4090 01be FFF7FEFF 		bl	sprintf
 4091              	.LVL211:
 789:serial.c      ****                                  } else {
 4092              		.loc 1 789 37 view .LVU1207
 4093 01c2 5FE7     		b	.L325
 4094              	.L297:
 791:serial.c      ****                                        sprintf(txbuff3, "AT+MQTTCONN=0,\"%s\",%d,1\r\n",host_url,mq
 4095              		.loc 1 791 37 view .LVU1208
 791:serial.c      ****                                        sprintf(txbuff3, "AT+MQTTCONN=0,\"%s\",%d,1\r\n",host_url,mq
 4096              		.loc 1 791 41 is_stmt 0 view .LVU1209
 4097 01c4 3E4B     		ldr	r3, .L331+160
 4098 01c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 791:serial.c      ****                                        sprintf(txbuff3, "AT+MQTTCONN=0,\"%s\",%d,1\r\n",host_url,mq
 4099              		.loc 1 791 40 view .LVU1210
 4100 01c8 2BB1     		cbz	r3, .L298
 792:serial.c      ****                                        time_out = 5000;
 4101              		.loc 1 792 40 is_stmt 1 view .LVU1211
 4102 01ca 3E4B     		ldr	r3, .L331+164
 4103 01cc 3E4A     		ldr	r2, .L331+168
 4104 01ce 1B88     		ldrh	r3, [r3]
 4105 01d0 3E49     		ldr	r1, .L331+172
 4106 01d2 9BB2     		uxth	r3, r3
 4107 01d4 70E7     		b	.L329
 4108              	.L298:
 795:serial.c      ****                                           mqtt_connect = 1;
 4109              		.loc 1 795 40 view .LVU1212
 795:serial.c      ****                                           mqtt_connect = 1;
 4110              		.loc 1 795 44 is_stmt 0 view .LVU1213
 4111 01d6 3E4B     		ldr	r3, .L331+176
 4112 01d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 795:serial.c      ****                                           mqtt_connect = 1;
 4113              		.loc 1 795 43 view .LVU1214
 4114 01da 2BB1     		cbz	r3, .L299
 796:serial.c      ****                                           sprintf(txbuff3, "AT+MQTTSUB=0,\"%s\",1\r\n",rx_topic);
 4115              		.loc 1 796 43 is_stmt 1 view .LVU1215
 796:serial.c      ****                                           sprintf(txbuff3, "AT+MQTTSUB=0,\"%s\",1\r\n",rx_topic);
 4116              		.loc 1 796 56 is_stmt 0 view .LVU1216
 4117 01dc 144B     		ldr	r3, .L331+16
 797:serial.c      ****                                           time_out = 5000;
 4118              		.loc 1 797 43 view .LVU1217
 4119 01de 3D49     		ldr	r1, .L331+180
 796:serial.c      ****                                           sprintf(txbuff3, "AT+MQTTSUB=0,\"%s\",1\r\n",rx_topic);
 4120              		.loc 1 796 56 view .LVU1218
 4121 01e0 0122     		movs	r2, #1
 4122 01e2 1A70     		strb	r2, [r3]
 797:serial.c      ****                                           time_out = 5000;
 4123              		.loc 1 797 43 is_stmt 1 view .LVU1219
 4124 01e4 3C4A     		ldr	r2, .L331+184
 4125 01e6 60E7     		b	.L330
 4126              	.L299:
 800:serial.c      ****                                              if (ap_mode) {
 4127              		.loc 1 800 43 view .LVU1220
 800:serial.c      ****                                              if (ap_mode) {
 4128              		.loc 1 800 47 is_stmt 0 view .LVU1221
 4129 01e8 3C4D     		ldr	r5, .L331+188
 4130 01ea 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 800:serial.c      ****                                              if (ap_mode) {
 4131              		.loc 1 800 46 view .LVU1222
 4132 01ec 002B     		cmp	r3, #0
 4133 01ee 00F09B80 		beq	.L300
 801:serial.c      ****                                                 sprintf(txbuff3, "AT+CIPSEND=%d,%d\r\n",gid,tcp_len
 4134              		.loc 1 801 46 is_stmt 1 view .LVU1223
 801:serial.c      ****                                                 sprintf(txbuff3, "AT+CIPSEND=%d,%d\r\n",gid,tcp_len
 4135              		.loc 1 801 50 is_stmt 0 view .LVU1224
 4136 01f2 154B     		ldr	r3, .L331+40
 4137 01f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 801:serial.c      ****                                                 sprintf(txbuff3, "AT+CIPSEND=%d,%d\r\n",gid,tcp_len
 4138              		.loc 1 801 49 view .LVU1225
 4139 01f6 03F0FF07 		and	r7, r3, #255
 4140 01fa 002B     		cmp	r3, #0
 4141 01fc 78D0     		beq	.L301
 4142              	.L322:
 816:serial.c      ****                                                     send_data_flag = 1;
 4143              		.loc 1 816 52 is_stmt 1 view .LVU1226
 4144 01fe 384B     		ldr	r3, .L331+192
 4145 0200 3849     		ldr	r1, .L331+196
 4146 0202 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4147 0204 384B     		ldr	r3, .L331+200
 4148 0206 0948     		ldr	r0, .L331+12
 4149 0208 1B88     		ldrh	r3, [r3]
 4150 020a 9BB2     		uxth	r3, r3
 4151 020c FFF7FEFF 		bl	sprintf
 4152              	.LVL212:
 817:serial.c      ****                                                     time_out = 100;
 4153              		.loc 1 817 53 view .LVU1227
 817:serial.c      ****                                                     time_out = 100;
 4154              		.loc 1 817 68 is_stmt 0 view .LVU1228
 4155 0210 364B     		ldr	r3, .L331+204
 4156 0212 0122     		movs	r2, #1
 4157 0214 1A70     		strb	r2, [r3]
 818:serial.c      ****                                                 }
 4158              		.loc 1 818 53 is_stmt 1 view .LVU1229
 818:serial.c      ****                                                 }
 4159              		.loc 1 818 62 is_stmt 0 view .LVU1230
 4160 0216 6423     		movs	r3, #100
 4161 0218 2360     		str	r3, [r4]
 4162              	.L302:
 821:serial.c      ****                                           } else {
 4163              		.loc 1 821 46 is_stmt 1 view .LVU1231
 821:serial.c      ****                                           } else {
 4164              		.loc 1 821 56 is_stmt 0 view .LVU1232
 4165 021a 0023     		movs	r3, #0
 4166 021c 2B70     		strb	r3, [r5]
 4167 021e A1E7     		b	.L279
 4168              	.L332:
 4169              		.align	2
 4170              	.L331:
 4171 0220 00000000 		.word	time_out
 4172 0224 00000000 		.word	reset_flag
 4173 0228 00000000 		.word	.LC2
 4174 022c 00000000 		.word	txbuff3
 4175 0230 00000000 		.word	mqtt_connect
 4176 0234 00000000 		.word	pwr_flag
 4177 0238 00000000 		.word	wifi_power
 4178 023c 00000000 		.word	pwr_error
 4179 0240 09000000 		.word	.LC3
 4180 0244 00000000 		.word	mode_flag
 4181 0248 00000000 		.word	ap_mode
 4182 024c 19000000 		.word	.LC4
 4183 0250 27000000 		.word	.LC5
 4184 0254 00000000 		.word	host_flag
 4185 0258 35000000 		.word	.LC6
 4186 025c 00000000 		.word	ssid_flag
 4187 0260 00000000 		.word	wifi_ch
 4188 0264 4C000000 		.word	.LC7
 4189 0268 00000000 		.word	passwd
 4190 026c 00000000 		.word	ssid
 4191 0270 72000000 		.word	.LC8
 4192 0274 00000000 		.word	ip_flag
 4193 0278 87000000 		.word	.LC9
 4194 027c 00000000 		.word	dhcp_disable
 4195 0280 00000000 		.word	m_ip
 4196 0284 00000000 		.word	m_gw
 4197 0288 00000000 		.word	m_nm
 4198 028c C2000000 		.word	.LC10
 4199 0290 00000000 		.word	mux_flag
 4200 0294 00000000 		.word	txcnt3
 4201 0298 00000000 		.word	rxbuff3
 4202 029c 00000000 		.word	rxcnt3
 4203 02a0 F8000000 		.word	.LC11
 4204 02a4 00000000 		.word	server_flag
 4205 02a8 06010000 		.word	.LC12
 4206 02ac 00000000 		.word	mqtt_cfg_flag
 4207 02b0 00000000 		.word	mqtt_mode
 4208 02b4 1D010000 		.word	.LC13
 4209 02b8 00000000 		.word	login_pw
 4210 02bc 00000000 		.word	login_id
 4211 02c0 00000000 		.word	mqtt_connect_flag
 4212 02c4 00000000 		.word	mqtt_port
 4213 02c8 00000000 		.word	host_url
 4214 02cc 4F010000 		.word	.LC14
 4215 02d0 00000000 		.word	mqtt_sub_flag
 4216 02d4 69010000 		.word	.LC15
 4217 02d8 00000000 		.word	rx_topic
 4218 02dc 00000000 		.word	send_flag
 4219 02e0 00000000 		.word	gid
 4220 02e4 7F010000 		.word	.LC16
 4221 02e8 00000000 		.word	tcp_length
 4222 02ec 00000000 		.word	send_data_flag
 4223              	.L301:
 806:serial.c      ****                                                    if (mqtt_connect) {
 4224              		.loc 1 806 47 is_stmt 1 view .LVU1233
 806:serial.c      ****                                                    if (mqtt_connect) {
 4225              		.loc 1 806 51 is_stmt 0 view .LVU1234
 4226 02f0 154E     		ldr	r6, .L333
 4227 02f2 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 806:serial.c      ****                                                    if (mqtt_connect) {
 4228              		.loc 1 806 50 view .LVU1235
 4229 02f4 83B1     		cbz	r3, .L303
 807:serial.c      ****                                                       sprintf(txbuff3, "AT+MQTTPUBRAW=0,\"%s\",%d,0
 4230              		.loc 1 807 52 is_stmt 1 view .LVU1236
 807:serial.c      ****                                                       sprintf(txbuff3, "AT+MQTTPUBRAW=0,\"%s\",%d,0
 4231              		.loc 1 807 56 is_stmt 0 view .LVU1237
 4232 02f6 154B     		ldr	r3, .L333+4
 4233 02f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 807:serial.c      ****                                                       sprintf(txbuff3, "AT+MQTTPUBRAW=0,\"%s\",%d,0
 4234              		.loc 1 807 55 view .LVU1238
 4235 02fa 6BB1     		cbz	r3, .L303
 808:serial.c      ****                                                       send_data_flag = 1;
 4236              		.loc 1 808 55 is_stmt 1 view .LVU1239
 4237 02fc 144B     		ldr	r3, .L333+8
 4238 02fe 154A     		ldr	r2, .L333+12
 4239 0300 1B88     		ldrh	r3, [r3]
 4240 0302 1549     		ldr	r1, .L333+16
 4241 0304 1548     		ldr	r0, .L333+20
 4242 0306 9BB2     		uxth	r3, r3
 4243 0308 FFF7FEFF 		bl	sprintf
 4244              	.LVL213:
 809:serial.c      ****                                                       mqtt_send = 0;
 4245              		.loc 1 809 55 view .LVU1240
 809:serial.c      ****                                                       mqtt_send = 0;
 4246              		.loc 1 809 70 is_stmt 0 view .LVU1241
 4247 030c 144B     		ldr	r3, .L333+24
 4248 030e 0122     		movs	r2, #1
 4249 0310 1A70     		strb	r2, [r3]
 810:serial.c      ****                                                       time_out = 100;
 4250              		.loc 1 810 55 is_stmt 1 view .LVU1242
 811:serial.c      ****                                                    }
 4251              		.loc 1 811 64 is_stmt 0 view .LVU1243
 4252 0312 6423     		movs	r3, #100
 810:serial.c      ****                                                       time_out = 100;
 4253              		.loc 1 810 65 view .LVU1244
 4254 0314 3770     		strb	r7, [r6]
 811:serial.c      ****                                                    }
 4255              		.loc 1 811 55 is_stmt 1 view .LVU1245
 811:serial.c      ****                                                    }
 4256              		.loc 1 811 64 is_stmt 0 view .LVU1246
 4257 0316 2360     		str	r3, [r4]
 4258              	.L303:
 814:serial.c      ****                                                    tcp_send = 0;
 4259              		.loc 1 814 49 is_stmt 1 view .LVU1247
 814:serial.c      ****                                                    tcp_send = 0;
 4260              		.loc 1 814 53 is_stmt 0 view .LVU1248
 4261 0318 124B     		ldr	r3, .L333+28
 4262 031a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 814:serial.c      ****                                                    tcp_send = 0;
 4263              		.loc 1 814 52 view .LVU1249
 4264 031c 002A     		cmp	r2, #0
 4265 031e 3FF47CAF 		beq	.L302
 815:serial.c      ****                                                    sprintf(txbuff3, "AT+CIPSEND=%d,%d\r\n",gid,tcp_
 4266              		.loc 1 815 52 is_stmt 1 view .LVU1250
 815:serial.c      ****                                                    sprintf(txbuff3, "AT+CIPSEND=%d,%d\r\n",gid,tcp_
 4267              		.loc 1 815 61 is_stmt 0 view .LVU1251
 4268 0322 0022     		movs	r2, #0
 4269 0324 1A70     		strb	r2, [r3]
 4270 0326 6AE7     		b	.L322
 4271              	.L300:
 823:serial.c      ****                                                 sprintf(txbuff3, "AT+CIPSNTPCFG=1,8,\"%s\"\r\n",ntp
 4272              		.loc 1 823 46 is_stmt 1 view .LVU1252
 823:serial.c      ****                                                 sprintf(txbuff3, "AT+CIPSNTPCFG=1,8,\"%s\"\r\n",ntp
 4273              		.loc 1 823 50 is_stmt 0 view .LVU1253
 4274 0328 0F4B     		ldr	r3, .L333+32
 4275 032a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 823:serial.c      ****                                                 sprintf(txbuff3, "AT+CIPSNTPCFG=1,8,\"%s\"\r\n",ntp
 4276              		.loc 1 823 49 view .LVU1254
 4277 032c 13B1     		cbz	r3, .L304
 824:serial.c      ****                                                 time_out = 200;
 4278              		.loc 1 824 49 is_stmt 1 view .LVU1255
 4279 032e 0F4A     		ldr	r2, .L333+36
 4280 0330 0F49     		ldr	r1, .L333+40
 4281 0332 99E6     		b	.L328
 4282              	.L304:
 827:serial.c      ****                                                    sprintf(txbuff3, "AT+CIPSNTPTIME?\r\n");
 4283              		.loc 1 827 49 view .LVU1256
 827:serial.c      ****                                                    sprintf(txbuff3, "AT+CIPSNTPTIME?\r\n");
 4284              		.loc 1 827 53 is_stmt 0 view .LVU1257
 4285 0334 0F4B     		ldr	r3, .L333+44
 4286 0336 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 827:serial.c      ****                                                    sprintf(txbuff3, "AT+CIPSNTPTIME?\r\n");
 4287              		.loc 1 827 52 view .LVU1258
 4288 0338 002B     		cmp	r3, #0
 4289 033a 3FF413AF 		beq	.L279
 828:serial.c      ****                                                    time_out = 1000;
 4290              		.loc 1 828 52 is_stmt 1 view .LVU1259
 4291 033e 0E49     		ldr	r1, .L333+48
 4292 0340 0648     		ldr	r0, .L333+20
 4293 0342 FFF7FEFF 		bl	strcpy
 4294              	.LVL214:
 4295 0346 6EE6     		b	.L323
 4296              	.L334:
 4297              		.align	2
 4298              	.L333:
 4299 0348 00000000 		.word	mqtt_send
 4300 034c 00000000 		.word	mqtt_connect
 4301 0350 00000000 		.word	txcnt3
 4302 0354 00000000 		.word	tx_topic
 4303 0358 92010000 		.word	.LC17
 4304 035c 00000000 		.word	txbuff3
 4305 0360 00000000 		.word	send_data_flag
 4306 0364 00000000 		.word	tcp_send
 4307 0368 00000000 		.word	ntp_flag
 4308 036c 00000000 		.word	ntp_url
 4309 0370 B0010000 		.word	.LC18
 4310 0374 00000000 		.word	ntp_req_flag
 4311 0378 C9010000 		.word	.LC19
 4312              	.LBE32:
 4313              	.LBE33:
 4314              		.cfi_endproc
 4315              	.LFE147:
 4317              		.section	.text.send_mode,"ax",%progbits
 4318              		.align	1
 4319              		.global	send_mode
 4320              		.syntax unified
 4321              		.thumb
 4322              		.thumb_func
 4324              	send_mode:
 4325              	.LFB148:
 852:serial.c      **** 
 853:serial.c      **** 
 854:serial.c      **** void send_mode (void)
 855:serial.c      **** {
 4326              		.loc 1 855 1 view -0
 4327              		.cfi_startproc
 4328              		@ args = 0, pretend = 0, frame = 0
 4329              		@ frame_needed = 0, uses_anonymous_args = 0
 4330              		@ link register save eliminated.
 856:serial.c      ****       unsigned short idx;
 4331              		.loc 1 856 7 view .LVU1261
 857:serial.c      ****       unsigned char bcc;
 4332              		.loc 1 857 7 view .LVU1262
 858:serial.c      ****       txbuff3[0] = STX;
 4333              		.loc 1 858 7 view .LVU1263
 855:serial.c      ****       unsigned short idx;
 4334              		.loc 1 855 1 is_stmt 0 view .LVU1264
 4335 0000 10B4     		push	{r4}
 4336              		.cfi_def_cfa_offset 4
 4337              		.cfi_offset 4, -4
 859:serial.c      ****       txbuff3[1] = this_id;
 4338              		.loc 1 859 18 view .LVU1265
 4339 0002 0F49     		ldr	r1, .L338
 858:serial.c      ****       txbuff3[0] = STX;
 4340              		.loc 1 858 18 view .LVU1266
 4341 0004 0F4B     		ldr	r3, .L338+4
 4342              		.loc 1 859 18 view .LVU1267
 4343 0006 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4344 0008 5970     		strb	r1, [r3, #1]
 860:serial.c      ****       txbuff3[2] = 0x41;
 4345              		.loc 1 860 18 view .LVU1268
 4346 000a 4121     		movs	r1, #65
 4347 000c 9970     		strb	r1, [r3, #2]
 861:serial.c      ****       txbuff3[3] = 0x20;
 4348              		.loc 1 861 18 view .LVU1269
 4349 000e 2021     		movs	r1, #32
 862:serial.c      ****       txbuff3[4] = 0x06;
 4350              		.loc 1 862 18 view .LVU1270
 4351 0010 0620     		movs	r0, #6
 858:serial.c      ****       txbuff3[1] = this_id;
 4352              		.loc 1 858 18 view .LVU1271
 4353 0012 0222     		movs	r2, #2
 861:serial.c      ****       txbuff3[3] = 0x20;
 4354              		.loc 1 861 18 view .LVU1272
 4355 0014 D970     		strb	r1, [r3, #3]
 863:serial.c      ****       txbuff3[5] = 0x20;
 4356              		.loc 1 863 18 view .LVU1273
 4357 0016 5971     		strb	r1, [r3, #5]
 864:serial.c      ****       txbuff3[6] = 0x20;
 4358              		.loc 1 864 18 view .LVU1274
 4359 0018 9971     		strb	r1, [r3, #6]
 865:serial.c      ****       txbuff3[7] = ETX;
 4360              		.loc 1 865 18 view .LVU1275
 4361 001a 0321     		movs	r1, #3
 862:serial.c      ****       txbuff3[5] = 0x20;
 4362              		.loc 1 862 18 view .LVU1276
 4363 001c 1871     		strb	r0, [r3, #4]
 4364              		.loc 1 865 18 view .LVU1277
 4365 001e D971     		strb	r1, [r3, #7]
 858:serial.c      ****       txbuff3[1] = this_id;
 4366              		.loc 1 858 18 view .LVU1278
 4367 0020 1A70     		strb	r2, [r3]
 859:serial.c      ****       txbuff3[2] = 0x41;
 4368              		.loc 1 859 7 is_stmt 1 view .LVU1279
 860:serial.c      ****       txbuff3[3] = 0x20;
 4369              		.loc 1 860 7 view .LVU1280
 861:serial.c      ****       txbuff3[4] = 0x06;
 4370              		.loc 1 861 7 view .LVU1281
 862:serial.c      ****       txbuff3[5] = 0x20;
 4371              		.loc 1 862 7 view .LVU1282
 863:serial.c      ****       txbuff3[6] = 0x20;
 4372              		.loc 1 863 7 view .LVU1283
 864:serial.c      ****       txbuff3[7] = ETX;
 4373              		.loc 1 864 7 view .LVU1284
 4374              		.loc 1 865 7 view .LVU1285
 866:serial.c      ****       bcc = txbuff3[0];
 4375              		.loc 1 866 7 view .LVU1286
 4376              	.LVL215:
 867:serial.c      ****       for (idx=1;idx<8;idx++) bcc = bcc ^ txbuff3[idx];
 4377              		.loc 1 867 7 view .LVU1287
 4378              		.loc 1 867 21 discriminator 1 view .LVU1288
 865:serial.c      ****       bcc = txbuff3[0];
 4379              		.loc 1 865 18 is_stmt 0 view .LVU1289
 4380 0022 0721     		movs	r1, #7
 4381 0024 1846     		mov	r0, r3
 4382              	.LVL216:
 4383              	.L336:
 4384              		.loc 1 867 31 is_stmt 1 discriminator 3 view .LVU1290
 4385              		.loc 1 867 35 is_stmt 0 discriminator 3 view .LVU1291
 4386 0026 13F8014F 		ldrb	r4, [r3, #1]!	@ zero_extendqisi2
 4387              	.LVL217:
 4388              		.loc 1 867 21 discriminator 1 view .LVU1292
 4389 002a 0139     		subs	r1, r1, #1
 4390 002c 89B2     		uxth	r1, r1
 4391              		.loc 1 867 35 discriminator 3 view .LVU1293
 4392 002e 6240     		eors	r2, r2, r4
 4393              	.LVL218:
 4394              		.loc 1 867 27 is_stmt 1 discriminator 3 view .LVU1294
 4395              		.loc 1 867 21 discriminator 1 view .LVU1295
 4396 0030 0029     		cmp	r1, #0
 4397 0032 F8D1     		bne	.L336
 868:serial.c      ****       txbuff3[8] = bcc;
 4398              		.loc 1 868 7 view .LVU1296
 4399              		.loc 1 868 18 is_stmt 0 view .LVU1297
 4400 0034 0272     		strb	r2, [r0, #8]
 869:serial.c      ****       tx_enable3(9);
 4401              		.loc 1 869 7 is_stmt 1 view .LVU1298
 870:serial.c      **** }
 4402              		.loc 1 870 1 is_stmt 0 view .LVU1299
 4403 0036 5DF8044B 		ldr	r4, [sp], #4
 4404              		.cfi_restore 4
 4405              		.cfi_def_cfa_offset 0
 869:serial.c      ****       tx_enable3(9);
 4406              		.loc 1 869 7 view .LVU1300
 4407 003a 0920     		movs	r0, #9
 4408 003c FFF7FEBF 		b	tx_enable3
 4409              	.LVL219:
 4410              	.L339:
 869:serial.c      ****       tx_enable3(9);
 4411              		.loc 1 869 7 view .LVU1301
 4412              		.align	2
 4413              	.L338:
 4414 0040 00000000 		.word	this_id
 4415 0044 00000000 		.word	txbuff3
 4416              		.cfi_endproc
 4417              	.LFE148:
 4419              		.section	.rodata.receive_check_wifi.str1.1,"aMS",%progbits,1
 4420              	.LC20:
 4421 0000 41542B43 		.ascii	"AT+CIPSEND=\000"
 4421      49505345 
 4421      4E443D00 
 4422              	.LC21:
 4423 000c 41542B4D 		.ascii	"AT+MQTTPUBRAW=\000"
 4423      51545450 
 4423      55425241 
 4423      573D00
 4424              	.LC22:
 4425 001b 2B495044 		.ascii	"+IPD\000"
 4425      00
 4426              	.LC23:
 4427 0020 2B4D5154 		.ascii	"+MQTTSUBRECV\000"
 4427      54535542 
 4427      52454356 
 4427      00
 4428              	.LC24:
 4429 002d 72656164 		.ascii	"ready\000"
 4429      7900
 4430              	.LC25:
 4431 0033 62757379 		.ascii	"busy p...\000"
 4431      20702E2E 
 4431      2E00
 4432              	.LC26:
 4433 003d 57494649 		.ascii	"WIFI CONNECTED\000"
 4433      20434F4E 
 4433      4E454354 
 4433      454400
 4434              	.LC27:
 4435 004c 57494649 		.ascii	"WIFI GOT IP\000"
 4435      20474F54 
 4435      20495000 
 4436              	.LC28:
 4437 0058 4552524F 		.ascii	"ERROR\000"
 4437      5200
 4438              	.LC29:
 4439 005e 4641494C 		.ascii	"FAIL\000"
 4439      00
 4440              	.LC30:
 4441 0063 2B4D5154 		.ascii	"+MQTTPUB\000"
 4441      54505542 
 4441      00
 4442              	.LC31:
 4443 006c 53454E44 		.ascii	"SEND\000"
 4443      00
 4444              	.LC32:
 4445 0071 41542B43 		.ascii	"AT+CWSAP\000"
 4445      57534150 
 4445      00
 4446              	.LC33:
 4447 007a 41542B43 		.ascii	"AT+CIPSERVER\000"
 4447      49505345 
 4447      52564552 
 4447      00
 4448              	.LC34:
 4449 0087 41542B52 		.ascii	"AT+RFPOWER\000"
 4449      46504F57 
 4449      455200
 4450              	.LC35:
 4451 0092 41542B43 		.ascii	"AT+CWMODE\000"
 4451      574D4F44 
 4451      4500
 4452              	.LC36:
 4453 009c 41542B43 		.ascii	"AT+CIPAP\000"
 4453      49504150 
 4453      00
 4454              	.LC37:
 4455 00a5 41542B43 		.ascii	"AT+CIPSTA\000"
 4455      49505354 
 4455      4100
 4456              	.LC38:
 4457 00af 41542B43 		.ascii	"AT+CIPMUX\000"
 4457      49504D55 
 4457      5800
 4458              	.LC39:
 4459 00b9 41542B4D 		.ascii	"AT+MQTTUSERCFG\000"
 4459      51545455 
 4459      53455243 
 4459      464700
 4460              	.LC40:
 4461 00c8 2B4D5154 		.ascii	"+MQTTCONNECTED\000"
 4461      54434F4E 
 4461      4E454354 
 4461      454400
 4462              	.LC41:
 4463 00d7 41542B43 		.ascii	"AT+CIPSNTPCFG\000"
 4463      4950534E 
 4463      54504346 
 4463      4700
 4464              	.LC42:
 4465 00e5 41542B43 		.ascii	"AT+CIPSNTPTIME\000"
 4465      4950534E 
 4465      54505449 
 4465      4D4500
 4466              	.LC43:
 4467 00f4 41542B43 		.ascii	"AT+CWHOSTNAME\000"
 4467      57484F53 
 4467      544E414D 
 4467      4500
 4468              		.section	.text.receive_check_wifi,"ax",%progbits
 4469              		.align	1
 4470              		.global	receive_check_wifi
 4471              		.syntax unified
 4472              		.thumb
 4473              		.thumb_func
 4475              	receive_check_wifi:
 4476              	.LFB149:
 871:serial.c      **** 
 872:serial.c      **** 
 873:serial.c      **** void receive_check_wifi (void)
 874:serial.c      **** {
 4477              		.loc 1 874 1 is_stmt 1 view -0
 4478              		.cfi_startproc
 4479              		@ args = 0, pretend = 0, frame = 0
 4480              		@ frame_needed = 0, uses_anonymous_args = 0
 875:serial.c      ****       unsigned short idx,pos;
 4481              		.loc 1 875 7 view .LVU1303
 876:serial.c      ****       unsigned char bcc,wait_wifi,rxok;
 4482              		.loc 1 876 7 view .LVU1304
 877:serial.c      ****       if (rxcnt3 >= 2048) rxcnt3 = 0;
 4483              		.loc 1 877 7 view .LVU1305
 874:serial.c      ****       unsigned short idx,pos;
 4484              		.loc 1 874 1 is_stmt 0 view .LVU1306
 4485 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4486              		.cfi_def_cfa_offset 24
 4487              		.cfi_offset 4, -24
 4488              		.cfi_offset 5, -20
 4489              		.cfi_offset 6, -16
 4490              		.cfi_offset 7, -12
 4491              		.cfi_offset 8, -8
 4492              		.cfi_offset 14, -4
 4493              		.loc 1 877 18 view .LVU1307
 4494 0004 844E     		ldr	r6, .L536
 4495 0006 3388     		ldrh	r3, [r6]
 4496 0008 9BB2     		uxth	r3, r3
 4497              		.loc 1 877 10 view .LVU1308
 4498 000a B3F5006F 		cmp	r3, #2048
 4499              		.loc 1 877 27 is_stmt 1 discriminator 1 view .LVU1309
 4500              		.loc 1 877 34 is_stmt 0 discriminator 1 view .LVU1310
 4501 000e 24BF     		itt	cs
 4502 0010 0023     		movcs	r3, #0
 4503 0012 3380     		strhcs	r3, [r6]	@ movhi
 878:serial.c      ****       if (rxcnt3) {
 4504              		.loc 1 878 7 is_stmt 1 view .LVU1311
 4505              		.loc 1 878 11 is_stmt 0 view .LVU1312
 4506 0014 3388     		ldrh	r3, [r6]
 4507 0016 9BB2     		uxth	r3, r3
 4508              		.loc 1 878 10 view .LVU1313
 4509 0018 002B     		cmp	r3, #0
 4510 001a 00F06482 		beq	.L343
 879:serial.c      ****       	 rxok = 0;
 4511              		.loc 1 879 9 is_stmt 1 view .LVU1314
 4512              	.LVL220:
 880:serial.c      ****          if ((rxbuff3[0] == STX) && (rxbuff3[1] == this_id) && (rxbuff3[5] == ETX) && (rxcnt3 >= 7)
 4513              		.loc 1 880 10 view .LVU1315
 4514              		.loc 1 880 22 is_stmt 0 view .LVU1316
 4515 001e 7F4D     		ldr	r5, .L536+4
 4516              		.loc 1 880 13 view .LVU1317
 4517 0020 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 4518 0022 022B     		cmp	r3, #2
 4519 0024 28D1     		bne	.L344
 4520              		.loc 1 880 49 discriminator 1 view .LVU1318
 4521 0026 7E4A     		ldr	r2, .L536+8
 4522              		.loc 1 880 45 discriminator 1 view .LVU1319
 4523 0028 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 4524              		.loc 1 880 49 discriminator 1 view .LVU1320
 4525 002a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 4526              		.loc 1 880 34 discriminator 1 view .LVU1321
 4527 002c 9342     		cmp	r3, r2
 4528 002e 23D1     		bne	.L344
 4529              		.loc 1 880 61 discriminator 2 view .LVU1322
 4530 0030 6A79     		ldrb	r2, [r5, #5]	@ zero_extendqisi2
 4531 0032 032A     		cmp	r2, #3
 4532 0034 20D1     		bne	.L344
 4533              		.loc 1 880 95 discriminator 3 view .LVU1323
 4534 0036 3288     		ldrh	r2, [r6]
 4535 0038 92B2     		uxth	r2, r2
 4536              		.loc 1 880 84 discriminator 3 view .LVU1324
 4537 003a 062A     		cmp	r2, #6
 4538 003c 1CD9     		bls	.L344
 4539              	.LVL221:
 881:serial.c      ****             bcc = rxbuff3[0];
 882:serial.c      ****             for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff3[idx];
 4540              		.loc 1 882 37 is_stmt 1 discriminator 3 view .LVU1325
 4541              		.loc 1 882 56 is_stmt 0 discriminator 3 view .LVU1326
 4542 003e A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 4543 0040 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 4544 0042 2A79     		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 883:serial.c      ****             if (bcc == rxbuff3[6]) {
 4545              		.loc 1 883 16 view .LVU1327
 4546 0044 AC79     		ldrb	r4, [r5, #6]	@ zero_extendqisi2
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4547              		.loc 1 882 41 discriminator 3 view .LVU1328
 4548 0046 83F00203 		eor	r3, r3, #2
 4549              	.LVL222:
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4550              		.loc 1 882 33 is_stmt 1 discriminator 3 view .LVU1329
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4551              		.loc 1 882 27 discriminator 1 view .LVU1330
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4552              		.loc 1 882 37 discriminator 3 view .LVU1331
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4553              		.loc 1 882 41 is_stmt 0 discriminator 3 view .LVU1332
 4554 004a 4B40     		eors	r3, r3, r1
 4555              	.LVL223:
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4556              		.loc 1 882 33 is_stmt 1 discriminator 3 view .LVU1333
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4557              		.loc 1 882 27 discriminator 1 view .LVU1334
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4558              		.loc 1 882 37 discriminator 3 view .LVU1335
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4559              		.loc 1 882 41 is_stmt 0 discriminator 3 view .LVU1336
 4560 004c 4340     		eors	r3, r3, r0
 4561              	.LVL224:
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4562              		.loc 1 882 33 is_stmt 1 discriminator 3 view .LVU1337
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4563              		.loc 1 882 27 discriminator 1 view .LVU1338
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4564              		.loc 1 882 37 discriminator 3 view .LVU1339
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4565              		.loc 1 882 41 is_stmt 0 discriminator 3 view .LVU1340
 4566 004e 5340     		eors	r3, r3, r2
 4567              	.LVL225:
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4568              		.loc 1 882 33 is_stmt 1 discriminator 3 view .LVU1341
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4569              		.loc 1 882 27 discriminator 1 view .LVU1342
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4570              		.loc 1 882 37 discriminator 3 view .LVU1343
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4571              		.loc 1 882 33 discriminator 3 view .LVU1344
 882:serial.c      ****             if (bcc == rxbuff3[6]) {
 4572              		.loc 1 882 27 discriminator 1 view .LVU1345
 4573              		.loc 1 883 13 view .LVU1346
 4574              		.loc 1 883 16 is_stmt 0 view .LVU1347
 4575 0050 83F00303 		eor	r3, r3, #3
 4576              	.LVL226:
 4577              		.loc 1 883 16 view .LVU1348
 4578 0054 9C42     		cmp	r4, r3
 4579 0056 0FD1     		bne	.L344
 884:serial.c      ****                if ((rxbuff3[2] == 0xFF) && (rxbuff3[3] == 0xFF) && (rxbuff3[4] == 0xFF)) {
 4580              		.loc 1 884 16 is_stmt 1 view .LVU1349
 4581              		.loc 1 884 65 is_stmt 0 discriminator 2 view .LVU1350
 4582 0058 0140     		ands	r1, r1, r0
 4583 005a 0A40     		ands	r2, r2, r1
 4584 005c FF2A     		cmp	r2, #255
 4585 005e 01D1     		bne	.L345
 885:serial.c      ****                   NVIC_SystemReset();
 4586              		.loc 1 885 19 is_stmt 1 view .LVU1351
 4587 0060 FFF7FEFF 		bl	NVIC_SystemReset
 4588              	.LVL227:
 4589              	.L345:
 886:serial.c      ****                } else {
 887:serial.c      ****                   send_mode();
 4590              		.loc 1 887 19 view .LVU1352
 4591 0064 FFF7FEFF 		bl	send_mode
 4592              	.LVL228:
 888:serial.c      ****                   ap_mode = 1;
 4593              		.loc 1 888 19 view .LVU1353
 4594              		.loc 1 888 27 is_stmt 0 view .LVU1354
 4595 0068 6E4A     		ldr	r2, .L536+12
 4596 006a 0123     		movs	r3, #1
 4597 006c 1370     		strb	r3, [r2]
 889:serial.c      ****                   reset_flag = 1;
 4598              		.loc 1 889 19 is_stmt 1 view .LVU1355
 4599              		.loc 1 889 30 is_stmt 0 view .LVU1356
 4600 006e 6E4A     		ldr	r2, .L536+16
 4601 0070 1370     		strb	r3, [r2]
 890:serial.c      ****                }
 891:serial.c      ****                time_out = 100;
 4602              		.loc 1 891 16 is_stmt 1 view .LVU1357
 4603              		.loc 1 891 25 is_stmt 0 view .LVU1358
 4604 0072 6E4B     		ldr	r3, .L536+20
 4605 0074 6422     		movs	r2, #100
 4606 0076 1A60     		str	r2, [r3]
 4607              	.LVL229:
 4608              	.L344:
 892:serial.c      ****             }
 893:serial.c      ****          }
 894:serial.c      ****          // 2.x.x
 895:serial.c      ****          if ((rxbuff3[rxcnt3 - 3] == 0x0D) && (rxbuff3[rxcnt3 - 2] == 0x0A) && (rxbuff3[rxcnt3 - 1]
 4609              		.loc 1 895 10 is_stmt 1 view .LVU1359
 4610              		.loc 1 895 30 is_stmt 0 view .LVU1360
 4611 0078 3388     		ldrh	r3, [r6]
 4612              		.loc 1 895 22 view .LVU1361
 4613 007a 15FA83F3 		uxtah	r3, r5, r3
 4614              		.loc 1 895 13 view .LVU1362
 4615 007e 13F8033C 		ldrb	r3, [r3, #-3]	@ zero_extendqisi2
 4616 0082 0D2B     		cmp	r3, #13
 4617 0084 40F0B780 		bne	.L430
 4618              		.loc 1 895 63 discriminator 1 view .LVU1363
 4619 0088 3388     		ldrh	r3, [r6]
 4620              		.loc 1 895 55 discriminator 1 view .LVU1364
 4621 008a 15FA83F3 		uxtah	r3, r5, r3
 4622              		.loc 1 895 44 discriminator 1 view .LVU1365
 4623 008e 13F8027C 		ldrb	r7, [r3, #-2]	@ zero_extendqisi2
 4624 0092 0A2F     		cmp	r7, #10
 4625 0094 40F0AF80 		bne	.L430
 4626              		.loc 1 895 96 discriminator 2 view .LVU1366
 4627 0098 3388     		ldrh	r3, [r6]
 4628              		.loc 1 895 88 discriminator 2 view .LVU1367
 4629 009a 15FA83F3 		uxtah	r3, r5, r3
 4630              		.loc 1 895 77 discriminator 2 view .LVU1368
 4631 009e 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 4632 00a2 3E2B     		cmp	r3, #62
 4633 00a4 40F0A780 		bne	.L430
 4634              		.loc 1 895 120 discriminator 3 view .LVU1369
 4635 00a8 3388     		ldrh	r3, [r6]
 4636 00aa 9BB2     		uxth	r3, r3
 4637              		.loc 1 895 109 discriminator 3 view .LVU1370
 4638 00ac 032B     		cmp	r3, #3
 4639 00ae 40F2A280 		bls	.L430
 896:serial.c      ****             if (send_data_flag) {
 4640              		.loc 1 896 13 is_stmt 1 view .LVU1371
 4641              		.loc 1 896 17 is_stmt 0 view .LVU1372
 4642 00b2 5F4B     		ldr	r3, .L536+24
 4643 00b4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4644              		.loc 1 896 16 view .LVU1373
 4645 00b6 9AB1     		cbz	r2, .L347
 897:serial.c      ****                send_data_flag = 0;
 4646              		.loc 1 897 16 is_stmt 1 view .LVU1374
 898:serial.c      ****                memcpy(txbuff3,tcp_tx,tcp_length);
 4647              		.loc 1 898 16 is_stmt 0 view .LVU1375
 4648 00b8 DFF88C81 		ldr	r8, .L536+48
 4649 00bc 5D49     		ldr	r1, .L536+28
 4650 00be 5E48     		ldr	r0, .L536+32
 897:serial.c      ****                send_data_flag = 0;
 4651              		.loc 1 897 31 view .LVU1376
 4652 00c0 0024     		movs	r4, #0
 4653 00c2 1C70     		strb	r4, [r3]
 4654              		.loc 1 898 16 is_stmt 1 view .LVU1377
 4655 00c4 B8F80020 		ldrh	r2, [r8]
 4656 00c8 92B2     		uxth	r2, r2
 4657 00ca FFF7FEFF 		bl	memcpy
 4658              	.LVL230:
 899:serial.c      ****                tx_enable3(tcp_length);
 4659              		.loc 1 899 16 view .LVU1378
 4660 00ce B8F80000 		ldrh	r0, [r8]
 4661 00d2 C0B2     		uxtb	r0, r0
 4662 00d4 FFF7FEFF 		bl	tx_enable3
 4663              	.LVL231:
 900:serial.c      ****                time_out = 10;
 4664              		.loc 1 900 16 view .LVU1379
 4665              		.loc 1 900 25 is_stmt 0 view .LVU1380
 4666 00d8 544B     		ldr	r3, .L536+20
 4667 00da 1F60     		str	r7, [r3]
 901:serial.c      ****                main_time = 0;
 4668              		.loc 1 901 16 is_stmt 1 view .LVU1381
 4669              		.loc 1 901 26 is_stmt 0 view .LVU1382
 4670 00dc 574B     		ldr	r3, .L536+36
 4671 00de 1C60     		str	r4, [r3]
 4672              	.L347:
 902:serial.c      ****                //s_printf("Boot1 SEND %d \r\n",tcp_length);
 903:serial.c      ****             }
 904:serial.c      ****             rxok = 1;
 4673              		.loc 1 904 18 view .LVU1383
 4674 00e0 0124     		movs	r4, #1
 4675              	.L346:
 4676              	.LVL232:
 905:serial.c      ****          }
 906:serial.c      **** 	 //1.x.x
 907:serial.c      **** 	 if ((rxbuff3[rxcnt3 - 4] == 0x0D) && (rxbuff3[rxcnt3 - 3] == 0x0A) && (rxbuff3[rxcnt3 - 2] == '>'
 4677              		.loc 1 907 3 is_stmt 1 view .LVU1384
 4678              		.loc 1 907 23 is_stmt 0 view .LVU1385
 4679 00e2 3388     		ldrh	r3, [r6]
 4680              		.loc 1 907 15 view .LVU1386
 4681 00e4 15FA83F3 		uxtah	r3, r5, r3
 4682              		.loc 1 907 6 view .LVU1387
 4683 00e8 13F8043C 		ldrb	r3, [r3, #-4]	@ zero_extendqisi2
 4684 00ec 0D2B     		cmp	r3, #13
 4685 00ee 30D1     		bne	.L348
 4686              		.loc 1 907 56 discriminator 1 view .LVU1388
 4687 00f0 3388     		ldrh	r3, [r6]
 4688              		.loc 1 907 48 discriminator 1 view .LVU1389
 4689 00f2 15FA83F3 		uxtah	r3, r5, r3
 4690              		.loc 1 907 37 discriminator 1 view .LVU1390
 4691 00f6 13F8037C 		ldrb	r7, [r3, #-3]	@ zero_extendqisi2
 4692 00fa 0A2F     		cmp	r7, #10
 4693 00fc 29D1     		bne	.L348
 4694              		.loc 1 907 89 discriminator 2 view .LVU1391
 4695 00fe 3388     		ldrh	r3, [r6]
 4696              		.loc 1 907 81 discriminator 2 view .LVU1392
 4697 0100 15FA83F3 		uxtah	r3, r5, r3
 4698              		.loc 1 907 70 discriminator 2 view .LVU1393
 4699 0104 13F8023C 		ldrb	r3, [r3, #-2]	@ zero_extendqisi2
 4700 0108 3E2B     		cmp	r3, #62
 4701 010a 22D1     		bne	.L348
 4702              		.loc 1 907 121 discriminator 3 view .LVU1394
 4703 010c 3388     		ldrh	r3, [r6]
 4704              		.loc 1 907 113 discriminator 3 view .LVU1395
 4705 010e 15FA83F3 		uxtah	r3, r5, r3
 4706              		.loc 1 907 102 discriminator 3 view .LVU1396
 4707 0112 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 4708 0116 202B     		cmp	r3, #32
 4709 0118 1BD1     		bne	.L348
 4710              		.loc 1 907 146 discriminator 4 view .LVU1397
 4711 011a 3388     		ldrh	r3, [r6]
 4712 011c 9BB2     		uxth	r3, r3
 4713              		.loc 1 907 135 discriminator 4 view .LVU1398
 4714 011e 042B     		cmp	r3, #4
 4715 0120 17D9     		bls	.L348
 4716              		.loc 1 907 152 discriminator 5 view .LVU1399
 4717 0122 ACB9     		cbnz	r4, .L349
 908:serial.c      **** 	    if (send_data_flag) {
 4718              		.loc 1 908 6 is_stmt 1 view .LVU1400
 4719              		.loc 1 908 10 is_stmt 0 view .LVU1401
 4720 0124 424B     		ldr	r3, .L536+24
 4721 0126 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4722              		.loc 1 908 9 view .LVU1402
 4723 0128 92B1     		cbz	r2, .L349
 909:serial.c      ****                send_data_flag = 0;
 4724              		.loc 1 909 16 is_stmt 1 view .LVU1403
 910:serial.c      ****                memcpy(txbuff3,tcp_tx,tcp_length);
 4725              		.loc 1 910 16 is_stmt 0 view .LVU1404
 4726 012a DFF81C81 		ldr	r8, .L536+48
 909:serial.c      ****                send_data_flag = 0;
 4727              		.loc 1 909 31 view .LVU1405
 4728 012e 1C70     		strb	r4, [r3]
 4729              		.loc 1 910 16 is_stmt 1 view .LVU1406
 4730 0130 B8F80020 		ldrh	r2, [r8]
 4731 0134 3F49     		ldr	r1, .L536+28
 4732 0136 4048     		ldr	r0, .L536+32
 4733 0138 92B2     		uxth	r2, r2
 4734 013a FFF7FEFF 		bl	memcpy
 4735              	.LVL233:
 911:serial.c      **** 	       tx_enable3(tcp_length);
 4736              		.loc 1 911 9 view .LVU1407
 4737 013e B8F80000 		ldrh	r0, [r8]
 4738 0142 C0B2     		uxtb	r0, r0
 4739 0144 FFF7FEFF 		bl	tx_enable3
 4740              	.LVL234:
 912:serial.c      **** 	       time_out = 10;
 4741              		.loc 1 912 9 view .LVU1408
 4742              		.loc 1 912 18 is_stmt 0 view .LVU1409
 4743 0148 384B     		ldr	r3, .L536+20
 4744 014a 1F60     		str	r7, [r3]
 913:serial.c      **** 	       main_time = 0;
 4745              		.loc 1 913 9 is_stmt 1 view .LVU1410
 4746              		.loc 1 913 19 is_stmt 0 view .LVU1411
 4747 014c 3B4B     		ldr	r3, .L536+36
 4748 014e 1C60     		str	r4, [r3]
 4749              	.L349:
 879:serial.c      ****          if ((rxbuff3[0] == STX) && (rxbuff3[1] == this_id) && (rxbuff3[5] == ETX) && (rxcnt3 >= 7)
 4750              		.loc 1 879 14 view .LVU1412
 4751 0150 0124     		movs	r4, #1
 4752              	.LVL235:
 4753              	.L348:
 914:serial.c      **** 	       //s_printf("Boot2 SEND %d \r\n",tcp_length);
 915:serial.c      **** 	    }
 916:serial.c      **** 	    rxok = 1;
 917:serial.c      **** 	 }
 918:serial.c      ****          //AT+CIPSEND=, AT+MQTTPUBRAW=
 919:serial.c      ****          if (((strncmp(rxbuff3,"AT+CIPSEND=",11) == 0) || (strncmp(rxbuff3,"AT+MQTTPUBRAW=",14) == 
 4754              		.loc 1 919 10 is_stmt 1 view .LVU1413
 4755              		.loc 1 919 16 is_stmt 0 view .LVU1414
 4756 0152 3B49     		ldr	r1, .L536+40
 4757 0154 3148     		ldr	r0, .L536+4
 4758 0156 0B22     		movs	r2, #11
 4759 0158 FFF7FEFF 		bl	strncmp
 4760              	.LVL236:
 4761              		.loc 1 919 13 discriminator 1 view .LVU1415
 4762 015c 28B1     		cbz	r0, .L350
 4763              		.loc 1 919 60 discriminator 2 view .LVU1416
 4764 015e 3949     		ldr	r1, .L536+44
 4765 0160 2E48     		ldr	r0, .L536+4
 4766 0162 0E22     		movs	r2, #14
 4767 0164 FFF7FEFF 		bl	strncmp
 4768              	.LVL237:
 4769              		.loc 1 919 56 discriminator 1 view .LVU1417
 4770 0168 10BB     		cbnz	r0, .L351
 4771              	.L350:
 4772              		.loc 1 919 104 discriminator 3 view .LVU1418
 4773 016a 04BB     		cbnz	r4, .L352
 920:serial.c      ****             if (rxbuff3[rxcnt3 - 1] == '>') {
 4774              		.loc 1 920 13 is_stmt 1 view .LVU1419
 4775              		.loc 1 920 32 is_stmt 0 view .LVU1420
 4776 016c 3388     		ldrh	r3, [r6]
 4777              		.loc 1 920 24 view .LVU1421
 4778 016e 15FA83F3 		uxtah	r3, r5, r3
 4779              		.loc 1 920 16 view .LVU1422
 4780 0172 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 4781 0176 3E2B     		cmp	r3, #62
 4782 0178 19D1     		bne	.L352
 921:serial.c      ****                if (send_data_flag) {
 4783              		.loc 1 921 16 is_stmt 1 view .LVU1423
 4784              		.loc 1 921 20 is_stmt 0 view .LVU1424
 4785 017a 2D4B     		ldr	r3, .L536+24
 4786 017c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4787              		.loc 1 921 19 view .LVU1425
 4788 017e B2B1     		cbz	r2, .L352
 922:serial.c      ****                   send_data_flag = 0;
 4789              		.loc 1 922 19 is_stmt 1 view .LVU1426
 923:serial.c      ****                   memcpy(txbuff3,tcp_tx,tcp_length);
 4790              		.loc 1 923 19 is_stmt 0 view .LVU1427
 4791 0180 314F     		ldr	r7, .L536+48
 922:serial.c      ****                   send_data_flag = 0;
 4792              		.loc 1 922 34 view .LVU1428
 4793 0182 1C70     		strb	r4, [r3]
 4794              		.loc 1 923 19 is_stmt 1 view .LVU1429
 4795 0184 3A88     		ldrh	r2, [r7]
 4796 0186 2B49     		ldr	r1, .L536+28
 4797 0188 2B48     		ldr	r0, .L536+32
 4798 018a 92B2     		uxth	r2, r2
 4799 018c FFF7FEFF 		bl	memcpy
 4800              	.LVL238:
 924:serial.c      ****                   tx_enable3(tcp_length);
 4801              		.loc 1 924 19 view .LVU1430
 4802 0190 3888     		ldrh	r0, [r7]
 4803 0192 C0B2     		uxtb	r0, r0
 4804 0194 FFF7FEFF 		bl	tx_enable3
 4805              	.LVL239:
 925:serial.c      ****                   bzero(rxbuff3, rxcnt3);
 4806              		.loc 1 925 19 view .LVU1431
 4807 0198 3288     		ldrh	r2, [r6]
 4808 019a 2048     		ldr	r0, .L536+4
 4809 019c 92B2     		uxth	r2, r2
 4810 019e 2146     		mov	r1, r4
 4811 01a0 FFF7FEFF 		bl	memset
 4812              	.LVL240:
 926:serial.c      ****                   rxcnt3 = 0;
 4813              		.loc 1 926 19 view .LVU1432
 927:serial.c      ****                   time_out = 0;
 4814              		.loc 1 927 28 is_stmt 0 view .LVU1433
 4815 01a4 214B     		ldr	r3, .L536+20
 926:serial.c      ****                   rxcnt3 = 0;
 4816              		.loc 1 926 26 view .LVU1434
 4817 01a6 3480     		strh	r4, [r6]	@ movhi
 4818              		.loc 1 927 19 is_stmt 1 view .LVU1435
 4819              		.loc 1 927 28 is_stmt 0 view .LVU1436
 4820 01a8 1C60     		str	r4, [r3]
 928:serial.c      ****                   main_time = 0;
 4821              		.loc 1 928 19 is_stmt 1 view .LVU1437
 4822              		.loc 1 928 29 is_stmt 0 view .LVU1438
 4823 01aa 244B     		ldr	r3, .L536+36
 4824 01ac 1C60     		str	r4, [r3]
 4825              	.L352:
 879:serial.c      ****          if ((rxbuff3[0] == STX) && (rxbuff3[1] == this_id) && (rxbuff3[5] == ETX) && (rxcnt3 >= 7)
 4826              		.loc 1 879 14 view .LVU1439
 4827 01ae 0124     		movs	r4, #1
 4828              	.LVL241:
 4829              	.L351:
 929:serial.c      ****                }
 930:serial.c      ****             }
 931:serial.c      ****             rxok = 1;
 932:serial.c      ****          }
 933:serial.c      ****          //\r\n+IPD     1.xx    2.xx,3.xx +\r\n
 934:serial.c      ****          if (((rxbuff3[0] == 0x0D) && (rxbuff3[1] == 0x0A) && (strncmp(rxbuff3 + 2,"+IPD",4) == 0))
 4830              		.loc 1 934 10 is_stmt 1 view .LVU1440
 4831              		.loc 1 934 13 is_stmt 0 view .LVU1441
 4832 01b0 2F78     		ldrb	r7, [r5]	@ zero_extendqisi2
 4833 01b2 0D2F     		cmp	r7, #13
 4834 01b4 40F08980 		bne	.L353
 4835              		.loc 1 934 36 discriminator 1 view .LVU1442
 4836 01b8 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 4837 01ba 0A2B     		cmp	r3, #10
 4838 01bc 40F08580 		bne	.L353
 4839              		.loc 1 934 64 discriminator 2 view .LVU1443
 4840 01c0 2249     		ldr	r1, .L536+52
 4841 01c2 2348     		ldr	r0, .L536+56
 4842 01c4 0422     		movs	r2, #4
 4843 01c6 FFF7FEFF 		bl	strncmp
 4844              	.LVL242:
 4845              		.loc 1 934 60 discriminator 1 view .LVU1444
 4846 01ca 0028     		cmp	r0, #0
 4847 01cc 7DD1     		bne	.L353
 4848              		.loc 1 934 101 discriminator 3 view .LVU1445
 4849 01ce 002C     		cmp	r4, #0
 4850 01d0 7AD1     		bne	.L355
 935:serial.c      ****             //RL+IPD,0,92:
 936:serial.c      ****             if (rxbuff3[6] == ',') {
 4851              		.loc 1 936 13 is_stmt 1 view .LVU1446
 4852              		.loc 1 936 16 is_stmt 0 view .LVU1447
 4853 01d2 AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 4854 01d4 2C2B     		cmp	r3, #44
 4855 01d6 77D1     		bne	.L355
 937:serial.c      ****                if (rxbuff3[8] == ',') {
 4856              		.loc 1 937 16 is_stmt 1 view .LVU1448
 4857              		.loc 1 937 19 is_stmt 0 view .LVU1449
 4858 01d8 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 4859 01da 2C2B     		cmp	r3, #44
 4860 01dc 74D1     		bne	.L355
 938:serial.c      ****                   if (rxbuff3[10] == ':') {
 4861              		.loc 1 938 19 is_stmt 1 view .LVU1450
 4862              		.loc 1 938 30 is_stmt 0 view .LVU1451
 4863 01de AB7A     		ldrb	r3, [r5, #10]	@ zero_extendqisi2
 4864 01e0 1C49     		ldr	r1, .L536+60
 4865 01e2 1D48     		ldr	r0, .L536+64
 4866              		.loc 1 938 22 view .LVU1452
 4867 01e4 3A2B     		cmp	r3, #58
 4868 01e6 08D1     		bne	.L357
 939:serial.c      ****                      rx_length = rxbuff3[9] - 0x30;
 4869              		.loc 1 939 22 is_stmt 1 view .LVU1453
 4870              		.loc 1 939 41 is_stmt 0 view .LVU1454
 4871 01e8 6B7A     		ldrb	r3, [r5, #9]	@ zero_extendqisi2
 4872              		.loc 1 939 45 view .LVU1455
 4873 01ea 303B     		subs	r3, r3, #48
 4874 01ec 9BB2     		uxth	r3, r3
 4875              		.loc 1 939 32 view .LVU1456
 4876 01ee 0B80     		strh	r3, [r1]	@ movhi
 940:serial.c      ****                      rx_offset = 11;
 4877              		.loc 1 940 22 is_stmt 1 view .LVU1457
 4878              		.loc 1 940 32 is_stmt 0 view .LVU1458
 4879 01f0 0B23     		movs	r3, #11
 4880              	.LVL243:
 4881              	.L532:
 941:serial.c      ****                   } else if (rxbuff3[11] == ':') {
 942:serial.c      ****                      rx_length = (rxbuff3[9] - 0x30) * 10 + (rxbuff3[10] - 0x30);
 943:serial.c      ****                      rx_offset = 12;
 944:serial.c      ****                   } else if (rxbuff3[12] == ':') {
 945:serial.c      ****                      rx_length = (rxbuff3[9] - 0x30) * 100 + (rxbuff3[10] - 0x30) * 10 + (rxbuff3[1
 946:serial.c      ****                      rx_offset = 13;
 947:serial.c      ****                   } else if (rxbuff3[13] == ':') {
 948:serial.c      ****                      rx_length = (rxbuff3[9] - 0x30) * 1000 + (rxbuff3[10] - 0x30) * 100 + (rxbuff3
 949:serial.c      ****                      rx_offset = 14;
 4882              		.loc 1 949 32 view .LVU1459
 4883 01f2 0380     		strh	r3, [r0]	@ movhi
 4884 01f4 47E0     		b	.L358
 4885              	.LVL244:
 4886              	.L430:
 879:serial.c      ****          if ((rxbuff3[0] == STX) && (rxbuff3[1] == this_id) && (rxbuff3[5] == ETX) && (rxcnt3 >= 7)
 4887              		.loc 1 879 14 view .LVU1460
 4888 01f6 0024     		movs	r4, #0
 4889 01f8 73E7     		b	.L346
 4890              	.LVL245:
 4891              	.L357:
 941:serial.c      ****                   } else if (rxbuff3[11] == ':') {
 4892              		.loc 1 941 26 is_stmt 1 view .LVU1461
 941:serial.c      ****                   } else if (rxbuff3[11] == ':') {
 4893              		.loc 1 941 37 is_stmt 0 view .LVU1462
 4894 01fa EC7A     		ldrb	r4, [r5, #11]	@ zero_extendqisi2
 4895              	.LVL246:
 941:serial.c      ****                   } else if (rxbuff3[11] == ':') {
 4896              		.loc 1 941 29 view .LVU1463
 4897 01fc 3A2C     		cmp	r4, #58
 4898 01fe 2DD1     		bne	.L359
 942:serial.c      ****                      rx_offset = 12;
 4899              		.loc 1 942 22 is_stmt 1 view .LVU1464
 942:serial.c      ****                      rx_offset = 12;
 4900              		.loc 1 942 42 is_stmt 0 view .LVU1465
 4901 0200 6A7A     		ldrb	r2, [r5, #9]	@ zero_extendqisi2
 942:serial.c      ****                      rx_offset = 12;
 4902              		.loc 1 942 46 view .LVU1466
 4903 0202 303A     		subs	r2, r2, #48
 942:serial.c      ****                      rx_offset = 12;
 4904              		.loc 1 942 59 view .LVU1467
 4905 0204 02EB8202 		add	r2, r2, r2, lsl #2
 4906 0208 303B     		subs	r3, r3, #48
 4907 020a 03EB4203 		add	r3, r3, r2, lsl #1
 4908 020e 9BB2     		uxth	r3, r3
 942:serial.c      ****                      rx_offset = 12;
 4909              		.loc 1 942 32 view .LVU1468
 4910 0210 0B80     		strh	r3, [r1]	@ movhi
 943:serial.c      ****                   } else if (rxbuff3[12] == ':') {
 4911              		.loc 1 943 22 is_stmt 1 view .LVU1469
 943:serial.c      ****                   } else if (rxbuff3[12] == ':') {
 4912              		.loc 1 943 32 is_stmt 0 view .LVU1470
 4913 0212 0C23     		movs	r3, #12
 4914 0214 EDE7     		b	.L532
 4915              	.L537:
 4916 0216 00BF     		.align	2
 4917              	.L536:
 4918 0218 00000000 		.word	rxcnt3
 4919 021c 00000000 		.word	rxbuff3
 4920 0220 00000000 		.word	this_id
 4921 0224 00000000 		.word	ap_mode
 4922 0228 00000000 		.word	reset_flag
 4923 022c 00000000 		.word	time_out
 4924 0230 00000000 		.word	send_data_flag
 4925 0234 00000000 		.word	tcp_tx
 4926 0238 00000000 		.word	txbuff3
 4927 023c 00000000 		.word	main_time
 4928 0240 00000000 		.word	.LC20
 4929 0244 0C000000 		.word	.LC21
 4930 0248 00000000 		.word	tcp_length
 4931 024c 1B000000 		.word	.LC22
 4932 0250 02000000 		.word	rxbuff3+2
 4933 0254 00000000 		.word	rx_length
 4934 0258 00000000 		.word	rx_offset
 4935              	.L359:
 944:serial.c      ****                      rx_length = (rxbuff3[9] - 0x30) * 100 + (rxbuff3[10] - 0x30) * 10 + (rxbuff3[1
 4936              		.loc 1 944 26 is_stmt 1 view .LVU1471
 944:serial.c      ****                      rx_length = (rxbuff3[9] - 0x30) * 100 + (rxbuff3[10] - 0x30) * 10 + (rxbuff3[1
 4937              		.loc 1 944 37 is_stmt 0 view .LVU1472
 4938 025c 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 944:serial.c      ****                      rx_length = (rxbuff3[9] - 0x30) * 100 + (rxbuff3[10] - 0x30) * 10 + (rxbuff3[1
 4939              		.loc 1 944 29 view .LVU1473
 4940 025e 3A2A     		cmp	r2, #58
 4941 0260 40F08281 		bne	.L360
 945:serial.c      ****                      rx_offset = 13;
 4942              		.loc 1 945 22 is_stmt 1 view .LVU1474
 945:serial.c      ****                      rx_offset = 13;
 4943              		.loc 1 945 42 is_stmt 0 view .LVU1475
 4944 0264 6A7A     		ldrb	r2, [r5, #9]	@ zero_extendqisi2
 945:serial.c      ****                      rx_offset = 13;
 4945              		.loc 1 945 46 view .LVU1476
 4946 0266 303A     		subs	r2, r2, #48
 945:serial.c      ****                      rx_offset = 13;
 4947              		.loc 1 945 60 view .LVU1477
 4948 0268 02EB8202 		add	r2, r2, r2, lsl #2
 4949 026c 02EB8202 		add	r2, r2, r2, lsl #2
 945:serial.c      ****                      rx_offset = 13;
 4950              		.loc 1 945 88 view .LVU1478
 4951 0270 303C     		subs	r4, r4, #48
 945:serial.c      ****                      rx_offset = 13;
 4952              		.loc 1 945 75 view .LVU1479
 4953 0272 303B     		subs	r3, r3, #48
 945:serial.c      ****                      rx_offset = 13;
 4954              		.loc 1 945 88 view .LVU1480
 4955 0274 04EB8204 		add	r4, r4, r2, lsl #2
 945:serial.c      ****                      rx_offset = 13;
 4956              		.loc 1 945 60 view .LVU1481
 4957 0278 03EB8303 		add	r3, r3, r3, lsl #2
 945:serial.c      ****                      rx_offset = 13;
 4958              		.loc 1 945 88 view .LVU1482
 4959 027c 04EB4304 		add	r4, r4, r3, lsl #1
 4960 0280 A4B2     		uxth	r4, r4
 945:serial.c      ****                      rx_offset = 13;
 4961              		.loc 1 945 32 view .LVU1483
 4962 0282 0C80     		strh	r4, [r1]	@ movhi
 946:serial.c      ****                   } else if (rxbuff3[13] == ':') {
 4963              		.loc 1 946 22 is_stmt 1 view .LVU1484
 946:serial.c      ****                   } else if (rxbuff3[13] == ':') {
 4964              		.loc 1 946 32 is_stmt 0 view .LVU1485
 4965 0284 0780     		strh	r7, [r0]	@ movhi
 4966              	.L358:
 950:serial.c      ****                   }
 951:serial.c      ****                   if (rxcnt3 >= (rx_offset + rx_length)) {
 4967              		.loc 1 951 19 is_stmt 1 view .LVU1486
 4968              		.loc 1 951 30 is_stmt 0 view .LVU1487
 4969 0286 3288     		ldrh	r2, [r6]
 4970              		.loc 1 951 44 view .LVU1488
 4971 0288 0388     		ldrh	r3, [r0]
 4972 028a 0C88     		ldrh	r4, [r1]
 4973 028c A4B2     		uxth	r4, r4
 4974              		.loc 1 951 30 view .LVU1489
 4975 028e 92B2     		uxth	r2, r2
 4976              		.loc 1 951 44 view .LVU1490
 4977 0290 14FA83F3 		uxtah	r3, r4, r3
 4978              		.loc 1 951 22 view .LVU1491
 4979 0294 9A42     		cmp	r2, r3
 4980 0296 17DB     		blt	.L355
 952:serial.c      ****                      gid = rxbuff3[7] - 0x30;
 4981              		.loc 1 952 22 is_stmt 1 view .LVU1492
 4982              		.loc 1 952 39 is_stmt 0 view .LVU1493
 4983 0298 EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 4984              		.loc 1 952 26 view .LVU1494
 4985 029a 954A     		ldr	r2, .L538
 4986              		.loc 1 952 39 view .LVU1495
 4987 029c 303B     		subs	r3, r3, #48
 4988 029e DBB2     		uxtb	r3, r3
 4989              		.loc 1 952 26 view .LVU1496
 4990 02a0 1370     		strb	r3, [r2]
 953:serial.c      ****                      rx_check(rxbuff3 + rx_offset,rx_length);
 4991              		.loc 1 953 22 is_stmt 1 view .LVU1497
 4992 02a2 0088     		ldrh	r0, [r0]
 4993 02a4 0988     		ldrh	r1, [r1]
 4994 02a6 15FA80F0 		uxtah	r0, r5, r0
 4995 02aa 89B2     		uxth	r1, r1
 4996 02ac FFF7FEFF 		bl	rx_check
 4997              	.LVL247:
 954:serial.c      ****                      time_out = 0;
 4998              		.loc 1 954 22 view .LVU1498
 4999              		.loc 1 954 31 is_stmt 0 view .LVU1499
 5000 02b0 904B     		ldr	r3, .L538+4
 955:serial.c      ****                      main_time = 0;
 956:serial.c      ****                      bzero(rxbuff3, rxcnt3);
 5001              		.loc 1 956 22 view .LVU1500
 5002 02b2 9148     		ldr	r0, .L538+8
 954:serial.c      ****                      time_out = 0;
 5003              		.loc 1 954 31 view .LVU1501
 5004 02b4 0024     		movs	r4, #0
 5005 02b6 1C60     		str	r4, [r3]
 955:serial.c      ****                      main_time = 0;
 5006              		.loc 1 955 22 is_stmt 1 view .LVU1502
 955:serial.c      ****                      main_time = 0;
 5007              		.loc 1 955 32 is_stmt 0 view .LVU1503
 5008 02b8 904B     		ldr	r3, .L538+12
 5009 02ba 1C60     		str	r4, [r3]
 5010              		.loc 1 956 22 is_stmt 1 view .LVU1504
 5011 02bc 3288     		ldrh	r2, [r6]
 5012 02be 2146     		mov	r1, r4
 5013 02c0 92B2     		uxth	r2, r2
 5014 02c2 FFF7FEFF 		bl	memset
 5015              	.LVL248:
 957:serial.c      ****                      rxcnt3 = 0;
 5016              		.loc 1 957 22 view .LVU1505
 5017              		.loc 1 957 29 is_stmt 0 view .LVU1506
 5018 02c6 3480     		strh	r4, [r6]	@ movhi
 5019              	.L355:
 879:serial.c      ****          if ((rxbuff3[0] == STX) && (rxbuff3[1] == this_id) && (rxbuff3[5] == ETX) && (rxcnt3 >= 7)
 5020              		.loc 1 879 14 view .LVU1507
 5021 02c8 0124     		movs	r4, #1
 5022              	.L353:
 5023              	.LVL249:
 958:serial.c      ****                   }
 959:serial.c      ****                }
 960:serial.c      ****             }
 961:serial.c      ****             rxok = 1;
 962:serial.c      ****          }
 963:serial.c      ****          //mqtt
 964:serial.c      ****          if ((strncmp(rxbuff3,"+MQTTSUBRECV", 12) == 0) && (rxok == 0)) {
 5024              		.loc 1 964 10 is_stmt 1 view .LVU1508
 5025              		.loc 1 964 15 is_stmt 0 view .LVU1509
 5026 02ca 8D49     		ldr	r1, .L538+16
 5027 02cc 8A48     		ldr	r0, .L538+8
 5028 02ce 0C22     		movs	r2, #12
 5029 02d0 FFF7FEFF 		bl	strncmp
 5030              	.LVL250:
 5031              		.loc 1 964 13 discriminator 1 view .LVU1510
 5032 02d4 0028     		cmp	r0, #0
 5033 02d6 35D1     		bne	.L361
 5034              		.loc 1 964 57 discriminator 1 view .LVU1511
 5035 02d8 002C     		cmp	r4, #0
 5036 02da 32D1     		bne	.L363
 965:serial.c      ****             pos = 17 + rx_topic_length;
 5037              		.loc 1 965 13 is_stmt 1 view .LVU1512
 5038              		.loc 1 965 22 is_stmt 0 view .LVU1513
 5039 02dc 894B     		ldr	r3, .L538+20
 5040 02de 1B88     		ldrh	r3, [r3]
 5041 02e0 9BB2     		uxth	r3, r3
 5042              	.LVL251:
 966:serial.c      ****             if (rxbuff3[pos] == ',') {
 5043              		.loc 1 966 13 is_stmt 1 view .LVU1514
 965:serial.c      ****             pos = 17 + rx_topic_length;
 5044              		.loc 1 965 17 is_stmt 0 view .LVU1515
 5045 02e2 03F11101 		add	r1, r3, #17
 5046              		.loc 1 966 24 view .LVU1516
 5047 02e6 89B2     		uxth	r1, r1
 5048              		.loc 1 966 16 view .LVU1517
 5049 02e8 6A5C     		ldrb	r2, [r5, r1]	@ zero_extendqisi2
 5050 02ea 2C2A     		cmp	r2, #44
 5051 02ec 29D1     		bne	.L363
 967:serial.c      ****                if (rxbuff3[pos + 2] == ',') {
 5052              		.loc 1 967 16 is_stmt 1 view .LVU1518
 5053              		.loc 1 967 27 is_stmt 0 view .LVU1519
 5054 02ee 2944     		add	r1, r1, r5
 5055 02f0 854C     		ldr	r4, .L538+24
 5056              	.LVL252:
 5057              		.loc 1 967 27 view .LVU1520
 5058 02f2 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 5059 02f4 854F     		ldr	r7, .L538+28
 5060              		.loc 1 967 19 view .LVU1521
 5061 02f6 2C2A     		cmp	r2, #44
 5062 02f8 40F05381 		bne	.L365
 968:serial.c      ****                   rx_length = rxbuff3[pos + 1] - 0x30;
 5063              		.loc 1 968 19 is_stmt 1 view .LVU1522
 5064              		.loc 1 968 38 is_stmt 0 view .LVU1523
 5065 02fc 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 5066              		.loc 1 968 48 view .LVU1524
 5067 02fe 303A     		subs	r2, r2, #48
 5068 0300 92B2     		uxth	r2, r2
 5069              		.loc 1 968 29 view .LVU1525
 5070 0302 2280     		strh	r2, [r4]	@ movhi
 969:serial.c      ****                   rx_offset = pos + 3;
 5071              		.loc 1 969 19 is_stmt 1 view .LVU1526
 5072              		.loc 1 969 35 is_stmt 0 view .LVU1527
 5073 0304 1433     		adds	r3, r3, #20
 5074              	.LVL253:
 5075              	.L533:
 970:serial.c      ****                } else if (rxbuff3[pos + 3] == ',') {
 971:serial.c      ****                   rx_length = (rxbuff3[pos + 1] - 0x30) * 10 + (rxbuff3[pos + 2] - 0x30);
 972:serial.c      ****                   rx_offset = pos + 4;
 973:serial.c      ****                } else if (rxbuff3[pos + 4] == ',') {
 974:serial.c      ****                   rx_length = (rxbuff3[pos + 1] - 0x30) * 100 + (rxbuff3[pos + 2] - 0x30) * 10 + (r
 975:serial.c      ****                   rx_offset = pos + 5;
 976:serial.c      ****                } else if (rxbuff3[pos + 5] == ',') {
 977:serial.c      ****                   rx_length = (rxbuff3[pos + 1] - 0x30) * 1000 + (rxbuff3[pos + 2] - 0x30) * 100 + 
 978:serial.c      ****                   rx_offset = pos + 6;
 5076              		.loc 1 978 35 view .LVU1528
 5077 0306 9BB2     		uxth	r3, r3
 5078              		.loc 1 978 29 view .LVU1529
 5079 0308 3B80     		strh	r3, [r7]	@ movhi
 5080              	.L366:
 979:serial.c      ****                }
 980:serial.c      ****                if (rxcnt3 >= (rx_offset + rx_length)) {
 5081              		.loc 1 980 16 is_stmt 1 view .LVU1530
 5082              		.loc 1 980 27 is_stmt 0 view .LVU1531
 5083 030a 3288     		ldrh	r2, [r6]
 5084              		.loc 1 980 41 view .LVU1532
 5085 030c 3B88     		ldrh	r3, [r7]
 5086 030e 2188     		ldrh	r1, [r4]
 5087 0310 89B2     		uxth	r1, r1
 5088              		.loc 1 980 27 view .LVU1533
 5089 0312 92B2     		uxth	r2, r2
 5090              		.loc 1 980 41 view .LVU1534
 5091 0314 11FA83F3 		uxtah	r3, r1, r3
 5092              		.loc 1 980 19 view .LVU1535
 5093 0318 9A42     		cmp	r2, r3
 5094 031a 12DB     		blt	.L363
 981:serial.c      ****                   rx_check(rxbuff3 + rx_offset,rx_length);
 5095              		.loc 1 981 19 is_stmt 1 view .LVU1536
 5096 031c 3888     		ldrh	r0, [r7]
 5097 031e 2188     		ldrh	r1, [r4]
 5098 0320 15FA80F0 		uxtah	r0, r5, r0
 5099 0324 89B2     		uxth	r1, r1
 5100 0326 FFF7FEFF 		bl	rx_check
 5101              	.LVL254:
 982:serial.c      ****                   bzero(rxbuff3, rxcnt3);
 5102              		.loc 1 982 19 view .LVU1537
 5103 032a 3288     		ldrh	r2, [r6]
 5104 032c 7248     		ldr	r0, .L538+8
 5105 032e 92B2     		uxth	r2, r2
 5106 0330 0021     		movs	r1, #0
 5107 0332 FFF7FEFF 		bl	memset
 5108              	.LVL255:
 983:serial.c      ****                   rxcnt3 = 0;
 5109              		.loc 1 983 19 view .LVU1538
 984:serial.c      ****                   time_out = 0;
 5110              		.loc 1 984 28 is_stmt 0 view .LVU1539
 5111 0336 6F4A     		ldr	r2, .L538+4
 983:serial.c      ****                   rxcnt3 = 0;
 5112              		.loc 1 983 26 view .LVU1540
 5113 0338 0023     		movs	r3, #0
 5114 033a 3380     		strh	r3, [r6]	@ movhi
 5115              		.loc 1 984 19 is_stmt 1 view .LVU1541
 5116              		.loc 1 984 28 is_stmt 0 view .LVU1542
 5117 033c 1360     		str	r3, [r2]
 985:serial.c      ****                   main_time = 0;
 5118              		.loc 1 985 19 is_stmt 1 view .LVU1543
 5119              		.loc 1 985 29 is_stmt 0 view .LVU1544
 5120 033e 6F4A     		ldr	r2, .L538+12
 5121 0340 1360     		str	r3, [r2]
 5122              	.LVL256:
 5123              	.L363:
 879:serial.c      ****          if ((rxbuff3[0] == STX) && (rxbuff3[1] == this_id) && (rxbuff3[5] == ETX) && (rxcnt3 >= 7)
 5124              		.loc 1 879 14 view .LVU1545
 5125 0342 0124     		movs	r4, #1
 5126              	.L361:
 5127              	.LVL257:
 986:serial.c      ****                }
 987:serial.c      ****             }
 988:serial.c      ****             rxok = 1;
 989:serial.c      ****          }
 990:serial.c      ****          if (((rxbuff3[rxcnt3 - 2] == 0x0D) && (rxbuff3[rxcnt3 - 1] == 0x0A)) && (rxok == 0)) {
 5128              		.loc 1 990 10 is_stmt 1 view .LVU1546
 5129              		.loc 1 990 31 is_stmt 0 view .LVU1547
 5130 0344 3388     		ldrh	r3, [r6]
 5131              		.loc 1 990 23 view .LVU1548
 5132 0346 15FA83F3 		uxtah	r3, r5, r3
 5133              		.loc 1 990 13 view .LVU1549
 5134 034a 13F8023C 		ldrb	r3, [r3, #-2]	@ zero_extendqisi2
 5135 034e 0D2B     		cmp	r3, #13
 5136 0350 40F0BE80 		bne	.L370
 5137              		.loc 1 990 64 discriminator 1 view .LVU1550
 5138 0354 3388     		ldrh	r3, [r6]
 5139              		.loc 1 990 56 discriminator 1 view .LVU1551
 5140 0356 15FA83F3 		uxtah	r3, r5, r3
 5141              		.loc 1 990 45 discriminator 1 view .LVU1552
 5142 035a 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 5143 035e 0A2B     		cmp	r3, #10
 5144 0360 40F0B680 		bne	.L370
 5145              		.loc 1 990 79 discriminator 2 view .LVU1553
 5146 0364 002C     		cmp	r4, #0
 5147 0366 40F0B380 		bne	.L370
 991:serial.c      ****             main_time = 0;
 5148              		.loc 1 991 13 is_stmt 1 view .LVU1554
 5149              		.loc 1 991 23 is_stmt 0 view .LVU1555
 5150 036a DFF89081 		ldr	r8, .L538+12
 992:serial.c      ****             if ((strncmp(rxbuff3 + (rxcnt3 - 7),"ready",5) == 0) && (rxok == 0)) {
 5151              		.loc 1 992 18 view .LVU1556
 5152 036e 6849     		ldr	r1, .L538+32
 991:serial.c      ****             main_time = 0;
 5153              		.loc 1 991 23 view .LVU1557
 5154 0370 C8F80040 		str	r4, [r8]
 5155              		.loc 1 992 13 is_stmt 1 view .LVU1558
 5156              		.loc 1 992 34 is_stmt 0 view .LVU1559
 5157 0374 3088     		ldrh	r0, [r6]
 5158 0376 80B2     		uxth	r0, r0
 5159 0378 0738     		subs	r0, r0, #7
 5160              		.loc 1 992 18 view .LVU1560
 5161 037a 0522     		movs	r2, #5
 5162 037c 2844     		add	r0, r0, r5
 5163 037e FFF7FEFF 		bl	strncmp
 5164              	.LVL258:
 5165              		.loc 1 992 16 discriminator 1 view .LVU1561
 5166 0382 0028     		cmp	r0, #0
 5167 0384 40F05581 		bne	.L431
 993:serial.c      ****                time_out = 0;
 5168              		.loc 1 993 16 is_stmt 1 view .LVU1562
 5169              		.loc 1 993 25 is_stmt 0 view .LVU1563
 5170 0388 5A4B     		ldr	r3, .L538+4
 5171 038a 1C60     		str	r4, [r3]
 994:serial.c      ****                reset_flag = 0;
 5172              		.loc 1 994 16 is_stmt 1 view .LVU1564
 5173              		.loc 1 994 27 is_stmt 0 view .LVU1565
 5174 038c 614B     		ldr	r3, .L538+36
 5175 038e 1C70     		strb	r4, [r3]
 995:serial.c      ****                pwr_flag = 1;
 5176              		.loc 1 995 16 is_stmt 1 view .LVU1566
 5177              		.loc 1 995 25 is_stmt 0 view .LVU1567
 5178 0390 614B     		ldr	r3, .L538+40
 5179 0392 0127     		movs	r7, #1
 5180 0394 1F70     		strb	r7, [r3]
 996:serial.c      ****                rxok = 1;
 5181              		.loc 1 996 16 is_stmt 1 view .LVU1568
 5182              	.LVL259:
 5183              	.L372:
 997:serial.c      ****             }
 998:serial.c      ****             if ((strncmp(rxbuff3 + (rxcnt3 - 11),"busy p...",4) == 0) && (rxok == 0)) {
 5184              		.loc 1 998 13 view .LVU1569
 5185              		.loc 1 998 34 is_stmt 0 view .LVU1570
 5186 0396 3088     		ldrh	r0, [r6]
 5187              		.loc 1 998 18 view .LVU1571
 5188 0398 6049     		ldr	r1, .L538+44
 5189              		.loc 1 998 34 view .LVU1572
 5190 039a 80B2     		uxth	r0, r0
 5191 039c 0B38     		subs	r0, r0, #11
 5192              		.loc 1 998 18 view .LVU1573
 5193 039e 0422     		movs	r2, #4
 5194 03a0 2844     		add	r0, r0, r5
 5195 03a2 FFF7FEFF 		bl	strncmp
 5196              	.LVL260:
 999:serial.c      ****                wait_wifi = 1;
1000:serial.c      ****                rxok = 1;
1001:serial.c      ****             }
1002:serial.c      ****             //WIFI CONNECTED\r\nWIFI GOT IP\r\n		1.x.x
1003:serial.c      ****             if ((strncmp(rxbuff3,"WIFI CONNECTED",14) == 0) && (ap_mode == 0) && (rxok == 0)) {
 5197              		.loc 1 1003 18 view .LVU1574
 5198 03a6 5E49     		ldr	r1, .L538+48
 5199 03a8 0028     		cmp	r0, #0
 5200 03aa 4FF00E02 		mov	r2, #14
 5201 03ae 5248     		ldr	r0, .L538+8
 5202 03b0 08BF     		it	eq
 5203 03b2 0127     		moveq	r7, #1
 5204              	.LVL261:
 5205              		.loc 1 1003 13 is_stmt 1 view .LVU1575
 5206              		.loc 1 1003 18 is_stmt 0 view .LVU1576
 5207 03b4 FFF7FEFF 		bl	strncmp
 5208              	.LVL262:
 5209              		.loc 1 1003 16 discriminator 1 view .LVU1577
 5210 03b8 80B9     		cbnz	r0, .L374
 5211              		.loc 1 1003 73 discriminator 1 view .LVU1578
 5212 03ba 5A4B     		ldr	r3, .L538+52
 5213 03bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5214              		.loc 1 1003 61 discriminator 1 view .LVU1579
 5215 03be 6BB9     		cbnz	r3, .L374
 5216              		.loc 1 1003 79 discriminator 2 view .LVU1580
 5217 03c0 5FB9     		cbnz	r7, .L375
1004:serial.c      ****                if (strncmp(rxbuff3 + 16,"WIFI GOT IP",11) == 0) {
 5218              		.loc 1 1004 16 is_stmt 1 view .LVU1581
 5219              		.loc 1 1004 20 is_stmt 0 view .LVU1582
 5220 03c2 5949     		ldr	r1, .L538+56
 5221 03c4 5948     		ldr	r0, .L538+60
 5222 03c6 0B22     		movs	r2, #11
 5223 03c8 FFF7FEFF 		bl	strncmp
 5224              	.LVL263:
 5225              		.loc 1 1004 19 discriminator 1 view .LVU1583
 5226 03cc 28B9     		cbnz	r0, .L375
1005:serial.c      ****                	  if (ssid_flag) {
 5227              		.loc 1 1005 19 is_stmt 1 view .LVU1584
 5228              		.loc 1 1005 23 is_stmt 0 view .LVU1585
 5229 03ce 584B     		ldr	r3, .L538+64
 5230 03d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5231              		.loc 1 1005 22 view .LVU1586
 5232 03d2 13B1     		cbz	r3, .L375
1006:serial.c      ****                	     ssid_check =  1;
 5233              		.loc 1 1006 22 is_stmt 1 view .LVU1587
 5234              		.loc 1 1006 33 is_stmt 0 view .LVU1588
 5235 03d4 574B     		ldr	r3, .L538+68
 5236 03d6 0122     		movs	r2, #1
 5237 03d8 1A70     		strb	r2, [r3]
 5238              	.L375:
 5239 03da 0127     		movs	r7, #1
 5240              	.LVL264:
 5241              	.L374:
1007:serial.c      ****                	  }
1008:serial.c      ****                }
1009:serial.c      ****                rxok = 1;
1010:serial.c      ****             }
1011:serial.c      ****             if (((strncmp(rxbuff3 + (rxcnt3 - 7),"ERROR",5) == 0) || (strncmp(rxbuff3 + (rxcnt3 - 6
 5242              		.loc 1 1011 13 is_stmt 1 view .LVU1589
 5243              		.loc 1 1011 35 is_stmt 0 view .LVU1590
 5244 03dc 3088     		ldrh	r0, [r6]
 5245              		.loc 1 1011 19 view .LVU1591
 5246 03de 5649     		ldr	r1, .L538+72
 5247              		.loc 1 1011 35 view .LVU1592
 5248 03e0 80B2     		uxth	r0, r0
 5249 03e2 0738     		subs	r0, r0, #7
 5250              		.loc 1 1011 19 view .LVU1593
 5251 03e4 0522     		movs	r2, #5
 5252 03e6 2844     		add	r0, r0, r5
 5253 03e8 FFF7FEFF 		bl	strncmp
 5254              	.LVL265:
 5255              		.loc 1 1011 16 discriminator 1 view .LVU1594
 5256 03ec 50B1     		cbz	r0, .L376
 5257              		.loc 1 1011 87 discriminator 2 view .LVU1595
 5258 03ee 3088     		ldrh	r0, [r6]
 5259              		.loc 1 1011 71 discriminator 2 view .LVU1596
 5260 03f0 5249     		ldr	r1, .L538+76
 5261              		.loc 1 1011 87 discriminator 2 view .LVU1597
 5262 03f2 80B2     		uxth	r0, r0
 5263 03f4 0638     		subs	r0, r0, #6
 5264              		.loc 1 1011 71 discriminator 2 view .LVU1598
 5265 03f6 0422     		movs	r2, #4
 5266 03f8 2844     		add	r0, r0, r5
 5267 03fa FFF7FEFF 		bl	strncmp
 5268              	.LVL266:
 5269              		.loc 1 1011 67 discriminator 1 view .LVU1599
 5270 03fe 0028     		cmp	r0, #0
 5271 0400 40F03C81 		bne	.L377
 5272              	.L376:
 5273              		.loc 1 1011 119 discriminator 3 view .LVU1600
 5274 0404 002F     		cmp	r7, #0
 5275 0406 40F03981 		bne	.L377
1012:serial.c      ****                if ((ssid_flag) && (rxok == 0)) {
 5276              		.loc 1 1012 16 is_stmt 1 view .LVU1601
 5277              		.loc 1 1012 20 is_stmt 0 view .LVU1602
 5278 040a 494B     		ldr	r3, .L538+64
 5279 040c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5280              		.loc 1 1012 19 view .LVU1603
 5281 040e 02F0FF03 		and	r3, r2, #255
 5282 0412 52B1     		cbz	r2, .L378
1013:serial.c      ****                   ssid_error++;
 5283              		.loc 1 1013 19 is_stmt 1 view .LVU1604
 5284              		.loc 1 1013 29 is_stmt 0 view .LVU1605
 5285 0414 4A4A     		ldr	r2, .L538+80
 5286 0416 1388     		ldrh	r3, [r2]
 5287 0418 0133     		adds	r3, r3, #1
 5288 041a 9BB2     		uxth	r3, r3
 5289 041c 1380     		strh	r3, [r2]	@ movhi
1014:serial.c      ****                   if (ssid_error >= 5) {
 5290              		.loc 1 1014 19 is_stmt 1 view .LVU1606
 5291              		.loc 1 1014 34 is_stmt 0 view .LVU1607
 5292 041e 1388     		ldrh	r3, [r2]
 5293 0420 9BB2     		uxth	r3, r3
 5294              		.loc 1 1014 22 view .LVU1608
 5295 0422 042B     		cmp	r3, #4
 5296 0424 00F20781 		bhi	.L379
 5297              	.L380:
1015:serial.c      ****                      ssid_error = 0;
1016:serial.c      ****                      dhcp_disable = 0;
1017:serial.c      ****                      keep_alive_time = 60;
1018:serial.c      ****                      mqtt_mode = 0;
1019:serial.c      ****                      mqtt_port = 1883;
1020:serial.c      ****                      ap_mode = 1;
1021:serial.c      ****                      reset_flag = 1;
1022:serial.c      ****                      time_out = 0;
1023:serial.c      ****                   }
1024:serial.c      ****                   rxok = 1;
 5298              		.loc 1 1024 24 view .LVU1609
 5299 0428 0123     		movs	r3, #1
 5300              	.L378:
 5301              	.LVL267:
1025:serial.c      ****                }
1026:serial.c      ****                if ((mqtt_connect_flag) && (rxok == 0)) {
 5302              		.loc 1 1026 16 is_stmt 1 view .LVU1610
 5303              		.loc 1 1026 20 is_stmt 0 view .LVU1611
 5304 042a 464A     		ldr	r2, .L538+84
 5305 042c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5306              		.loc 1 1026 19 view .LVU1612
 5307 042e F2B1     		cbz	r2, .L381
 5308              		.loc 1 1026 40 discriminator 1 view .LVU1613
 5309 0430 E3B9     		cbnz	r3, .L383
1027:serial.c      ****                   mqtt_connect_count++;
 5310              		.loc 1 1027 19 is_stmt 1 view .LVU1614
 5311              		.loc 1 1027 37 is_stmt 0 view .LVU1615
 5312 0432 4549     		ldr	r1, .L538+88
 5313 0434 0A88     		ldrh	r2, [r1]
 5314 0436 0132     		adds	r2, r2, #1
 5315 0438 92B2     		uxth	r2, r2
 5316 043a 0A80     		strh	r2, [r1]	@ movhi
1028:serial.c      ****                   if (mqtt_connect_count >= 5) {
 5317              		.loc 1 1028 19 is_stmt 1 view .LVU1616
 5318              		.loc 1 1028 42 is_stmt 0 view .LVU1617
 5319 043c 0A88     		ldrh	r2, [r1]
 5320 043e 92B2     		uxth	r2, r2
 5321              		.loc 1 1028 22 view .LVU1618
 5322 0440 042A     		cmp	r2, #4
 5323 0442 13D9     		bls	.L383
1029:serial.c      ****                      mqtt_connect_count = 0;
 5324              		.loc 1 1029 22 is_stmt 1 view .LVU1619
1030:serial.c      ****                      reset_flag = 1;
 5325              		.loc 1 1030 33 is_stmt 0 view .LVU1620
 5326 0444 334A     		ldr	r2, .L538+36
1029:serial.c      ****                      mqtt_connect_count = 0;
 5327              		.loc 1 1029 41 view .LVU1621
 5328 0446 0B80     		strh	r3, [r1]	@ movhi
 5329              		.loc 1 1030 22 is_stmt 1 view .LVU1622
 5330              		.loc 1 1030 33 is_stmt 0 view .LVU1623
 5331 0448 0120     		movs	r0, #1
1031:serial.c      ****                      main_time = 0;
1032:serial.c      ****                      mqtt_check_cnt++;
 5332              		.loc 1 1032 36 view .LVU1624
 5333 044a 4049     		ldr	r1, .L538+92
1030:serial.c      ****                      reset_flag = 1;
 5334              		.loc 1 1030 33 view .LVU1625
 5335 044c 1070     		strb	r0, [r2]
1031:serial.c      ****                      main_time = 0;
 5336              		.loc 1 1031 22 is_stmt 1 view .LVU1626
1031:serial.c      ****                      main_time = 0;
 5337              		.loc 1 1031 32 is_stmt 0 view .LVU1627
 5338 044e C8F80030 		str	r3, [r8]
 5339              		.loc 1 1032 22 is_stmt 1 view .LVU1628
 5340              		.loc 1 1032 36 is_stmt 0 view .LVU1629
 5341 0452 0A88     		ldrh	r2, [r1]
 5342 0454 0244     		add	r2, r2, r0
 5343 0456 92B2     		uxth	r2, r2
 5344 0458 0A80     		strh	r2, [r1]	@ movhi
1033:serial.c      ****                      if (mqtt_check_cnt >= 2) {
 5345              		.loc 1 1033 22 is_stmt 1 view .LVU1630
 5346              		.loc 1 1033 41 is_stmt 0 view .LVU1631
 5347 045a 0A88     		ldrh	r2, [r1]
 5348 045c 92B2     		uxth	r2, r2
 5349              		.loc 1 1033 25 view .LVU1632
 5350 045e 8242     		cmp	r2, r0
 5351 0460 04D9     		bls	.L383
1034:serial.c      ****                         mqtt_check_cnt = 0;
 5352              		.loc 1 1034 25 is_stmt 1 view .LVU1633
1035:serial.c      ****                         ap_mode = 1;
 5353              		.loc 1 1035 33 is_stmt 0 view .LVU1634
 5354 0462 304A     		ldr	r2, .L538+52
1034:serial.c      ****                         mqtt_check_cnt = 0;
 5355              		.loc 1 1034 40 view .LVU1635
 5356 0464 0B80     		strh	r3, [r1]	@ movhi
 5357              		.loc 1 1035 25 is_stmt 1 view .LVU1636
 5358              		.loc 1 1035 33 is_stmt 0 view .LVU1637
 5359 0466 1070     		strb	r0, [r2]
1036:serial.c      ****                         time_out = 0;
 5360              		.loc 1 1036 25 is_stmt 1 view .LVU1638
 5361              		.loc 1 1036 34 is_stmt 0 view .LVU1639
 5362 0468 224A     		ldr	r2, .L538+4
 5363 046a 1360     		str	r3, [r2]
 5364              	.L383:
1024:serial.c      ****                }
 5365              		.loc 1 1024 24 view .LVU1640
 5366 046c 0123     		movs	r3, #1
 5367              	.LVL268:
 5368              	.L381:
1037:serial.c      ****                      }
1038:serial.c      ****                   }
1039:serial.c      ****                   rxok = 1;
1040:serial.c      ****                }
1041:serial.c      ****                if ((mqtt_sub_flag) && (rxok == 0)) {
 5369              		.loc 1 1041 16 is_stmt 1 view .LVU1641
 5370              		.loc 1 1041 20 is_stmt 0 view .LVU1642
 5371 046e 384A     		ldr	r2, .L538+96
 5372 0470 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5373              		.loc 1 1041 19 view .LVU1643
 5374 0472 82B1     		cbz	r2, .L385
 5375              		.loc 1 1041 36 discriminator 1 view .LVU1644
 5376 0474 73B9     		cbnz	r3, .L387
1042:serial.c      ****                   mqtt_sub_count++;
 5377              		.loc 1 1042 19 is_stmt 1 view .LVU1645
 5378              		.loc 1 1042 33 is_stmt 0 view .LVU1646
 5379 0476 3749     		ldr	r1, .L538+100
 5380 0478 0A88     		ldrh	r2, [r1]
 5381 047a 0132     		adds	r2, r2, #1
 5382 047c 92B2     		uxth	r2, r2
 5383 047e 0A80     		strh	r2, [r1]	@ movhi
1043:serial.c      ****                   if (mqtt_sub_count >= 10) {
 5384              		.loc 1 1043 19 is_stmt 1 view .LVU1647
 5385              		.loc 1 1043 38 is_stmt 0 view .LVU1648
 5386 0480 0A88     		ldrh	r2, [r1]
 5387 0482 92B2     		uxth	r2, r2
 5388              		.loc 1 1043 22 view .LVU1649
 5389 0484 092A     		cmp	r2, #9
 5390 0486 05D9     		bls	.L387
1044:serial.c      ****                      mqtt_sub_count = 0;
 5391              		.loc 1 1044 22 is_stmt 1 view .LVU1650
1045:serial.c      ****                      reset_flag = 1;
 5392              		.loc 1 1045 33 is_stmt 0 view .LVU1651
 5393 0488 224A     		ldr	r2, .L538+36
1044:serial.c      ****                      mqtt_sub_count = 0;
 5394              		.loc 1 1044 37 view .LVU1652
 5395 048a 0B80     		strh	r3, [r1]	@ movhi
 5396              		.loc 1 1045 22 is_stmt 1 view .LVU1653
 5397              		.loc 1 1045 33 is_stmt 0 view .LVU1654
 5398 048c 0121     		movs	r1, #1
 5399 048e 1170     		strb	r1, [r2]
1046:serial.c      ****                      time_out = 0;
 5400              		.loc 1 1046 22 is_stmt 1 view .LVU1655
 5401              		.loc 1 1046 31 is_stmt 0 view .LVU1656
 5402 0490 184A     		ldr	r2, .L538+4
 5403 0492 1360     		str	r3, [r2]
 5404              	.L387:
1024:serial.c      ****                }
 5405              		.loc 1 1024 24 view .LVU1657
 5406 0494 0123     		movs	r3, #1
 5407              	.LVL269:
 5408              	.L385:
1047:serial.c      ****                   }
1048:serial.c      ****                   rxok = 1;
1049:serial.c      ****                }
1050:serial.c      ****                if ((send_flag) && (rxok == 0)) {
 5409              		.loc 1 1050 16 is_stmt 1 view .LVU1658
 5410              		.loc 1 1050 20 is_stmt 0 view .LVU1659
 5411 0496 304A     		ldr	r2, .L538+104
 5412 0498 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5413              		.loc 1 1050 19 view .LVU1660
 5414 049a 82B1     		cbz	r2, .L389
 5415              		.loc 1 1050 32 discriminator 1 view .LVU1661
 5416 049c 73B9     		cbnz	r3, .L391
1051:serial.c      ****                   send_count++;
 5417              		.loc 1 1051 19 is_stmt 1 view .LVU1662
 5418              		.loc 1 1051 29 is_stmt 0 view .LVU1663
 5419 049e 2F49     		ldr	r1, .L538+108
 5420 04a0 0A88     		ldrh	r2, [r1]
 5421 04a2 0132     		adds	r2, r2, #1
 5422 04a4 92B2     		uxth	r2, r2
 5423 04a6 0A80     		strh	r2, [r1]	@ movhi
1052:serial.c      ****                   if (send_count >= 20) {
 5424              		.loc 1 1052 19 is_stmt 1 view .LVU1664
 5425              		.loc 1 1052 34 is_stmt 0 view .LVU1665
 5426 04a8 0A88     		ldrh	r2, [r1]
 5427 04aa 92B2     		uxth	r2, r2
 5428              		.loc 1 1052 22 view .LVU1666
 5429 04ac 132A     		cmp	r2, #19
 5430 04ae 05D9     		bls	.L391
1053:serial.c      ****                      send_count = 0;
 5431              		.loc 1 1053 22 is_stmt 1 view .LVU1667
1054:serial.c      ****                      reset_flag = 1;
 5432              		.loc 1 1054 33 is_stmt 0 view .LVU1668
 5433 04b0 184A     		ldr	r2, .L538+36
1053:serial.c      ****                      send_count = 0;
 5434              		.loc 1 1053 33 view .LVU1669
 5435 04b2 0B80     		strh	r3, [r1]	@ movhi
 5436              		.loc 1 1054 22 is_stmt 1 view .LVU1670
 5437              		.loc 1 1054 33 is_stmt 0 view .LVU1671
 5438 04b4 0121     		movs	r1, #1
 5439 04b6 1170     		strb	r1, [r2]
1055:serial.c      ****                      time_out = 0;
 5440              		.loc 1 1055 22 is_stmt 1 view .LVU1672
 5441              		.loc 1 1055 31 is_stmt 0 view .LVU1673
 5442 04b8 0E4A     		ldr	r2, .L538+4
 5443 04ba 1360     		str	r3, [r2]
 5444              	.L391:
1024:serial.c      ****                }
 5445              		.loc 1 1024 24 view .LVU1674
 5446 04bc 0123     		movs	r3, #1
 5447              	.LVL270:
 5448              	.L389:
1056:serial.c      ****                   }
1057:serial.c      ****                   rxok = 1;
1058:serial.c      ****                }
1059:serial.c      ****                if ((pwr_flag) && (rxok == 0)) {
 5449              		.loc 1 1059 16 is_stmt 1 view .LVU1675
 5450              		.loc 1 1059 20 is_stmt 0 view .LVU1676
 5451 04be 164A     		ldr	r2, .L538+40
 5452 04c0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5453              		.loc 1 1059 19 view .LVU1677
 5454 04c2 2AB1     		cbz	r2, .L370
 5455              		.loc 1 1059 31 discriminator 1 view .LVU1678
 5456 04c4 23B9     		cbnz	r3, .L370
1060:serial.c      ****                   pwr_error++;
 5457              		.loc 1 1060 19 is_stmt 1 view .LVU1679
 5458              		.loc 1 1060 28 is_stmt 0 view .LVU1680
 5459 04c6 264A     		ldr	r2, .L538+112
 5460 04c8 1388     		ldrh	r3, [r2]
 5461              	.LVL271:
 5462              		.loc 1 1060 28 view .LVU1681
 5463 04ca 0133     		adds	r3, r3, #1
 5464 04cc 9BB2     		uxth	r3, r3
 5465 04ce 1380     		strh	r3, [r2]	@ movhi
1061:serial.c      ****                   rxok = 1;
 5466              		.loc 1 1061 19 is_stmt 1 view .LVU1682
 5467              	.LVL272:
 5468              	.L370:
1062:serial.c      ****                }
1063:serial.c      ****             } else {
1064:serial.c      ****                if ((rxbuff3[rxcnt3 - 4] == 'O') && (rxbuff3[rxcnt3 - 3] == 'K')) {
1065:serial.c      ****                   if ((rxbuff3[rxcnt3 - 6] == 0x0D) && (rxbuff3[rxcnt3 - 5] == 0x0A)) {
1066:serial.c      ****                      rxok = 0;
1067:serial.c      ****                      if ((strncmp(rxbuff3,"+MQTTPUB",8) == 0) && (strncmp(rxbuff3,"SEND",4) == 0) &
1068:serial.c      ****                         if (send_flag) {
1069:serial.c      ****                            send_flag = 0;
1070:serial.c      ****                            send_count = 0;
1071:serial.c      ****                         }
1072:serial.c      ****                         rxok = 1;
1073:serial.c      ****                      }
1074:serial.c      ****                      if (((rxbuff3[0] == 0x0D) && (rxbuff3[1] == 0x0A) && (rxbuff3[2] == 'O') && (r
1075:serial.c      ****                         //\r\nOK\r\n
1076:serial.c      ****                         if ((ap_mode) && (ssid_flag)) {
1077:serial.c      ****                            ssid_flag = 0;
1078:serial.c      ****                            ip_flag = 1;
1079:serial.c      ****                            time_out = 0;
1080:serial.c      ****                         }
1081:serial.c      ****                         if ((ap_mode == 0) && (ssid_check)) {
1082:serial.c      ****                            ssid_check = 0;
1083:serial.c      ****                            ssid_flag = 0;
1084:serial.c      ****                            //ip_flag = 1;	//Not use 2.xx
1085:serial.c      ****                            time_out = 0;
1086:serial.c      ****                         }
1087:serial.c      ****                         if (mqtt_sub_flag) {
1088:serial.c      ****                            mqtt_sub_flag = 0;
1089:serial.c      ****                            ntp_flag = 1;
1090:serial.c      ****                            time_out = 0;
1091:serial.c      ****                         }
1092:serial.c      ****                         rxok = 1;
1093:serial.c      ****                      }
1094:serial.c      ****                      if ((strncmp(rxbuff3,"AT+CWSAP",8) == 0) && (rxok == 0)) {	//1.xx
1095:serial.c      ****                         if ((ap_mode) && (ssid_flag)) {
1096:serial.c      ****                            ssid_flag = 0;
1097:serial.c      ****                            ip_flag = 1;
1098:serial.c      ****                            time_out = 0;
1099:serial.c      ****                         }
1100:serial.c      ****                      }
1101:serial.c      ****                      //WIFI CONNECTED\r\nWIFI GOT IP\r\nOK
1102:serial.c      ****                      //              \r\nWIFI GOT IP\r\nOK
1103:serial.c      ****                      if ((strncmp(rxbuff3 + rxcnt3 - 19,"WIFI GOT IP",11) == 0) && (rxok == 0))  {
1104:serial.c      ****                         //if (strncmp(rxbuff3 + rxcnt3 - 35,"WIFI CONNECTED",11) == 0) {
1105:serial.c      ****                         if (ssid_flag) {
1106:serial.c      ****                            ssid_flag = 0;
1107:serial.c      ****                            ip_flag = 1;	//OK
1108:serial.c      ****                            time_out = 0;
1109:serial.c      ****                         } else {
1110:serial.c      ****                            if (dhcp_disable) {
1111:serial.c      ****                               if (ip_flag) {
1112:serial.c      ****                                  ip_flag = 0;
1113:serial.c      ****                                  mux_flag = 1;
1114:serial.c      ****                                  time_out = 0;
1115:serial.c      ****                               }
1116:serial.c      ****                            }
1117:serial.c      ****                         }
1118:serial.c      ****                         rxok = 1;
1119:serial.c      ****                      }
1120:serial.c      ****                      if ((strncmp(rxbuff3,"AT+CIPSERVER",12) == 0) && (rxok == 0)) {
1121:serial.c      ****                         if (server_flag) {
1122:serial.c      ****                            server_flag = 0;
1123:serial.c      ****                            if (ap_mode == 0) {
1124:serial.c      ****                               //host_flag = 1;
1125:serial.c      ****                               if (mqtt_protocol) {
1126:serial.c      ****                                  mqtt_cfg_flag = 1;
1127:serial.c      ****                               }
1128:serial.c      ****                            }
1129:serial.c      ****                            time_out = 0;
1130:serial.c      ****                         }
1131:serial.c      ****                         rxok = 1;
1132:serial.c      ****                      }
1133:serial.c      ****                      if ((strncmp(rxbuff3,"AT+RFPOWER",10) == 0) && (rxok == 0)) {
1134:serial.c      ****                         if (pwr_flag) {
1135:serial.c      ****                            pwr_flag = 0;
1136:serial.c      ****                            mode_flag = 1;
1137:serial.c      ****                            time_out = 0;
1138:serial.c      ****                         }
1139:serial.c      ****                         rxok = 1;
1140:serial.c      ****                      }
1141:serial.c      ****                      if ((strncmp(rxbuff3,"AT+CWMODE",9) == 0) && (rxok == 0)) {
1142:serial.c      ****                         if (mode_flag) {
1143:serial.c      ****                            mode_flag = 0;
1144:serial.c      ****                            if (ap_mode == 0) {
1145:serial.c      ****                               host_flag = 1;
1146:serial.c      ****                            } else {
1147:serial.c      ****                               ssid_flag = 1;
1148:serial.c      ****                            }
1149:serial.c      ****                            time_out = 0;
1150:serial.c      ****                         }
1151:serial.c      ****                      }
1152:serial.c      ****                      if (((strncmp(rxbuff3,"AT+CIPAP",8) == 0) || (strncmp(rxbuff3,"AT+CIPSTA",9) =
1153:serial.c      ****                         if (ip_flag) {
1154:serial.c      ****                            ip_flag = 0;
1155:serial.c      ****                            mux_flag = 1;
1156:serial.c      ****                            time_out = 0;
1157:serial.c      ****                         }
1158:serial.c      ****                         rxok = 1;
1159:serial.c      ****                      }
1160:serial.c      ****                      if ((strncmp(rxbuff3,"AT+CIPMUX",9) == 0) && (rxok == 0)) {
1161:serial.c      ****                         if (mux_flag) {
1162:serial.c      ****                            mux_flag = 0;
1163:serial.c      ****                            server_flag = 1;
1164:serial.c      ****                            time_out = 0;
1165:serial.c      ****                         }
1166:serial.c      ****                         rxok = 1;
1167:serial.c      ****                      }
1168:serial.c      ****                      if ((strncmp(rxbuff3,"AT+MQTTUSERCFG",14) == 0) && (rxok == 0)) {
1169:serial.c      ****                         if (mqtt_cfg_flag) {
1170:serial.c      ****                            mqtt_cfg_flag = 0;
1171:serial.c      ****                            mqtt_connect_flag = 1;
1172:serial.c      ****                            time_out = 0;
1173:serial.c      ****                         }
1174:serial.c      ****                         rxok = 1;
1175:serial.c      ****                      }
1176:serial.c      ****                      if ((strncmp(rxbuff3,"+MQTTCONNECTED",14) == 0) && (rxok == 0)) {
1177:serial.c      ****                         if (mqtt_connect_flag) {
1178:serial.c      ****                            mqtt_connect_flag = 0;
1179:serial.c      ****                            mqtt_sub_flag = 1;
1180:serial.c      ****                            mqtt_check_cnt = 0;
1181:serial.c      ****                            mqtt_connect_count = 0;
1182:serial.c      ****                            time_out = 0;
1183:serial.c      ****                         }
1184:serial.c      ****                         rxok = 1;
1185:serial.c      ****                      }
1186:serial.c      ****                      if ((strncmp(rxbuff3,"AT+CIPSNTPCFG",13) == 0) && (rxok == 0)) {
1187:serial.c      ****                         if (ntp_flag) {
1188:serial.c      ****                            ntp_flag = 0;
1189:serial.c      ****                            ntp_req_flag = 1;
1190:serial.c      ****                            mqtt_sub_count = 0;
1191:serial.c      ****                         }
1192:serial.c      ****                         rxok = 1;
1193:serial.c      ****                      }
1194:serial.c      ****                      if ((strncmp(rxbuff3,"AT+CIPSNTPTIME",14) == 0) && (rxok == 0)) {
1195:serial.c      ****                         if (ntp_req_flag) {
1196:serial.c      ****                            ntp_req_flag = 0;
1197:serial.c      ****                         }
1198:serial.c      ****                         rxok = 1;
1199:serial.c      ****                      }
1200:serial.c      ****                      if ((strncmp(rxbuff3,"AT+CWHOSTNAME",13) == 0) && (rxok == 0)) {
1201:serial.c      ****                         if (host_flag) {
1202:serial.c      ****                            host_flag = 0;
1203:serial.c      ****                            if (ap_mode == 0) {
1204:serial.c      ****                               ssid_flag = 1;
1205:serial.c      ****                            }
1206:serial.c      ****                         }
1207:serial.c      ****                         rxok = 1;
1208:serial.c      ****                      }
1209:serial.c      ****                   }
1210:serial.c      ****                }
1211:serial.c      ****             }
1212:serial.c      ****          }
1213:serial.c      ****          if (rxcnt3) {
 5469              		.loc 1 1213 10 view .LVU1683
 5470              		.loc 1 1213 14 is_stmt 0 view .LVU1684
 5471 04d0 3388     		ldrh	r3, [r6]
 5472 04d2 9BB2     		uxth	r3, r3
 5473              		.loc 1 1213 13 view .LVU1685
 5474 04d4 3BB1     		cbz	r3, .L343
1214:serial.c      ****             if (wait_wifi == 0) {
 5475              		.loc 1 1214 13 is_stmt 1 view .LVU1686
1215:serial.c      ****                time_out = 0;
1216:serial.c      ****             }
1217:serial.c      ****             bzero(rxbuff3, rxcnt3);
 5476              		.loc 1 1217 13 view .LVU1687
 5477 04d6 3288     		ldrh	r2, [r6]
 5478 04d8 0748     		ldr	r0, .L538+8
 5479 04da 92B2     		uxth	r2, r2
 5480 04dc 0021     		movs	r1, #0
 5481 04de FFF7FEFF 		bl	memset
 5482              	.LVL273:
1218:serial.c      ****             rxcnt3 = 0;
 5483              		.loc 1 1218 13 view .LVU1688
 5484              		.loc 1 1218 20 is_stmt 0 view .LVU1689
 5485 04e2 0023     		movs	r3, #0
 5486 04e4 3380     		strh	r3, [r6]	@ movhi
 5487              	.LVL274:
 5488              	.L343:
1219:serial.c      ****          }
1220:serial.c      ****       }
1221:serial.c      ****       rx_led = 0;
 5489              		.loc 1 1221 7 is_stmt 1 view .LVU1690
 5490              		.loc 1 1221 14 is_stmt 0 view .LVU1691
 5491 04e6 1F4B     		ldr	r3, .L538+116
 5492 04e8 0022     		movs	r2, #0
 5493 04ea 1A70     		strb	r2, [r3]
1222:serial.c      **** }
 5494              		.loc 1 1222 1 view .LVU1692
 5495 04ec BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 5496              	.L539:
 5497              		.align	2
 5498              	.L538:
 5499 04f0 00000000 		.word	gid
 5500 04f4 00000000 		.word	time_out
 5501 04f8 00000000 		.word	rxbuff3
 5502 04fc 00000000 		.word	main_time
 5503 0500 20000000 		.word	.LC23
 5504 0504 00000000 		.word	rx_topic_length
 5505 0508 00000000 		.word	rx_length
 5506 050c 00000000 		.word	rx_offset
 5507 0510 2D000000 		.word	.LC24
 5508 0514 00000000 		.word	reset_flag
 5509 0518 00000000 		.word	pwr_flag
 5510 051c 33000000 		.word	.LC25
 5511 0520 3D000000 		.word	.LC26
 5512 0524 00000000 		.word	ap_mode
 5513 0528 4C000000 		.word	.LC27
 5514 052c 10000000 		.word	rxbuff3+16
 5515 0530 00000000 		.word	ssid_flag
 5516 0534 00000000 		.word	ssid_check
 5517 0538 58000000 		.word	.LC28
 5518 053c 5E000000 		.word	.LC29
 5519 0540 00000000 		.word	ssid_error
 5520 0544 00000000 		.word	mqtt_connect_flag
 5521 0548 00000000 		.word	mqtt_connect_count
 5522 054c 00000000 		.word	mqtt_check_cnt
 5523 0550 00000000 		.word	mqtt_sub_flag
 5524 0554 00000000 		.word	mqtt_sub_count
 5525 0558 00000000 		.word	send_flag
 5526 055c 00000000 		.word	send_count
 5527 0560 00000000 		.word	pwr_error
 5528 0564 00000000 		.word	rx_led
 5529              	.LVL275:
 5530              	.L360:
 947:serial.c      ****                      rx_length = (rxbuff3[9] - 0x30) * 1000 + (rxbuff3[10] - 0x30) * 100 + (rxbuff3
 5531              		.loc 1 947 26 is_stmt 1 view .LVU1693
 947:serial.c      ****                      rx_length = (rxbuff3[9] - 0x30) * 1000 + (rxbuff3[10] - 0x30) * 100 + (rxbuff3
 5532              		.loc 1 947 29 is_stmt 0 view .LVU1694
 5533 0568 6F7B     		ldrb	r7, [r5, #13]	@ zero_extendqisi2
 5534 056a 3A2F     		cmp	r7, #58
 5535 056c 7FF48BAE 		bne	.L358
 948:serial.c      ****                      rx_offset = 14;
 5536              		.loc 1 948 22 is_stmt 1 view .LVU1695
 948:serial.c      ****                      rx_offset = 14;
 5537              		.loc 1 948 42 is_stmt 0 view .LVU1696
 5538 0570 6F7A     		ldrb	r7, [r5, #9]	@ zero_extendqisi2
 948:serial.c      ****                      rx_offset = 14;
 5539              		.loc 1 948 46 view .LVU1697
 5540 0572 303F     		subs	r7, r7, #48
 948:serial.c      ****                      rx_offset = 14;
 5541              		.loc 1 948 61 view .LVU1698
 5542 0574 C7EB471C 		rsb	ip, r7, r7, lsl #5
 948:serial.c      ****                      rx_offset = 14;
 5543              		.loc 1 948 76 view .LVU1699
 5544 0578 303B     		subs	r3, r3, #48
 948:serial.c      ****                      rx_offset = 14;
 5545              		.loc 1 948 61 view .LVU1700
 5546 057a 07EB8C07 		add	r7, r7, ip, lsl #2
 948:serial.c      ****                      rx_offset = 14;
 5547              		.loc 1 948 118 view .LVU1701
 5548 057e 303A     		subs	r2, r2, #48
 948:serial.c      ****                      rx_offset = 14;
 5549              		.loc 1 948 61 view .LVU1702
 5550 0580 03EB8303 		add	r3, r3, r3, lsl #2
 948:serial.c      ****                      rx_offset = 14;
 5551              		.loc 1 948 118 view .LVU1703
 5552 0584 02EBC702 		add	r2, r2, r7, lsl #3
 948:serial.c      ****                      rx_offset = 14;
 5553              		.loc 1 948 61 view .LVU1704
 5554 0588 03EB8303 		add	r3, r3, r3, lsl #2
 948:serial.c      ****                      rx_offset = 14;
 5555              		.loc 1 948 105 view .LVU1705
 5556 058c 303C     		subs	r4, r4, #48
 948:serial.c      ****                      rx_offset = 14;
 5557              		.loc 1 948 118 view .LVU1706
 5558 058e 02EB8303 		add	r3, r2, r3, lsl #2
 948:serial.c      ****                      rx_offset = 14;
 5559              		.loc 1 948 90 view .LVU1707
 5560 0592 04EB8404 		add	r4, r4, r4, lsl #2
 948:serial.c      ****                      rx_offset = 14;
 5561              		.loc 1 948 118 view .LVU1708
 5562 0596 03EB4403 		add	r3, r3, r4, lsl #1
 5563 059a 9BB2     		uxth	r3, r3
 948:serial.c      ****                      rx_offset = 14;
 5564              		.loc 1 948 32 view .LVU1709
 5565 059c 0B80     		strh	r3, [r1]	@ movhi
 949:serial.c      ****                   }
 5566              		.loc 1 949 22 is_stmt 1 view .LVU1710
 949:serial.c      ****                   }
 5567              		.loc 1 949 32 is_stmt 0 view .LVU1711
 5568 059e 0E23     		movs	r3, #14
 5569 05a0 27E6     		b	.L532
 5570              	.LVL276:
 5571              	.L365:
 970:serial.c      ****                   rx_length = (rxbuff3[pos + 1] - 0x30) * 10 + (rxbuff3[pos + 2] - 0x30);
 5572              		.loc 1 970 23 is_stmt 1 view .LVU1712
 970:serial.c      ****                   rx_length = (rxbuff3[pos + 1] - 0x30) * 10 + (rxbuff3[pos + 2] - 0x30);
 5573              		.loc 1 970 34 is_stmt 0 view .LVU1713
 5574 05a2 91F803C0 		ldrb	ip, [r1, #3]	@ zero_extendqisi2
 970:serial.c      ****                   rx_length = (rxbuff3[pos + 1] - 0x30) * 10 + (rxbuff3[pos + 2] - 0x30);
 5575              		.loc 1 970 26 view .LVU1714
 5576 05a6 BCF12C0F 		cmp	ip, #44
 5577 05aa 0AD1     		bne	.L367
 971:serial.c      ****                   rx_offset = pos + 4;
 5578              		.loc 1 971 19 is_stmt 1 view .LVU1715
 971:serial.c      ****                   rx_offset = pos + 4;
 5579              		.loc 1 971 39 is_stmt 0 view .LVU1716
 5580 05ac 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 971:serial.c      ****                   rx_offset = pos + 4;
 5581              		.loc 1 971 49 view .LVU1717
 5582 05ae 3039     		subs	r1, r1, #48
 971:serial.c      ****                   rx_offset = pos + 4;
 5583              		.loc 1 971 62 view .LVU1718
 5584 05b0 01EB8101 		add	r1, r1, r1, lsl #2
 5585 05b4 303A     		subs	r2, r2, #48
 5586 05b6 02EB4102 		add	r2, r2, r1, lsl #1
 5587 05ba 92B2     		uxth	r2, r2
 971:serial.c      ****                   rx_offset = pos + 4;
 5588              		.loc 1 971 29 view .LVU1719
 5589 05bc 2280     		strh	r2, [r4]	@ movhi
 972:serial.c      ****                } else if (rxbuff3[pos + 4] == ',') {
 5590              		.loc 1 972 19 is_stmt 1 view .LVU1720
 972:serial.c      ****                } else if (rxbuff3[pos + 4] == ',') {
 5591              		.loc 1 972 35 is_stmt 0 view .LVU1721
 5592 05be 1533     		adds	r3, r3, #21
 5593              	.LVL277:
 972:serial.c      ****                } else if (rxbuff3[pos + 4] == ',') {
 5594              		.loc 1 972 35 view .LVU1722
 5595 05c0 A1E6     		b	.L533
 5596              	.LVL278:
 5597              	.L367:
 973:serial.c      ****                   rx_length = (rxbuff3[pos + 1] - 0x30) * 100 + (rxbuff3[pos + 2] - 0x30) * 10 + (r
 5598              		.loc 1 973 23 is_stmt 1 view .LVU1723
 973:serial.c      ****                   rx_length = (rxbuff3[pos + 1] - 0x30) * 100 + (rxbuff3[pos + 2] - 0x30) * 10 + (r
 5599              		.loc 1 973 34 is_stmt 0 view .LVU1724
 5600 05c2 0879     		ldrb	r0, [r1, #4]	@ zero_extendqisi2
 973:serial.c      ****                   rx_length = (rxbuff3[pos + 1] - 0x30) * 100 + (rxbuff3[pos + 2] - 0x30) * 10 + (r
 5601              		.loc 1 973 26 view .LVU1725
 5602 05c4 2C28     		cmp	r0, #44
 5603 05c6 14D1     		bne	.L368
 974:serial.c      ****                   rx_offset = pos + 5;
 5604              		.loc 1 974 19 is_stmt 1 view .LVU1726
 974:serial.c      ****                   rx_offset = pos + 5;
 5605              		.loc 1 974 39 is_stmt 0 view .LVU1727
 5606 05c8 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 974:serial.c      ****                   rx_offset = pos + 5;
 5607              		.loc 1 974 49 view .LVU1728
 5608 05ca 3039     		subs	r1, r1, #48
 974:serial.c      ****                   rx_offset = pos + 5;
 5609              		.loc 1 974 63 view .LVU1729
 5610 05cc 01EB8101 		add	r1, r1, r1, lsl #2
 5611 05d0 01EB8101 		add	r1, r1, r1, lsl #2
 974:serial.c      ****                   rx_offset = pos + 5;
 5612              		.loc 1 974 96 view .LVU1730
 5613 05d4 ACF1300C 		sub	ip, ip, #48
 974:serial.c      ****                   rx_offset = pos + 5;
 5614              		.loc 1 974 83 view .LVU1731
 5615 05d8 303A     		subs	r2, r2, #48
 974:serial.c      ****                   rx_offset = pos + 5;
 5616              		.loc 1 974 96 view .LVU1732
 5617 05da 0CEB810C 		add	ip, ip, r1, lsl #2
 974:serial.c      ****                   rx_offset = pos + 5;
 5618              		.loc 1 974 63 view .LVU1733
 5619 05de 02EB8202 		add	r2, r2, r2, lsl #2
 974:serial.c      ****                   rx_offset = pos + 5;
 5620              		.loc 1 974 96 view .LVU1734
 5621 05e2 0CEB420C 		add	ip, ip, r2, lsl #1
 5622 05e6 1FFA8CFC 		uxth	ip, ip
 974:serial.c      ****                   rx_offset = pos + 5;
 5623              		.loc 1 974 29 view .LVU1735
 5624 05ea A4F800C0 		strh	ip, [r4]	@ movhi
 975:serial.c      ****                } else if (rxbuff3[pos + 5] == ',') {
 5625              		.loc 1 975 19 is_stmt 1 view .LVU1736
 975:serial.c      ****                } else if (rxbuff3[pos + 5] == ',') {
 5626              		.loc 1 975 35 is_stmt 0 view .LVU1737
 5627 05ee 1633     		adds	r3, r3, #22
 5628              	.LVL279:
 975:serial.c      ****                } else if (rxbuff3[pos + 5] == ',') {
 5629              		.loc 1 975 35 view .LVU1738
 5630 05f0 89E6     		b	.L533
 5631              	.LVL280:
 5632              	.L368:
 976:serial.c      ****                   rx_length = (rxbuff3[pos + 1] - 0x30) * 1000 + (rxbuff3[pos + 2] - 0x30) * 100 + 
 5633              		.loc 1 976 23 is_stmt 1 view .LVU1739
 976:serial.c      ****                   rx_length = (rxbuff3[pos + 1] - 0x30) * 1000 + (rxbuff3[pos + 2] - 0x30) * 100 + 
 5634              		.loc 1 976 26 is_stmt 0 view .LVU1740
 5635 05f2 91F805E0 		ldrb	lr, [r1, #5]	@ zero_extendqisi2
 5636 05f6 BEF12C0F 		cmp	lr, #44
 5637 05fa 7FF486AE 		bne	.L366
 977:serial.c      ****                   rx_offset = pos + 6;
 5638              		.loc 1 977 19 is_stmt 1 view .LVU1741
 977:serial.c      ****                   rx_offset = pos + 6;
 5639              		.loc 1 977 39 is_stmt 0 view .LVU1742
 5640 05fe 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 977:serial.c      ****                   rx_offset = pos + 6;
 5641              		.loc 1 977 49 view .LVU1743
 5642 0600 3039     		subs	r1, r1, #48
 977:serial.c      ****                   rx_offset = pos + 6;
 5643              		.loc 1 977 64 view .LVU1744
 5644 0602 C1EB411E 		rsb	lr, r1, r1, lsl #5
 977:serial.c      ****                   rx_offset = pos + 6;
 5645              		.loc 1 977 84 view .LVU1745
 5646 0606 303A     		subs	r2, r2, #48
 977:serial.c      ****                   rx_offset = pos + 6;
 5647              		.loc 1 977 64 view .LVU1746
 5648 0608 01EB8E01 		add	r1, r1, lr, lsl #2
 977:serial.c      ****                   rx_offset = pos + 6;
 5649              		.loc 1 977 131 view .LVU1747
 5650 060c 3038     		subs	r0, r0, #48
 977:serial.c      ****                   rx_offset = pos + 6;
 5651              		.loc 1 977 64 view .LVU1748
 5652 060e 02EB8202 		add	r2, r2, r2, lsl #2
 977:serial.c      ****                   rx_offset = pos + 6;
 5653              		.loc 1 977 131 view .LVU1749
 5654 0612 00EBC100 		add	r0, r0, r1, lsl #3
 977:serial.c      ****                   rx_offset = pos + 6;
 5655              		.loc 1 977 64 view .LVU1750
 5656 0616 02EB8202 		add	r2, r2, r2, lsl #2
 977:serial.c      ****                   rx_offset = pos + 6;
 5657              		.loc 1 977 118 view .LVU1751
 5658 061a ACF1300C 		sub	ip, ip, #48
 977:serial.c      ****                   rx_offset = pos + 6;
 5659              		.loc 1 977 131 view .LVU1752
 5660 061e 00EB8202 		add	r2, r0, r2, lsl #2
 977:serial.c      ****                   rx_offset = pos + 6;
 5661              		.loc 1 977 98 view .LVU1753
 5662 0622 0CEB8C0C 		add	ip, ip, ip, lsl #2
 977:serial.c      ****                   rx_offset = pos + 6;
 5663              		.loc 1 977 131 view .LVU1754
 5664 0626 02EB4C02 		add	r2, r2, ip, lsl #1
 5665 062a 92B2     		uxth	r2, r2
 977:serial.c      ****                   rx_offset = pos + 6;
 5666              		.loc 1 977 29 view .LVU1755
 5667 062c 2280     		strh	r2, [r4]	@ movhi
 978:serial.c      ****                }
 5668              		.loc 1 978 19 is_stmt 1 view .LVU1756
 978:serial.c      ****                }
 5669              		.loc 1 978 35 is_stmt 0 view .LVU1757
 5670 062e 1733     		adds	r3, r3, #23
 5671              	.LVL281:
 978:serial.c      ****                }
 5672              		.loc 1 978 35 view .LVU1758
 5673 0630 69E6     		b	.L533
 5674              	.LVL282:
 5675              	.L431:
 978:serial.c      ****                }
 5676              		.loc 1 978 35 view .LVU1759
 5677 0632 2746     		mov	r7, r4
 5678 0634 AFE6     		b	.L372
 5679              	.LVL283:
 5680              	.L379:
1015:serial.c      ****                      dhcp_disable = 0;
 5681              		.loc 1 1015 22 is_stmt 1 view .LVU1760
1016:serial.c      ****                      keep_alive_time = 60;
 5682              		.loc 1 1016 35 is_stmt 0 view .LVU1761
 5683 0636 0A4B     		ldr	r3, .L540
1015:serial.c      ****                      dhcp_disable = 0;
 5684              		.loc 1 1015 33 view .LVU1762
 5685 0638 1780     		strh	r7, [r2]	@ movhi
1016:serial.c      ****                      keep_alive_time = 60;
 5686              		.loc 1 1016 22 is_stmt 1 view .LVU1763
1016:serial.c      ****                      keep_alive_time = 60;
 5687              		.loc 1 1016 35 is_stmt 0 view .LVU1764
 5688 063a 1F70     		strb	r7, [r3]
1017:serial.c      ****                      mqtt_mode = 0;
 5689              		.loc 1 1017 22 is_stmt 1 view .LVU1765
1017:serial.c      ****                      mqtt_mode = 0;
 5690              		.loc 1 1017 38 is_stmt 0 view .LVU1766
 5691 063c 094B     		ldr	r3, .L540+4
 5692 063e 3C22     		movs	r2, #60
 5693 0640 1A70     		strb	r2, [r3]
1018:serial.c      ****                      mqtt_port = 1883;
 5694              		.loc 1 1018 22 is_stmt 1 view .LVU1767
1018:serial.c      ****                      mqtt_port = 1883;
 5695              		.loc 1 1018 32 is_stmt 0 view .LVU1768
 5696 0642 094B     		ldr	r3, .L540+8
 5697 0644 1F70     		strb	r7, [r3]
1019:serial.c      ****                      ap_mode = 1;
 5698              		.loc 1 1019 22 is_stmt 1 view .LVU1769
1019:serial.c      ****                      ap_mode = 1;
 5699              		.loc 1 1019 32 is_stmt 0 view .LVU1770
 5700 0646 094B     		ldr	r3, .L540+12
 5701 0648 40F25B72 		movw	r2, #1883
 5702 064c 1A80     		strh	r2, [r3]	@ movhi
1020:serial.c      ****                      reset_flag = 1;
 5703              		.loc 1 1020 22 is_stmt 1 view .LVU1771
1020:serial.c      ****                      reset_flag = 1;
 5704              		.loc 1 1020 30 is_stmt 0 view .LVU1772
 5705 064e 084A     		ldr	r2, .L540+16
 5706 0650 0123     		movs	r3, #1
 5707 0652 1370     		strb	r3, [r2]
1021:serial.c      ****                      time_out = 0;
 5708              		.loc 1 1021 22 is_stmt 1 view .LVU1773
1021:serial.c      ****                      time_out = 0;
 5709              		.loc 1 1021 33 is_stmt 0 view .LVU1774
 5710 0654 074A     		ldr	r2, .L540+20
 5711 0656 1370     		strb	r3, [r2]
1022:serial.c      ****                   }
 5712              		.loc 1 1022 22 is_stmt 1 view .LVU1775
1022:serial.c      ****                   }
 5713              		.loc 1 1022 31 is_stmt 0 view .LVU1776
 5714 0658 074B     		ldr	r3, .L540+24
 5715 065a 1F60     		str	r7, [r3]
 5716 065c E4E6     		b	.L380
 5717              	.L541:
 5718 065e 00BF     		.align	2
 5719              	.L540:
 5720 0660 00000000 		.word	dhcp_disable
 5721 0664 00000000 		.word	keep_alive_time
 5722 0668 00000000 		.word	mqtt_mode
 5723 066c 00000000 		.word	mqtt_port
 5724 0670 00000000 		.word	ap_mode
 5725 0674 00000000 		.word	reset_flag
 5726 0678 00000000 		.word	time_out
 5727              	.L377:
1064:serial.c      ****                   if ((rxbuff3[rxcnt3 - 6] == 0x0D) && (rxbuff3[rxcnt3 - 5] == 0x0A)) {
 5728              		.loc 1 1064 16 is_stmt 1 view .LVU1777
1064:serial.c      ****                   if ((rxbuff3[rxcnt3 - 6] == 0x0D) && (rxbuff3[rxcnt3 - 5] == 0x0A)) {
 5729              		.loc 1 1064 36 is_stmt 0 view .LVU1778
 5730 067c 3388     		ldrh	r3, [r6]
1064:serial.c      ****                   if ((rxbuff3[rxcnt3 - 6] == 0x0D) && (rxbuff3[rxcnt3 - 5] == 0x0A)) {
 5731              		.loc 1 1064 28 view .LVU1779
 5732 067e 15FA83F3 		uxtah	r3, r5, r3
1064:serial.c      ****                   if ((rxbuff3[rxcnt3 - 6] == 0x0D) && (rxbuff3[rxcnt3 - 5] == 0x0A)) {
 5733              		.loc 1 1064 19 view .LVU1780
 5734 0682 13F8043C 		ldrb	r3, [r3, #-4]	@ zero_extendqisi2
 5735 0686 4F2B     		cmp	r3, #79
 5736 0688 7FF422AF 		bne	.L370
1064:serial.c      ****                   if ((rxbuff3[rxcnt3 - 6] == 0x0D) && (rxbuff3[rxcnt3 - 5] == 0x0A)) {
 5737              		.loc 1 1064 68 discriminator 1 view .LVU1781
 5738 068c 3388     		ldrh	r3, [r6]
1064:serial.c      ****                   if ((rxbuff3[rxcnt3 - 6] == 0x0D) && (rxbuff3[rxcnt3 - 5] == 0x0A)) {
 5739              		.loc 1 1064 60 discriminator 1 view .LVU1782
 5740 068e 15FA83F3 		uxtah	r3, r5, r3
1064:serial.c      ****                   if ((rxbuff3[rxcnt3 - 6] == 0x0D) && (rxbuff3[rxcnt3 - 5] == 0x0A)) {
 5741              		.loc 1 1064 49 discriminator 1 view .LVU1783
 5742 0692 13F8033C 		ldrb	r3, [r3, #-3]	@ zero_extendqisi2
 5743 0696 4B2B     		cmp	r3, #75
 5744 0698 7FF41AAF 		bne	.L370
1065:serial.c      ****                      rxok = 0;
 5745              		.loc 1 1065 19 is_stmt 1 view .LVU1784
1065:serial.c      ****                      rxok = 0;
 5746              		.loc 1 1065 39 is_stmt 0 view .LVU1785
 5747 069c 3388     		ldrh	r3, [r6]
1065:serial.c      ****                      rxok = 0;
 5748              		.loc 1 1065 31 view .LVU1786
 5749 069e 15FA83F3 		uxtah	r3, r5, r3
1065:serial.c      ****                      rxok = 0;
 5750              		.loc 1 1065 22 view .LVU1787
 5751 06a2 13F8063C 		ldrb	r3, [r3, #-6]	@ zero_extendqisi2
 5752 06a6 0D2B     		cmp	r3, #13
 5753 06a8 7FF412AF 		bne	.L370
1065:serial.c      ****                      rxok = 0;
 5754              		.loc 1 1065 72 discriminator 1 view .LVU1788
 5755 06ac 3388     		ldrh	r3, [r6]
1065:serial.c      ****                      rxok = 0;
 5756              		.loc 1 1065 64 discriminator 1 view .LVU1789
 5757 06ae 15FA83F3 		uxtah	r3, r5, r3
1065:serial.c      ****                      rxok = 0;
 5758              		.loc 1 1065 53 discriminator 1 view .LVU1790
 5759 06b2 13F8053C 		ldrb	r3, [r3, #-5]	@ zero_extendqisi2
 5760 06b6 0A2B     		cmp	r3, #10
 5761 06b8 7FF40AAF 		bne	.L370
1066:serial.c      ****                      if ((strncmp(rxbuff3,"+MQTTPUB",8) == 0) && (strncmp(rxbuff3,"SEND",4) == 0) &
 5762              		.loc 1 1066 22 is_stmt 1 view .LVU1791
 5763              	.LVL284:
1067:serial.c      ****                         if (send_flag) {
 5764              		.loc 1 1067 22 view .LVU1792
1067:serial.c      ****                         if (send_flag) {
 5765              		.loc 1 1067 27 is_stmt 0 view .LVU1793
 5766 06bc 8349     		ldr	r1, .L542
 5767 06be 8448     		ldr	r0, .L542+4
 5768 06c0 0822     		movs	r2, #8
 5769 06c2 FFF7FEFF 		bl	strncmp
 5770              	.LVL285:
1067:serial.c      ****                         if (send_flag) {
 5771              		.loc 1 1067 25 discriminator 1 view .LVU1794
 5772 06c6 60B9     		cbnz	r0, .L393
1067:serial.c      ****                         if (send_flag) {
 5773              		.loc 1 1067 67 discriminator 1 view .LVU1795
 5774 06c8 8249     		ldr	r1, .L542+8
 5775 06ca 8148     		ldr	r0, .L542+4
 5776 06cc 0422     		movs	r2, #4
 5777 06ce FFF7FEFF 		bl	strncmp
 5778              	.LVL286:
1067:serial.c      ****                         if (send_flag) {
 5779              		.loc 1 1067 63 discriminator 1 view .LVU1796
 5780 06d2 30B9     		cbnz	r0, .L393
1068:serial.c      ****                            send_flag = 0;
 5781              		.loc 1 1068 25 is_stmt 1 view .LVU1797
1068:serial.c      ****                            send_flag = 0;
 5782              		.loc 1 1068 29 is_stmt 0 view .LVU1798
 5783 06d4 804B     		ldr	r3, .L542+12
 5784 06d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1068:serial.c      ****                            send_flag = 0;
 5785              		.loc 1 1068 28 view .LVU1799
 5786 06d8 12B1     		cbz	r2, .L394
1069:serial.c      ****                            send_count = 0;
 5787              		.loc 1 1069 28 is_stmt 1 view .LVU1800
1069:serial.c      ****                            send_count = 0;
 5788              		.loc 1 1069 38 is_stmt 0 view .LVU1801
 5789 06da 1870     		strb	r0, [r3]
1070:serial.c      ****                         }
 5790              		.loc 1 1070 28 is_stmt 1 view .LVU1802
1070:serial.c      ****                         }
 5791              		.loc 1 1070 39 is_stmt 0 view .LVU1803
 5792 06dc 7F4B     		ldr	r3, .L542+16
 5793 06de 1880     		strh	r0, [r3]	@ movhi
 5794              	.L394:
1072:serial.c      ****                      }
 5795              		.loc 1 1072 30 view .LVU1804
 5796 06e0 0124     		movs	r4, #1
 5797              	.L393:
 5798              	.LVL287:
1074:serial.c      ****                         //\r\nOK\r\n
 5799              		.loc 1 1074 22 is_stmt 1 view .LVU1805
1074:serial.c      ****                         //\r\nOK\r\n
 5800              		.loc 1 1074 25 is_stmt 0 view .LVU1806
 5801 06e2 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 5802 06e4 0D2B     		cmp	r3, #13
 5803 06e6 2CD1     		bne	.L395
1074:serial.c      ****                         //\r\nOK\r\n
 5804              		.loc 1 1074 48 discriminator 1 view .LVU1807
 5805 06e8 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 5806 06ea 0A2B     		cmp	r3, #10
 5807 06ec 29D1     		bne	.L395
1074:serial.c      ****                         //\r\nOK\r\n
 5808              		.loc 1 1074 72 discriminator 2 view .LVU1808
 5809 06ee AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 5810 06f0 4F2B     		cmp	r3, #79
 5811 06f2 26D1     		bne	.L395
1074:serial.c      ****                         //\r\nOK\r\n
 5812              		.loc 1 1074 95 discriminator 3 view .LVU1809
 5813 06f4 EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 5814 06f6 4B2B     		cmp	r3, #75
 5815 06f8 23D1     		bne	.L395
1074:serial.c      ****                         //\r\nOK\r\n
 5816              		.loc 1 1074 119 discriminator 4 view .LVU1810
 5817 06fa 0CBB     		cbnz	r4, .L397
1076:serial.c      ****                            ssid_flag = 0;
 5818              		.loc 1 1076 25 is_stmt 1 view .LVU1811
1076:serial.c      ****                            ssid_flag = 0;
 5819              		.loc 1 1076 29 is_stmt 0 view .LVU1812
 5820 06fc 784B     		ldr	r3, .L542+20
 5821 06fe 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1076:serial.c      ****                            ssid_flag = 0;
 5822              		.loc 1 1076 28 view .LVU1813
 5823 0700 42B1     		cbz	r2, .L398
1076:serial.c      ****                            ssid_flag = 0;
 5824              		.loc 1 1076 39 discriminator 1 view .LVU1814
 5825 0702 784A     		ldr	r2, .L542+24
 5826 0704 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5827 0706 29B1     		cbz	r1, .L398
1077:serial.c      ****                            ip_flag = 1;
 5828              		.loc 1 1077 28 is_stmt 1 view .LVU1815
1077:serial.c      ****                            ip_flag = 1;
 5829              		.loc 1 1077 38 is_stmt 0 view .LVU1816
 5830 0708 1470     		strb	r4, [r2]
1078:serial.c      ****                            time_out = 0;
 5831              		.loc 1 1078 28 is_stmt 1 view .LVU1817
1078:serial.c      ****                            time_out = 0;
 5832              		.loc 1 1078 36 is_stmt 0 view .LVU1818
 5833 070a 774A     		ldr	r2, .L542+28
 5834 070c 0121     		movs	r1, #1
 5835 070e 1170     		strb	r1, [r2]
1079:serial.c      ****                         }
 5836              		.loc 1 1079 28 is_stmt 1 view .LVU1819
1079:serial.c      ****                         }
 5837              		.loc 1 1079 37 is_stmt 0 view .LVU1820
 5838 0710 764A     		ldr	r2, .L542+32
 5839 0712 1460     		str	r4, [r2]
 5840              	.L398:
1081:serial.c      ****                            ssid_check = 0;
 5841              		.loc 1 1081 25 is_stmt 1 view .LVU1821
1081:serial.c      ****                            ssid_check = 0;
 5842              		.loc 1 1081 38 is_stmt 0 view .LVU1822
 5843 0714 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1081:serial.c      ****                            ssid_check = 0;
 5844              		.loc 1 1081 28 view .LVU1823
 5845 0716 02F0FF03 		and	r3, r2, #255
 5846 071a 3AB9     		cbnz	r2, .L399
1081:serial.c      ****                            ssid_check = 0;
 5847              		.loc 1 1081 44 discriminator 1 view .LVU1824
 5848 071c 744A     		ldr	r2, .L542+36
 5849 071e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5850 0720 21B1     		cbz	r1, .L399
1082:serial.c      ****                            ssid_flag = 0;
 5851              		.loc 1 1082 28 is_stmt 1 view .LVU1825
1082:serial.c      ****                            ssid_flag = 0;
 5852              		.loc 1 1082 39 is_stmt 0 view .LVU1826
 5853 0722 1370     		strb	r3, [r2]
1083:serial.c      ****                            //ip_flag = 1;	//Not use 2.xx
 5854              		.loc 1 1083 28 is_stmt 1 view .LVU1827
1083:serial.c      ****                            //ip_flag = 1;	//Not use 2.xx
 5855              		.loc 1 1083 38 is_stmt 0 view .LVU1828
 5856 0724 6F4A     		ldr	r2, .L542+24
 5857 0726 1370     		strb	r3, [r2]
1085:serial.c      ****                         }
 5858              		.loc 1 1085 28 is_stmt 1 view .LVU1829
1085:serial.c      ****                         }
 5859              		.loc 1 1085 37 is_stmt 0 view .LVU1830
 5860 0728 704A     		ldr	r2, .L542+32
 5861 072a 1360     		str	r3, [r2]
 5862              	.L399:
1087:serial.c      ****                            mqtt_sub_flag = 0;
 5863              		.loc 1 1087 25 is_stmt 1 view .LVU1831
1087:serial.c      ****                            mqtt_sub_flag = 0;
 5864              		.loc 1 1087 29 is_stmt 0 view .LVU1832
 5865 072c 714A     		ldr	r2, .L542+40
 5866 072e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
1087:serial.c      ****                            mqtt_sub_flag = 0;
 5867              		.loc 1 1087 28 view .LVU1833
 5868 0730 33B1     		cbz	r3, .L397
1088:serial.c      ****                            ntp_flag = 1;
 5869              		.loc 1 1088 28 is_stmt 1 view .LVU1834
1088:serial.c      ****                            ntp_flag = 1;
 5870              		.loc 1 1088 42 is_stmt 0 view .LVU1835
 5871 0732 0023     		movs	r3, #0
 5872 0734 1370     		strb	r3, [r2]
1089:serial.c      ****                            time_out = 0;
 5873              		.loc 1 1089 28 is_stmt 1 view .LVU1836
1089:serial.c      ****                            time_out = 0;
 5874              		.loc 1 1089 37 is_stmt 0 view .LVU1837
 5875 0736 704A     		ldr	r2, .L542+44
 5876 0738 0121     		movs	r1, #1
 5877 073a 1170     		strb	r1, [r2]
1090:serial.c      ****                         }
 5878              		.loc 1 1090 28 is_stmt 1 view .LVU1838
1090:serial.c      ****                         }
 5879              		.loc 1 1090 37 is_stmt 0 view .LVU1839
 5880 073c 6B4A     		ldr	r2, .L542+32
 5881 073e 1360     		str	r3, [r2]
 5882              	.L397:
1072:serial.c      ****                      }
 5883              		.loc 1 1072 30 view .LVU1840
 5884 0740 0124     		movs	r4, #1
 5885              	.LVL288:
 5886              	.L395:
1094:serial.c      ****                         if ((ap_mode) && (ssid_flag)) {
 5887              		.loc 1 1094 22 is_stmt 1 view .LVU1841
1094:serial.c      ****                         if ((ap_mode) && (ssid_flag)) {
 5888              		.loc 1 1094 27 is_stmt 0 view .LVU1842
 5889 0742 6E49     		ldr	r1, .L542+48
 5890 0744 6248     		ldr	r0, .L542+4
 5891 0746 0822     		movs	r2, #8
 5892 0748 FFF7FEFF 		bl	strncmp
 5893              	.LVL289:
1094:serial.c      ****                         if ((ap_mode) && (ssid_flag)) {
 5894              		.loc 1 1094 25 discriminator 1 view .LVU1843
 5895 074c 60B9     		cbnz	r0, .L401
1094:serial.c      ****                         if ((ap_mode) && (ssid_flag)) {
 5896              		.loc 1 1094 63 discriminator 1 view .LVU1844
 5897 074e 5CB9     		cbnz	r4, .L401
1095:serial.c      ****                            ssid_flag = 0;
 5898              		.loc 1 1095 25 is_stmt 1 view .LVU1845
1095:serial.c      ****                            ssid_flag = 0;
 5899              		.loc 1 1095 29 is_stmt 0 view .LVU1846
 5900 0750 634B     		ldr	r3, .L542+20
 5901 0752 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1095:serial.c      ****                            ssid_flag = 0;
 5902              		.loc 1 1095 28 view .LVU1847
 5903 0754 43B1     		cbz	r3, .L401
1095:serial.c      ****                            ssid_flag = 0;
 5904              		.loc 1 1095 39 discriminator 1 view .LVU1848
 5905 0756 634B     		ldr	r3, .L542+24
 5906 0758 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5907 075a 2AB1     		cbz	r2, .L401
1096:serial.c      ****                            ip_flag = 1;
 5908              		.loc 1 1096 28 is_stmt 1 view .LVU1849
1096:serial.c      ****                            ip_flag = 1;
 5909              		.loc 1 1096 38 is_stmt 0 view .LVU1850
 5910 075c 1C70     		strb	r4, [r3]
1097:serial.c      ****                            time_out = 0;
 5911              		.loc 1 1097 28 is_stmt 1 view .LVU1851
1097:serial.c      ****                            time_out = 0;
 5912              		.loc 1 1097 36 is_stmt 0 view .LVU1852
 5913 075e 624B     		ldr	r3, .L542+28
 5914 0760 0122     		movs	r2, #1
 5915 0762 1A70     		strb	r2, [r3]
1098:serial.c      ****                         }
 5916              		.loc 1 1098 28 is_stmt 1 view .LVU1853
1098:serial.c      ****                         }
 5917              		.loc 1 1098 37 is_stmt 0 view .LVU1854
 5918 0764 614B     		ldr	r3, .L542+32
 5919 0766 1C60     		str	r4, [r3]
 5920              	.L401:
1103:serial.c      ****                         //if (strncmp(rxbuff3 + rxcnt3 - 35,"WIFI CONNECTED",11) == 0) {
 5921              		.loc 1 1103 22 is_stmt 1 view .LVU1855
1103:serial.c      ****                         //if (strncmp(rxbuff3 + rxcnt3 - 35,"WIFI CONNECTED",11) == 0) {
 5922              		.loc 1 1103 52 is_stmt 0 view .LVU1856
 5923 0768 3088     		ldrh	r0, [r6]
1103:serial.c      ****                         //if (strncmp(rxbuff3 + rxcnt3 - 35,"WIFI CONNECTED",11) == 0) {
 5924              		.loc 1 1103 27 view .LVU1857
 5925 076a 6549     		ldr	r1, .L542+52
1103:serial.c      ****                         //if (strncmp(rxbuff3 + rxcnt3 - 35,"WIFI CONNECTED",11) == 0) {
 5926              		.loc 1 1103 52 view .LVU1858
 5927 076c 80B2     		uxth	r0, r0
 5928 076e 1338     		subs	r0, r0, #19
1103:serial.c      ****                         //if (strncmp(rxbuff3 + rxcnt3 - 35,"WIFI CONNECTED",11) == 0) {
 5929              		.loc 1 1103 27 view .LVU1859
 5930 0770 0B22     		movs	r2, #11
 5931 0772 2844     		add	r0, r0, r5
 5932 0774 FFF7FEFF 		bl	strncmp
 5933              	.LVL290:
1103:serial.c      ****                         //if (strncmp(rxbuff3 + rxcnt3 - 35,"WIFI CONNECTED",11) == 0) {
 5934              		.loc 1 1103 25 discriminator 1 view .LVU1860
 5935 0778 60B9     		cbnz	r0, .L402
1103:serial.c      ****                         //if (strncmp(rxbuff3 + rxcnt3 - 35,"WIFI CONNECTED",11) == 0) {
 5936              		.loc 1 1103 81 discriminator 1 view .LVU1861
 5937 077a 54B9     		cbnz	r4, .L403
1105:serial.c      ****                            ssid_flag = 0;
 5938              		.loc 1 1105 25 is_stmt 1 view .LVU1862
1105:serial.c      ****                            ssid_flag = 0;
 5939              		.loc 1 1105 29 is_stmt 0 view .LVU1863
 5940 077c 594B     		ldr	r3, .L542+24
 5941 077e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1105:serial.c      ****                            ssid_flag = 0;
 5942              		.loc 1 1105 28 view .LVU1864
 5943 0780 002A     		cmp	r2, #0
 5944 0782 00F01281 		beq	.L404
1106:serial.c      ****                            ip_flag = 1;	//OK
 5945              		.loc 1 1106 28 is_stmt 1 view .LVU1865
1106:serial.c      ****                            ip_flag = 1;	//OK
 5946              		.loc 1 1106 38 is_stmt 0 view .LVU1866
 5947 0786 1C70     		strb	r4, [r3]
1107:serial.c      ****                            time_out = 0;
 5948              		.loc 1 1107 28 is_stmt 1 view .LVU1867
1107:serial.c      ****                            time_out = 0;
 5949              		.loc 1 1107 36 is_stmt 0 view .LVU1868
 5950 0788 574B     		ldr	r3, .L542+28
 5951              	.L534:
1107:serial.c      ****                            time_out = 0;
 5952              		.loc 1 1107 36 view .LVU1869
 5953 078a 0122     		movs	r2, #1
 5954 078c 1A70     		strb	r2, [r3]
1108:serial.c      ****                         } else {
 5955              		.loc 1 1108 28 is_stmt 1 view .LVU1870
1108:serial.c      ****                         } else {
 5956              		.loc 1 1108 37 is_stmt 0 view .LVU1871
 5957 078e 574B     		ldr	r3, .L542+32
 5958 0790 1C60     		str	r4, [r3]
 5959              	.L403:
1072:serial.c      ****                      }
 5960              		.loc 1 1072 30 view .LVU1872
 5961 0792 0124     		movs	r4, #1
 5962              	.LVL291:
 5963              	.L402:
1120:serial.c      ****                         if (server_flag) {
 5964              		.loc 1 1120 22 is_stmt 1 view .LVU1873
1120:serial.c      ****                         if (server_flag) {
 5965              		.loc 1 1120 27 is_stmt 0 view .LVU1874
 5966 0794 5B49     		ldr	r1, .L542+56
 5967 0796 4E48     		ldr	r0, .L542+4
 5968 0798 0C22     		movs	r2, #12
 5969 079a FFF7FEFF 		bl	strncmp
 5970              	.LVL292:
1120:serial.c      ****                         if (server_flag) {
 5971              		.loc 1 1120 25 discriminator 1 view .LVU1875
 5972 079e 88B9     		cbnz	r0, .L405
1120:serial.c      ****                         if (server_flag) {
 5973              		.loc 1 1120 68 discriminator 1 view .LVU1876
 5974 07a0 7CB9     		cbnz	r4, .L406
1121:serial.c      ****                            server_flag = 0;
 5975              		.loc 1 1121 25 is_stmt 1 view .LVU1877
1121:serial.c      ****                            server_flag = 0;
 5976              		.loc 1 1121 29 is_stmt 0 view .LVU1878
 5977 07a2 594B     		ldr	r3, .L542+60
 5978 07a4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1121:serial.c      ****                            server_flag = 0;
 5979              		.loc 1 1121 28 view .LVU1879
 5980 07a6 62B1     		cbz	r2, .L406
1122:serial.c      ****                            if (ap_mode == 0) {
 5981              		.loc 1 1122 28 is_stmt 1 view .LVU1880
1122:serial.c      ****                            if (ap_mode == 0) {
 5982              		.loc 1 1122 40 is_stmt 0 view .LVU1881
 5983 07a8 1C70     		strb	r4, [r3]
1123:serial.c      ****                               //host_flag = 1;
 5984              		.loc 1 1123 28 is_stmt 1 view .LVU1882
1123:serial.c      ****                               //host_flag = 1;
 5985              		.loc 1 1123 40 is_stmt 0 view .LVU1883
 5986 07aa 4D4B     		ldr	r3, .L542+20
 5987 07ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1123:serial.c      ****                               //host_flag = 1;
 5988              		.loc 1 1123 31 view .LVU1884
 5989 07ae 2BB9     		cbnz	r3, .L407
1125:serial.c      ****                                  mqtt_cfg_flag = 1;
 5990              		.loc 1 1125 31 is_stmt 1 view .LVU1885
1125:serial.c      ****                                  mqtt_cfg_flag = 1;
 5991              		.loc 1 1125 35 is_stmt 0 view .LVU1886
 5992 07b0 564B     		ldr	r3, .L542+64
 5993 07b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1125:serial.c      ****                                  mqtt_cfg_flag = 1;
 5994              		.loc 1 1125 34 view .LVU1887
 5995 07b4 13B1     		cbz	r3, .L407
1126:serial.c      ****                               }
 5996              		.loc 1 1126 34 is_stmt 1 view .LVU1888
1126:serial.c      ****                               }
 5997              		.loc 1 1126 48 is_stmt 0 view .LVU1889
 5998 07b6 564B     		ldr	r3, .L542+68
 5999 07b8 0122     		movs	r2, #1
 6000 07ba 1A70     		strb	r2, [r3]
 6001              	.L407:
1129:serial.c      ****                         }
 6002              		.loc 1 1129 28 is_stmt 1 view .LVU1890
1129:serial.c      ****                         }
 6003              		.loc 1 1129 37 is_stmt 0 view .LVU1891
 6004 07bc 4B4B     		ldr	r3, .L542+32
 6005 07be 0022     		movs	r2, #0
 6006 07c0 1A60     		str	r2, [r3]
 6007              	.L406:
1072:serial.c      ****                      }
 6008              		.loc 1 1072 30 view .LVU1892
 6009 07c2 0124     		movs	r4, #1
 6010              	.LVL293:
 6011              	.L405:
1133:serial.c      ****                         if (pwr_flag) {
 6012              		.loc 1 1133 22 is_stmt 1 view .LVU1893
1133:serial.c      ****                         if (pwr_flag) {
 6013              		.loc 1 1133 27 is_stmt 0 view .LVU1894
 6014 07c4 5349     		ldr	r1, .L542+72
 6015 07c6 4248     		ldr	r0, .L542+4
 6016 07c8 0A22     		movs	r2, #10
 6017 07ca FFF7FEFF 		bl	strncmp
 6018              	.LVL294:
1133:serial.c      ****                         if (pwr_flag) {
 6019              		.loc 1 1133 25 discriminator 1 view .LVU1895
 6020 07ce 50B9     		cbnz	r0, .L408
1133:serial.c      ****                         if (pwr_flag) {
 6021              		.loc 1 1133 66 discriminator 1 view .LVU1896
 6022 07d0 44B9     		cbnz	r4, .L409
1134:serial.c      ****                            pwr_flag = 0;
 6023              		.loc 1 1134 25 is_stmt 1 view .LVU1897
1134:serial.c      ****                            pwr_flag = 0;
 6024              		.loc 1 1134 29 is_stmt 0 view .LVU1898
 6025 07d2 514B     		ldr	r3, .L542+76
 6026 07d4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1134:serial.c      ****                            pwr_flag = 0;
 6027              		.loc 1 1134 28 view .LVU1899
 6028 07d6 2AB1     		cbz	r2, .L409
1135:serial.c      ****                            mode_flag = 1;
 6029              		.loc 1 1135 28 is_stmt 1 view .LVU1900
1135:serial.c      ****                            mode_flag = 1;
 6030              		.loc 1 1135 37 is_stmt 0 view .LVU1901
 6031 07d8 1C70     		strb	r4, [r3]
1136:serial.c      ****                            time_out = 0;
 6032              		.loc 1 1136 28 is_stmt 1 view .LVU1902
1136:serial.c      ****                            time_out = 0;
 6033              		.loc 1 1136 38 is_stmt 0 view .LVU1903
 6034 07da 504B     		ldr	r3, .L542+80
 6035 07dc 0122     		movs	r2, #1
 6036 07de 1A70     		strb	r2, [r3]
1137:serial.c      ****                         }
 6037              		.loc 1 1137 28 is_stmt 1 view .LVU1904
1137:serial.c      ****                         }
 6038              		.loc 1 1137 37 is_stmt 0 view .LVU1905
 6039 07e0 424B     		ldr	r3, .L542+32
 6040 07e2 1C60     		str	r4, [r3]
 6041              	.L409:
1072:serial.c      ****                      }
 6042              		.loc 1 1072 30 view .LVU1906
 6043 07e4 0124     		movs	r4, #1
 6044              	.LVL295:
 6045              	.L408:
1141:serial.c      ****                         if (mode_flag) {
 6046              		.loc 1 1141 22 is_stmt 1 view .LVU1907
1141:serial.c      ****                         if (mode_flag) {
 6047              		.loc 1 1141 27 is_stmt 0 view .LVU1908
 6048 07e6 4E49     		ldr	r1, .L542+84
 6049 07e8 3948     		ldr	r0, .L542+4
 6050 07ea 0922     		movs	r2, #9
 6051 07ec FFF7FEFF 		bl	strncmp
 6052              	.LVL296:
1141:serial.c      ****                         if (mode_flag) {
 6053              		.loc 1 1141 25 discriminator 1 view .LVU1909
 6054 07f0 78B9     		cbnz	r0, .L410
1141:serial.c      ****                         if (mode_flag) {
 6055              		.loc 1 1141 64 discriminator 1 view .LVU1910
 6056 07f2 74B9     		cbnz	r4, .L410
1142:serial.c      ****                            mode_flag = 0;
 6057              		.loc 1 1142 25 is_stmt 1 view .LVU1911
1142:serial.c      ****                            mode_flag = 0;
 6058              		.loc 1 1142 29 is_stmt 0 view .LVU1912
 6059 07f4 494B     		ldr	r3, .L542+80
 6060 07f6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1142:serial.c      ****                            mode_flag = 0;
 6061              		.loc 1 1142 28 view .LVU1913
 6062 07f8 5AB1     		cbz	r2, .L410
1143:serial.c      ****                            if (ap_mode == 0) {
 6063              		.loc 1 1143 28 is_stmt 1 view .LVU1914
1143:serial.c      ****                            if (ap_mode == 0) {
 6064              		.loc 1 1143 38 is_stmt 0 view .LVU1915
 6065 07fa 1C70     		strb	r4, [r3]
1144:serial.c      ****                               host_flag = 1;
 6066              		.loc 1 1144 28 is_stmt 1 view .LVU1916
1144:serial.c      ****                               host_flag = 1;
 6067              		.loc 1 1144 40 is_stmt 0 view .LVU1917
 6068 07fc 384B     		ldr	r3, .L542+20
 6069 07fe 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6070 0800 0123     		movs	r3, #1
1144:serial.c      ****                               host_flag = 1;
 6071              		.loc 1 1144 31 view .LVU1918
 6072 0802 002A     		cmp	r2, #0
 6073 0804 40F0DE80 		bne	.L411
1145:serial.c      ****                            } else {
 6074              		.loc 1 1145 31 is_stmt 1 view .LVU1919
1145:serial.c      ****                            } else {
 6075              		.loc 1 1145 41 is_stmt 0 view .LVU1920
 6076 0808 464A     		ldr	r2, .L542+88
 6077              	.L535:
1147:serial.c      ****                            }
 6078              		.loc 1 1147 41 view .LVU1921
 6079 080a 1370     		strb	r3, [r2]
1149:serial.c      ****                         }
 6080              		.loc 1 1149 28 is_stmt 1 view .LVU1922
1149:serial.c      ****                         }
 6081              		.loc 1 1149 37 is_stmt 0 view .LVU1923
 6082 080c 374B     		ldr	r3, .L542+32
 6083 080e 0022     		movs	r2, #0
 6084 0810 1A60     		str	r2, [r3]
 6085              	.L410:
1152:serial.c      ****                         if (ip_flag) {
 6086              		.loc 1 1152 22 is_stmt 1 view .LVU1924
1152:serial.c      ****                         if (ip_flag) {
 6087              		.loc 1 1152 28 is_stmt 0 view .LVU1925
 6088 0812 4549     		ldr	r1, .L542+92
 6089 0814 2E48     		ldr	r0, .L542+4
 6090 0816 0822     		movs	r2, #8
 6091 0818 FFF7FEFF 		bl	strncmp
 6092              	.LVL297:
1152:serial.c      ****                         if (ip_flag) {
 6093              		.loc 1 1152 25 discriminator 1 view .LVU1926
 6094 081c 28B1     		cbz	r0, .L413
1152:serial.c      ****                         if (ip_flag) {
 6095              		.loc 1 1152 68 discriminator 2 view .LVU1927
 6096 081e 4349     		ldr	r1, .L542+96
 6097 0820 2B48     		ldr	r0, .L542+4
 6098 0822 0922     		movs	r2, #9
 6099 0824 FFF7FEFF 		bl	strncmp
 6100              	.LVL298:
1152:serial.c      ****                         if (ip_flag) {
 6101              		.loc 1 1152 64 discriminator 1 view .LVU1928
 6102 0828 50B9     		cbnz	r0, .L414
 6103              	.L413:
1152:serial.c      ****                         if (ip_flag) {
 6104              		.loc 1 1152 106 discriminator 3 view .LVU1929
 6105 082a 44B9     		cbnz	r4, .L415
1153:serial.c      ****                            ip_flag = 0;
 6106              		.loc 1 1153 25 is_stmt 1 view .LVU1930
1153:serial.c      ****                            ip_flag = 0;
 6107              		.loc 1 1153 29 is_stmt 0 view .LVU1931
 6108 082c 2E4B     		ldr	r3, .L542+28
 6109 082e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1153:serial.c      ****                            ip_flag = 0;
 6110              		.loc 1 1153 28 view .LVU1932
 6111 0830 2AB1     		cbz	r2, .L415
1154:serial.c      ****                            mux_flag = 1;
 6112              		.loc 1 1154 28 is_stmt 1 view .LVU1933
1154:serial.c      ****                            mux_flag = 1;
 6113              		.loc 1 1154 36 is_stmt 0 view .LVU1934
 6114 0832 1C70     		strb	r4, [r3]
1155:serial.c      ****                            time_out = 0;
 6115              		.loc 1 1155 28 is_stmt 1 view .LVU1935
1155:serial.c      ****                            time_out = 0;
 6116              		.loc 1 1155 37 is_stmt 0 view .LVU1936
 6117 0834 3E4B     		ldr	r3, .L542+100
 6118 0836 0122     		movs	r2, #1
 6119 0838 1A70     		strb	r2, [r3]
1156:serial.c      ****                         }
 6120              		.loc 1 1156 28 is_stmt 1 view .LVU1937
1156:serial.c      ****                         }
 6121              		.loc 1 1156 37 is_stmt 0 view .LVU1938
 6122 083a 2C4B     		ldr	r3, .L542+32
 6123 083c 1C60     		str	r4, [r3]
 6124              	.L415:
1072:serial.c      ****                      }
 6125              		.loc 1 1072 30 view .LVU1939
 6126 083e 0124     		movs	r4, #1
 6127              	.LVL299:
 6128              	.L414:
1160:serial.c      ****                         if (mux_flag) {
 6129              		.loc 1 1160 22 is_stmt 1 view .LVU1940
1160:serial.c      ****                         if (mux_flag) {
 6130              		.loc 1 1160 27 is_stmt 0 view .LVU1941
 6131 0840 3C49     		ldr	r1, .L542+104
 6132 0842 2348     		ldr	r0, .L542+4
 6133 0844 0922     		movs	r2, #9
 6134 0846 FFF7FEFF 		bl	strncmp
 6135              	.LVL300:
1160:serial.c      ****                         if (mux_flag) {
 6136              		.loc 1 1160 25 discriminator 1 view .LVU1942
 6137 084a 50B9     		cbnz	r0, .L416
1160:serial.c      ****                         if (mux_flag) {
 6138              		.loc 1 1160 64 discriminator 1 view .LVU1943
 6139 084c 44B9     		cbnz	r4, .L417
1161:serial.c      ****                            mux_flag = 0;
 6140              		.loc 1 1161 25 is_stmt 1 view .LVU1944
1161:serial.c      ****                            mux_flag = 0;
 6141              		.loc 1 1161 29 is_stmt 0 view .LVU1945
 6142 084e 384B     		ldr	r3, .L542+100
 6143 0850 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1161:serial.c      ****                            mux_flag = 0;
 6144              		.loc 1 1161 28 view .LVU1946
 6145 0852 2AB1     		cbz	r2, .L417
1162:serial.c      ****                            server_flag = 1;
 6146              		.loc 1 1162 28 is_stmt 1 view .LVU1947
1162:serial.c      ****                            server_flag = 1;
 6147              		.loc 1 1162 37 is_stmt 0 view .LVU1948
 6148 0854 1C70     		strb	r4, [r3]
1163:serial.c      ****                            time_out = 0;
 6149              		.loc 1 1163 28 is_stmt 1 view .LVU1949
1163:serial.c      ****                            time_out = 0;
 6150              		.loc 1 1163 40 is_stmt 0 view .LVU1950
 6151 0856 2C4B     		ldr	r3, .L542+60
 6152 0858 0122     		movs	r2, #1
 6153 085a 1A70     		strb	r2, [r3]
1164:serial.c      ****                         }
 6154              		.loc 1 1164 28 is_stmt 1 view .LVU1951
1164:serial.c      ****                         }
 6155              		.loc 1 1164 37 is_stmt 0 view .LVU1952
 6156 085c 234B     		ldr	r3, .L542+32
 6157 085e 1C60     		str	r4, [r3]
 6158              	.L417:
1072:serial.c      ****                      }
 6159              		.loc 1 1072 30 view .LVU1953
 6160 0860 0124     		movs	r4, #1
 6161              	.LVL301:
 6162              	.L416:
1168:serial.c      ****                         if (mqtt_cfg_flag) {
 6163              		.loc 1 1168 22 is_stmt 1 view .LVU1954
1168:serial.c      ****                         if (mqtt_cfg_flag) {
 6164              		.loc 1 1168 27 is_stmt 0 view .LVU1955
 6165 0862 3549     		ldr	r1, .L542+108
 6166 0864 1A48     		ldr	r0, .L542+4
 6167 0866 0E22     		movs	r2, #14
 6168 0868 FFF7FEFF 		bl	strncmp
 6169              	.LVL302:
1168:serial.c      ****                         if (mqtt_cfg_flag) {
 6170              		.loc 1 1168 25 discriminator 1 view .LVU1956
 6171 086c 50B9     		cbnz	r0, .L418
1168:serial.c      ****                         if (mqtt_cfg_flag) {
 6172              		.loc 1 1168 70 discriminator 1 view .LVU1957
 6173 086e 44B9     		cbnz	r4, .L419
1169:serial.c      ****                            mqtt_cfg_flag = 0;
 6174              		.loc 1 1169 25 is_stmt 1 view .LVU1958
1169:serial.c      ****                            mqtt_cfg_flag = 0;
 6175              		.loc 1 1169 29 is_stmt 0 view .LVU1959
 6176 0870 274B     		ldr	r3, .L542+68
 6177 0872 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1169:serial.c      ****                            mqtt_cfg_flag = 0;
 6178              		.loc 1 1169 28 view .LVU1960
 6179 0874 2AB1     		cbz	r2, .L419
1170:serial.c      ****                            mqtt_connect_flag = 1;
 6180              		.loc 1 1170 28 is_stmt 1 view .LVU1961
1170:serial.c      ****                            mqtt_connect_flag = 1;
 6181              		.loc 1 1170 42 is_stmt 0 view .LVU1962
 6182 0876 1C70     		strb	r4, [r3]
1171:serial.c      ****                            time_out = 0;
 6183              		.loc 1 1171 28 is_stmt 1 view .LVU1963
1171:serial.c      ****                            time_out = 0;
 6184              		.loc 1 1171 46 is_stmt 0 view .LVU1964
 6185 0878 304B     		ldr	r3, .L542+112
 6186 087a 0122     		movs	r2, #1
 6187 087c 1A70     		strb	r2, [r3]
1172:serial.c      ****                         }
 6188              		.loc 1 1172 28 is_stmt 1 view .LVU1965
1172:serial.c      ****                         }
 6189              		.loc 1 1172 37 is_stmt 0 view .LVU1966
 6190 087e 1B4B     		ldr	r3, .L542+32
 6191 0880 1C60     		str	r4, [r3]
 6192              	.L419:
1072:serial.c      ****                      }
 6193              		.loc 1 1072 30 view .LVU1967
 6194 0882 0124     		movs	r4, #1
 6195              	.LVL303:
 6196              	.L418:
1176:serial.c      ****                         if (mqtt_connect_flag) {
 6197              		.loc 1 1176 22 is_stmt 1 view .LVU1968
1176:serial.c      ****                         if (mqtt_connect_flag) {
 6198              		.loc 1 1176 27 is_stmt 0 view .LVU1969
 6199 0884 2E49     		ldr	r1, .L542+116
 6200 0886 1248     		ldr	r0, .L542+4
 6201 0888 0E22     		movs	r2, #14
 6202 088a FFF7FEFF 		bl	strncmp
 6203              	.LVL304:
1176:serial.c      ****                         if (mqtt_connect_flag) {
 6204              		.loc 1 1176 25 discriminator 1 view .LVU1970
 6205 088e 70B9     		cbnz	r0, .L420
1176:serial.c      ****                         if (mqtt_connect_flag) {
 6206              		.loc 1 1176 70 discriminator 1 view .LVU1971
 6207 0890 64B9     		cbnz	r4, .L421
1177:serial.c      ****                            mqtt_connect_flag = 0;
 6208              		.loc 1 1177 25 is_stmt 1 view .LVU1972
1177:serial.c      ****                            mqtt_connect_flag = 0;
 6209              		.loc 1 1177 29 is_stmt 0 view .LVU1973
 6210 0892 2A4B     		ldr	r3, .L542+112
 6211 0894 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1177:serial.c      ****                            mqtt_connect_flag = 0;
 6212              		.loc 1 1177 28 view .LVU1974
 6213 0896 4AB1     		cbz	r2, .L421
1178:serial.c      ****                            mqtt_sub_flag = 1;
 6214              		.loc 1 1178 28 is_stmt 1 view .LVU1975
1178:serial.c      ****                            mqtt_sub_flag = 1;
 6215              		.loc 1 1178 46 is_stmt 0 view .LVU1976
 6216 0898 1C70     		strb	r4, [r3]
1179:serial.c      ****                            mqtt_check_cnt = 0;
 6217              		.loc 1 1179 28 is_stmt 1 view .LVU1977
1179:serial.c      ****                            mqtt_check_cnt = 0;
 6218              		.loc 1 1179 42 is_stmt 0 view .LVU1978
 6219 089a 164B     		ldr	r3, .L542+40
 6220 089c 0122     		movs	r2, #1
 6221 089e 1A70     		strb	r2, [r3]
1180:serial.c      ****                            mqtt_connect_count = 0;
 6222              		.loc 1 1180 28 is_stmt 1 view .LVU1979
1180:serial.c      ****                            mqtt_connect_count = 0;
 6223              		.loc 1 1180 43 is_stmt 0 view .LVU1980
 6224 08a0 284B     		ldr	r3, .L542+120
 6225 08a2 1C80     		strh	r4, [r3]	@ movhi
1181:serial.c      ****                            time_out = 0;
 6226              		.loc 1 1181 28 is_stmt 1 view .LVU1981
1181:serial.c      ****                            time_out = 0;
 6227              		.loc 1 1181 47 is_stmt 0 view .LVU1982
 6228 08a4 284B     		ldr	r3, .L542+124
 6229 08a6 1C80     		strh	r4, [r3]	@ movhi
1182:serial.c      ****                         }
 6230              		.loc 1 1182 28 is_stmt 1 view .LVU1983
1182:serial.c      ****                         }
 6231              		.loc 1 1182 37 is_stmt 0 view .LVU1984
 6232 08a8 104B     		ldr	r3, .L542+32
 6233 08aa 1C60     		str	r4, [r3]
 6234              	.L421:
1072:serial.c      ****                      }
 6235              		.loc 1 1072 30 view .LVU1985
 6236 08ac 0124     		movs	r4, #1
 6237              	.LVL305:
 6238              	.L420:
1186:serial.c      ****                         if (ntp_flag) {
 6239              		.loc 1 1186 22 is_stmt 1 view .LVU1986
1186:serial.c      ****                         if (ntp_flag) {
 6240              		.loc 1 1186 27 is_stmt 0 view .LVU1987
 6241 08ae 2749     		ldr	r1, .L542+128
 6242 08b0 0748     		ldr	r0, .L542+4
 6243 08b2 0D22     		movs	r2, #13
 6244 08b4 FFF7FEFF 		bl	strncmp
 6245              	.LVL306:
1186:serial.c      ****                         if (ntp_flag) {
 6246              		.loc 1 1186 25 discriminator 1 view .LVU1988
 6247 08b8 0028     		cmp	r0, #0
 6248 08ba 50D1     		bne	.L422
1186:serial.c      ****                         if (ntp_flag) {
 6249              		.loc 1 1186 69 discriminator 1 view .LVU1989
 6250 08bc 002C     		cmp	r4, #0
 6251 08be 4DD1     		bne	.L423
1187:serial.c      ****                            ntp_flag = 0;
 6252              		.loc 1 1187 25 is_stmt 1 view .LVU1990
1187:serial.c      ****                            ntp_flag = 0;
 6253              		.loc 1 1187 29 is_stmt 0 view .LVU1991
 6254 08c0 0D4B     		ldr	r3, .L542+44
 6255 08c2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1187:serial.c      ****                            ntp_flag = 0;
 6256              		.loc 1 1187 28 view .LVU1992
 6257 08c4 002A     		cmp	r2, #0
 6258 08c6 49D0     		beq	.L423
 6259 08c8 42E0     		b	.L543
 6260              	.L544:
 6261 08ca 00BF     		.align	2
 6262              	.L542:
 6263 08cc 63000000 		.word	.LC30
 6264 08d0 00000000 		.word	rxbuff3
 6265 08d4 6C000000 		.word	.LC31
 6266 08d8 00000000 		.word	send_flag
 6267 08dc 00000000 		.word	send_count
 6268 08e0 00000000 		.word	ap_mode
 6269 08e4 00000000 		.word	ssid_flag
 6270 08e8 00000000 		.word	ip_flag
 6271 08ec 00000000 		.word	time_out
 6272 08f0 00000000 		.word	ssid_check
 6273 08f4 00000000 		.word	mqtt_sub_flag
 6274 08f8 00000000 		.word	ntp_flag
 6275 08fc 71000000 		.word	.LC32
 6276 0900 4C000000 		.word	.LC27
 6277 0904 7A000000 		.word	.LC33
 6278 0908 00000000 		.word	server_flag
 6279 090c 00000000 		.word	mqtt_protocol
 6280 0910 00000000 		.word	mqtt_cfg_flag
 6281 0914 87000000 		.word	.LC34
 6282 0918 00000000 		.word	pwr_flag
 6283 091c 00000000 		.word	mode_flag
 6284 0920 92000000 		.word	.LC35
 6285 0924 00000000 		.word	host_flag
 6286 0928 9C000000 		.word	.LC36
 6287 092c A5000000 		.word	.LC37
 6288 0930 00000000 		.word	mux_flag
 6289 0934 AF000000 		.word	.LC38
 6290 0938 B9000000 		.word	.LC39
 6291 093c 00000000 		.word	mqtt_connect_flag
 6292 0940 C8000000 		.word	.LC40
 6293 0944 00000000 		.word	mqtt_check_cnt
 6294 0948 00000000 		.word	mqtt_connect_count
 6295 094c D7000000 		.word	.LC41
 6296              	.L543:
1188:serial.c      ****                            ntp_req_flag = 1;
 6297              		.loc 1 1188 28 is_stmt 1 view .LVU1993
1188:serial.c      ****                            ntp_req_flag = 1;
 6298              		.loc 1 1188 37 is_stmt 0 view .LVU1994
 6299 0950 1C70     		strb	r4, [r3]
1189:serial.c      ****                            mqtt_sub_count = 0;
 6300              		.loc 1 1189 28 is_stmt 1 view .LVU1995
1189:serial.c      ****                            mqtt_sub_count = 0;
 6301              		.loc 1 1189 41 is_stmt 0 view .LVU1996
 6302 0952 1D4B     		ldr	r3, .L545
 6303 0954 0122     		movs	r2, #1
 6304 0956 1A70     		strb	r2, [r3]
1190:serial.c      ****                         }
 6305              		.loc 1 1190 28 is_stmt 1 view .LVU1997
1190:serial.c      ****                         }
 6306              		.loc 1 1190 43 is_stmt 0 view .LVU1998
 6307 0958 1C4B     		ldr	r3, .L545+4
 6308 095a 1C80     		strh	r4, [r3]	@ movhi
 6309              	.L423:
1072:serial.c      ****                      }
 6310              		.loc 1 1072 30 view .LVU1999
 6311 095c 0124     		movs	r4, #1
 6312              	.LVL307:
 6313              	.L422:
1194:serial.c      ****                         if (ntp_req_flag) {
 6314              		.loc 1 1194 22 is_stmt 1 view .LVU2000
1194:serial.c      ****                         if (ntp_req_flag) {
 6315              		.loc 1 1194 27 is_stmt 0 view .LVU2001
 6316 095e 1C49     		ldr	r1, .L545+8
 6317 0960 1C48     		ldr	r0, .L545+12
 6318 0962 0E22     		movs	r2, #14
 6319 0964 FFF7FEFF 		bl	strncmp
 6320              	.LVL308:
1194:serial.c      ****                         if (ntp_req_flag) {
 6321              		.loc 1 1194 25 discriminator 1 view .LVU2002
 6322 0968 28B9     		cbnz	r0, .L424
1194:serial.c      ****                         if (ntp_req_flag) {
 6323              		.loc 1 1194 70 discriminator 1 view .LVU2003
 6324 096a 1CB9     		cbnz	r4, .L425
1195:serial.c      ****                            ntp_req_flag = 0;
 6325              		.loc 1 1195 25 is_stmt 1 view .LVU2004
1195:serial.c      ****                            ntp_req_flag = 0;
 6326              		.loc 1 1195 29 is_stmt 0 view .LVU2005
 6327 096c 164B     		ldr	r3, .L545
 6328 096e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1195:serial.c      ****                            ntp_req_flag = 0;
 6329              		.loc 1 1195 28 view .LVU2006
 6330 0970 02B1     		cbz	r2, .L425
1196:serial.c      ****                         }
 6331              		.loc 1 1196 28 is_stmt 1 view .LVU2007
1196:serial.c      ****                         }
 6332              		.loc 1 1196 41 is_stmt 0 view .LVU2008
 6333 0972 1C70     		strb	r4, [r3]
 6334              	.L425:
1072:serial.c      ****                      }
 6335              		.loc 1 1072 30 view .LVU2009
 6336 0974 0124     		movs	r4, #1
 6337              	.LVL309:
 6338              	.L424:
1200:serial.c      ****                         if (host_flag) {
 6339              		.loc 1 1200 22 is_stmt 1 view .LVU2010
1200:serial.c      ****                         if (host_flag) {
 6340              		.loc 1 1200 27 is_stmt 0 view .LVU2011
 6341 0976 1849     		ldr	r1, .L545+16
 6342 0978 1648     		ldr	r0, .L545+12
 6343 097a 0D22     		movs	r2, #13
 6344 097c FFF7FEFF 		bl	strncmp
 6345              	.LVL310:
1200:serial.c      ****                         if (host_flag) {
 6346              		.loc 1 1200 25 discriminator 1 view .LVU2012
 6347 0980 0028     		cmp	r0, #0
 6348 0982 7FF4A5AD 		bne	.L370
1200:serial.c      ****                         if (host_flag) {
 6349              		.loc 1 1200 69 discriminator 1 view .LVU2013
 6350 0986 002C     		cmp	r4, #0
 6351 0988 7FF4A2AD 		bne	.L370
1201:serial.c      ****                            host_flag = 0;
 6352              		.loc 1 1201 25 is_stmt 1 view .LVU2014
1201:serial.c      ****                            host_flag = 0;
 6353              		.loc 1 1201 29 is_stmt 0 view .LVU2015
 6354 098c 134B     		ldr	r3, .L545+20
 6355 098e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1201:serial.c      ****                            host_flag = 0;
 6356              		.loc 1 1201 28 view .LVU2016
 6357 0990 002A     		cmp	r2, #0
 6358 0992 3FF49DAD 		beq	.L370
1202:serial.c      ****                            if (ap_mode == 0) {
 6359              		.loc 1 1202 28 is_stmt 1 view .LVU2017
1202:serial.c      ****                            if (ap_mode == 0) {
 6360              		.loc 1 1202 38 is_stmt 0 view .LVU2018
 6361 0996 1C70     		strb	r4, [r3]
1203:serial.c      ****                               ssid_flag = 1;
 6362              		.loc 1 1203 28 is_stmt 1 view .LVU2019
1203:serial.c      ****                               ssid_flag = 1;
 6363              		.loc 1 1203 40 is_stmt 0 view .LVU2020
 6364 0998 114B     		ldr	r3, .L545+24
 6365 099a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1203:serial.c      ****                               ssid_flag = 1;
 6366              		.loc 1 1203 31 view .LVU2021
 6367 099c 002B     		cmp	r3, #0
 6368 099e 7FF497AD 		bne	.L370
1204:serial.c      ****                            }
 6369              		.loc 1 1204 31 is_stmt 1 view .LVU2022
1204:serial.c      ****                            }
 6370              		.loc 1 1204 41 is_stmt 0 view .LVU2023
 6371 09a2 104B     		ldr	r3, .L545+28
 6372 09a4 0122     		movs	r2, #1
 6373 09a6 1A70     		strb	r2, [r3]
 6374 09a8 92E5     		b	.L370
 6375              	.L404:
1110:serial.c      ****                               if (ip_flag) {
 6376              		.loc 1 1110 28 is_stmt 1 view .LVU2024
1110:serial.c      ****                               if (ip_flag) {
 6377              		.loc 1 1110 32 is_stmt 0 view .LVU2025
 6378 09aa 0F4B     		ldr	r3, .L545+32
 6379 09ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1110:serial.c      ****                               if (ip_flag) {
 6380              		.loc 1 1110 31 view .LVU2026
 6381 09ae 002B     		cmp	r3, #0
 6382 09b0 3FF4EFAE 		beq	.L403
1111:serial.c      ****                                  ip_flag = 0;
 6383              		.loc 1 1111 31 is_stmt 1 view .LVU2027
1111:serial.c      ****                                  ip_flag = 0;
 6384              		.loc 1 1111 35 is_stmt 0 view .LVU2028
 6385 09b4 0D4B     		ldr	r3, .L545+36
 6386 09b6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1111:serial.c      ****                                  ip_flag = 0;
 6387              		.loc 1 1111 34 view .LVU2029
 6388 09b8 002A     		cmp	r2, #0
 6389 09ba 3FF4EAAE 		beq	.L403
1112:serial.c      ****                                  mux_flag = 1;
 6390              		.loc 1 1112 34 is_stmt 1 view .LVU2030
1112:serial.c      ****                                  mux_flag = 1;
 6391              		.loc 1 1112 42 is_stmt 0 view .LVU2031
 6392 09be 1C70     		strb	r4, [r3]
1113:serial.c      ****                                  time_out = 0;
 6393              		.loc 1 1113 34 is_stmt 1 view .LVU2032
1113:serial.c      ****                                  time_out = 0;
 6394              		.loc 1 1113 43 is_stmt 0 view .LVU2033
 6395 09c0 0B4B     		ldr	r3, .L545+40
 6396 09c2 E2E6     		b	.L534
 6397              	.L411:
1147:serial.c      ****                            }
 6398              		.loc 1 1147 31 is_stmt 1 view .LVU2034
1147:serial.c      ****                            }
 6399              		.loc 1 1147 41 is_stmt 0 view .LVU2035
 6400 09c4 074A     		ldr	r2, .L545+28
 6401 09c6 20E7     		b	.L535
 6402              	.L546:
 6403              		.align	2
 6404              	.L545:
 6405 09c8 00000000 		.word	ntp_req_flag
 6406 09cc 00000000 		.word	mqtt_sub_count
 6407 09d0 E5000000 		.word	.LC42
 6408 09d4 00000000 		.word	rxbuff3
 6409 09d8 F4000000 		.word	.LC43
 6410 09dc 00000000 		.word	host_flag
 6411 09e0 00000000 		.word	ap_mode
 6412 09e4 00000000 		.word	ssid_flag
 6413 09e8 00000000 		.word	dhcp_disable
 6414 09ec 00000000 		.word	ip_flag
 6415 09f0 00000000 		.word	mux_flag
 6416              		.cfi_endproc
 6417              	.LFE149:
 6419              		.section	.text.serial_check,"ax",%progbits
 6420              		.align	1
 6421              		.global	serial_check
 6422              		.syntax unified
 6423              		.thumb
 6424              		.thumb_func
 6426              	serial_check:
 6427              	.LFB150:
1223:serial.c      **** 
1224:serial.c      **** 
1225:serial.c      **** void serial_check (void)
1226:serial.c      **** {
 6428              		.loc 1 1226 1 is_stmt 1 view -0
 6429              		.cfi_startproc
 6430              		@ args = 0, pretend = 0, frame = 0
 6431              		@ frame_needed = 0, uses_anonymous_args = 0
1227:serial.c      ****       unsigned int max_time;
 6432              		.loc 1 1227 7 view .LVU2037
1228:serial.c      ****       if ((rxcnt1 != 0) && (rxck1 >= 3)) {
 6433              		.loc 1 1228 7 view .LVU2038
 6434              		.loc 1 1228 19 is_stmt 0 view .LVU2039
 6435 0000 424B     		ldr	r3, .L574
 6436 0002 1B88     		ldrh	r3, [r3]
 6437 0004 9BB2     		uxth	r3, r3
1226:serial.c      ****       unsigned int max_time;
 6438              		.loc 1 1226 1 view .LVU2040
 6439 0006 10B5     		push	{r4, lr}
 6440              		.cfi_def_cfa_offset 8
 6441              		.cfi_offset 4, -8
 6442              		.cfi_offset 14, -4
 6443              		.loc 1 1228 10 view .LVU2041
 6444 0008 3BB1     		cbz	r3, .L548
 6445              		.loc 1 1228 35 discriminator 1 view .LVU2042
 6446 000a 414B     		ldr	r3, .L574+4
 6447 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6448              		.loc 1 1228 25 discriminator 1 view .LVU2043
 6449 000e 022A     		cmp	r2, #2
 6450 0010 03D9     		bls	.L548
1229:serial.c      ****          rxck1 = 0;
 6451              		.loc 1 1229 10 is_stmt 1 view .LVU2044
 6452              		.loc 1 1229 16 is_stmt 0 view .LVU2045
 6453 0012 0022     		movs	r2, #0
 6454 0014 1A70     		strb	r2, [r3]
1230:serial.c      ****          receive_check1();
 6455              		.loc 1 1230 10 is_stmt 1 view .LVU2046
 6456 0016 FFF7FEFF 		bl	receive_check1
 6457              	.LVL311:
 6458              	.L548:
1231:serial.c      ****       }
1232:serial.c      ****       if ((rxcnt2 != 0) && (rxck2 >= 3)) {
 6459              		.loc 1 1232 7 view .LVU2047
 6460              		.loc 1 1232 19 is_stmt 0 view .LVU2048
 6461 001a 3E4B     		ldr	r3, .L574+8
 6462 001c 1B88     		ldrh	r3, [r3]
 6463 001e 9BB2     		uxth	r3, r3
 6464              		.loc 1 1232 10 view .LVU2049
 6465 0020 3BB1     		cbz	r3, .L549
 6466              		.loc 1 1232 35 discriminator 1 view .LVU2050
 6467 0022 3D4B     		ldr	r3, .L574+12
 6468 0024 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6469              		.loc 1 1232 25 discriminator 1 view .LVU2051
 6470 0026 022A     		cmp	r2, #2
 6471 0028 03D9     		bls	.L549
1233:serial.c      ****          rxck2 = 0;
 6472              		.loc 1 1233 10 is_stmt 1 view .LVU2052
 6473              		.loc 1 1233 16 is_stmt 0 view .LVU2053
 6474 002a 0022     		movs	r2, #0
 6475 002c 1A70     		strb	r2, [r3]
1234:serial.c      ****          receive_check2();
 6476              		.loc 1 1234 10 is_stmt 1 view .LVU2054
 6477 002e FFF7FEFF 		bl	receive_check2
 6478              	.LVL312:
 6479              	.L549:
1235:serial.c      ****       }
1236:serial.c      ****       if ((rxcnt3 != 0) && (rxck3 >= 5)) {
 6480              		.loc 1 1236 7 view .LVU2055
 6481              		.loc 1 1236 19 is_stmt 0 view .LVU2056
 6482 0032 3A4B     		ldr	r3, .L574+16
 6483 0034 1B88     		ldrh	r3, [r3]
 6484 0036 9BB2     		uxth	r3, r3
 6485              		.loc 1 1236 10 view .LVU2057
 6486 0038 3BB1     		cbz	r3, .L550
 6487              		.loc 1 1236 35 discriminator 1 view .LVU2058
 6488 003a 394B     		ldr	r3, .L574+20
 6489 003c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6490              		.loc 1 1236 25 discriminator 1 view .LVU2059
 6491 003e 042A     		cmp	r2, #4
 6492 0040 03D9     		bls	.L550
1237:serial.c      ****          rxck3 = 0;
 6493              		.loc 1 1237 10 is_stmt 1 view .LVU2060
 6494              		.loc 1 1237 16 is_stmt 0 view .LVU2061
 6495 0042 0022     		movs	r2, #0
 6496 0044 1A70     		strb	r2, [r3]
1238:serial.c      ****          receive_check_wifi();
 6497              		.loc 1 1238 10 is_stmt 1 view .LVU2062
 6498 0046 FFF7FEFF 		bl	receive_check_wifi
 6499              	.LVL313:
 6500              	.L550:
1239:serial.c      ****       }
1240:serial.c      ****       if (time_out == 0) {
 6501              		.loc 1 1240 7 view .LVU2063
 6502              		.loc 1 1240 20 is_stmt 0 view .LVU2064
 6503 004a 364B     		ldr	r3, .L574+24
 6504 004c 1A68     		ldr	r2, [r3]
 6505              		.loc 1 1240 10 view .LVU2065
 6506 004e 002A     		cmp	r2, #0
 6507 0050 4FD1     		bne	.L551
1241:serial.c      ****          send_data();
 6508              		.loc 1 1241 10 is_stmt 1 view .LVU2066
 6509 0052 FFF7FEFF 		bl	send_data
 6510              	.LVL314:
 6511              	.L552:
1242:serial.c      ****       } else {
1243:serial.c      ****          time_out--;
1244:serial.c      ****       }
1245:serial.c      ****       main_time++;
 6512              		.loc 1 1245 7 view .LVU2067
 6513              		.loc 1 1245 16 is_stmt 0 view .LVU2068
 6514 0056 344C     		ldr	r4, .L574+28
 6515 0058 2368     		ldr	r3, [r4]
 6516 005a 0133     		adds	r3, r3, #1
 6517 005c 2360     		str	r3, [r4]
1246:serial.c      ****       if (mqtt_connect) {
 6518              		.loc 1 1246 7 is_stmt 1 view .LVU2069
 6519              		.loc 1 1246 11 is_stmt 0 view .LVU2070
 6520 005e 334B     		ldr	r3, .L574+32
 6521 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6522              		.loc 1 1246 10 view .LVU2071
 6523 0062 002B     		cmp	r3, #0
 6524 0064 4ED0     		beq	.L564
1247:serial.c      ****          max_time = 600000;
 6525              		.loc 1 1247 10 is_stmt 1 view .LVU2072
 6526              	.LVL315:
1248:serial.c      ****          time_req++;
 6527              		.loc 1 1248 10 view .LVU2073
 6528              		.loc 1 1248 18 is_stmt 0 view .LVU2074
 6529 0066 324B     		ldr	r3, .L574+36
 6530 0068 1A68     		ldr	r2, [r3]
 6531 006a 0132     		adds	r2, r2, #1
 6532 006c 1A60     		str	r2, [r3]
1249:serial.c      ****          if (time_req >= 1800000) {
 6533              		.loc 1 1249 10 is_stmt 1 view .LVU2075
 6534              		.loc 1 1249 23 is_stmt 0 view .LVU2076
 6535 006e 1968     		ldr	r1, [r3]
 6536              		.loc 1 1249 13 view .LVU2077
 6537 0070 304A     		ldr	r2, .L574+40
 6538 0072 9142     		cmp	r1, r2
 6539 0074 04D3     		bcc	.L554
1250:serial.c      ****             time_req = 0;
 6540              		.loc 1 1250 13 is_stmt 1 view .LVU2078
 6541              		.loc 1 1250 22 is_stmt 0 view .LVU2079
 6542 0076 0022     		movs	r2, #0
 6543 0078 1A60     		str	r2, [r3]
1251:serial.c      ****             ntp_req_flag = 1;
 6544              		.loc 1 1251 13 is_stmt 1 view .LVU2080
 6545              		.loc 1 1251 26 is_stmt 0 view .LVU2081
 6546 007a 2F4B     		ldr	r3, .L574+44
 6547 007c 0122     		movs	r2, #1
 6548 007e 1A70     		strb	r2, [r3]
 6549              	.L554:
1252:serial.c      ****          }
1253:serial.c      ****          status_time++;
 6550              		.loc 1 1253 10 is_stmt 1 view .LVU2082
 6551              		.loc 1 1253 21 is_stmt 0 view .LVU2083
 6552 0080 2E4A     		ldr	r2, .L574+48
 6553 0082 1388     		ldrh	r3, [r2]
 6554 0084 0133     		adds	r3, r3, #1
 6555 0086 9BB2     		uxth	r3, r3
 6556 0088 1380     		strh	r3, [r2]	@ movhi
1254:serial.c      ****          if (status_time >= 30000) {
 6557              		.loc 1 1254 10 is_stmt 1 view .LVU2084
 6558              		.loc 1 1254 26 is_stmt 0 view .LVU2085
 6559 008a 1388     		ldrh	r3, [r2]
 6560              		.loc 1 1254 13 view .LVU2086
 6561 008c 47F22F51 		movw	r1, #29999
 6562              		.loc 1 1254 26 view .LVU2087
 6563 0090 9BB2     		uxth	r3, r3
 6564              		.loc 1 1254 13 view .LVU2088
 6565 0092 8B42     		cmp	r3, r1
 6566 0094 31D8     		bhi	.L555
 6567              	.L556:
1247:serial.c      ****          time_req++;
 6568              		.loc 1 1247 19 view .LVU2089
 6569 0096 2A4B     		ldr	r3, .L574+52
 6570              	.LVL316:
 6571              	.L553:
1255:serial.c      ****             status_time = 0;
1256:serial.c      ****             send_board_data();
1257:serial.c      ****          }
1258:serial.c      ****       } else {
1259:serial.c      ****          max_time = 60000;
1260:serial.c      ****       }
1261:serial.c      ****       if (main_time >= max_time) {
 6572              		.loc 1 1261 7 is_stmt 1 view .LVU2090
 6573              		.loc 1 1261 21 is_stmt 0 view .LVU2091
 6574 0098 2268     		ldr	r2, [r4]
 6575              		.loc 1 1261 10 view .LVU2092
 6576 009a 9A42     		cmp	r2, r3
 6577 009c 04D3     		bcc	.L557
1262:serial.c      ****          main_time = 0;
 6578              		.loc 1 1262 10 is_stmt 1 view .LVU2093
 6579              		.loc 1 1262 20 is_stmt 0 view .LVU2094
 6580 009e 0023     		movs	r3, #0
 6581              	.LVL317:
 6582              		.loc 1 1262 20 view .LVU2095
 6583 00a0 2360     		str	r3, [r4]
1263:serial.c      ****          reset_flag = 1;
 6584              		.loc 1 1263 10 is_stmt 1 view .LVU2096
 6585              		.loc 1 1263 21 is_stmt 0 view .LVU2097
 6586 00a2 284B     		ldr	r3, .L574+56
 6587 00a4 0122     		movs	r2, #1
 6588 00a6 1A70     		strb	r2, [r3]
 6589              	.L557:
1264:serial.c      ****       }
1265:serial.c      ****       if (reboot_flag) {
 6590              		.loc 1 1265 7 is_stmt 1 view .LVU2098
 6591              		.loc 1 1265 11 is_stmt 0 view .LVU2099
 6592 00a8 2749     		ldr	r1, .L574+60
 6593 00aa 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 6594              		.loc 1 1265 10 view .LVU2100
 6595 00ac 7BB1     		cbz	r3, .L559
1266:serial.c      ****          reboot_count++;
 6596              		.loc 1 1266 10 is_stmt 1 view .LVU2101
 6597              		.loc 1 1266 22 is_stmt 0 view .LVU2102
 6598 00ae 274A     		ldr	r2, .L574+64
 6599 00b0 1388     		ldrh	r3, [r2]
 6600 00b2 0133     		adds	r3, r3, #1
 6601 00b4 9BB2     		uxth	r3, r3
 6602 00b6 1380     		strh	r3, [r2]	@ movhi
1267:serial.c      ****          if (reboot_count >= 500) {
 6603              		.loc 1 1267 10 is_stmt 1 view .LVU2103
 6604              		.loc 1 1267 27 is_stmt 0 view .LVU2104
 6605 00b8 1388     		ldrh	r3, [r2]
 6606 00ba 9BB2     		uxth	r3, r3
 6607              		.loc 1 1267 13 view .LVU2105
 6608 00bc B3F5FA7F 		cmp	r3, #500
 6609 00c0 05D3     		bcc	.L559
1268:serial.c      ****             reboot_count = 0;
 6610              		.loc 1 1268 13 is_stmt 1 view .LVU2106
 6611              		.loc 1 1268 26 is_stmt 0 view .LVU2107
 6612 00c2 0023     		movs	r3, #0
 6613 00c4 1380     		strh	r3, [r2]	@ movhi
1269:serial.c      ****             reboot_flag = 0;
 6614              		.loc 1 1269 13 is_stmt 1 view .LVU2108
 6615              		.loc 1 1269 25 is_stmt 0 view .LVU2109
 6616 00c6 0B70     		strb	r3, [r1]
1270:serial.c      ****             reset_flag = 1;
 6617              		.loc 1 1270 13 is_stmt 1 view .LVU2110
 6618              		.loc 1 1270 24 is_stmt 0 view .LVU2111
 6619 00c8 1E4B     		ldr	r3, .L574+56
 6620 00ca 0122     		movs	r2, #1
 6621 00cc 1A70     		strb	r2, [r3]
 6622              	.L559:
1271:serial.c      ****          }
1272:serial.c      ****       }
1273:serial.c      ****       if (ap_mode) {
 6623              		.loc 1 1273 7 is_stmt 1 view .LVU2112
 6624              		.loc 1 1273 11 is_stmt 0 view .LVU2113
 6625 00ce 2049     		ldr	r1, .L574+68
 6626 00d0 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 6627              		.loc 1 1273 10 view .LVU2114
 6628 00d2 6BB1     		cbz	r3, .L547
1274:serial.c      ****       	 ap_mode_time++;
 6629              		.loc 1 1274 9 is_stmt 1 view .LVU2115
 6630              		.loc 1 1274 21 is_stmt 0 view .LVU2116
 6631 00d4 1F4B     		ldr	r3, .L574+72
 6632 00d6 1A68     		ldr	r2, [r3]
 6633 00d8 0132     		adds	r2, r2, #1
 6634 00da 1A60     		str	r2, [r3]
1275:serial.c      ****       	 if (ap_mode_time >= 600000) {
 6635              		.loc 1 1275 9 is_stmt 1 view .LVU2117
 6636              		.loc 1 1275 26 is_stmt 0 view .LVU2118
 6637 00dc 1868     		ldr	r0, [r3]
 6638              		.loc 1 1275 12 view .LVU2119
 6639 00de 1E4A     		ldr	r2, .L574+76
 6640 00e0 9042     		cmp	r0, r2
 6641 00e2 05D9     		bls	.L547
1276:serial.c      ****       	    ap_mode_time = 0;
 6642              		.loc 1 1276 12 is_stmt 1 view .LVU2120
 6643              		.loc 1 1276 25 is_stmt 0 view .LVU2121
 6644 00e4 0022     		movs	r2, #0
 6645 00e6 1A60     		str	r2, [r3]
1277:serial.c      ****       	    ap_mode = 0;
 6646              		.loc 1 1277 12 is_stmt 1 view .LVU2122
1278:serial.c      ****       	    reset_flag = 1;
 6647              		.loc 1 1278 23 is_stmt 0 view .LVU2123
 6648 00e8 164B     		ldr	r3, .L574+56
1277:serial.c      ****       	    ap_mode = 0;
 6649              		.loc 1 1277 20 view .LVU2124
 6650 00ea 0A70     		strb	r2, [r1]
 6651              		.loc 1 1278 12 is_stmt 1 view .LVU2125
 6652              		.loc 1 1278 23 is_stmt 0 view .LVU2126
 6653 00ec 0122     		movs	r2, #1
 6654 00ee 1A70     		strb	r2, [r3]
 6655              	.L547:
1279:serial.c      ****       	 }
1280:serial.c      ****       }
1281:serial.c      **** }
 6656              		.loc 1 1281 1 view .LVU2127
 6657 00f0 10BD     		pop	{r4, pc}
 6658              	.LVL318:
 6659              	.L551:
1243:serial.c      ****       }
 6660              		.loc 1 1243 10 is_stmt 1 view .LVU2128
1243:serial.c      ****       }
 6661              		.loc 1 1243 18 is_stmt 0 view .LVU2129
 6662 00f2 1A68     		ldr	r2, [r3]
 6663 00f4 013A     		subs	r2, r2, #1
 6664 00f6 1A60     		str	r2, [r3]
 6665 00f8 ADE7     		b	.L552
 6666              	.LVL319:
 6667              	.L555:
1255:serial.c      ****             send_board_data();
 6668              		.loc 1 1255 13 is_stmt 1 view .LVU2130
1255:serial.c      ****             send_board_data();
 6669              		.loc 1 1255 25 is_stmt 0 view .LVU2131
 6670 00fa 0023     		movs	r3, #0
 6671 00fc 1380     		strh	r3, [r2]	@ movhi
1256:serial.c      ****          }
 6672              		.loc 1 1256 13 is_stmt 1 view .LVU2132
 6673 00fe FFF7FEFF 		bl	send_board_data
 6674              	.LVL320:
 6675 0102 C8E7     		b	.L556
 6676              	.LVL321:
 6677              	.L564:
1259:serial.c      ****       }
 6678              		.loc 1 1259 19 is_stmt 0 view .LVU2133
 6679 0104 4EF66023 		movw	r3, #60000
 6680 0108 C6E7     		b	.L553
 6681              	.L575:
 6682 010a 00BF     		.align	2
 6683              	.L574:
 6684 010c 00000000 		.word	rxcnt1
 6685 0110 00000000 		.word	rxck1
 6686 0114 00000000 		.word	rxcnt2
 6687 0118 00000000 		.word	rxck2
 6688 011c 00000000 		.word	rxcnt3
 6689 0120 00000000 		.word	rxck3
 6690 0124 00000000 		.word	time_out
 6691 0128 00000000 		.word	main_time
 6692 012c 00000000 		.word	mqtt_connect
 6693 0130 00000000 		.word	time_req
 6694 0134 40771B00 		.word	1800000
 6695 0138 00000000 		.word	ntp_req_flag
 6696 013c 00000000 		.word	status_time
 6697 0140 C0270900 		.word	600000
 6698 0144 00000000 		.word	reset_flag
 6699 0148 00000000 		.word	reboot_flag
 6700 014c 00000000 		.word	reboot_count
 6701 0150 00000000 		.word	ap_mode
 6702 0154 00000000 		.word	ap_mode_time
 6703 0158 BF270900 		.word	599999
 6704              		.cfi_endproc
 6705              	.LFE150:
 6707              		.section	.text.change_ap_mode,"ax",%progbits
 6708              		.align	1
 6709              		.global	change_ap_mode
 6710              		.syntax unified
 6711              		.thumb
 6712              		.thumb_func
 6714              	change_ap_mode:
 6715              	.LFB151:
1282:serial.c      **** 
1283:serial.c      **** 
1284:serial.c      **** void change_ap_mode (void)
1285:serial.c      **** {
 6716              		.loc 1 1285 1 is_stmt 1 view -0
 6717              		.cfi_startproc
 6718              		@ args = 0, pretend = 0, frame = 0
 6719              		@ frame_needed = 0, uses_anonymous_args = 0
 6720              		@ link register save eliminated.
1286:serial.c      ****      dhcp_disable = 0;
 6721              		.loc 1 1286 6 view .LVU2135
 6722              		.loc 1 1286 19 is_stmt 0 view .LVU2136
 6723 0000 094A     		ldr	r2, .L577
 6724 0002 0023     		movs	r3, #0
 6725 0004 1370     		strb	r3, [r2]
1287:serial.c      ****      keep_alive_time = 60;
 6726              		.loc 1 1287 6 is_stmt 1 view .LVU2137
 6727              		.loc 1 1287 22 is_stmt 0 view .LVU2138
 6728 0006 094A     		ldr	r2, .L577+4
 6729 0008 3C21     		movs	r1, #60
 6730 000a 1170     		strb	r1, [r2]
1288:serial.c      ****      mqtt_mode = 0;
 6731              		.loc 1 1288 6 is_stmt 1 view .LVU2139
 6732              		.loc 1 1288 16 is_stmt 0 view .LVU2140
 6733 000c 084A     		ldr	r2, .L577+8
 6734 000e 1370     		strb	r3, [r2]
1289:serial.c      ****      mqtt_port = 1883;
 6735              		.loc 1 1289 6 is_stmt 1 view .LVU2141
 6736              		.loc 1 1289 16 is_stmt 0 view .LVU2142
 6737 0010 084A     		ldr	r2, .L577+12
 6738 0012 40F25B71 		movw	r1, #1883
 6739 0016 1180     		strh	r1, [r2]	@ movhi
1290:serial.c      ****      ap_mode = 1;
 6740              		.loc 1 1290 6 is_stmt 1 view .LVU2143
 6741              		.loc 1 1290 14 is_stmt 0 view .LVU2144
 6742 0018 0749     		ldr	r1, .L577+16
 6743 001a 0122     		movs	r2, #1
 6744 001c 0A70     		strb	r2, [r1]
1291:serial.c      ****      reset_flag = 1;
 6745              		.loc 1 1291 6 is_stmt 1 view .LVU2145
 6746              		.loc 1 1291 17 is_stmt 0 view .LVU2146
 6747 001e 0749     		ldr	r1, .L577+20
 6748 0020 0A70     		strb	r2, [r1]
1292:serial.c      ****      time_out = 0;
 6749              		.loc 1 1292 6 is_stmt 1 view .LVU2147
 6750              		.loc 1 1292 15 is_stmt 0 view .LVU2148
 6751 0022 074A     		ldr	r2, .L577+24
 6752 0024 1360     		str	r3, [r2]
1293:serial.c      **** }
 6753              		.loc 1 1293 1 view .LVU2149
 6754 0026 7047     		bx	lr
 6755              	.L578:
 6756              		.align	2
 6757              	.L577:
 6758 0028 00000000 		.word	dhcp_disable
 6759 002c 00000000 		.word	keep_alive_time
 6760 0030 00000000 		.word	mqtt_mode
 6761 0034 00000000 		.word	mqtt_port
 6762 0038 00000000 		.word	ap_mode
 6763 003c 00000000 		.word	reset_flag
 6764 0040 00000000 		.word	time_out
 6765              		.cfi_endproc
 6766              	.LFE151:
 6768              		.section	.text.serial_init,"ax",%progbits
 6769              		.align	1
 6770              		.global	serial_init
 6771              		.syntax unified
 6772              		.thumb
 6773              		.thumb_func
 6775              	serial_init:
 6776              	.LFB152:
1294:serial.c      **** 
1295:serial.c      **** 
1296:serial.c      **** void serial_init (void)
1297:serial.c      **** {
 6777              		.loc 1 1297 1 is_stmt 1 view -0
 6778              		.cfi_startproc
 6779              		@ args = 0, pretend = 0, frame = 24
 6780              		@ frame_needed = 0, uses_anonymous_args = 0
1298:serial.c      ****       USART_InitTypeDef	USART_InitStructure;
 6781              		.loc 1 1298 7 view .LVU2151
1299:serial.c      ****       NVIC_InitTypeDef NVIC_InitStructure;
 6782              		.loc 1 1299 7 view .LVU2152
1300:serial.c      ****       USART1_PORT = 0;
 6783              		.loc 1 1300 7 view .LVU2153
1297:serial.c      ****       USART_InitTypeDef	USART_InitStructure;
 6784              		.loc 1 1297 1 is_stmt 0 view .LVU2154
 6785 0000 30B5     		push	{r4, r5, lr}
 6786              		.cfi_def_cfa_offset 12
 6787              		.cfi_offset 4, -12
 6788              		.cfi_offset 5, -8
 6789              		.cfi_offset 14, -4
1301:serial.c      ****       USART3_PORT = 0;
1302:serial.c      ****       rxcnt1 = 0;
 6790              		.loc 1 1302 14 view .LVU2155
 6791 0002 8F4A     		ldr	r2, .L588
1300:serial.c      ****       USART3_PORT = 0;
 6792              		.loc 1 1300 19 view .LVU2156
 6793 0004 8F4D     		ldr	r5, .L588+4
1301:serial.c      ****       USART3_PORT = 0;
 6794              		.loc 1 1301 19 view .LVU2157
 6795 0006 904C     		ldr	r4, .L588+8
1300:serial.c      ****       USART3_PORT = 0;
 6796              		.loc 1 1300 19 view .LVU2158
 6797 0008 0023     		movs	r3, #0
1297:serial.c      ****       USART_InitTypeDef	USART_InitStructure;
 6798              		.loc 1 1297 1 view .LVU2159
 6799 000a 87B0     		sub	sp, sp, #28
 6800              		.cfi_def_cfa_offset 40
 6801              		.loc 1 1302 14 view .LVU2160
 6802 000c 1380     		strh	r3, [r2]	@ movhi
1303:serial.c      ****       txcnt1 = 0;
 6803              		.loc 1 1303 14 view .LVU2161
 6804 000e 8F4A     		ldr	r2, .L588+12
1300:serial.c      ****       USART3_PORT = 0;
 6805              		.loc 1 1300 19 view .LVU2162
 6806 0010 2B70     		strb	r3, [r5]
1301:serial.c      ****       USART3_PORT = 0;
 6807              		.loc 1 1301 7 is_stmt 1 view .LVU2163
 6808              		.loc 1 1303 14 is_stmt 0 view .LVU2164
 6809 0012 1380     		strh	r3, [r2]	@ movhi
1304:serial.c      ****       maxtx1 = 0;
 6810              		.loc 1 1304 14 view .LVU2165
 6811 0014 8E4A     		ldr	r2, .L588+16
1301:serial.c      ****       rxcnt1 = 0;
 6812              		.loc 1 1301 19 view .LVU2166
 6813 0016 2370     		strb	r3, [r4]
1302:serial.c      ****       txcnt1 = 0;
 6814              		.loc 1 1302 7 is_stmt 1 view .LVU2167
1303:serial.c      ****       maxtx1 = 0;
 6815              		.loc 1 1303 7 view .LVU2168
 6816              		.loc 1 1304 7 view .LVU2169
 6817              		.loc 1 1304 14 is_stmt 0 view .LVU2170
 6818 0018 1380     		strh	r3, [r2]	@ movhi
1305:serial.c      ****       rxcnt2 = 0;
 6819              		.loc 1 1305 7 is_stmt 1 view .LVU2171
 6820              		.loc 1 1305 14 is_stmt 0 view .LVU2172
 6821 001a 8E4A     		ldr	r2, .L588+20
 6822 001c 1380     		strh	r3, [r2]	@ movhi
1306:serial.c      ****       txcnt2 = 0;
 6823              		.loc 1 1306 7 is_stmt 1 view .LVU2173
 6824              		.loc 1 1306 14 is_stmt 0 view .LVU2174
 6825 001e 8E4A     		ldr	r2, .L588+24
 6826 0020 1380     		strh	r3, [r2]	@ movhi
1307:serial.c      ****       maxtx2 = 0;
 6827              		.loc 1 1307 7 is_stmt 1 view .LVU2175
 6828              		.loc 1 1307 14 is_stmt 0 view .LVU2176
 6829 0022 8E4A     		ldr	r2, .L588+28
 6830 0024 1380     		strh	r3, [r2]	@ movhi
1308:serial.c      ****       rxcnt3 = 0;
 6831              		.loc 1 1308 7 is_stmt 1 view .LVU2177
 6832              		.loc 1 1308 14 is_stmt 0 view .LVU2178
 6833 0026 8E4A     		ldr	r2, .L588+32
 6834 0028 1380     		strh	r3, [r2]	@ movhi
1309:serial.c      ****       txcnt3 = 0;
 6835              		.loc 1 1309 7 is_stmt 1 view .LVU2179
 6836              		.loc 1 1309 14 is_stmt 0 view .LVU2180
 6837 002a 8E4A     		ldr	r2, .L588+36
 6838 002c 1380     		strh	r3, [r2]	@ movhi
1310:serial.c      ****       maxtx3 = 0;
 6839              		.loc 1 1310 7 is_stmt 1 view .LVU2181
 6840              		.loc 1 1310 14 is_stmt 0 view .LVU2182
 6841 002e 8E4A     		ldr	r2, .L588+40
1311:serial.c      ****       /* Enable the USART1 Interrupt */
1312:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
1313:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
1314:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
1315:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
1316:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 6842              		.loc 1 1316 7 view .LVU2183
 6843 0030 01A8     		add	r0, sp, #4
1310:serial.c      ****       maxtx3 = 0;
 6844              		.loc 1 1310 14 view .LVU2184
 6845 0032 1380     		strh	r3, [r2]	@ movhi
1312:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 6846              		.loc 1 1312 7 is_stmt 1 view .LVU2185
1313:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 6847              		.loc 1 1313 7 view .LVU2186
1314:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 6848              		.loc 1 1314 7 view .LVU2187
1315:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 6849              		.loc 1 1315 7 view .LVU2188
1312:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 6850              		.loc 1 1312 42 is_stmt 0 view .LVU2189
 6851 0034 8D4B     		ldr	r3, .L588+44
 6852 0036 0193     		str	r3, [sp, #4]
 6853              		.loc 1 1316 7 is_stmt 1 view .LVU2190
 6854 0038 FFF7FEFF 		bl	NVIC_Init
 6855              	.LVL322:
1317:serial.c      ****       switch (USART1_PORT) {
 6856              		.loc 1 1317 7 view .LVU2191
 6857 003c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 6858 003e 002B     		cmp	r3, #0
 6859 0040 00F0A280 		beq	.L580
 6860 0044 012B     		cmp	r3, #1
 6861 0046 00F0B880 		beq	.L581
 6862              	.L582:
1318:serial.c      ****          case 0:
1319:serial.c      ****            GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
1320:serial.c      ****            GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
1321:serial.c      ****            GPIO_Init_Pin(GPIOA,TXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
1322:serial.c      ****            GPIO_Init_Pin(GPIOA,RXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
1323:serial.c      ****            break;
1324:serial.c      ****          case 1:
1325:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource6,GPIO_AF_USART1);
1326:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource7,GPIO_AF_USART1);
1327:serial.c      ****            GPIO_Init_Pin(GPIOB,GPIO_Pin_6,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
1328:serial.c      ****            GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
1329:serial.c      ****            break;
1330:serial.c      ****       }
1331:serial.c      ****       /* Enable the USART2 Interrupt */
1332:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 6863              		.loc 1 1332 7 view .LVU2192
1333:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 6864              		.loc 1 1333 7 view .LVU2193
1334:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 6865              		.loc 1 1334 7 view .LVU2194
1335:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 6866              		.loc 1 1335 7 view .LVU2195
1332:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 6867              		.loc 1 1332 42 is_stmt 0 view .LVU2196
 6868 004a 894B     		ldr	r3, .L588+48
 6869 004c 0193     		str	r3, [sp, #4]
1336:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 6870              		.loc 1 1336 7 is_stmt 1 view .LVU2197
 6871 004e 01A8     		add	r0, sp, #4
 6872 0050 FFF7FEFF 		bl	NVIC_Init
 6873              	.LVL323:
1337:serial.c      ****       GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
 6874              		.loc 1 1337 7 view .LVU2198
 6875 0054 8748     		ldr	r0, .L588+52
 6876 0056 0722     		movs	r2, #7
 6877 0058 0221     		movs	r1, #2
 6878 005a FFF7FEFF 		bl	GPIO_PinAFConfig
 6879              	.LVL324:
1338:serial.c      ****       GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
 6880              		.loc 1 1338 7 view .LVU2199
 6881 005e 8548     		ldr	r0, .L588+52
 6882 0060 0722     		movs	r2, #7
 6883 0062 0321     		movs	r1, #3
 6884 0064 FFF7FEFF 		bl	GPIO_PinAFConfig
 6885              	.LVL325:
1339:serial.c      ****       GPIO_Init_Pin(GPIOA,TXD2,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 6886              		.loc 1 1339 7 view .LVU2200
 6887 0068 8248     		ldr	r0, .L588+52
 6888 006a 1223     		movs	r3, #18
 6889 006c 0322     		movs	r2, #3
 6890 006e 0421     		movs	r1, #4
 6891 0070 FFF7FEFF 		bl	GPIO_Init_Pin
 6892              	.LVL326:
1340:serial.c      ****       GPIO_Init_Pin(GPIOA,RXD2,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 6893              		.loc 1 1340 7 view .LVU2201
 6894 0074 7F48     		ldr	r0, .L588+52
 6895 0076 1223     		movs	r3, #18
 6896 0078 0322     		movs	r2, #3
 6897 007a 0821     		movs	r1, #8
 6898 007c FFF7FEFF 		bl	GPIO_Init_Pin
 6899              	.LVL327:
1341:serial.c      ****       /* Enable the USART3 Interrupt */
1342:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 6900              		.loc 1 1342 7 view .LVU2202
1343:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 6901              		.loc 1 1343 7 view .LVU2203
1344:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 6902              		.loc 1 1344 7 view .LVU2204
1345:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 6903              		.loc 1 1345 7 view .LVU2205
1342:serial.c      ****       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 6904              		.loc 1 1342 42 is_stmt 0 view .LVU2206
 6905 0080 7D4B     		ldr	r3, .L588+56
 6906 0082 0193     		str	r3, [sp, #4]
1346:serial.c      ****       NVIC_Init(&NVIC_InitStructure);
 6907              		.loc 1 1346 7 is_stmt 1 view .LVU2207
 6908 0084 01A8     		add	r0, sp, #4
 6909 0086 FFF7FEFF 		bl	NVIC_Init
 6910              	.LVL328:
1347:serial.c      ****       switch (USART3_PORT) {
 6911              		.loc 1 1347 7 view .LVU2208
 6912 008a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 6913 008c 012B     		cmp	r3, #1
 6914 008e 00F0A980 		beq	.L583
 6915 0092 022B     		cmp	r3, #2
 6916 0094 00F0BD80 		beq	.L584
 6917 0098 BBB9     		cbnz	r3, .L585
1348:serial.c      ****       	 case 0:
1349:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource10,GPIO_AF_USART3);
 6918              		.loc 1 1349 12 view .LVU2209
 6919 009a 7848     		ldr	r0, .L588+60
 6920 009c 0722     		movs	r2, #7
 6921 009e 0A21     		movs	r1, #10
 6922 00a0 FFF7FEFF 		bl	GPIO_PinAFConfig
 6923              	.LVL329:
1350:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource11,GPIO_AF_USART3);
 6924              		.loc 1 1350 12 view .LVU2210
 6925 00a4 7548     		ldr	r0, .L588+60
 6926 00a6 0722     		movs	r2, #7
 6927 00a8 0B21     		movs	r1, #11
 6928 00aa FFF7FEFF 		bl	GPIO_PinAFConfig
 6929              	.LVL330:
1351:serial.c      ****            /* Configure USART3 TX (PB10) */
1352:serial.c      ****            GPIO_Init_Pin(GPIOB,TXD3,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 6930              		.loc 1 1352 12 view .LVU2211
 6931 00ae 7348     		ldr	r0, .L588+60
 6932 00b0 1223     		movs	r3, #18
 6933 00b2 0322     		movs	r2, #3
 6934 00b4 4FF48061 		mov	r1, #1024
 6935 00b8 FFF7FEFF 		bl	GPIO_Init_Pin
 6936              	.LVL331:
1353:serial.c      ****            /* Configure USART3 TX (PB10) */
1354:serial.c      ****            GPIO_Init_Pin(GPIOB,RXD3,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 6937              		.loc 1 1354 12 view .LVU2212
 6938 00bc 6F48     		ldr	r0, .L588+60
 6939 00be 1223     		movs	r3, #18
 6940 00c0 0322     		movs	r2, #3
 6941 00c2 4FF40061 		mov	r1, #2048
 6942              	.L587:
1355:serial.c      ****            break;
1356:serial.c      ****          case 1:
1357:serial.c      ****            GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_USART3);
1358:serial.c      ****            GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_USART3);
1359:serial.c      ****            /* Configure USART3 TX (PC10) */
1360:serial.c      ****            GPIO_Init_Pin(GPIOC,GPIO_Pin_10,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
1361:serial.c      ****            /* Configure USART3 RX (PC11) */
1362:serial.c      ****            GPIO_Init_Pin(GPIOC,GPIO_Pin_11,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
1363:serial.c      ****            break;
1364:serial.c      ****          case 2:
1365:serial.c      ****            GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
1366:serial.c      ****            GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
1367:serial.c      ****            /* Configure USART3 TX (PD8) */
1368:serial.c      ****            GPIO_Init_Pin(GPIOD,GPIO_Pin_8,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
1369:serial.c      ****            /* Configure USART3 RX (PD9) */
1370:serial.c      ****            GPIO_Init_Pin(GPIOD,GPIO_Pin_9,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 6943              		.loc 1 1370 12 is_stmt 0 view .LVU2213
 6944 00c6 FFF7FEFF 		bl	GPIO_Init_Pin
 6945              	.LVL332:
1371:serial.c      ****            break;
 6946              		.loc 1 1371 12 is_stmt 1 view .LVU2214
 6947              	.L585:
1372:serial.c      ****       }
1373:serial.c      ****       USART_InitStructure.USART_BaudRate = 115200;
 6948              		.loc 1 1373 7 view .LVU2215
1374:serial.c      ****       USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 6949              		.loc 1 1374 7 view .LVU2216
1375:serial.c      ****       USART_InitStructure.USART_StopBits = USART_StopBits_1;
 6950              		.loc 1 1375 7 view .LVU2217
1376:serial.c      ****       USART_InitStructure.USART_Parity = USART_Parity_No;
 6951              		.loc 1 1376 7 view .LVU2218
1377:serial.c      ****       USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 6952              		.loc 1 1377 7 view .LVU2219
1378:serial.c      ****       USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 6953              		.loc 1 1378 7 view .LVU2220
1374:serial.c      ****       USART_InitStructure.USART_StopBits = USART_StopBits_1;
 6954              		.loc 1 1374 44 is_stmt 0 view .LVU2221
 6955 00ca 0023     		movs	r3, #0
 6956 00cc 4FF4E132 		mov	r2, #115200
 6957 00d0 CDE90223 		strd	r2, r3, [sp, #8]
1379:serial.c      ****       USART_DeInit(USART1);
 6958              		.loc 1 1379 7 view .LVU2222
 6959 00d4 6A48     		ldr	r0, .L588+64
1377:serial.c      ****       USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 6960              		.loc 1 1377 53 view .LVU2223
 6961 00d6 ADF81430 		strh	r3, [sp, #20]	@ movhi
 6962              		.loc 1 1379 7 is_stmt 1 view .LVU2224
1376:serial.c      ****       USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 6963              		.loc 1 1376 40 is_stmt 0 view .LVU2225
 6964 00da 4FF44022 		mov	r2, #786432
 6965 00de 0492     		str	r2, [sp, #16]
 6966              		.loc 1 1379 7 view .LVU2226
 6967 00e0 FFF7FEFF 		bl	USART_DeInit
 6968              	.LVL333:
1380:serial.c      ****       /* Enable USART1 clock */
1381:serial.c      ****       RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 6969              		.loc 1 1381 7 is_stmt 1 view .LVU2227
 6970 00e4 0121     		movs	r1, #1
 6971 00e6 1020     		movs	r0, #16
 6972 00e8 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 6973              	.LVL334:
1382:serial.c      ****       /* Configure USART1 */
1383:serial.c      ****       USART_Init(USART1, &USART_InitStructure);
 6974              		.loc 1 1383 7 view .LVU2228
 6975 00ec 02A9     		add	r1, sp, #8
 6976 00ee 6448     		ldr	r0, .L588+64
 6977 00f0 FFF7FEFF 		bl	USART_Init
 6978              	.LVL335:
1384:serial.c      ****       /* Enable USART1 Receive and Transmit interrupts */
1385:serial.c      ****       USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 6979              		.loc 1 1385 7 view .LVU2229
 6980 00f4 0122     		movs	r2, #1
 6981 00f6 6248     		ldr	r0, .L588+64
 6982 00f8 40F22551 		movw	r1, #1317
 6983 00fc FFF7FEFF 		bl	USART_ITConfig
 6984              	.LVL336:
1386:serial.c      ****       /* Enable the USART1 */
1387:serial.c      ****       USART_Cmd(USART1, ENABLE);
 6985              		.loc 1 1387 7 view .LVU2230
 6986 0100 0121     		movs	r1, #1
 6987 0102 5F48     		ldr	r0, .L588+64
 6988 0104 FFF7FEFF 		bl	USART_Cmd
 6989              	.LVL337:
1388:serial.c      ****       USART_DeInit(USART2);
 6990              		.loc 1 1388 7 view .LVU2231
 6991 0108 5E48     		ldr	r0, .L588+68
 6992 010a FFF7FEFF 		bl	USART_DeInit
 6993              	.LVL338:
1389:serial.c      ****       /* Enable USART2 clock */
1390:serial.c      ****       RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 6994              		.loc 1 1390 7 view .LVU2232
 6995 010e 0121     		movs	r1, #1
 6996 0110 4FF40030 		mov	r0, #131072
 6997 0114 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 6998              	.LVL339:
1391:serial.c      ****       /* Configure USART2 */
1392:serial.c      ****       USART_Init(USART2, &USART_InitStructure);
 6999              		.loc 1 1392 7 view .LVU2233
 7000 0118 02A9     		add	r1, sp, #8
 7001 011a 5A48     		ldr	r0, .L588+68
 7002 011c FFF7FEFF 		bl	USART_Init
 7003              	.LVL340:
1393:serial.c      ****       /* Enable USART2 Receive and Transmit interrupts */
1394:serial.c      ****       USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 7004              		.loc 1 1394 7 view .LVU2234
 7005 0120 0122     		movs	r2, #1
 7006 0122 5848     		ldr	r0, .L588+68
 7007 0124 40F22551 		movw	r1, #1317
 7008 0128 FFF7FEFF 		bl	USART_ITConfig
 7009              	.LVL341:
1395:serial.c      ****       /* Enable the USART2 */
1396:serial.c      ****       USART_Cmd(USART2, ENABLE);
 7010              		.loc 1 1396 7 view .LVU2235
 7011 012c 0121     		movs	r1, #1
 7012 012e 5548     		ldr	r0, .L588+68
 7013 0130 FFF7FEFF 		bl	USART_Cmd
 7014              	.LVL342:
1397:serial.c      ****       USART_DeInit(USART3);
 7015              		.loc 1 1397 7 view .LVU2236
 7016 0134 5448     		ldr	r0, .L588+72
 7017 0136 FFF7FEFF 		bl	USART_DeInit
 7018              	.LVL343:
1398:serial.c      ****       /* Enable USART3 clock */
1399:serial.c      ****       RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 7019              		.loc 1 1399 7 view .LVU2237
 7020 013a 0121     		movs	r1, #1
 7021 013c 4FF48020 		mov	r0, #262144
 7022 0140 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 7023              	.LVL344:
1400:serial.c      ****       /* Configure USART3 */
1401:serial.c      ****       USART_Init(USART3, &USART_InitStructure);
 7024              		.loc 1 1401 7 view .LVU2238
 7025 0144 02A9     		add	r1, sp, #8
 7026 0146 5048     		ldr	r0, .L588+72
 7027 0148 FFF7FEFF 		bl	USART_Init
 7028              	.LVL345:
1402:serial.c      ****       /* Enable USART3 Receive and Transmit interrupts */
1403:serial.c      ****       USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 7029              		.loc 1 1403 7 view .LVU2239
 7030 014c 0122     		movs	r2, #1
 7031 014e 4E48     		ldr	r0, .L588+72
 7032 0150 40F22551 		movw	r1, #1317
 7033 0154 FFF7FEFF 		bl	USART_ITConfig
 7034              	.LVL346:
1404:serial.c      ****       /* Enable the USART3 */
1405:serial.c      ****       USART_Cmd(USART3, ENABLE);
 7035              		.loc 1 1405 7 view .LVU2240
 7036 0158 0121     		movs	r1, #1
 7037 015a 4B48     		ldr	r0, .L588+72
 7038 015c FFF7FEFF 		bl	USART_Cmd
 7039              	.LVL347:
1406:serial.c      ****       read_wifi_data();
 7040              		.loc 1 1406 7 view .LVU2241
 7041 0160 FFF7FEFF 		bl	read_wifi_data
 7042              	.LVL348:
1407:serial.c      ****       this_id = 1;
 7043              		.loc 1 1407 7 view .LVU2242
 7044              		.loc 1 1407 15 is_stmt 0 view .LVU2243
 7045 0164 494B     		ldr	r3, .L588+76
1408:serial.c      ****       reset_flag = 1;
1409:serial.c      ****       rx_topic_length = strlen(rx_topic);
 7046              		.loc 1 1409 25 view .LVU2244
 7047 0166 4A48     		ldr	r0, .L588+80
1407:serial.c      ****       this_id = 1;
 7048              		.loc 1 1407 15 view .LVU2245
 7049 0168 0124     		movs	r4, #1
 7050 016a 1C70     		strb	r4, [r3]
1408:serial.c      ****       reset_flag = 1;
 7051              		.loc 1 1408 7 is_stmt 1 view .LVU2246
1408:serial.c      ****       reset_flag = 1;
 7052              		.loc 1 1408 18 is_stmt 0 view .LVU2247
 7053 016c 494B     		ldr	r3, .L588+84
 7054 016e 1C70     		strb	r4, [r3]
 7055              		.loc 1 1409 7 is_stmt 1 view .LVU2248
 7056              		.loc 1 1409 25 is_stmt 0 view .LVU2249
 7057 0170 FFF7FEFF 		bl	strlen
 7058              	.LVL349:
 7059              		.loc 1 1409 23 discriminator 1 view .LVU2250
 7060 0174 484B     		ldr	r3, .L588+88
 7061 0176 80B2     		uxth	r0, r0
 7062 0178 1880     		strh	r0, [r3]	@ movhi
1410:serial.c      ****       mqtt_protocol = 1;
 7063              		.loc 1 1410 7 is_stmt 1 view .LVU2251
 7064              		.loc 1 1410 21 is_stmt 0 view .LVU2252
 7065 017a 484B     		ldr	r3, .L588+92
 7066 017c 1C70     		strb	r4, [r3]
1411:serial.c      ****       wifi_ch = 5;
 7067              		.loc 1 1411 7 is_stmt 1 view .LVU2253
 7068              		.loc 1 1411 15 is_stmt 0 view .LVU2254
 7069 017e 484B     		ldr	r3, .L588+96
 7070 0180 0522     		movs	r2, #5
 7071 0182 1A70     		strb	r2, [r3]
1412:serial.c      **** }...
 7072              		.loc 1 1412 1 view .LVU2255
 7073 0184 07B0     		add	sp, sp, #28
 7074              		.cfi_remember_state
 7075              		.cfi_def_cfa_offset 12
 7076              		@ sp needed
 7077 0186 30BD     		pop	{r4, r5, pc}
 7078              	.L580:
 7079              		.cfi_restore_state
1319:serial.c      ****            GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
 7080              		.loc 1 1319 12 is_stmt 1 view .LVU2256
 7081 0188 3A48     		ldr	r0, .L588+52
 7082 018a 0722     		movs	r2, #7
 7083 018c 0921     		movs	r1, #9
 7084 018e FFF7FEFF 		bl	GPIO_PinAFConfig
 7085              	.LVL350:
1320:serial.c      ****            GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
 7086              		.loc 1 1320 12 view .LVU2257
 7087 0192 3848     		ldr	r0, .L588+52
 7088 0194 0722     		movs	r2, #7
 7089 0196 0A21     		movs	r1, #10
 7090 0198 FFF7FEFF 		bl	GPIO_PinAFConfig
 7091              	.LVL351:
1321:serial.c      ****            GPIO_Init_Pin(GPIOA,TXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 7092              		.loc 1 1321 12 view .LVU2258
 7093 019c 3548     		ldr	r0, .L588+52
 7094 019e 1223     		movs	r3, #18
 7095 01a0 0322     		movs	r2, #3
 7096 01a2 4FF40071 		mov	r1, #512
 7097 01a6 FFF7FEFF 		bl	GPIO_Init_Pin
 7098              	.LVL352:
1322:serial.c      ****            GPIO_Init_Pin(GPIOA,RXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 7099              		.loc 1 1322 12 view .LVU2259
 7100 01aa 3248     		ldr	r0, .L588+52
 7101 01ac 1223     		movs	r3, #18
 7102 01ae 0322     		movs	r2, #3
 7103 01b0 4FF48061 		mov	r1, #1024
 7104              	.L586:
1328:serial.c      ****            GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 7105              		.loc 1 1328 12 is_stmt 0 view .LVU2260
 7106 01b4 FFF7FEFF 		bl	GPIO_Init_Pin
 7107              	.LVL353:
1329:serial.c      ****            break;
 7108              		.loc 1 1329 12 is_stmt 1 view .LVU2261
 7109 01b8 47E7     		b	.L582
 7110              	.L581:
1325:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource6,GPIO_AF_USART1);
 7111              		.loc 1 1325 12 view .LVU2262
 7112 01ba 3048     		ldr	r0, .L588+60
 7113 01bc 0722     		movs	r2, #7
 7114 01be 0621     		movs	r1, #6
 7115 01c0 FFF7FEFF 		bl	GPIO_PinAFConfig
 7116              	.LVL354:
1326:serial.c      ****            GPIO_PinAFConfig(GPIOB,GPIO_PinSource7,GPIO_AF_USART1);
 7117              		.loc 1 1326 12 view .LVU2263
 7118 01c4 0722     		movs	r2, #7
 7119 01c6 1146     		mov	r1, r2
 7120 01c8 2C48     		ldr	r0, .L588+60
 7121 01ca FFF7FEFF 		bl	GPIO_PinAFConfig
 7122              	.LVL355:
1327:serial.c      ****            GPIO_Init_Pin(GPIOB,GPIO_Pin_6,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 7123              		.loc 1 1327 12 view .LVU2264
 7124 01ce 2B48     		ldr	r0, .L588+60
 7125 01d0 1223     		movs	r3, #18
 7126 01d2 0322     		movs	r2, #3
 7127 01d4 4021     		movs	r1, #64
 7128 01d6 FFF7FEFF 		bl	GPIO_Init_Pin
 7129              	.LVL356:
1328:serial.c      ****            GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 7130              		.loc 1 1328 12 view .LVU2265
 7131 01da 2848     		ldr	r0, .L588+60
 7132 01dc 1223     		movs	r3, #18
 7133 01de 0322     		movs	r2, #3
 7134 01e0 8021     		movs	r1, #128
 7135 01e2 E7E7     		b	.L586
 7136              	.L583:
1357:serial.c      ****            GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_USART3);
 7137              		.loc 1 1357 12 view .LVU2266
 7138 01e4 2F48     		ldr	r0, .L588+100
 7139 01e6 0722     		movs	r2, #7
 7140 01e8 0A21     		movs	r1, #10
 7141 01ea FFF7FEFF 		bl	GPIO_PinAFConfig
 7142              	.LVL357:
1358:serial.c      ****            GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_USART3);
 7143              		.loc 1 1358 12 view .LVU2267
 7144 01ee 2D48     		ldr	r0, .L588+100
 7145 01f0 0722     		movs	r2, #7
 7146 01f2 0B21     		movs	r1, #11
 7147 01f4 FFF7FEFF 		bl	GPIO_PinAFConfig
 7148              	.LVL358:
1360:serial.c      ****            GPIO_Init_Pin(GPIOC,GPIO_Pin_10,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 7149              		.loc 1 1360 12 view .LVU2268
 7150 01f8 2A48     		ldr	r0, .L588+100
 7151 01fa 1223     		movs	r3, #18
 7152 01fc 0322     		movs	r2, #3
 7153 01fe 4FF48061 		mov	r1, #1024
 7154 0202 FFF7FEFF 		bl	GPIO_Init_Pin
 7155              	.LVL359:
1362:serial.c      ****            GPIO_Init_Pin(GPIOC,GPIO_Pin_11,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 7156              		.loc 1 1362 12 view .LVU2269
 7157 0206 2748     		ldr	r0, .L588+100
 7158 0208 1223     		movs	r3, #18
 7159 020a 0322     		movs	r2, #3
 7160 020c 4FF40061 		mov	r1, #2048
 7161 0210 59E7     		b	.L587
 7162              	.L584:
1365:serial.c      ****            GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
 7163              		.loc 1 1365 12 view .LVU2270
 7164 0212 2548     		ldr	r0, .L588+104
 7165 0214 0722     		movs	r2, #7
 7166 0216 0821     		movs	r1, #8
 7167 0218 FFF7FEFF 		bl	GPIO_PinAFConfig
 7168              	.LVL360:
1366:serial.c      ****            GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
 7169              		.loc 1 1366 12 view .LVU2271
 7170 021c 2248     		ldr	r0, .L588+104
 7171 021e 0722     		movs	r2, #7
 7172 0220 0921     		movs	r1, #9
 7173 0222 FFF7FEFF 		bl	GPIO_PinAFConfig
 7174              	.LVL361:
1368:serial.c      ****            GPIO_Init_Pin(GPIOD,GPIO_Pin_8,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 7175              		.loc 1 1368 12 view .LVU2272
 7176 0226 2048     		ldr	r0, .L588+104
 7177 0228 1223     		movs	r3, #18
 7178 022a 0322     		movs	r2, #3
 7179 022c 4FF48071 		mov	r1, #256
 7180 0230 FFF7FEFF 		bl	GPIO_Init_Pin
 7181              	.LVL362:
1370:serial.c      ****            GPIO_Init_Pin(GPIOD,GPIO_Pin_9,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 7182              		.loc 1 1370 12 view .LVU2273
 7183 0234 1C48     		ldr	r0, .L588+104
 7184 0236 1223     		movs	r3, #18
 7185 0238 0322     		movs	r2, #3
 7186 023a 4FF40071 		mov	r1, #512
 7187 023e 42E7     		b	.L587
 7188              	.L589:
 7189              		.align	2
 7190              	.L588:
 7191 0240 00000000 		.word	rxcnt1
 7192 0244 00000000 		.word	USART1_PORT
 7193 0248 00000000 		.word	USART3_PORT
 7194 024c 00000000 		.word	txcnt1
 7195 0250 00000000 		.word	maxtx1
 7196 0254 00000000 		.word	rxcnt2
 7197 0258 00000000 		.word	txcnt2
 7198 025c 00000000 		.word	maxtx2
 7199 0260 00000000 		.word	rxcnt3
 7200 0264 00000000 		.word	txcnt3
 7201 0268 00000000 		.word	maxtx3
 7202 026c 25020001 		.word	16777765
 7203 0270 26020001 		.word	16777766
 7204 0274 00000240 		.word	1073872896
 7205 0278 27020001 		.word	16777767
 7206 027c 00040240 		.word	1073873920
 7207 0280 00100140 		.word	1073811456
 7208 0284 00440040 		.word	1073759232
 7209 0288 00480040 		.word	1073760256
 7210 028c 00000000 		.word	this_id
 7211 0290 00000000 		.word	rx_topic
 7212 0294 00000000 		.word	reset_flag
 7213 0298 00000000 		.word	rx_topic_length
 7214 029c 00000000 		.word	mqtt_protocol
 7215 02a0 00000000 		.word	wifi_ch
 7216 02a4 00080240 		.word	1073874944
 7217 02a8 000C0240 		.word	1073875968
 7218              		.cfi_endproc
 7219              	.LFE152:
 7221              		.global	dac
 7222              		.section	.bss.dac,"aw",%nobits
 7223              		.align	1
 7226              	dac:
 7227 0000 0000     		.space	2
 7228              		.global	buz
 7229              		.section	.bss.buz,"aw",%nobits
 7232              	buz:
 7233 0000 00       		.space	1
 7234              		.global	led2
 7235              		.section	.bss.led2,"aw",%nobits
 7238              	led2:
 7239 0000 00       		.space	1
 7240              		.global	led1
 7241              		.section	.bss.led1,"aw",%nobits
 7244              	led1:
 7245 0000 00       		.space	1
 7246              		.global	rx_topic
 7247              		.section	.bss.rx_topic,"aw",%nobits
 7250              	rx_topic:
 7251 0000 00000000 		.space	32
 7251      00000000 
 7251      00000000 
 7251      00000000 
 7251      00000000 
 7252              		.global	tx_topic
 7253              		.section	.bss.tx_topic,"aw",%nobits
 7256              	tx_topic:
 7257 0000 00000000 		.space	32
 7257      00000000 
 7257      00000000 
 7257      00000000 
 7257      00000000 
 7258              		.global	login_pw
 7259              		.section	.bss.login_pw,"aw",%nobits
 7262              	login_pw:
 7263 0000 00000000 		.space	32
 7263      00000000 
 7263      00000000 
 7263      00000000 
 7263      00000000 
 7264              		.global	login_id
 7265              		.section	.bss.login_id,"aw",%nobits
 7268              	login_id:
 7269 0000 00000000 		.space	32
 7269      00000000 
 7269      00000000 
 7269      00000000 
 7269      00000000 
 7270              		.global	ntp_url
 7271              		.section	.bss.ntp_url,"aw",%nobits
 7274              	ntp_url:
 7275 0000 00000000 		.space	64
 7275      00000000 
 7275      00000000 
 7275      00000000 
 7275      00000000 
 7276              		.global	host_url
 7277              		.section	.bss.host_url,"aw",%nobits
 7280              	host_url:
 7281 0000 00000000 		.space	64
 7281      00000000 
 7281      00000000 
 7281      00000000 
 7281      00000000 
 7282              		.global	passwd
 7283              		.section	.bss.passwd,"aw",%nobits
 7286              	passwd:
 7287 0000 00000000 		.space	32
 7287      00000000 
 7287      00000000 
 7287      00000000 
 7287      00000000 
 7288              		.global	ssid
 7289              		.section	.bss.ssid,"aw",%nobits
 7292              	ssid:
 7293 0000 00000000 		.space	32
 7293      00000000 
 7293      00000000 
 7293      00000000 
 7293      00000000 
 7294              		.global	mqtt_sub_flag
 7295              		.section	.bss.mqtt_sub_flag,"aw",%nobits
 7298              	mqtt_sub_flag:
 7299 0000 00       		.space	1
 7300              		.global	mqtt_connect_flag
 7301              		.section	.bss.mqtt_connect_flag,"aw",%nobits
 7304              	mqtt_connect_flag:
 7305 0000 00       		.space	1
 7306              		.global	mqtt_cfg_flag
 7307              		.section	.bss.mqtt_cfg_flag,"aw",%nobits
 7310              	mqtt_cfg_flag:
 7311 0000 00       		.space	1
 7312              		.global	ntp_req_flag
 7313              		.section	.bss.ntp_req_flag,"aw",%nobits
 7316              	ntp_req_flag:
 7317 0000 00       		.space	1
 7318              		.global	ntp_flag
 7319              		.section	.bss.ntp_flag,"aw",%nobits
 7322              	ntp_flag:
 7323 0000 00       		.space	1
 7324              		.global	wifi_ch
 7325              		.section	.bss.wifi_ch,"aw",%nobits
 7328              	wifi_ch:
 7329 0000 00       		.space	1
 7330              		.global	ap_mode
 7331              		.section	.bss.ap_mode,"aw",%nobits
 7334              	ap_mode:
 7335 0000 00       		.space	1
 7336              		.global	mqtt_protocol
 7337              		.section	.bss.mqtt_protocol,"aw",%nobits
 7340              	mqtt_protocol:
 7341 0000 00       		.space	1
 7342              		.global	ssid_check
 7343              		.section	.bss.ssid_check,"aw",%nobits
 7346              	ssid_check:
 7347 0000 00       		.space	1
 7348              		.global	host_flag
 7349              		.section	.bss.host_flag,"aw",%nobits
 7352              	host_flag:
 7353 0000 00       		.space	1
 7354              		.global	tcp_send
 7355              		.section	.bss.tcp_send,"aw",%nobits
 7358              	tcp_send:
 7359 0000 00       		.space	1
 7360              		.global	mqtt_send
 7361              		.section	.bss.mqtt_send,"aw",%nobits
 7364              	mqtt_send:
 7365 0000 00       		.space	1
 7366              		.global	mqtt_connect
 7367              		.section	.bss.mqtt_connect,"aw",%nobits
 7370              	mqtt_connect:
 7371 0000 00       		.space	1
 7372              		.global	wifi_power
 7373              		.section	.bss.wifi_power,"aw",%nobits
 7376              	wifi_power:
 7377 0000 00       		.space	1
 7378              		.global	reboot_flag
 7379              		.section	.bss.reboot_flag,"aw",%nobits
 7382              	reboot_flag:
 7383 0000 00       		.space	1
 7384              		.global	send_data_flag
 7385              		.section	.bss.send_data_flag,"aw",%nobits
 7388              	send_data_flag:
 7389 0000 00       		.space	1
 7390              		.global	send_flag
 7391              		.section	.bss.send_flag,"aw",%nobits
 7394              	send_flag:
 7395 0000 00       		.space	1
 7396              		.global	ssid_flag
 7397              		.section	.bss.ssid_flag,"aw",%nobits
 7400              	ssid_flag:
 7401 0000 00       		.space	1
 7402              		.global	server_flag
 7403              		.section	.bss.server_flag,"aw",%nobits
 7406              	server_flag:
 7407 0000 00       		.space	1
 7408              		.global	mux_flag
 7409              		.section	.bss.mux_flag,"aw",%nobits
 7412              	mux_flag:
 7413 0000 00       		.space	1
 7414              		.global	ip_flag
 7415              		.section	.bss.ip_flag,"aw",%nobits
 7418              	ip_flag:
 7419 0000 00       		.space	1
 7420              		.global	mode_flag
 7421              		.section	.bss.mode_flag,"aw",%nobits
 7424              	mode_flag:
 7425 0000 00       		.space	1
 7426              		.global	pwr_flag
 7427              		.section	.bss.pwr_flag,"aw",%nobits
 7430              	pwr_flag:
 7431 0000 00       		.space	1
 7432              		.global	reset_flag
 7433              		.section	.bss.reset_flag,"aw",%nobits
 7436              	reset_flag:
 7437 0000 00       		.space	1
 7438              		.global	gid
 7439              		.section	.bss.gid,"aw",%nobits
 7442              	gid:
 7443 0000 00       		.space	1
 7444              		.global	m_nm
 7445              		.section	.bss.m_nm,"aw",%nobits
 7446              		.align	2
 7449              	m_nm:
 7450 0000 00000000 		.space	4
 7451              		.global	m_gw
 7452              		.section	.bss.m_gw,"aw",%nobits
 7453              		.align	2
 7456              	m_gw:
 7457 0000 00000000 		.space	4
 7458              		.global	m_ip
 7459              		.section	.bss.m_ip,"aw",%nobits
 7460              		.align	2
 7463              	m_ip:
 7464 0000 00000000 		.space	4
 7465              		.global	time_req
 7466              		.section	.bss.time_req,"aw",%nobits
 7467              		.align	2
 7470              	time_req:
 7471 0000 00000000 		.space	4
 7472              		.global	ap_mode_time
 7473              		.section	.bss.ap_mode_time,"aw",%nobits
 7474              		.align	2
 7477              	ap_mode_time:
 7478 0000 00000000 		.space	4
 7479              		.global	main_time
 7480              		.section	.bss.main_time,"aw",%nobits
 7481              		.align	2
 7484              	main_time:
 7485 0000 00000000 		.space	4
 7486              		.global	time_out
 7487              		.section	.bss.time_out,"aw",%nobits
 7488              		.align	2
 7491              	time_out:
 7492 0000 00000000 		.space	4
 7493              		.global	mqtt_sub_count
 7494              		.section	.bss.mqtt_sub_count,"aw",%nobits
 7495              		.align	1
 7498              	mqtt_sub_count:
 7499 0000 0000     		.space	2
 7500              		.global	send_count
 7501              		.section	.bss.send_count,"aw",%nobits
 7502              		.align	1
 7505              	send_count:
 7506 0000 0000     		.space	2
 7507              		.global	mqtt_check_cnt
 7508              		.section	.bss.mqtt_check_cnt,"aw",%nobits
 7509              		.align	1
 7512              	mqtt_check_cnt:
 7513 0000 0000     		.space	2
 7514              		.global	mqtt_connect_count
 7515              		.section	.bss.mqtt_connect_count,"aw",%nobits
 7516              		.align	1
 7519              	mqtt_connect_count:
 7520 0000 0000     		.space	2
 7521              		.global	status_time
 7522              		.section	.bss.status_time,"aw",%nobits
 7523              		.align	1
 7526              	status_time:
 7527 0000 0000     		.space	2
 7528              		.global	ssid_error
 7529              		.section	.bss.ssid_error,"aw",%nobits
 7530              		.align	1
 7533              	ssid_error:
 7534 0000 0000     		.space	2
 7535              		.global	rx_topic_length
 7536              		.section	.bss.rx_topic_length,"aw",%nobits
 7537              		.align	1
 7540              	rx_topic_length:
 7541 0000 0000     		.space	2
 7542              		.global	tcp_rxcnt
 7543              		.section	.bss.tcp_rxcnt,"aw",%nobits
 7544              		.align	1
 7547              	tcp_rxcnt:
 7548 0000 0000     		.space	2
 7549              		.global	tcp_txcnt
 7550              		.section	.bss.tcp_txcnt,"aw",%nobits
 7551              		.align	1
 7554              	tcp_txcnt:
 7555 0000 0000     		.space	2
 7556              		.global	reboot_count
 7557              		.section	.bss.reboot_count,"aw",%nobits
 7558              		.align	1
 7561              	reboot_count:
 7562 0000 0000     		.space	2
 7563              		.global	rx_offset
 7564              		.section	.bss.rx_offset,"aw",%nobits
 7565              		.align	1
 7568              	rx_offset:
 7569 0000 0000     		.space	2
 7570              		.global	rx_length
 7571              		.section	.bss.rx_length,"aw",%nobits
 7572              		.align	1
 7575              	rx_length:
 7576 0000 0000     		.space	2
 7577              		.global	tcp_length
 7578              		.section	.bss.tcp_length,"aw",%nobits
 7579              		.align	1
 7582              	tcp_length:
 7583 0000 0000     		.space	2
 7584              		.global	pwr_error
 7585              		.section	.bss.pwr_error,"aw",%nobits
 7586              		.align	1
 7589              	pwr_error:
 7590 0000 0000     		.space	2
 7591              		.global	mqtt_port
 7592              		.section	.bss.mqtt_port,"aw",%nobits
 7593              		.align	1
 7596              	mqtt_port:
 7597 0000 0000     		.space	2
 7598              		.global	keep_alive_time
 7599              		.section	.bss.keep_alive_time,"aw",%nobits
 7602              	keep_alive_time:
 7603 0000 00       		.space	1
 7604              		.global	mqtt_mode
 7605              		.section	.bss.mqtt_mode,"aw",%nobits
 7608              	mqtt_mode:
 7609 0000 00       		.space	1
 7610              		.global	dhcp_disable
 7611              		.section	.bss.dhcp_disable,"aw",%nobits
 7614              	dhcp_disable:
 7615 0000 00       		.space	1
 7616              		.global	rx_message
 7617              		.section	.bss.rx_message,"aw",%nobits
 7620              	rx_message:
 7621 0000 00000000 		.space	17
 7621      00000000 
 7621      00000000 
 7621      00000000 
 7621      00
 7622              		.global	message
 7623              		.section	.bss.message,"aw",%nobits
 7626              	message:
 7627 0000 00000000 		.space	17
 7627      00000000 
 7627      00000000 
 7627      00000000 
 7627      00
 7628              		.global	sbuff
 7629              		.section	.bss.sbuff,"aw",%nobits
 7632              	sbuff:
 7633 0000 00000000 		.space	256
 7633      00000000 
 7633      00000000 
 7633      00000000 
 7633      00000000 
 7634              		.global	USART3_PORT
 7635              		.section	.bss.USART3_PORT,"aw",%nobits
 7638              	USART3_PORT:
 7639 0000 00       		.space	1
 7640              		.global	USART1_PORT
 7641              		.section	.bss.USART1_PORT,"aw",%nobits
 7644              	USART1_PORT:
 7645 0000 00       		.space	1
 7646              		.global	tcp_tx
 7647              		.section	.bss.tcp_tx,"aw",%nobits
 7650              	tcp_tx:
 7651 0000 00000000 		.space	2048
 7651      00000000 
 7651      00000000 
 7651      00000000 
 7651      00000000 
 7652              		.global	net_rx
 7653              		.section	.bss.net_rx,"aw",%nobits
 7656              	net_rx:
 7657 0000 00000000 		.space	2048
 7657      00000000 
 7657      00000000 
 7657      00000000 
 7657      00000000 
 7658              		.global	txbuff3
 7659              		.section	.bss.txbuff3,"aw",%nobits
 7662              	txbuff3:
 7663 0000 00000000 		.space	2048
 7663      00000000 
 7663      00000000 
 7663      00000000 
 7663      00000000 
 7664              		.global	rxbuff3
 7665              		.section	.bss.rxbuff3,"aw",%nobits
 7668              	rxbuff3:
 7669 0000 00000000 		.space	2048
 7669      00000000 
 7669      00000000 
 7669      00000000 
 7669      00000000 
 7670              		.global	txbuff2
 7671              		.section	.bss.txbuff2,"aw",%nobits
 7674              	txbuff2:
 7675 0000 00000000 		.space	256
 7675      00000000 
 7675      00000000 
 7675      00000000 
 7675      00000000 
 7676              		.global	rxbuff2
 7677              		.section	.bss.rxbuff2,"aw",%nobits
 7680              	rxbuff2:
 7681 0000 00000000 		.space	256
 7681      00000000 
 7681      00000000 
 7681      00000000 
 7681      00000000 
 7682              		.global	txbuff1
 7683              		.section	.bss.txbuff1,"aw",%nobits
 7686              	txbuff1:
 7687 0000 00000000 		.space	256
 7687      00000000 
 7687      00000000 
 7687      00000000 
 7687      00000000 
 7688              		.global	rxbuff1
 7689              		.section	.bss.rxbuff1,"aw",%nobits
 7692              	rxbuff1:
 7693 0000 00000000 		.space	256
 7693      00000000 
 7693      00000000 
 7693      00000000 
 7693      00000000 
 7694              		.global	flash_buff
 7695              		.section	.bss.flash_buff,"aw",%nobits
 7696              		.align	2
 7699              	flash_buff:
 7700 0000 00000000 		.space	1024
 7700      00000000 
 7700      00000000 
 7700      00000000 
 7700      00000000 
 7701              		.global	flash_address
 7702              		.section	.bss.flash_address,"aw",%nobits
 7703              		.align	2
 7706              	flash_address:
 7707 0000 00000000 		.space	4
 7708              		.global	this_id
 7709              		.section	.bss.this_id,"aw",%nobits
 7712              	this_id:
 7713 0000 00       		.space	1
 7714              		.global	tx_led
 7715              		.section	.bss.tx_led,"aw",%nobits
 7718              	tx_led:
 7719 0000 00       		.space	1
 7720              		.global	rx_led
 7721              		.section	.bss.rx_led,"aw",%nobits
 7724              	rx_led:
 7725 0000 00       		.space	1
 7726              		.global	rxck3
 7727              		.section	.bss.rxck3,"aw",%nobits
 7730              	rxck3:
 7731 0000 00       		.space	1
 7732              		.global	rxck2
 7733              		.section	.bss.rxck2,"aw",%nobits
 7736              	rxck2:
 7737 0000 00       		.space	1
 7738              		.global	rxck1
 7739              		.section	.bss.rxck1,"aw",%nobits
 7742              	rxck1:
 7743 0000 00       		.space	1
 7744              		.global	maxtx3
 7745              		.section	.bss.maxtx3,"aw",%nobits
 7746              		.align	1
 7749              	maxtx3:
 7750 0000 0000     		.space	2
 7751              		.global	txcnt3
 7752              		.section	.bss.txcnt3,"aw",%nobits
 7753              		.align	1
 7756              	txcnt3:
 7757 0000 0000     		.space	2
 7758              		.global	rxcnt3
 7759              		.section	.bss.rxcnt3,"aw",%nobits
 7760              		.align	1
 7763              	rxcnt3:
 7764 0000 0000     		.space	2
 7765              		.global	maxtx2
 7766              		.section	.bss.maxtx2,"aw",%nobits
 7767              		.align	1
 7770              	maxtx2:
 7771 0000 0000     		.space	2
 7772              		.global	txcnt2
 7773              		.section	.bss.txcnt2,"aw",%nobits
 7774              		.align	1
 7777              	txcnt2:
 7778 0000 0000     		.space	2
 7779              		.global	rxcnt2
 7780              		.section	.bss.rxcnt2,"aw",%nobits
 7781              		.align	1
 7784              	rxcnt2:
 7785 0000 0000     		.space	2
 7786              		.global	maxtx1
 7787              		.section	.bss.maxtx1,"aw",%nobits
 7788              		.align	1
 7791              	maxtx1:
 7792 0000 0000     		.space	2
 7793              		.global	txcnt1
 7794              		.section	.bss.txcnt1,"aw",%nobits
 7795              		.align	1
 7798              	txcnt1:
 7799 0000 0000     		.space	2
 7800              		.global	rxcnt1
 7801              		.section	.bss.rxcnt1,"aw",%nobits
 7802              		.align	1
 7805              	rxcnt1:
 7806 0000 0000     		.space	2
 7807              		.section	.rodata.base64de,"a"
 7810              	base64de:
 7811 0000 FFFFFFFF 		.ascii	"\377\377\377\377\377\377\377\377\377\377\377\377\377"
 7811      FFFFFFFF 
 7811      FFFFFFFF 
 7811      FF
 7812 000d FFFFFFFF 		.ascii	"\377\377\377\377\377\377\377\377\377\377\377\377\377"
 7812      FFFFFFFF 
 7812      FFFFFFFF 
 7812      FF
 7813 001a FFFFFFFF 		.ascii	"\377\377\377\377\377\377\377\377\377\377\377\377\377"
 7813      FFFFFFFF 
 7813      FFFFFFFF 
 7813      FF
 7814 0027 FFFFFFFF 		.ascii	"\377\377\377\377>\377\377\377?456789:;<=\377\377\377"
 7814      3EFFFFFF 
 7814      3F343536 
 7814      3738393A 
 7814      3B3C3DFF 
 7815 003d FFFFFFFF 		.ascii	"\377\377\377\377\000\001\002\003\004\005\006\007\010"
 7815      00010203 
 7815      04050607 
 7815      08
 7816 004a 090A0B0C 		.ascii	"\011\012\013\014\015\016\017\020\021\022\023\024\025"
 7816      0D0E0F10 
 7816      11121314 
 7816      15
 7817 0057 16171819 		.ascii	"\026\027\030\031\377\377\377\377\377\377\032\033\034"
 7817      FFFFFFFF 
 7817      FFFF1A1B 
 7817      1C
 7818 0064 1D1E1F20 		.ascii	"\035\036\037 !\"#$%&'()*+,-./0123\377\377\377\377\377"
 7818      21222324 
 7818      25262728 
 7818      292A2B2C 
 7818      2D2E2F30 
 7819              		.section	.rodata.base64en,"a"
 7822              	base64en:
 7823 0000 41424344 		.ascii	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy"
 7823      45464748 
 7823      494A4B4C 
 7823      4D4E4F50 
 7823      51525354 
 7824 0033 7A303132 		.ascii	"z0123456789+/"
 7824      33343536 
 7824      3738392B 
 7824      2F
 7825              		.text
 7826              	.Letext0:
 7827              		.file 4 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.3 rel1/arm-none-eabi/include/ma
 7828              		.file 5 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.3 rel1/arm-none-eabi/include/sy
 7829              		.file 6 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.3 rel1/lib/gcc/arm-none-eabi/13
 7830              		.file 7 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.3 rel1/lib/gcc/arm-none-eabi/13
 7831              		.file 8 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.3 rel1/arm-none-eabi/include/st
 7832              		.file 9 "/project/stm32fx_iolib/stm32fxxx/stm32f4xx/stm32f4xx.h"
 7833              		.file 10 "/project/stm32fx_iolib/stm32f4x_iolib/include/misc.h"
 7834              		.file 11 "/project/stm32fx_iolib/stm32f4x_iolib/include/stm32f4xx_flash.h"
 7835              		.file 12 "/project/stm32fx_iolib/stm32f4x_iolib/include/stm32f4xx_gpio.h"
 7836              		.file 13 "/project/stm32fx_iolib/stm32f4x_iolib/include/stm32f4xx_usart.h"
 7837              		.file 14 "/project/stm32fx_iolib/stm32f4x_iolib/include/stm32f4xx_rcc.h"
 7838              		.file 15 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.3 rel1/arm-none-eabi/include/s
 7839              		.file 16 "source/prototype.h"
 7840              		.file 17 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 serial.c
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:21     .text.NVIC_SystemReset:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:26     .text.NVIC_SystemReset:00000000 NVIC_SystemReset
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:98     .text.NVIC_SystemReset:0000001c $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:104    .text.flash_read:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:110    .text.flash_read:00000000 flash_read
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:163    .text.flash_read:00000028 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7706   .bss.flash_address:00000000 flash_address
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7699   .bss.flash_buff:00000000 flash_buff
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:170    .text.flash_write:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:176    .text.flash_write:00000000 flash_write
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:264    .text.flash_write:0000003c $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:272    .text.write_wifi_data:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:278    .text.write_wifi_data:00000000 write_wifi_data
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:459    .text.write_wifi_data:0000010c $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7376   .bss.wifi_power:00000000 wifi_power
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7614   .bss.dhcp_disable:00000000 dhcp_disable
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7602   .bss.keep_alive_time:00000000 keep_alive_time
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7608   .bss.mqtt_mode:00000000 mqtt_mode
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7596   .bss.mqtt_port:00000000 mqtt_port
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7334   .bss.ap_mode:00000000 ap_mode
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7463   .bss.m_ip:00000000 m_ip
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7456   .bss.m_gw:00000000 m_gw
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7449   .bss.m_nm:00000000 m_nm
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7292   .bss.ssid:00000000 ssid
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7286   .bss.passwd:00000000 passwd
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7280   .bss.host_url:00000000 host_url
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7274   .bss.ntp_url:00000000 ntp_url
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7268   .bss.login_id:00000000 login_id
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7262   .bss.login_pw:00000000 login_pw
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7256   .bss.tx_topic:00000000 tx_topic
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7250   .bss.rx_topic:00000000 rx_topic
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:489    .text.read_wifi_data:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:495    .text.read_wifi_data:00000000 read_wifi_data
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:734    .text.read_wifi_data:00000194 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:764    .text.base64_encode:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:770    .text.base64_encode:00000000 base64_encode
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:993    .text.base64_encode:000000cc $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7822   .rodata.base64en:00000000 base64en
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:998    .text.base64_decode:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1004   .text.base64_decode:00000000 base64_decode
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1162   .text.base64_decode:00000084 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7810   .rodata.base64de:00000000 base64de
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1167   .text.USART1_IRQHandler:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1173   .text.USART1_IRQHandler:00000000 USART1_IRQHandler
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1320   .text.USART1_IRQHandler:000000bc $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7805   .bss.rxcnt1:00000000 rxcnt1
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7692   .bss.rxbuff1:00000000 rxbuff1
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7724   .bss.rx_led:00000000 rx_led
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7742   .bss.rxck1:00000000 rxck1
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7798   .bss.txcnt1:00000000 txcnt1
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7791   .bss.maxtx1:00000000 maxtx1
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7686   .bss.txbuff1:00000000 txbuff1
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7718   .bss.tx_led:00000000 tx_led
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1333   .text.USART2_IRQHandler:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1339   .text.USART2_IRQHandler:00000000 USART2_IRQHandler
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1490   .text.USART2_IRQHandler:000000c4 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7784   .bss.rxcnt2:00000000 rxcnt2
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7680   .bss.rxbuff2:00000000 rxbuff2
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7736   .bss.rxck2:00000000 rxck2
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7777   .bss.txcnt2:00000000 txcnt2
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7770   .bss.maxtx2:00000000 maxtx2
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7674   .bss.txbuff2:00000000 txbuff2
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1504   .text.USART3_IRQHandler:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1510   .text.USART3_IRQHandler:00000000 USART3_IRQHandler
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1669   .text.USART3_IRQHandler:000000c8 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7763   .bss.rxcnt3:00000000 rxcnt3
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7668   .bss.rxbuff3:00000000 rxbuff3
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7730   .bss.rxck3:00000000 rxck3
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7756   .bss.txcnt3:00000000 txcnt3
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7749   .bss.maxtx3:00000000 maxtx3
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7662   .bss.txbuff3:00000000 txbuff3
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1683   .text.tx_enable1:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1689   .text.tx_enable1:00000000 tx_enable1
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1730   .text.tx_enable1:00000020 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1738   .text.tx_enable2:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1744   .text.tx_enable2:00000000 tx_enable2
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1790   .text.tx_enable2:00000028 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1799   .text.tx_enable3:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1805   .text.tx_enable3:00000000 tx_enable3
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1846   .text.tx_enable3:00000020 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1854   .text.receive_check1:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1860   .text.receive_check1:00000000 receive_check1
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1978   .text.receive_check1:00000064 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7712   .bss.this_id:00000000 this_id
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1986   .text.receive_check2:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:1992   .text.receive_check2:00000000 receive_check2
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2110   .text.receive_check2:00000064 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2118   .text.receive_check3:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2124   .text.receive_check3:00000000 receive_check3
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2242   .text.receive_check3:00000064 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2250   .text.uasrt_send:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2256   .text.uasrt_send:00000000 uasrt_send
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2312   .text.uasrt_send:00000030 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2318   .text.s_printf:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2324   .text.s_printf:00000000 s_printf
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2386   .text.s_printf:0000002c $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7632   .bss.sbuff:00000000 sbuff
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2391   .text.send_server_data:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2397   .text.send_server_data:00000000 send_server_data
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2433   .text.send_server_data:00000018 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2439   .text.send_server_data:0000001e $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2742   .text.send_server_data:00000194 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7650   .bss.tcp_tx:00000000 tcp_tx
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7554   .bss.tcp_txcnt:00000000 tcp_txcnt
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7582   .bss.tcp_length:00000000 tcp_length
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7358   .bss.tcp_send:00000000 tcp_send
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7394   .bss.send_flag:00000000 send_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2772   .text.send_board_data:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2778   .text.send_board_data:00000000 send_board_data
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2960   .text.send_board_data:000000b0 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7226   .bss.dac:00000000 dac
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7244   .bss.led1:00000000 led1
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7238   .bss.led2:00000000 led2
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7232   .bss.buz:00000000 buz
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7364   .bss.mqtt_send:00000000 mqtt_send
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2985   .text.rx_check:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:2991   .text.rx_check:00000000 rx_check
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:3100   .text.rx_check:00000066 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:3122   .text.rx_check:00000092 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:3521   .text.rx_check:000002b4 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7656   .bss.net_rx:00000000 net_rx
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7547   .bss.tcp_rxcnt:00000000 tcp_rxcnt
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7477   .bss.ap_mode_time:00000000 ap_mode_time
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7620   .bss.rx_message:00000000 rx_message
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7626   .bss.message:00000000 message
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7382   .bss.reboot_flag:00000000 reboot_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:3558   .text.rx_check:0000033c $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:3576   .text.clear_flag:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:3582   .text.clear_flag:00000000 clear_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:3639   .text.clear_flag:00000030 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7430   .bss.pwr_flag:00000000 pwr_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7424   .bss.mode_flag:00000000 mode_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7400   .bss.ssid_flag:00000000 ssid_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7418   .bss.ip_flag:00000000 ip_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7412   .bss.mux_flag:00000000 mux_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7406   .bss.server_flag:00000000 server_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7310   .bss.mqtt_cfg_flag:00000000 mqtt_cfg_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7304   .bss.mqtt_connect_flag:00000000 mqtt_connect_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7298   .bss.mqtt_sub_flag:00000000 mqtt_sub_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7316   .bss.ntp_req_flag:00000000 ntp_req_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:3694   .text.send_data:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:3700   .text.send_data:00000000 send_data
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:4171   .text.send_data:00000220 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7491   .bss.time_out:00000000 time_out
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7436   .bss.reset_flag:00000000 reset_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7370   .bss.mqtt_connect:00000000 mqtt_connect
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7589   .bss.pwr_error:00000000 pwr_error
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7352   .bss.host_flag:00000000 host_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7328   .bss.wifi_ch:00000000 wifi_ch
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7442   .bss.gid:00000000 gid
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7388   .bss.send_data_flag:00000000 send_data_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:4226   .text.send_data:000002f0 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:4299   .text.send_data:00000348 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7322   .bss.ntp_flag:00000000 ntp_flag
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:4318   .text.send_mode:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:4324   .text.send_mode:00000000 send_mode
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:4414   .text.send_mode:00000040 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:4469   .text.receive_check_wifi:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:4475   .text.receive_check_wifi:00000000 receive_check_wifi
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:4918   .text.receive_check_wifi:00000218 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7484   .bss.main_time:00000000 main_time
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7575   .bss.rx_length:00000000 rx_length
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7568   .bss.rx_offset:00000000 rx_offset
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:4938   .text.receive_check_wifi:0000025c $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:5499   .text.receive_check_wifi:000004f0 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7540   .bss.rx_topic_length:00000000 rx_topic_length
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7346   .bss.ssid_check:00000000 ssid_check
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7533   .bss.ssid_error:00000000 ssid_error
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7519   .bss.mqtt_connect_count:00000000 mqtt_connect_count
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7512   .bss.mqtt_check_cnt:00000000 mqtt_check_cnt
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7498   .bss.mqtt_sub_count:00000000 mqtt_sub_count
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7505   .bss.send_count:00000000 send_count
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:5533   .text.receive_check_wifi:00000568 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:5720   .text.receive_check_wifi:00000660 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:5730   .text.receive_check_wifi:0000067c $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:6263   .text.receive_check_wifi:000008cc $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7340   .bss.mqtt_protocol:00000000 mqtt_protocol
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:6299   .text.receive_check_wifi:00000950 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:6405   .text.receive_check_wifi:000009c8 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:6420   .text.serial_check:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:6426   .text.serial_check:00000000 serial_check
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:6684   .text.serial_check:0000010c $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7470   .bss.time_req:00000000 time_req
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7526   .bss.status_time:00000000 status_time
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7561   .bss.reboot_count:00000000 reboot_count
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:6708   .text.change_ap_mode:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:6714   .text.change_ap_mode:00000000 change_ap_mode
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:6758   .text.change_ap_mode:00000028 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:6769   .text.serial_init:00000000 $t
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:6775   .text.serial_init:00000000 serial_init
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7191   .text.serial_init:00000240 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7644   .bss.USART1_PORT:00000000 USART1_PORT
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7638   .bss.USART3_PORT:00000000 USART3_PORT
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7223   .bss.dac:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7233   .bss.buz:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7239   .bss.led2:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7245   .bss.led1:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7251   .bss.rx_topic:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7257   .bss.tx_topic:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7263   .bss.login_pw:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7269   .bss.login_id:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7275   .bss.ntp_url:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7281   .bss.host_url:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7287   .bss.passwd:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7293   .bss.ssid:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7299   .bss.mqtt_sub_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7305   .bss.mqtt_connect_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7311   .bss.mqtt_cfg_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7317   .bss.ntp_req_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7323   .bss.ntp_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7329   .bss.wifi_ch:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7335   .bss.ap_mode:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7341   .bss.mqtt_protocol:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7347   .bss.ssid_check:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7353   .bss.host_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7359   .bss.tcp_send:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7365   .bss.mqtt_send:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7371   .bss.mqtt_connect:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7377   .bss.wifi_power:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7383   .bss.reboot_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7389   .bss.send_data_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7395   .bss.send_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7401   .bss.ssid_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7407   .bss.server_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7413   .bss.mux_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7419   .bss.ip_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7425   .bss.mode_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7431   .bss.pwr_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7437   .bss.reset_flag:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7443   .bss.gid:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7446   .bss.m_nm:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7453   .bss.m_gw:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7460   .bss.m_ip:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7467   .bss.time_req:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7474   .bss.ap_mode_time:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7481   .bss.main_time:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7488   .bss.time_out:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7495   .bss.mqtt_sub_count:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7502   .bss.send_count:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7509   .bss.mqtt_check_cnt:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7516   .bss.mqtt_connect_count:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7523   .bss.status_time:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7530   .bss.ssid_error:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7537   .bss.rx_topic_length:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7544   .bss.tcp_rxcnt:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7551   .bss.tcp_txcnt:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7558   .bss.reboot_count:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7565   .bss.rx_offset:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7572   .bss.rx_length:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7579   .bss.tcp_length:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7586   .bss.pwr_error:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7593   .bss.mqtt_port:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7603   .bss.keep_alive_time:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7609   .bss.mqtt_mode:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7615   .bss.dhcp_disable:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7621   .bss.rx_message:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7627   .bss.message:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7633   .bss.sbuff:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7639   .bss.USART3_PORT:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7645   .bss.USART1_PORT:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7651   .bss.tcp_tx:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7657   .bss.net_rx:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7663   .bss.txbuff3:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7669   .bss.rxbuff3:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7675   .bss.txbuff2:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7681   .bss.rxbuff2:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7687   .bss.txbuff1:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7693   .bss.rxbuff1:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7696   .bss.flash_buff:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7703   .bss.flash_address:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7713   .bss.this_id:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7719   .bss.tx_led:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7725   .bss.rx_led:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7731   .bss.rxck3:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7737   .bss.rxck2:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7743   .bss.rxck1:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7746   .bss.maxtx3:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7753   .bss.txcnt3:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7760   .bss.rxcnt3:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7767   .bss.maxtx2:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7774   .bss.txcnt2:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7781   .bss.rxcnt2:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7788   .bss.maxtx1:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7795   .bss.txcnt1:00000000 $d
C:\Users\gedha\AppData\Local\Temp\ccGiXEbx.s:7802   .bss.rxcnt1:00000000 $d

UNDEFINED SYMBOLS
FLASH_Unlock
FLASH_Lock
FLASH_EraseSector
FLASH_ProgramWord
FLASHStatus
USART_GetITStatus
USART_ReceiveData
USART_ClearITPendingBit
USART_SendData
USART_ITConfig
memset
memcpy
vsprintf
strlen
adc_temperature
adc_voltage1
adc_voltage2
send_dac
read_key
Dac1_Set_Voltage
strcmp
lcd_printf
remote
strcpy
sprintf
strncmp
NVIC_Init
GPIO_PinAFConfig
GPIO_Init_Pin
USART_DeInit
RCC_APB2PeriphClockCmd
USART_Init
USART_Cmd
RCC_APB1PeriphClockCmd
