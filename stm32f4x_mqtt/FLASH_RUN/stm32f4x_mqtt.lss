
FLASH_RUN/stm32f4x_mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007444  08008000  08008000  00001000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     0000004c  0800f444  0800f444  00008444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0800f490  0800f490  00008490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       00004cd0  0800f498  0800f498  00008498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000208  20000000  08014168  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .bss          00002ca8  20000208  08014370  0000e208  2**2
                  ALLOC
  6 ._usrstack    00001000  20002eb0  08014370  0000eeb0  2**0
                  ALLOC
  7 .comment      0000008e  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001068  00000000  00000000  0000e296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000172e0  00000000  00000000  0000f2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003890  00000000  00000000  000265de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000e47b  00000000  00000000  00029e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00002bb8  00000000  00000000  000382ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00004d41  00000000  00000000  0003aea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000b12e  00000000  00000000  0003fbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0004ad13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .ARM.attributes 00000032  00000000  00000000  0004bf13  2**0
                  CONTENTS, READONLY
 17 .debug_line_str 000001e3  00000000  00000000  0004bf45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008000 <g_pfnVectors>:
 8008000:	00 00 02 20 61 d5 00 08 dd d4 00 08 dd d4 00 08     ... a...........
 8008010:	dd d4 00 08 dd d4 00 08 dd d4 00 08 00 00 00 00     ................
	...
 800802c:	dd d4 00 08 dd d4 00 08 00 00 00 00 dd d4 00 08     ................
 800803c:	61 01 00 20 dd d4 00 08 dd d4 00 08 dd d4 00 08     a.. ............
 800804c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800805c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800806c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800807c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800808c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800809c:	dd d4 00 08 dd d4 00 08 c1 cf 00 08 dd d4 00 08     ................
 80080ac:	0d d0 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 80080bc:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 80080cc:	dd d4 00 08 dd d4 00 08 3d 8a 00 08 1d 8b 00 08     ........=.......
 80080dc:	09 8c 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 80080ec:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 80080fc:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800810c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800811c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800812c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800813c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800814c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800815c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800816c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800817c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800818c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 800819c:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 80081ac:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 80081bc:	dd d4 00 08 dd d4 00 08 dd d4 00 08 dd d4 00 08     ................
 80081cc:	dd d4 00 08 dd d4 00 08 dd d4 00 08                 ............

080081d8 <wait_ms>:
extern volatile unsigned short rxcnt1,rxcnt2,rxcnt3;



void wait_ms (unsigned short delay)
{
 80081d8:	b570      	push	{r4, r5, r6, lr}
      unsigned short old_jiffes;
      jiffes = 0;
 80081da:	4d09      	ldr	r5, [pc, #36]	@ (8008200 <wait_ms+0x28>)
 80081dc:	2400      	movs	r4, #0
{
 80081de:	4606      	mov	r6, r0
      jiffes = 0;
 80081e0:	802c      	strh	r4, [r5, #0]
      old_jiffes = 0;
      while (jiffes < delay) {
 80081e2:	882b      	ldrh	r3, [r5, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	42b3      	cmp	r3, r6
 80081e8:	d300      	bcc.n	80081ec <wait_ms+0x14>
      	       old_jiffes = jiffes;
               /* Reload IWDG counter */
               IWDG_ReloadCounter();
            }
      }
}
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
      	    if (old_jiffes != jiffes) {
 80081ec:	882b      	ldrh	r3, [r5, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d0f6      	beq.n	80081e2 <wait_ms+0xa>
      	       old_jiffes = jiffes;
 80081f4:	882c      	ldrh	r4, [r5, #0]
 80081f6:	b2a4      	uxth	r4, r4
               IWDG_ReloadCounter();
 80081f8:	f005 fd22 	bl	800dc40 <IWDG_ReloadCounter>
 80081fc:	e7f1      	b.n	80081e2 <wait_ms+0xa>
 80081fe:	bf00      	nop
 8008200:	20000210 	.word	0x20000210

08008204 <Periph_Configuration>:
      return 0;
}


void Periph_Configuration (void)
{
 8008204:	b508      	push	{r3, lr}
      /* Enable GPIO clocks */
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOG, ENABLE);
 8008206:	2101      	movs	r1, #1
 8008208:	207f      	movs	r0, #127	@ 0x7f
 800820a:	f005 fd65 	bl	800dcd8 <RCC_AHB1PeriphClockCmd>
      /* Enable USART1 clock */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800820e:	2101      	movs	r1, #1
 8008210:	2010      	movs	r0, #16
 8008212:	f005 fd85 	bl	800dd20 <RCC_APB2PeriphClockCmd>
      /* Enable USART2 clock */
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8008216:	2101      	movs	r1, #1
 8008218:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800821c:	f005 fd74 	bl	800dd08 <RCC_APB1PeriphClockCmd>
      /* Enable USART3 clock */
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8008220:	2101      	movs	r1, #1
 8008222:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8008226:	f005 fd6f 	bl	800dd08 <RCC_APB1PeriphClockCmd>
      /* Enable PWR and BKP clocks */
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_AHB1Periph_BKPSRAM | RCC_AHB1Periph_SRAM1 | RCC_AHB1Periph_SRAM2, ENABLE);
}
 800822a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_AHB1Periph_BKPSRAM | RCC_AHB1Periph_SRAM1 | RCC_AHB1Periph_SRAM2, ENABLE);
 800822e:	4802      	ldr	r0, [pc, #8]	@ (8008238 <Periph_Configuration+0x34>)
 8008230:	2101      	movs	r1, #1
 8008232:	f005 bd69 	b.w	800dd08 <RCC_APB1PeriphClockCmd>
 8008236:	bf00      	nop
 8008238:	10070000 	.word	0x10070000

0800823c <GPIO_Configuration>:


void GPIO_Configuration (void)
{
 800823c:	b510      	push	{r4, lr}
      GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
 800823e:	4c3f      	ldr	r4, [pc, #252]	@ (800833c <GPIO_Configuration+0x100>)
 8008240:	2207      	movs	r2, #7
 8008242:	4620      	mov	r0, r4
 8008244:	2102      	movs	r1, #2
 8008246:	f005 fc01 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
 800824a:	4620      	mov	r0, r4
 800824c:	2207      	movs	r2, #7
 800824e:	2103      	movs	r1, #3
 8008250:	f005 fbfc 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_Init_Pin(GPIOA,TXD2,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 8008254:	4620      	mov	r0, r4
 8008256:	2312      	movs	r3, #18
 8008258:	2203      	movs	r2, #3
 800825a:	2104      	movs	r1, #4
 800825c:	f005 fc08 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOA,RXD2,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 8008260:	2312      	movs	r3, #18
 8008262:	4620      	mov	r0, r4
 8008264:	2203      	movs	r2, #3
 8008266:	2108      	movs	r1, #8
 8008268:	f005 fc02 	bl	800da70 <GPIO_Init_Pin>

      GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
 800826c:	4620      	mov	r0, r4
 800826e:	2207      	movs	r2, #7
 8008270:	2109      	movs	r1, #9
 8008272:	f005 fbeb 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
 8008276:	4620      	mov	r0, r4
 8008278:	2207      	movs	r2, #7
 800827a:	210a      	movs	r1, #10
 800827c:	f005 fbe6 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_Init_Pin(GPIOA,TXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 8008280:	4620      	mov	r0, r4
 8008282:	2312      	movs	r3, #18
 8008284:	2203      	movs	r2, #3
 8008286:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800828a:	f005 fbf1 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOA,RXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800828e:	2312      	movs	r3, #18
 8008290:	4620      	mov	r0, r4
 8008292:	2203      	movs	r2, #3

      GPIO_PinAFConfig(GPIOB,GPIO_PinSource10,GPIO_AF_USART3);
 8008294:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
      GPIO_Init_Pin(GPIOA,RXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 8008298:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800829c:	f005 fbe8 	bl	800da70 <GPIO_Init_Pin>
      GPIO_PinAFConfig(GPIOB,GPIO_PinSource10,GPIO_AF_USART3);
 80082a0:	4620      	mov	r0, r4
 80082a2:	2207      	movs	r2, #7
 80082a4:	210a      	movs	r1, #10
 80082a6:	f005 fbd1 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOB,GPIO_PinSource11,GPIO_AF_USART3);
 80082aa:	4620      	mov	r0, r4
 80082ac:	2207      	movs	r2, #7
 80082ae:	210b      	movs	r1, #11
 80082b0:	f005 fbcc 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_Init_Pin(GPIOB,TXD3,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 80082b4:	4620      	mov	r0, r4
 80082b6:	2312      	movs	r3, #18
 80082b8:	2203      	movs	r2, #3
 80082ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80082be:	f005 fbd7 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOB,RXD3,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 80082c2:	4620      	mov	r0, r4
 80082c4:	2312      	movs	r3, #18
 80082c6:	2203      	movs	r2, #3
 80082c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80082cc:	f005 fbd0 	bl	800da70 <GPIO_Init_Pin>

      GPIO_Init_Pin(GPIOC,WIFI_PGM_PIN,GPIO_Speed_100MHz,GPIO_Mode_Out_PP);
 80082d0:	2301      	movs	r3, #1
 80082d2:	4619      	mov	r1, r3
      
      GPIO_Init_Pin(GPIOF,WIFI_RST_PIN,GPIO_Speed_100MHz,GPIO_Mode_Out_PP);
 80082d4:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
      GPIO_Init_Pin(GPIOC,WIFI_PGM_PIN,GPIO_Speed_100MHz,GPIO_Mode_Out_PP);
 80082d8:	4819      	ldr	r0, [pc, #100]	@ (8008340 <GPIO_Configuration+0x104>)
 80082da:	2203      	movs	r2, #3
 80082dc:	f005 fbc8 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOF,WIFI_RST_PIN,GPIO_Speed_100MHz,GPIO_Mode_Out_PP);
 80082e0:	2301      	movs	r3, #1
 80082e2:	2203      	movs	r2, #3
 80082e4:	2140      	movs	r1, #64	@ 0x40
 80082e6:	4620      	mov	r0, r4
 80082e8:	f005 fbc2 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOF,LED0,GPIO_Speed_100MHz,GPIO_Mode_Out_PP);
 80082ec:	2301      	movs	r3, #1
 80082ee:	2203      	movs	r2, #3
 80082f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80082f4:	4620      	mov	r0, r4
 80082f6:	f005 fbbb 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOF,LED1,GPIO_Speed_100MHz,GPIO_Mode_Out_PP);
 80082fa:	2301      	movs	r3, #1
 80082fc:	2203      	movs	r2, #3
 80082fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008302:	4620      	mov	r0, r4
 8008304:	f005 fbb4 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOG,TXEN,GPIO_Speed_100MHz,GPIO_Mode_Out_PP);
 8008308:	480e      	ldr	r0, [pc, #56]	@ (8008344 <GPIO_Configuration+0x108>)
 800830a:	2301      	movs	r3, #1
 800830c:	2203      	movs	r2, #3
 800830e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008312:	f005 fbad 	bl	800da70 <GPIO_Init_Pin>
      WIFI_PGM = 1;
 8008316:	4b0c      	ldr	r3, [pc, #48]	@ (8008348 <GPIO_Configuration+0x10c>)
      WIFI_RST = 0;
      LED_OUT0 = 1;
      LED_OUT1 = 1;
      TXEN_485 = 0;
 8008318:	480c      	ldr	r0, [pc, #48]	@ (800834c <GPIO_Configuration+0x110>)
      WIFI_PGM = 1;
 800831a:	2201      	movs	r2, #1
 800831c:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
      WIFI_RST = 0;
 8008320:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8008324:	2100      	movs	r1, #0
 8008326:	f8c3 1298 	str.w	r1, [r3, #664]	@ 0x298
      LED_OUT0 = 1;
 800832a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
      LED_OUT1 = 1;
 800832e:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
      TXEN_485 = 0;
 8008332:	f8c0 12a0 	str.w	r1, [r0, #672]	@ 0x2a0
      WIFI_RST = 1;
 8008336:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
}
 800833a:	bd10      	pop	{r4, pc}
 800833c:	40020000 	.word	0x40020000
 8008340:	40020800 	.word	0x40020800
 8008344:	40021800 	.word	0x40021800
 8008348:	42410000 	.word	0x42410000
 800834c:	42430000 	.word	0x42430000

08008350 <NVIC_Configuration>:
#else
extern unsigned int _isr_vectorsflash_offs;
void NVIC_Configuration (void)
{
      /* Set the Vector Table base location at 0x08000000 +_isr_vectorsflash_offs */
      NVIC_SetVectorTable(NVIC_VectTab_FLASH, (unsigned int)&_isr_vectorsflash_offs);
 8008350:	4902      	ldr	r1, [pc, #8]	@ (800835c <NVIC_Configuration+0xc>)
 8008352:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8008356:	f005 b9c7 	b.w	800d6e8 <NVIC_SetVectorTable>
 800835a:	bf00      	nop
 800835c:	00008000 	.word	0x00008000

08008360 <main>:
      IWDG_Enable();
}


int main (void)
{
 8008360:	b58f      	push	{r0, r1, r2, r3, r7, lr}
      RCC_ClocksTypeDef RCC_Clocks;
      /* System Clocks Configuration */
      Periph_Configuration();
 8008362:	f7ff ff4f 	bl	8008204 <Periph_Configuration>
      /* NVIC configuration */
      NVIC_Configuration();
 8008366:	f7ff fff3 	bl	8008350 <NVIC_Configuration>
      /* Configure the GPIO ports */
      GPIO_Configuration();
 800836a:	f7ff ff67 	bl	800823c <GPIO_Configuration>
      RCC_GetClocksFreq(&RCC_Clocks);
 800836e:	4668      	mov	r0, sp
 8008370:	f005 fc6e 	bl	800dc50 <RCC_GetClocksFreq>
      /* Setup SysTick Timer for 1 millisecond interrupts, also enables Systick and Systick-Interrupt */
      if (SysTick_Config(SystemCoreClock / 1000)) {
 8008374:	4b49      	ldr	r3, [pc, #292]	@ (800849c <main+0x13c>)
 8008376:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008380:	3b01      	subs	r3, #1
 8008382:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008386:	d26e      	bcs.n	8008466 <main+0x106>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008388:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800838c:	4d44      	ldr	r5, [pc, #272]	@ (80084a0 <main+0x140>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800838e:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008390:	23f0      	movs	r3, #240	@ 0xf0
 8008392:	f885 3023 	strb.w	r3, [r5, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008396:	2600      	movs	r6, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008398:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800839a:	6196      	str	r6, [r2, #24]
         /* Capture error */
         while (1);
      }
      /* 4 bit for pre-emption priority, 0 bits for subpriority */
      NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 800839c:	f44f 7040 	mov.w	r0, #768	@ 0x300
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083a0:	6113      	str	r3, [r2, #16]
 80083a2:	f005 f96b 	bl	800d67c <NVIC_PriorityGroupConfig>
      if (FLASH_OB_GetRDP() != SET) {
 80083a6:	f005 faad 	bl	800d904 <FLASH_OB_GetRDP>
 80083aa:	2801      	cmp	r0, #1
 80083ac:	4604      	mov	r4, r0
 80083ae:	d15b      	bne.n	8008468 <main+0x108>
         FLASH_OB_Launch();                        // Option Bytes programming
         FLASH_OB_Lock();
         FLASH_Lock();
         NVIC_SystemReset();
      }
      serial_init();
 80083b0:	f002 f824 	bl	800a3fc <serial_init>
      LCD_Init();
 80083b4:	f002 ff9a 	bl	800b2ec <LCD_Init>
      init_i2c_24xx();
 80083b8:	f002 fa00 	bl	800a7bc <init_i2c_24xx>
      ADC_Config();
 80083bc:	f004 fec8 	bl	800d150 <ADC_Config>
      Dac1_Init();
 80083c0:	f005 f866 	bl	800d490 <Dac1_Init>
      key_init();
 80083c4:	f002 fb0a 	bl	800a9dc <key_init>
      set_color(WHITE);
 80083c8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80083cc:	f002 fcca 	bl	800ad64 <set_color>
      lcd_printf(1,1,"Program_Start.");
 80083d0:	4a34      	ldr	r2, [pc, #208]	@ (80084a4 <main+0x144>)
      Dac1_Set_Voltage(0);
      while (1) {
            if (tick) {
 80083d2:	4d35      	ldr	r5, [pc, #212]	@ (80084a8 <main+0x148>)
      lcd_printf(1,1,"Program_Start.");
 80083d4:	4621      	mov	r1, r4
 80083d6:	4620      	mov	r0, r4
 80083d8:	f002 ff52 	bl	800b280 <lcd_printf>
      Dac1_Set_Voltage(0);
 80083dc:	4630      	mov	r0, r6
 80083de:	f005 f813 	bl	800d408 <Dac1_Set_Voltage>
               }
               adc_process();
               serial_check();
               if (remote == 0) {
                  if (time_led == ON) LED_OUT0 = 0;else LED_OUT0 = 1;
                  if ((tx_led) || (rx_led)) LED_OUT1 = 0;
 80083e2:	4e32      	ldr	r6, [pc, #200]	@ (80084ac <main+0x14c>)
               read_key = key_read();
 80083e4:	4c32      	ldr	r4, [pc, #200]	@ (80084b0 <main+0x150>)
               if (old_key != read_key) {
 80083e6:	4f33      	ldr	r7, [pc, #204]	@ (80084b4 <main+0x154>)
            if (tick) {
 80083e8:	882b      	ldrh	r3, [r5, #0]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d0fb      	beq.n	80083e8 <main+0x88>
               tick = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	802b      	strh	r3, [r5, #0]
               IWDG_ReloadCounter();
 80083f4:	f005 fc24 	bl	800dc40 <IWDG_ReloadCounter>
               read_key = key_read();
 80083f8:	f002 fa3c 	bl	800a874 <key_read>
 80083fc:	7020      	strb	r0, [r4, #0]
               if (old_key != read_key) {
 80083fe:	783a      	ldrb	r2, [r7, #0]
 8008400:	7823      	ldrb	r3, [r4, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d008      	beq.n	8008418 <main+0xb8>
               	  old_key = read_key;
 8008406:	7823      	ldrb	r3, [r4, #0]
               	  lcd_printf(1,7,"KEY READ %.2X",read_key);
 8008408:	4a2b      	ldr	r2, [pc, #172]	@ (80084b8 <main+0x158>)
               	  old_key = read_key;
 800840a:	b2db      	uxtb	r3, r3
 800840c:	703b      	strb	r3, [r7, #0]
               	  lcd_printf(1,7,"KEY READ %.2X",read_key);
 800840e:	7823      	ldrb	r3, [r4, #0]
 8008410:	2107      	movs	r1, #7
 8008412:	2001      	movs	r0, #1
 8008414:	f002 ff34 	bl	800b280 <lcd_printf>
               adc_process();
 8008418:	f004 ff26 	bl	800d268 <adc_process>
               serial_check();
 800841c:	f001 ff1e 	bl	800a25c <serial_check>
               if (remote == 0) {
 8008420:	4b26      	ldr	r3, [pc, #152]	@ (80084bc <main+0x15c>)
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1dd      	bne.n	80083e8 <main+0x88>
                  if (time_led == ON) LED_OUT0 = 0;else LED_OUT0 = 1;
 800842c:	4b24      	ldr	r3, [pc, #144]	@ (80084c0 <main+0x160>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2b01      	cmp	r3, #1
 8008432:	4b24      	ldr	r3, [pc, #144]	@ (80084c4 <main+0x164>)
 8008434:	bf18      	it	ne
 8008436:	2201      	movne	r2, #1
 8008438:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
                  if ((tx_led) || (rx_led)) LED_OUT1 = 0;
 800843c:	7833      	ldrb	r3, [r6, #0]
 800843e:	b913      	cbnz	r3, 8008446 <main+0xe6>
 8008440:	4b21      	ldr	r3, [pc, #132]	@ (80084c8 <main+0x168>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	b11b      	cbz	r3, 800844e <main+0xee>
 8008446:	4b1f      	ldr	r3, [pc, #124]	@ (80084c4 <main+0x164>)
 8008448:	2200      	movs	r2, #0
 800844a:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
                  if ((tx_led == 0) && (rx_led == 0)) LED_OUT1 = 1;
 800844e:	7833      	ldrb	r3, [r6, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1c7      	bne.n	80083e4 <main+0x84>
 8008454:	4b1c      	ldr	r3, [pc, #112]	@ (80084c8 <main+0x168>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1c3      	bne.n	80083e4 <main+0x84>
 800845c:	4b19      	ldr	r3, [pc, #100]	@ (80084c4 <main+0x164>)
 800845e:	2201      	movs	r2, #1
 8008460:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
 8008464:	e7be      	b.n	80083e4 <main+0x84>
         while (1);
 8008466:	e7fe      	b.n	8008466 <main+0x106>
         FLASH_Unlock();                           // this line is critical!
 8008468:	f005 fa20 	bl	800d8ac <FLASH_Unlock>
         FLASH_OB_Unlock();
 800846c:	f005 fa34 	bl	800d8d8 <FLASH_OB_Unlock>
         FLASH_OB_RDPConfig(OB_RDP_Level_1);
 8008470:	2055      	movs	r0, #85	@ 0x55
 8008472:	f005 fad5 	bl	800da20 <FLASH_OB_RDPConfig>
         FLASH_OB_Launch();                        // Option Bytes programming
 8008476:	f005 fadf 	bl	800da38 <FLASH_OB_Launch>
         FLASH_OB_Lock();
 800847a:	f005 fa3b 	bl	800d8f4 <FLASH_OB_Lock>
         FLASH_Lock();
 800847e:	f005 fa23 	bl	800d8c8 <FLASH_Lock>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008482:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008486:	68ea      	ldr	r2, [r5, #12]
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008488:	4b10      	ldr	r3, [pc, #64]	@ (80084cc <main+0x16c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800848a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800848e:	4313      	orrs	r3, r2
 8008490:	60eb      	str	r3, [r5, #12]
 8008492:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008496:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008498:	e7fd      	b.n	8008496 <main+0x136>
 800849a:	bf00      	nop
 800849c:	20000004 	.word	0x20000004
 80084a0:	e000ed00 	.word	0xe000ed00
 80084a4:	0800f498 	.word	0x0800f498
 80084a8:	20000212 	.word	0x20000212
 80084ac:	20002bdd 	.word	0x20002bdd
 80084b0:	2000020e 	.word	0x2000020e
 80084b4:	2000020d 	.word	0x2000020d
 80084b8:	0800f4a7 	.word	0x0800f4a7
 80084bc:	2000020c 	.word	0x2000020c
 80084c0:	2000020f 	.word	0x2000020f
 80084c4:	42428000 	.word	0x42428000
 80084c8:	20002bde 	.word	0x20002bde
 80084cc:	05fa0004 	.word	0x05fa0004

080084d0 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80084d0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80084d4:	4905      	ldr	r1, [pc, #20]	@ (80084ec <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80084d6:	4b06      	ldr	r3, [pc, #24]	@ (80084f0 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80084d8:	68ca      	ldr	r2, [r1, #12]
 80084da:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80084de:	4313      	orrs	r3, r2
 80084e0:	60cb      	str	r3, [r1, #12]
 80084e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80084e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80084e8:	e7fd      	b.n	80084e6 <NVIC_SystemReset+0x16>
 80084ea:	bf00      	nop
 80084ec:	e000ed00 	.word	0xe000ed00
 80084f0:	05fa0004 	.word	0x05fa0004

080084f4 <flash_read>:




void flash_read (void)
{
 80084f4:	b508      	push	{r3, lr}
      unsigned int idx;
      FLASH_Unlock();
 80084f6:	f005 f9d9 	bl	800d8ac <FLASH_Unlock>
      flash_address = (unsigned int)0x08004000;
 80084fa:	4908      	ldr	r1, [pc, #32]	@ (800851c <flash_read+0x28>)
 80084fc:	4b08      	ldr	r3, [pc, #32]	@ (8008520 <flash_read+0x2c>)
 80084fe:	4a09      	ldr	r2, [pc, #36]	@ (8008524 <flash_read+0x30>)
 8008500:	600b      	str	r3, [r1, #0]
 8008502:	2300      	movs	r3, #0
      for (idx=0;idx<256;idx++) {
          flash_buff[idx] = (*(volatile unsigned int *)(flash_address + (idx * 4)));
 8008504:	6808      	ldr	r0, [r1, #0]
 8008506:	58c0      	ldr	r0, [r0, r3]
 8008508:	f842 0b04 	str.w	r0, [r2], #4
      for (idx=0;idx<256;idx++) {
 800850c:	3304      	adds	r3, #4
 800850e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008512:	d1f7      	bne.n	8008504 <flash_read+0x10>
      }
      FLASH_Lock();
}
 8008514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      FLASH_Lock();
 8008518:	f005 b9d6 	b.w	800d8c8 <FLASH_Lock>
 800851c:	20002bd8 	.word	0x20002bd8
 8008520:	08004000 	.word	0x08004000
 8008524:	200027d8 	.word	0x200027d8

08008528 <flash_write>:


void flash_write (void)
{
 8008528:	b570      	push	{r4, r5, r6, lr}
      unsigned int idx;
      flash_address = (unsigned int)0x08004000;
 800852a:	4e0e      	ldr	r6, [pc, #56]	@ (8008564 <flash_write+0x3c>)
 800852c:	4b0e      	ldr	r3, [pc, #56]	@ (8008568 <flash_write+0x40>)
 800852e:	6033      	str	r3, [r6, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008530:	b672      	cpsid	i
      __disable_irq();
      FLASH_Unlock();
 8008532:	f005 f9bb 	bl	800d8ac <FLASH_Unlock>
      FLASHStatus = FLASH_EraseSector(FLASH_Sector_1, VoltageRange_3);
 8008536:	2102      	movs	r1, #2
 8008538:	2008      	movs	r0, #8
 800853a:	f005 fa1d 	bl	800d978 <FLASH_EraseSector>
 800853e:	4b0b      	ldr	r3, [pc, #44]	@ (800856c <flash_write+0x44>)
 8008540:	4d0b      	ldr	r5, [pc, #44]	@ (8008570 <flash_write+0x48>)
 8008542:	7018      	strb	r0, [r3, #0]
 8008544:	2400      	movs	r4, #0
      for (idx=0;idx<256;idx++) {
          FLASH_ProgramWord(flash_address + (idx * 4),flash_buff[idx]);
 8008546:	6830      	ldr	r0, [r6, #0]
 8008548:	f855 1b04 	ldr.w	r1, [r5], #4
 800854c:	4420      	add	r0, r4
      for (idx=0;idx<256;idx++) {
 800854e:	3404      	adds	r4, #4
          FLASH_ProgramWord(flash_address + (idx * 4),flash_buff[idx]);
 8008550:	f005 fa48 	bl	800d9e4 <FLASH_ProgramWord>
      for (idx=0;idx<256;idx++) {
 8008554:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 8008558:	d1f5      	bne.n	8008546 <flash_write+0x1e>
      }
      FLASH_Lock();
 800855a:	f005 f9b5 	bl	800d8c8 <FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800855e:	b662      	cpsie	i
      __enable_irq();
}
 8008560:	bd70      	pop	{r4, r5, r6, pc}
 8008562:	bf00      	nop
 8008564:	20002bd8 	.word	0x20002bd8
 8008568:	08004000 	.word	0x08004000
 800856c:	20000000 	.word	0x20000000
 8008570:	200027d8 	.word	0x200027d8

08008574 <write_wifi_data>:


void write_wifi_data (void)
{
 8008574:	b470      	push	{r4, r5, r6}
      flash_buff[0] = wifi_power;
 8008576:	4b42      	ldr	r3, [pc, #264]	@ (8008680 <write_wifi_data+0x10c>)
 8008578:	781a      	ldrb	r2, [r3, #0]
 800857a:	4b42      	ldr	r3, [pc, #264]	@ (8008684 <write_wifi_data+0x110>)
 800857c:	601a      	str	r2, [r3, #0]
      flash_buff[1] = dhcp_disable;
 800857e:	4a42      	ldr	r2, [pc, #264]	@ (8008688 <write_wifi_data+0x114>)
 8008580:	7812      	ldrb	r2, [r2, #0]
 8008582:	605a      	str	r2, [r3, #4]
      flash_buff[2] = keep_alive_time;
 8008584:	4a41      	ldr	r2, [pc, #260]	@ (800868c <write_wifi_data+0x118>)
 8008586:	7812      	ldrb	r2, [r2, #0]
 8008588:	609a      	str	r2, [r3, #8]
      flash_buff[3] = mqtt_mode;
 800858a:	4a41      	ldr	r2, [pc, #260]	@ (8008690 <write_wifi_data+0x11c>)
 800858c:	7812      	ldrb	r2, [r2, #0]
 800858e:	60da      	str	r2, [r3, #12]
      flash_buff[4] = mqtt_port;
 8008590:	4a40      	ldr	r2, [pc, #256]	@ (8008694 <write_wifi_data+0x120>)
 8008592:	8812      	ldrh	r2, [r2, #0]
 8008594:	b292      	uxth	r2, r2
 8008596:	611a      	str	r2, [r3, #16]
      flash_buff[5] = ap_mode;
 8008598:	4a3f      	ldr	r2, [pc, #252]	@ (8008698 <write_wifi_data+0x124>)
 800859a:	7812      	ldrb	r2, [r2, #0]
 800859c:	615a      	str	r2, [r3, #20]
      flash_buff[6] = m_ip;
 800859e:	4a3f      	ldr	r2, [pc, #252]	@ (800869c <write_wifi_data+0x128>)
 80085a0:	6812      	ldr	r2, [r2, #0]
 80085a2:	619a      	str	r2, [r3, #24]
      flash_buff[7] = m_gw;
 80085a4:	4a3e      	ldr	r2, [pc, #248]	@ (80086a0 <write_wifi_data+0x12c>)
 80085a6:	6812      	ldr	r2, [r2, #0]
 80085a8:	61da      	str	r2, [r3, #28]
      flash_buff[8] = m_nm;
 80085aa:	4a3e      	ldr	r2, [pc, #248]	@ (80086a4 <write_wifi_data+0x130>)
 80085ac:	6812      	ldr	r2, [r2, #0]
 80085ae:	621a      	str	r2, [r3, #32]
      memcpy((char *)&flash_buff[9],ssid,32);
 80085b0:	4a3d      	ldr	r2, [pc, #244]	@ (80086a8 <write_wifi_data+0x134>)
 80085b2:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 80085b6:	f102 0620 	add.w	r6, r2, #32
 80085ba:	6810      	ldr	r0, [r2, #0]
 80085bc:	6851      	ldr	r1, [r2, #4]
 80085be:	462c      	mov	r4, r5
 80085c0:	c403      	stmia	r4!, {r0, r1}
 80085c2:	3208      	adds	r2, #8
 80085c4:	42b2      	cmp	r2, r6
 80085c6:	4625      	mov	r5, r4
 80085c8:	d1f7      	bne.n	80085ba <write_wifi_data+0x46>
      memcpy((char *)&flash_buff[17],passwd,32);
 80085ca:	4a38      	ldr	r2, [pc, #224]	@ (80086ac <write_wifi_data+0x138>)
 80085cc:	4d38      	ldr	r5, [pc, #224]	@ (80086b0 <write_wifi_data+0x13c>)
 80085ce:	f102 0620 	add.w	r6, r2, #32
 80085d2:	6810      	ldr	r0, [r2, #0]
 80085d4:	6851      	ldr	r1, [r2, #4]
 80085d6:	462c      	mov	r4, r5
 80085d8:	c403      	stmia	r4!, {r0, r1}
 80085da:	3208      	adds	r2, #8
 80085dc:	42b2      	cmp	r2, r6
 80085de:	4625      	mov	r5, r4
 80085e0:	d1f7      	bne.n	80085d2 <write_wifi_data+0x5e>
      memcpy((char *)&flash_buff[25],host_url,64);
 80085e2:	4a34      	ldr	r2, [pc, #208]	@ (80086b4 <write_wifi_data+0x140>)
 80085e4:	4d34      	ldr	r5, [pc, #208]	@ (80086b8 <write_wifi_data+0x144>)
 80085e6:	f102 0640 	add.w	r6, r2, #64	@ 0x40
 80085ea:	6810      	ldr	r0, [r2, #0]
 80085ec:	6851      	ldr	r1, [r2, #4]
 80085ee:	462c      	mov	r4, r5
 80085f0:	c403      	stmia	r4!, {r0, r1}
 80085f2:	3208      	adds	r2, #8
 80085f4:	42b2      	cmp	r2, r6
 80085f6:	4625      	mov	r5, r4
 80085f8:	d1f7      	bne.n	80085ea <write_wifi_data+0x76>
      memcpy((char *)&flash_buff[41],ntp_url,64);
 80085fa:	4a30      	ldr	r2, [pc, #192]	@ (80086bc <write_wifi_data+0x148>)
 80085fc:	4d30      	ldr	r5, [pc, #192]	@ (80086c0 <write_wifi_data+0x14c>)
 80085fe:	f102 0640 	add.w	r6, r2, #64	@ 0x40
 8008602:	6810      	ldr	r0, [r2, #0]
 8008604:	6851      	ldr	r1, [r2, #4]
 8008606:	462c      	mov	r4, r5
 8008608:	c403      	stmia	r4!, {r0, r1}
 800860a:	3208      	adds	r2, #8
 800860c:	42b2      	cmp	r2, r6
 800860e:	4625      	mov	r5, r4
 8008610:	d1f7      	bne.n	8008602 <write_wifi_data+0x8e>
      memcpy((char *)&flash_buff[57],login_id,32);
 8008612:	4a2c      	ldr	r2, [pc, #176]	@ (80086c4 <write_wifi_data+0x150>)
 8008614:	4d2c      	ldr	r5, [pc, #176]	@ (80086c8 <write_wifi_data+0x154>)
 8008616:	f102 0620 	add.w	r6, r2, #32
 800861a:	6810      	ldr	r0, [r2, #0]
 800861c:	6851      	ldr	r1, [r2, #4]
 800861e:	462c      	mov	r4, r5
 8008620:	c403      	stmia	r4!, {r0, r1}
 8008622:	3208      	adds	r2, #8
 8008624:	42b2      	cmp	r2, r6
 8008626:	4625      	mov	r5, r4
 8008628:	d1f7      	bne.n	800861a <write_wifi_data+0xa6>
      memcpy((char *)&flash_buff[65],login_pw,32);
 800862a:	4a28      	ldr	r2, [pc, #160]	@ (80086cc <write_wifi_data+0x158>)
 800862c:	4d28      	ldr	r5, [pc, #160]	@ (80086d0 <write_wifi_data+0x15c>)
 800862e:	f102 0620 	add.w	r6, r2, #32
 8008632:	6810      	ldr	r0, [r2, #0]
 8008634:	6851      	ldr	r1, [r2, #4]
 8008636:	462c      	mov	r4, r5
 8008638:	c403      	stmia	r4!, {r0, r1}
 800863a:	3208      	adds	r2, #8
 800863c:	42b2      	cmp	r2, r6
 800863e:	4625      	mov	r5, r4
 8008640:	d1f7      	bne.n	8008632 <write_wifi_data+0xbe>
      memcpy((char *)&flash_buff[73],tx_topic,32);
 8008642:	4a24      	ldr	r2, [pc, #144]	@ (80086d4 <write_wifi_data+0x160>)
 8008644:	4d24      	ldr	r5, [pc, #144]	@ (80086d8 <write_wifi_data+0x164>)
 8008646:	f102 0620 	add.w	r6, r2, #32
 800864a:	6810      	ldr	r0, [r2, #0]
 800864c:	6851      	ldr	r1, [r2, #4]
 800864e:	462c      	mov	r4, r5
 8008650:	c403      	stmia	r4!, {r0, r1}
 8008652:	3208      	adds	r2, #8
 8008654:	42b2      	cmp	r2, r6
 8008656:	4625      	mov	r5, r4
 8008658:	d1f7      	bne.n	800864a <write_wifi_data+0xd6>
      memcpy((char *)&flash_buff[81],rx_topic,32);
 800865a:	4a20      	ldr	r2, [pc, #128]	@ (80086dc <write_wifi_data+0x168>)
 800865c:	4d20      	ldr	r5, [pc, #128]	@ (80086e0 <write_wifi_data+0x16c>)
 800865e:	f102 0620 	add.w	r6, r2, #32
 8008662:	6810      	ldr	r0, [r2, #0]
 8008664:	6851      	ldr	r1, [r2, #4]
 8008666:	462c      	mov	r4, r5
 8008668:	c403      	stmia	r4!, {r0, r1}
 800866a:	3208      	adds	r2, #8
 800866c:	42b2      	cmp	r2, r6
 800866e:	4625      	mov	r5, r4
 8008670:	d1f7      	bne.n	8008662 <write_wifi_data+0xee>
      flash_buff[90] = 0x68666805;
 8008672:	4a1c      	ldr	r2, [pc, #112]	@ (80086e4 <write_wifi_data+0x170>)
 8008674:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
      flash_write();
}
 8008678:	bc70      	pop	{r4, r5, r6}
      flash_write();
 800867a:	f7ff bf55 	b.w	8008528 <flash_write>
 800867e:	bf00      	nop
 8008680:	20000366 	.word	0x20000366
 8008684:	200027d8 	.word	0x200027d8
 8008688:	200003b0 	.word	0x200003b0
 800868c:	200003ae 	.word	0x200003ae
 8008690:	200003af 	.word	0x200003af
 8008694:	200003ac 	.word	0x200003ac
 8008698:	2000035f 	.word	0x2000035f
 800869c:	2000037c 	.word	0x2000037c
 80086a0:	20000378 	.word	0x20000378
 80086a4:	20000374 	.word	0x20000374
 80086a8:	20000339 	.word	0x20000339
 80086ac:	20000319 	.word	0x20000319
 80086b0:	2000281c 	.word	0x2000281c
 80086b4:	200002d9 	.word	0x200002d9
 80086b8:	2000283c 	.word	0x2000283c
 80086bc:	20000299 	.word	0x20000299
 80086c0:	2000287c 	.word	0x2000287c
 80086c4:	20000279 	.word	0x20000279
 80086c8:	200028bc 	.word	0x200028bc
 80086cc:	20000259 	.word	0x20000259
 80086d0:	200028dc 	.word	0x200028dc
 80086d4:	20000239 	.word	0x20000239
 80086d8:	200028fc 	.word	0x200028fc
 80086dc:	20000219 	.word	0x20000219
 80086e0:	2000291c 	.word	0x2000291c
 80086e4:	68666805 	.word	0x68666805

080086e8 <read_wifi_data>:


void read_wifi_data (void)
{
 80086e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      unsigned int check_wifi;
      flash_read();
 80086ec:	f7ff ff02 	bl	80084f4 <flash_read>
      wifi_power = flash_buff[0];
 80086f0:	4b62      	ldr	r3, [pc, #392]	@ (800887c <read_wifi_data+0x194>)
 80086f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800889c <read_wifi_data+0x1b4>
 80086f6:	781a      	ldrb	r2, [r3, #0]
      dhcp_disable = flash_buff[1];
 80086f8:	f8df e1a4 	ldr.w	lr, [pc, #420]	@ 80088a0 <read_wifi_data+0x1b8>
      wifi_power = flash_buff[0];
 80086fc:	f888 2000 	strb.w	r2, [r8]
      keep_alive_time = flash_buff[2];
 8008700:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 80088a4 <read_wifi_data+0x1bc>
      dhcp_disable = flash_buff[1];
 8008704:	791a      	ldrb	r2, [r3, #4]
 8008706:	f88e 2000 	strb.w	r2, [lr]
      mqtt_mode = flash_buff[3];
 800870a:	4f5d      	ldr	r7, [pc, #372]	@ (8008880 <read_wifi_data+0x198>)
      keep_alive_time = flash_buff[2];
 800870c:	7a1a      	ldrb	r2, [r3, #8]
 800870e:	f88c 2000 	strb.w	r2, [ip]
      mqtt_port = flash_buff[4];
 8008712:	4e5c      	ldr	r6, [pc, #368]	@ (8008884 <read_wifi_data+0x19c>)
      mqtt_mode = flash_buff[3];
 8008714:	7b1a      	ldrb	r2, [r3, #12]
 8008716:	703a      	strb	r2, [r7, #0]
      ap_mode = flash_buff[5];
 8008718:	4d5b      	ldr	r5, [pc, #364]	@ (8008888 <read_wifi_data+0x1a0>)
      mqtt_port = flash_buff[4];
 800871a:	8a1a      	ldrh	r2, [r3, #16]
 800871c:	8032      	strh	r2, [r6, #0]
      m_ip = flash_buff[6];
 800871e:	4c5b      	ldr	r4, [pc, #364]	@ (800888c <read_wifi_data+0x1a4>)
      ap_mode = flash_buff[5];
 8008720:	7d1a      	ldrb	r2, [r3, #20]
 8008722:	702a      	strb	r2, [r5, #0]
      m_ip = flash_buff[6];
 8008724:	699a      	ldr	r2, [r3, #24]
 8008726:	6022      	str	r2, [r4, #0]
      m_gw = flash_buff[7];
 8008728:	4a59      	ldr	r2, [pc, #356]	@ (8008890 <read_wifi_data+0x1a8>)
 800872a:	69d9      	ldr	r1, [r3, #28]
 800872c:	6011      	str	r1, [r2, #0]
      m_nm = flash_buff[8];
 800872e:	4a59      	ldr	r2, [pc, #356]	@ (8008894 <read_wifi_data+0x1ac>)
 8008730:	6a19      	ldr	r1, [r3, #32]
      memcpy(ssid, (char *)&flash_buff[9],32);
 8008732:	f8df 9174 	ldr.w	r9, [pc, #372]	@ 80088a8 <read_wifi_data+0x1c0>
      m_nm = flash_buff[8];
 8008736:	6011      	str	r1, [r2, #0]
      memcpy(ssid, (char *)&flash_buff[9],32);
 8008738:	f103 0a24 	add.w	sl, r3, #36	@ 0x24
 800873c:	f103 0b44 	add.w	fp, r3, #68	@ 0x44
 8008740:	4652      	mov	r2, sl
 8008742:	ca03      	ldmia	r2!, {r0, r1}
 8008744:	455a      	cmp	r2, fp
 8008746:	f8c9 0000 	str.w	r0, [r9]
 800874a:	f8c9 1004 	str.w	r1, [r9, #4]
 800874e:	4692      	mov	sl, r2
 8008750:	f109 0908 	add.w	r9, r9, #8
 8008754:	d1f4      	bne.n	8008740 <read_wifi_data+0x58>
      memcpy(passwd, (char *)&flash_buff[17],32);
 8008756:	f8df a154 	ldr.w	sl, [pc, #340]	@ 80088ac <read_wifi_data+0x1c4>
 800875a:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 80088b0 <read_wifi_data+0x1c8>
 800875e:	f10a 0b20 	add.w	fp, sl, #32
 8008762:	4652      	mov	r2, sl
 8008764:	ca03      	ldmia	r2!, {r0, r1}
 8008766:	455a      	cmp	r2, fp
 8008768:	f8c9 0000 	str.w	r0, [r9]
 800876c:	f8c9 1004 	str.w	r1, [r9, #4]
 8008770:	4692      	mov	sl, r2
 8008772:	f109 0908 	add.w	r9, r9, #8
 8008776:	d1f4      	bne.n	8008762 <read_wifi_data+0x7a>
      memcpy(host_url, (char *)&flash_buff[25],64);
 8008778:	f8df a138 	ldr.w	sl, [pc, #312]	@ 80088b4 <read_wifi_data+0x1cc>
 800877c:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 80088b8 <read_wifi_data+0x1d0>
 8008780:	f10a 0b40 	add.w	fp, sl, #64	@ 0x40
 8008784:	4652      	mov	r2, sl
 8008786:	ca03      	ldmia	r2!, {r0, r1}
 8008788:	455a      	cmp	r2, fp
 800878a:	f8c9 0000 	str.w	r0, [r9]
 800878e:	f8c9 1004 	str.w	r1, [r9, #4]
 8008792:	4692      	mov	sl, r2
 8008794:	f109 0908 	add.w	r9, r9, #8
 8008798:	d1f4      	bne.n	8008784 <read_wifi_data+0x9c>
      memcpy(ntp_url, (char *)&flash_buff[41],64);
 800879a:	f8df a120 	ldr.w	sl, [pc, #288]	@ 80088bc <read_wifi_data+0x1d4>
 800879e:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 80088c0 <read_wifi_data+0x1d8>
 80087a2:	f10a 0b40 	add.w	fp, sl, #64	@ 0x40
 80087a6:	4652      	mov	r2, sl
 80087a8:	ca03      	ldmia	r2!, {r0, r1}
 80087aa:	455a      	cmp	r2, fp
 80087ac:	f8c9 0000 	str.w	r0, [r9]
 80087b0:	f8c9 1004 	str.w	r1, [r9, #4]
 80087b4:	4692      	mov	sl, r2
 80087b6:	f109 0908 	add.w	r9, r9, #8
 80087ba:	d1f4      	bne.n	80087a6 <read_wifi_data+0xbe>
      memcpy(login_id, (char *)&flash_buff[57],32);
 80087bc:	f8df a104 	ldr.w	sl, [pc, #260]	@ 80088c4 <read_wifi_data+0x1dc>
 80087c0:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 80088c8 <read_wifi_data+0x1e0>
 80087c4:	f10a 0b20 	add.w	fp, sl, #32
 80087c8:	4652      	mov	r2, sl
 80087ca:	ca03      	ldmia	r2!, {r0, r1}
 80087cc:	455a      	cmp	r2, fp
 80087ce:	f8c9 0000 	str.w	r0, [r9]
 80087d2:	f8c9 1004 	str.w	r1, [r9, #4]
 80087d6:	4692      	mov	sl, r2
 80087d8:	f109 0908 	add.w	r9, r9, #8
 80087dc:	d1f4      	bne.n	80087c8 <read_wifi_data+0xe0>
      memcpy(login_pw, (char *)&flash_buff[65],32);
 80087de:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 80088cc <read_wifi_data+0x1e4>
 80087e2:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 80088d0 <read_wifi_data+0x1e8>
 80087e6:	f10a 0b20 	add.w	fp, sl, #32
 80087ea:	4652      	mov	r2, sl
 80087ec:	ca03      	ldmia	r2!, {r0, r1}
 80087ee:	455a      	cmp	r2, fp
 80087f0:	f8c9 0000 	str.w	r0, [r9]
 80087f4:	f8c9 1004 	str.w	r1, [r9, #4]
 80087f8:	4692      	mov	sl, r2
 80087fa:	f109 0908 	add.w	r9, r9, #8
 80087fe:	d1f4      	bne.n	80087ea <read_wifi_data+0x102>
      memcpy(tx_topic, (char *)&flash_buff[73],32);
 8008800:	f8df a0d0 	ldr.w	sl, [pc, #208]	@ 80088d4 <read_wifi_data+0x1ec>
 8008804:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 80088d8 <read_wifi_data+0x1f0>
 8008808:	f10a 0b20 	add.w	fp, sl, #32
 800880c:	4652      	mov	r2, sl
 800880e:	ca03      	ldmia	r2!, {r0, r1}
 8008810:	455a      	cmp	r2, fp
 8008812:	f8c9 0000 	str.w	r0, [r9]
 8008816:	f8c9 1004 	str.w	r1, [r9, #4]
 800881a:	4692      	mov	sl, r2
 800881c:	f109 0908 	add.w	r9, r9, #8
 8008820:	d1f4      	bne.n	800880c <read_wifi_data+0x124>
      memcpy(rx_topic, (char *)&flash_buff[81],32);
 8008822:	f8df a0b8 	ldr.w	sl, [pc, #184]	@ 80088dc <read_wifi_data+0x1f4>
 8008826:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 80088e0 <read_wifi_data+0x1f8>
 800882a:	f10a 0b20 	add.w	fp, sl, #32
 800882e:	4652      	mov	r2, sl
 8008830:	ca03      	ldmia	r2!, {r0, r1}
 8008832:	455a      	cmp	r2, fp
 8008834:	f8c9 0000 	str.w	r0, [r9]
 8008838:	f8c9 1004 	str.w	r1, [r9, #4]
 800883c:	4692      	mov	sl, r2
 800883e:	f109 0908 	add.w	r9, r9, #8
 8008842:	d1f4      	bne.n	800882e <read_wifi_data+0x146>
      check_wifi = flash_buff[90];
      if (check_wifi != 0x68666805) {
 8008844:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8008848:	4b13      	ldr	r3, [pc, #76]	@ (8008898 <read_wifi_data+0x1b0>)
 800884a:	429a      	cmp	r2, r3
 800884c:	d013      	beq.n	8008876 <read_wifi_data+0x18e>
         wifi_power = 40;
 800884e:	2328      	movs	r3, #40	@ 0x28
 8008850:	f888 3000 	strb.w	r3, [r8]
         dhcp_disable = 0;
         keep_alive_time = 60;
 8008854:	223c      	movs	r2, #60	@ 0x3c
         dhcp_disable = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	f88e 3000 	strb.w	r3, [lr]
         keep_alive_time = 60;
 800885c:	f88c 2000 	strb.w	r2, [ip]
         mqtt_mode = 0;
         mqtt_port = 1883;
 8008860:	f240 725b 	movw	r2, #1883	@ 0x75b
         mqtt_mode = 0;
 8008864:	703b      	strb	r3, [r7, #0]
         mqtt_port = 1883;
 8008866:	8032      	strh	r2, [r6, #0]
         ap_mode = 1;
 8008868:	2201      	movs	r2, #1
 800886a:	702a      	strb	r2, [r5, #0]
         m_ip = 0;
         m_gw = 0;
 800886c:	4a08      	ldr	r2, [pc, #32]	@ (8008890 <read_wifi_data+0x1a8>)
         m_ip = 0;
 800886e:	6023      	str	r3, [r4, #0]
         m_gw = 0;
 8008870:	6013      	str	r3, [r2, #0]
         m_nm = 0;
 8008872:	4a08      	ldr	r2, [pc, #32]	@ (8008894 <read_wifi_data+0x1ac>)
 8008874:	6013      	str	r3, [r2, #0]
      }
}
 8008876:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887a:	bf00      	nop
 800887c:	200027d8 	.word	0x200027d8
 8008880:	200003af 	.word	0x200003af
 8008884:	200003ac 	.word	0x200003ac
 8008888:	2000035f 	.word	0x2000035f
 800888c:	2000037c 	.word	0x2000037c
 8008890:	20000378 	.word	0x20000378
 8008894:	20000374 	.word	0x20000374
 8008898:	68666805 	.word	0x68666805
 800889c:	20000366 	.word	0x20000366
 80088a0:	200003b0 	.word	0x200003b0
 80088a4:	200003ae 	.word	0x200003ae
 80088a8:	20000339 	.word	0x20000339
 80088ac:	2000281c 	.word	0x2000281c
 80088b0:	20000319 	.word	0x20000319
 80088b4:	2000283c 	.word	0x2000283c
 80088b8:	200002d9 	.word	0x200002d9
 80088bc:	2000287c 	.word	0x2000287c
 80088c0:	20000299 	.word	0x20000299
 80088c4:	200028bc 	.word	0x200028bc
 80088c8:	20000279 	.word	0x20000279
 80088cc:	200028dc 	.word	0x200028dc
 80088d0:	20000259 	.word	0x20000259
 80088d4:	200028fc 	.word	0x200028fc
 80088d8:	20000239 	.word	0x20000239
 80088dc:	2000291c 	.word	0x2000291c
 80088e0:	20000219 	.word	0x20000219

080088e4 <base64_encode>:


unsigned short base64_encode (const unsigned char* in, unsigned short inlen, char* out)
{
 80088e4:	b5f0      	push	{r4, r5, r6, r7, lr}
      unsigned short i;
      unsigned short j;
      unsigned char c;
      unsigned char l;
      s = 0;
      l = 0;
 80088e6:	2300      	movs	r3, #0
               s = 1;
               out[j++] = base64en[(c >> 2) & 0x3F];
               break;
             case 1:
               s = 2;
               out[j++] = base64en[((l & 0x3) << 4) | ((c >> 4) & 0xF)];
 80088e8:	4f31      	ldr	r7, [pc, #196]	@ (80089b0 <base64_encode+0xcc>)
 80088ea:	4605      	mov	r5, r0
 80088ec:	4401      	add	r1, r0
      s = 0;
 80088ee:	469c      	mov	ip, r3
      for (i=j=0;i<inlen;i++) {
 80088f0:	4618      	mov	r0, r3
 80088f2:	42a9      	cmp	r1, r5
               out[j++] = base64en[(c >> 2) & 0x3F];
 80088f4:	eb02 0400 	add.w	r4, r2, r0
      for (i=j=0;i<inlen;i++) {
 80088f8:	d108      	bne.n	800890c <base64_encode+0x28>
               out[j++] = base64en[c & 0x3F];
               break;
          }
          l = c;
      }
      switch (s) {
 80088fa:	f1bc 0f01 	cmp.w	ip, #1
 80088fe:	d03a      	beq.n	8008976 <base64_encode+0x92>
 8008900:	f1bc 0f02 	cmp.w	ip, #2
 8008904:	d047      	beq.n	8008996 <base64_encode+0xb2>
         case 2:
           out[j++] = base64en[(l & 0xF) << 2];
           out[j++] = BASE64_PAD;
           break;
      }
      out[j] = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	5413      	strb	r3, [r2, r0]
      return j;
}
 800890a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          switch (s) {
 800890c:	f1bc 0f01 	cmp.w	ip, #1
          c = in[i];
 8008910:	f815 6b01 	ldrb.w	r6, [r5], #1
          switch (s) {
 8008914:	d00e      	beq.n	8008934 <base64_encode+0x50>
 8008916:	f1bc 0f02 	cmp.w	ip, #2
 800891a:	d017      	beq.n	800894c <base64_encode+0x68>
 800891c:	f1bc 0f00 	cmp.w	ip, #0
 8008920:	d106      	bne.n	8008930 <base64_encode+0x4c>
               out[j++] = base64en[(c >> 2) & 0x3F];
 8008922:	08b3      	lsrs	r3, r6, #2
 8008924:	3001      	adds	r0, #1
 8008926:	5cfb      	ldrb	r3, [r7, r3]
 8008928:	7023      	strb	r3, [r4, #0]
 800892a:	b280      	uxth	r0, r0
               s = 1;
 800892c:	f04f 0c01 	mov.w	ip, #1
          l = c;
 8008930:	4633      	mov	r3, r6
 8008932:	e7de      	b.n	80088f2 <base64_encode+0xe>
               out[j++] = base64en[((l & 0x3) << 4) | ((c >> 4) & 0xF)];
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800893a:	ea43 1316 	orr.w	r3, r3, r6, lsr #4
 800893e:	3001      	adds	r0, #1
 8008940:	5cfb      	ldrb	r3, [r7, r3]
 8008942:	7023      	strb	r3, [r4, #0]
 8008944:	b280      	uxth	r0, r0
               s = 2;
 8008946:	f04f 0c02 	mov.w	ip, #2
               break;
 800894a:	e7f1      	b.n	8008930 <base64_encode+0x4c>
               out[j++] = base64en[((l & 0xF) << 2) | ((c >> 6) & 0x3)];
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8008952:	ea43 1396 	orr.w	r3, r3, r6, lsr #6
 8008956:	f100 0c01 	add.w	ip, r0, #1
 800895a:	5cfb      	ldrb	r3, [r7, r3]
 800895c:	7023      	strb	r3, [r4, #0]
               out[j++] = base64en[c & 0x3F];
 800895e:	f006 033f 	and.w	r3, r6, #63	@ 0x3f
               out[j++] = base64en[((l & 0xF) << 2) | ((c >> 6) & 0x3)];
 8008962:	fa1f fc8c 	uxth.w	ip, ip
               out[j++] = base64en[c & 0x3F];
 8008966:	5cfb      	ldrb	r3, [r7, r3]
 8008968:	f802 300c 	strb.w	r3, [r2, ip]
 800896c:	3002      	adds	r0, #2
 800896e:	b280      	uxth	r0, r0
               s = 0;
 8008970:	f04f 0c00 	mov.w	ip, #0
               break;
 8008974:	e7dc      	b.n	8008930 <base64_encode+0x4c>
           out[j++] = base64en[(l & 0x3) << 4];
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	490d      	ldr	r1, [pc, #52]	@ (80089b0 <base64_encode+0xcc>)
 800897a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800897e:	5ccb      	ldrb	r3, [r1, r3]
 8008980:	7023      	strb	r3, [r4, #0]
 8008982:	1c41      	adds	r1, r0, #1
           out[j++] = BASE64_PAD;
 8008984:	1c83      	adds	r3, r0, #2
 8008986:	b29b      	uxth	r3, r3
 8008988:	b289      	uxth	r1, r1
 800898a:	243d      	movs	r4, #61	@ 0x3d
           out[j++] = BASE64_PAD;
 800898c:	3003      	adds	r0, #3
           out[j++] = BASE64_PAD;
 800898e:	5454      	strb	r4, [r2, r1]
           out[j++] = BASE64_PAD;
 8008990:	b280      	uxth	r0, r0
 8008992:	54d4      	strb	r4, [r2, r3]
           break;
 8008994:	e7b7      	b.n	8008906 <base64_encode+0x22>
           out[j++] = base64en[(l & 0xF) << 2];
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4d05      	ldr	r5, [pc, #20]	@ (80089b0 <base64_encode+0xcc>)
 800899a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800899e:	1c41      	adds	r1, r0, #1
 80089a0:	5ceb      	ldrb	r3, [r5, r3]
 80089a2:	7023      	strb	r3, [r4, #0]
 80089a4:	b289      	uxth	r1, r1
           out[j++] = BASE64_PAD;
 80089a6:	3002      	adds	r0, #2
 80089a8:	233d      	movs	r3, #61	@ 0x3d
 80089aa:	5453      	strb	r3, [r2, r1]
 80089ac:	b280      	uxth	r0, r0
           break;
 80089ae:	e7aa      	b.n	8008906 <base64_encode+0x22>
 80089b0:	0800f8e0 	.word	0x0800f8e0

080089b4 <base64_decode>:


unsigned short base64_decode (const char* in, unsigned short inlen, unsigned char* out)
{
 80089b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089b6:	4607      	mov	r7, r0
      unsigned short i;
      unsigned short j;
      unsigned char c;
      if (inlen & 0x3) {
 80089b8:	f011 0003 	ands.w	r0, r1, #3
 80089bc:	d038      	beq.n	8008a30 <base64_decode+0x7c>
         return 0;
 80089be:	2000      	movs	r0, #0
               out[j++] |= c;
               break;
          }
      }
      return j;
}
 80089c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
               out[j++] |= (c >> 4) & 0x3;
 80089c2:	f894 e000 	ldrb.w	lr, [r4]
 80089c6:	f3c3 1501 	ubfx	r5, r3, #4, #2
 80089ca:	3001      	adds	r0, #1
 80089cc:	ea45 050e 	orr.w	r5, r5, lr
 80089d0:	b280      	uxth	r0, r0
 80089d2:	7025      	strb	r5, [r4, #0]
               out[j] = (c & 0xF) << 4;
 80089d4:	011b      	lsls	r3, r3, #4
               out[j] = (c & 0x3) << 6;
 80089d6:	5413      	strb	r3, [r2, r0]
      for (i=j=0;i<inlen;i++) {
 80089d8:	3601      	adds	r6, #1
 80089da:	b2b5      	uxth	r5, r6
 80089dc:	428d      	cmp	r5, r1
 80089de:	d2ef      	bcs.n	80089c0 <base64_decode+0xc>
          if (in[i] == BASE64_PAD) {
 80089e0:	5dbb      	ldrb	r3, [r7, r6]
 80089e2:	2b3d      	cmp	r3, #61	@ 0x3d
 80089e4:	d0ec      	beq.n	80089c0 <base64_decode+0xc>
          if (in[i] < BASE64DE_FIRST || in[i] > BASE64DE_LAST) {
 80089e6:	f1a3 042b 	sub.w	r4, r3, #43	@ 0x2b
 80089ea:	2c4f      	cmp	r4, #79	@ 0x4f
 80089ec:	d8e7      	bhi.n	80089be <base64_decode+0xa>
          c = base64de[(unsigned char)in[i]];
 80089ee:	f81c 3003 	ldrb.w	r3, [ip, r3]
          if (c == 255) {
 80089f2:	2bff      	cmp	r3, #255	@ 0xff
 80089f4:	d0e3      	beq.n	80089be <base64_decode+0xa>
          switch (i & 0x3) {
 80089f6:	f005 0503 	and.w	r5, r5, #3
 80089fa:	2d02      	cmp	r5, #2
               out[j] = (c << 2) & 0xFF;
 80089fc:	eb02 0400 	add.w	r4, r2, r0
          switch (i & 0x3) {
 8008a00:	d006      	beq.n	8008a10 <base64_decode+0x5c>
 8008a02:	2d03      	cmp	r5, #3
 8008a04:	d00f      	beq.n	8008a26 <base64_decode+0x72>
 8008a06:	2d01      	cmp	r5, #1
 8008a08:	d0db      	beq.n	80089c2 <base64_decode+0xe>
               out[j] = (c << 2) & 0xFF;
 8008a0a:	009b      	lsls	r3, r3, #2
               out[j++] |= c;
 8008a0c:	7023      	strb	r3, [r4, #0]
               break;
 8008a0e:	e7e3      	b.n	80089d8 <base64_decode+0x24>
               out[j++] |= (c >> 2) & 0xF;
 8008a10:	f894 e000 	ldrb.w	lr, [r4]
 8008a14:	f3c3 0583 	ubfx	r5, r3, #2, #4
 8008a18:	3001      	adds	r0, #1
 8008a1a:	ea45 050e 	orr.w	r5, r5, lr
 8008a1e:	b280      	uxth	r0, r0
 8008a20:	7025      	strb	r5, [r4, #0]
               out[j] = (c & 0x3) << 6;
 8008a22:	019b      	lsls	r3, r3, #6
 8008a24:	e7d7      	b.n	80089d6 <base64_decode+0x22>
               out[j++] |= c;
 8008a26:	7825      	ldrb	r5, [r4, #0]
 8008a28:	3001      	adds	r0, #1
 8008a2a:	b280      	uxth	r0, r0
 8008a2c:	432b      	orrs	r3, r5
 8008a2e:	e7ed      	b.n	8008a0c <base64_decode+0x58>
          c = base64de[(unsigned char)in[i]];
 8008a30:	f8df c004 	ldr.w	ip, [pc, #4]	@ 8008a38 <base64_decode+0x84>
 8008a34:	4606      	mov	r6, r0
 8008a36:	e7d0      	b.n	80089da <base64_decode+0x26>
 8008a38:	0800f860 	.word	0x0800f860

08008a3c <USART1_IRQHandler>:


void USART1_IRQHandler (void)
{
 8008a3c:	b510      	push	{r4, lr}
      if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 8008a3e:	482e      	ldr	r0, [pc, #184]	@ (8008af8 <USART1_IRQHandler+0xbc>)
 8008a40:	f240 5125 	movw	r1, #1317	@ 0x525
 8008a44:	f005 faa2 	bl	800df8c <USART_GetITStatus>
 8008a48:	b1b0      	cbz	r0, 8008a78 <USART1_IRQHandler+0x3c>
         /* Read one byte from the receive data register */
         rxbuff1[rxcnt1] = USART_ReceiveData(USART1);
 8008a4a:	482b      	ldr	r0, [pc, #172]	@ (8008af8 <USART1_IRQHandler+0xbc>)
 8008a4c:	f005 fa82 	bl	800df54 <USART_ReceiveData>
 8008a50:	4a2a      	ldr	r2, [pc, #168]	@ (8008afc <USART1_IRQHandler+0xc0>)
 8008a52:	492b      	ldr	r1, [pc, #172]	@ (8008b00 <USART1_IRQHandler+0xc4>)
 8008a54:	8813      	ldrh	r3, [r2, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	54c8      	strb	r0, [r1, r3]
         //USART_SendData(USART3, rxbuff1[rxcnt1]);
         //rxcnt1 = 0;
         rxcnt1++;
 8008a5a:	8813      	ldrh	r3, [r2, #0]
         rx_led = 1;
         rxck1 = 0;
         USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8008a5c:	4826      	ldr	r0, [pc, #152]	@ (8008af8 <USART1_IRQHandler+0xbc>)
         rxcnt1++;
 8008a5e:	3301      	adds	r3, #1
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	8013      	strh	r3, [r2, #0]
         rx_led = 1;
 8008a64:	4b27      	ldr	r3, [pc, #156]	@ (8008b04 <USART1_IRQHandler+0xc8>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	701a      	strb	r2, [r3, #0]
         rxck1 = 0;
 8008a6a:	4b27      	ldr	r3, [pc, #156]	@ (8008b08 <USART1_IRQHandler+0xcc>)
 8008a6c:	2200      	movs	r2, #0
         USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8008a6e:	f240 5125 	movw	r1, #1317	@ 0x525
         rxck1 = 0;
 8008a72:	701a      	strb	r2, [r3, #0]
         USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8008a74:	f005 faaa 	bl	800dfcc <USART_ClearITPendingBit>
      }
      if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET) {
 8008a78:	481f      	ldr	r0, [pc, #124]	@ (8008af8 <USART1_IRQHandler+0xbc>)
 8008a7a:	f240 7127 	movw	r1, #1831	@ 0x727
 8008a7e:	f005 fa85 	bl	800df8c <USART_GetITStatus>
 8008a82:	b1b8      	cbz	r0, 8008ab4 <USART1_IRQHandler+0x78>
         /* Write one byte to the transmit data register */
      	 if (txcnt1 < maxtx1) {
 8008a84:	4c21      	ldr	r4, [pc, #132]	@ (8008b0c <USART1_IRQHandler+0xd0>)
 8008a86:	4b22      	ldr	r3, [pc, #136]	@ (8008b10 <USART1_IRQHandler+0xd4>)
 8008a88:	8822      	ldrh	r2, [r4, #0]
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b292      	uxth	r2, r2
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d224      	bcs.n	8008ade <USART1_IRQHandler+0xa2>
            USART_SendData(USART1, txbuff1[txcnt1]);
 8008a94:	8823      	ldrh	r3, [r4, #0]
 8008a96:	4a1f      	ldr	r2, [pc, #124]	@ (8008b14 <USART1_IRQHandler+0xd8>)
 8008a98:	4817      	ldr	r0, [pc, #92]	@ (8008af8 <USART1_IRQHandler+0xbc>)
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	5cd1      	ldrb	r1, [r2, r3]
 8008a9e:	f005 fa55 	bl	800df4c <USART_SendData>
      	    txcnt1++;
 8008aa2:	8823      	ldrh	r3, [r4, #0]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	8023      	strh	r3, [r4, #0]
      	 } else {
      	    /* Disable the USART1 Transmit interrupt */
      	    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
      	    USART_ITConfig(USART1, USART_IT_TC, ENABLE);
      	 }
      	 USART_ClearITPendingBit(USART1, USART_IT_TXE);
 8008aaa:	4813      	ldr	r0, [pc, #76]	@ (8008af8 <USART1_IRQHandler+0xbc>)
 8008aac:	f240 7127 	movw	r1, #1831	@ 0x727
 8008ab0:	f005 fa8c 	bl	800dfcc <USART_ClearITPendingBit>
      }
      if (USART_GetITStatus(USART1, USART_IT_TC) != RESET) {
 8008ab4:	4810      	ldr	r0, [pc, #64]	@ (8008af8 <USART1_IRQHandler+0xbc>)
 8008ab6:	f240 6126 	movw	r1, #1574	@ 0x626
 8008aba:	f005 fa67 	bl	800df8c <USART_GetITStatus>
 8008abe:	b168      	cbz	r0, 8008adc <USART1_IRQHandler+0xa0>
      	 USART_ITConfig(USART1, USART_IT_TC, DISABLE);
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	480d      	ldr	r0, [pc, #52]	@ (8008af8 <USART1_IRQHandler+0xbc>)
 8008ac4:	f240 6126 	movw	r1, #1574	@ 0x626
 8008ac8:	f005 fa48 	bl	800df5c <USART_ITConfig>
      	 USART_ClearITPendingBit(USART1, USART_IT_TC);
 8008acc:	480a      	ldr	r0, [pc, #40]	@ (8008af8 <USART1_IRQHandler+0xbc>)
 8008ace:	f240 6126 	movw	r1, #1574	@ 0x626
 8008ad2:	f005 fa7b 	bl	800dfcc <USART_ClearITPendingBit>
         tx_led = 0;
 8008ad6:	4b10      	ldr	r3, [pc, #64]	@ (8008b18 <USART1_IRQHandler+0xdc>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	701a      	strb	r2, [r3, #0]
      }
}
 8008adc:	bd10      	pop	{r4, pc}
      	    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8008ade:	4806      	ldr	r0, [pc, #24]	@ (8008af8 <USART1_IRQHandler+0xbc>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f240 7127 	movw	r1, #1831	@ 0x727
 8008ae6:	f005 fa39 	bl	800df5c <USART_ITConfig>
      	    USART_ITConfig(USART1, USART_IT_TC, ENABLE);
 8008aea:	4803      	ldr	r0, [pc, #12]	@ (8008af8 <USART1_IRQHandler+0xbc>)
 8008aec:	2201      	movs	r2, #1
 8008aee:	f240 6126 	movw	r1, #1574	@ 0x626
 8008af2:	f005 fa33 	bl	800df5c <USART_ITConfig>
 8008af6:	e7d8      	b.n	8008aaa <USART1_IRQHandler+0x6e>
 8008af8:	40011000 	.word	0x40011000
 8008afc:	20002bf2 	.word	0x20002bf2
 8008b00:	200026d5 	.word	0x200026d5
 8008b04:	20002bde 	.word	0x20002bde
 8008b08:	20002be1 	.word	0x20002be1
 8008b0c:	20002bf0 	.word	0x20002bf0
 8008b10:	20002bee 	.word	0x20002bee
 8008b14:	200025d5 	.word	0x200025d5
 8008b18:	20002bdd 	.word	0x20002bdd

08008b1c <USART2_IRQHandler>:


void USART2_IRQHandler (void)
{
 8008b1c:	b510      	push	{r4, lr}
      if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
 8008b1e:	4830      	ldr	r0, [pc, #192]	@ (8008be0 <USART2_IRQHandler+0xc4>)
 8008b20:	f240 5125 	movw	r1, #1317	@ 0x525
 8008b24:	f005 fa32 	bl	800df8c <USART_GetITStatus>
 8008b28:	b1b0      	cbz	r0, 8008b58 <USART2_IRQHandler+0x3c>
         /* Read one byte from the receive data register */
         rxbuff2[rxcnt2] = USART_ReceiveData(USART2);
 8008b2a:	482d      	ldr	r0, [pc, #180]	@ (8008be0 <USART2_IRQHandler+0xc4>)
 8008b2c:	f005 fa12 	bl	800df54 <USART_ReceiveData>
 8008b30:	4a2c      	ldr	r2, [pc, #176]	@ (8008be4 <USART2_IRQHandler+0xc8>)
 8008b32:	492d      	ldr	r1, [pc, #180]	@ (8008be8 <USART2_IRQHandler+0xcc>)
 8008b34:	8813      	ldrh	r3, [r2, #0]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	54c8      	strb	r0, [r1, r3]
         rxcnt2++;
 8008b3a:	8813      	ldrh	r3, [r2, #0]
         rx_led = 1;
         rxck2 = 0;
         USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8008b3c:	4828      	ldr	r0, [pc, #160]	@ (8008be0 <USART2_IRQHandler+0xc4>)
         rxcnt2++;
 8008b3e:	3301      	adds	r3, #1
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	8013      	strh	r3, [r2, #0]
         rx_led = 1;
 8008b44:	4b29      	ldr	r3, [pc, #164]	@ (8008bec <USART2_IRQHandler+0xd0>)
 8008b46:	2201      	movs	r2, #1
 8008b48:	701a      	strb	r2, [r3, #0]
         rxck2 = 0;
 8008b4a:	4b29      	ldr	r3, [pc, #164]	@ (8008bf0 <USART2_IRQHandler+0xd4>)
 8008b4c:	2200      	movs	r2, #0
         USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8008b4e:	f240 5125 	movw	r1, #1317	@ 0x525
         rxck2 = 0;
 8008b52:	701a      	strb	r2, [r3, #0]
         USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8008b54:	f005 fa3a 	bl	800dfcc <USART_ClearITPendingBit>
      }
      if (USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
 8008b58:	4821      	ldr	r0, [pc, #132]	@ (8008be0 <USART2_IRQHandler+0xc4>)
 8008b5a:	f240 7127 	movw	r1, #1831	@ 0x727
 8008b5e:	f005 fa15 	bl	800df8c <USART_GetITStatus>
 8008b62:	b1b8      	cbz	r0, 8008b94 <USART2_IRQHandler+0x78>
         /* Write one byte to the transmit data register */
      	 if (txcnt2 < maxtx2) {
 8008b64:	4c23      	ldr	r4, [pc, #140]	@ (8008bf4 <USART2_IRQHandler+0xd8>)
 8008b66:	4b24      	ldr	r3, [pc, #144]	@ (8008bf8 <USART2_IRQHandler+0xdc>)
 8008b68:	8822      	ldrh	r2, [r4, #0]
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	b292      	uxth	r2, r2
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d227      	bcs.n	8008bc4 <USART2_IRQHandler+0xa8>
            USART_SendData(USART2, txbuff2[txcnt2]);
 8008b74:	8823      	ldrh	r3, [r4, #0]
 8008b76:	4a21      	ldr	r2, [pc, #132]	@ (8008bfc <USART2_IRQHandler+0xe0>)
 8008b78:	4819      	ldr	r0, [pc, #100]	@ (8008be0 <USART2_IRQHandler+0xc4>)
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	5cd1      	ldrb	r1, [r2, r3]
 8008b7e:	f005 f9e5 	bl	800df4c <USART_SendData>
      	    txcnt2++;
 8008b82:	8823      	ldrh	r3, [r4, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	8023      	strh	r3, [r4, #0]
      	 } else {
      	    /* Disable the USART2 Transmit interrupt */
      	    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
      	    USART_ITConfig(USART2, USART_IT_TC, ENABLE);
      	 }
      	 USART_ClearITPendingBit(USART2, USART_IT_TXE);
 8008b8a:	4815      	ldr	r0, [pc, #84]	@ (8008be0 <USART2_IRQHandler+0xc4>)
 8008b8c:	f240 7127 	movw	r1, #1831	@ 0x727
 8008b90:	f005 fa1c 	bl	800dfcc <USART_ClearITPendingBit>
      }
      if (USART_GetITStatus(USART2, USART_IT_TC) != RESET) {
 8008b94:	4812      	ldr	r0, [pc, #72]	@ (8008be0 <USART2_IRQHandler+0xc4>)
 8008b96:	f240 6126 	movw	r1, #1574	@ 0x626
 8008b9a:	f005 f9f7 	bl	800df8c <USART_GetITStatus>
 8008b9e:	b180      	cbz	r0, 8008bc2 <USART2_IRQHandler+0xa6>
      	 USART_ITConfig(USART2, USART_IT_TC, DISABLE);
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	480f      	ldr	r0, [pc, #60]	@ (8008be0 <USART2_IRQHandler+0xc4>)
 8008ba4:	f240 6126 	movw	r1, #1574	@ 0x626
 8008ba8:	f005 f9d8 	bl	800df5c <USART_ITConfig>
      	 USART_ClearITPendingBit(USART2, USART_IT_TC);
 8008bac:	480c      	ldr	r0, [pc, #48]	@ (8008be0 <USART2_IRQHandler+0xc4>)
 8008bae:	f240 6126 	movw	r1, #1574	@ 0x626
 8008bb2:	f005 fa0b 	bl	800dfcc <USART_ClearITPendingBit>
         tx_led = 0;
 8008bb6:	4a12      	ldr	r2, [pc, #72]	@ (8008c00 <USART2_IRQHandler+0xe4>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	7013      	strb	r3, [r2, #0]
         TXEN_485 = 0;
 8008bbc:	4a11      	ldr	r2, [pc, #68]	@ (8008c04 <USART2_IRQHandler+0xe8>)
 8008bbe:	f8c2 32a0 	str.w	r3, [r2, #672]	@ 0x2a0
      }
}
 8008bc2:	bd10      	pop	{r4, pc}
      	    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8008bc4:	4806      	ldr	r0, [pc, #24]	@ (8008be0 <USART2_IRQHandler+0xc4>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f240 7127 	movw	r1, #1831	@ 0x727
 8008bcc:	f005 f9c6 	bl	800df5c <USART_ITConfig>
      	    USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 8008bd0:	4803      	ldr	r0, [pc, #12]	@ (8008be0 <USART2_IRQHandler+0xc4>)
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f240 6126 	movw	r1, #1574	@ 0x626
 8008bd8:	f005 f9c0 	bl	800df5c <USART_ITConfig>
 8008bdc:	e7d5      	b.n	8008b8a <USART2_IRQHandler+0x6e>
 8008bde:	bf00      	nop
 8008be0:	40004400 	.word	0x40004400
 8008be4:	20002bec 	.word	0x20002bec
 8008be8:	200024d5 	.word	0x200024d5
 8008bec:	20002bde 	.word	0x20002bde
 8008bf0:	20002be0 	.word	0x20002be0
 8008bf4:	20002bea 	.word	0x20002bea
 8008bf8:	20002be8 	.word	0x20002be8
 8008bfc:	200023d5 	.word	0x200023d5
 8008c00:	20002bdd 	.word	0x20002bdd
 8008c04:	42430000 	.word	0x42430000

08008c08 <USART3_IRQHandler>:


void USART3_IRQHandler (void)
{
 8008c08:	b510      	push	{r4, lr}
      if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) {
 8008c0a:	4831      	ldr	r0, [pc, #196]	@ (8008cd0 <USART3_IRQHandler+0xc8>)
 8008c0c:	f240 5125 	movw	r1, #1317	@ 0x525
 8008c10:	f005 f9bc 	bl	800df8c <USART_GetITStatus>
 8008c14:	b1e0      	cbz	r0, 8008c50 <USART3_IRQHandler+0x48>
         /* Read one byte from the receive data register */
         rxbuff3[rxcnt3] = USART_ReceiveData(USART3);
 8008c16:	4c2f      	ldr	r4, [pc, #188]	@ (8008cd4 <USART3_IRQHandler+0xcc>)
 8008c18:	482d      	ldr	r0, [pc, #180]	@ (8008cd0 <USART3_IRQHandler+0xc8>)
 8008c1a:	f005 f99b 	bl	800df54 <USART_ReceiveData>
 8008c1e:	8823      	ldrh	r3, [r4, #0]
 8008c20:	4a2d      	ldr	r2, [pc, #180]	@ (8008cd8 <USART3_IRQHandler+0xd0>)
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	54d0      	strb	r0, [r2, r3]
         USART_SendData(USART1, rxbuff3[rxcnt3]);
 8008c26:	8823      	ldrh	r3, [r4, #0]
 8008c28:	482c      	ldr	r0, [pc, #176]	@ (8008cdc <USART3_IRQHandler+0xd4>)
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	5cd1      	ldrb	r1, [r2, r3]
 8008c2e:	f005 f98d 	bl	800df4c <USART_SendData>
         //rxcnt3 = 0;
         rxcnt3++;
 8008c32:	8823      	ldrh	r3, [r4, #0]
         rx_led = 1;
         rxck3 = 0;
         USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 8008c34:	4826      	ldr	r0, [pc, #152]	@ (8008cd0 <USART3_IRQHandler+0xc8>)
         rxcnt3++;
 8008c36:	3301      	adds	r3, #1
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	8023      	strh	r3, [r4, #0]
         rx_led = 1;
 8008c3c:	4b28      	ldr	r3, [pc, #160]	@ (8008ce0 <USART3_IRQHandler+0xd8>)
 8008c3e:	2201      	movs	r2, #1
 8008c40:	701a      	strb	r2, [r3, #0]
         rxck3 = 0;
 8008c42:	4b28      	ldr	r3, [pc, #160]	@ (8008ce4 <USART3_IRQHandler+0xdc>)
 8008c44:	2200      	movs	r2, #0
         USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 8008c46:	f240 5125 	movw	r1, #1317	@ 0x525
         rxck3 = 0;
 8008c4a:	701a      	strb	r2, [r3, #0]
         USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 8008c4c:	f005 f9be 	bl	800dfcc <USART_ClearITPendingBit>
      }
      if (USART_GetITStatus(USART3, USART_IT_TXE) != RESET) {
 8008c50:	481f      	ldr	r0, [pc, #124]	@ (8008cd0 <USART3_IRQHandler+0xc8>)
 8008c52:	f240 7127 	movw	r1, #1831	@ 0x727
 8008c56:	f005 f999 	bl	800df8c <USART_GetITStatus>
 8008c5a:	b1b8      	cbz	r0, 8008c8c <USART3_IRQHandler+0x84>
         /* Write one byte to the transmit data register */
      	 if (txcnt3 < maxtx3) {
 8008c5c:	4c22      	ldr	r4, [pc, #136]	@ (8008ce8 <USART3_IRQHandler+0xe0>)
 8008c5e:	4b23      	ldr	r3, [pc, #140]	@ (8008cec <USART3_IRQHandler+0xe4>)
 8008c60:	8822      	ldrh	r2, [r4, #0]
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	b292      	uxth	r2, r2
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d224      	bcs.n	8008cb6 <USART3_IRQHandler+0xae>
            USART_SendData(USART3, txbuff3[txcnt3]);
 8008c6c:	8823      	ldrh	r3, [r4, #0]
 8008c6e:	4a20      	ldr	r2, [pc, #128]	@ (8008cf0 <USART3_IRQHandler+0xe8>)
 8008c70:	4817      	ldr	r0, [pc, #92]	@ (8008cd0 <USART3_IRQHandler+0xc8>)
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	5cd1      	ldrb	r1, [r2, r3]
 8008c76:	f005 f969 	bl	800df4c <USART_SendData>
      	    txcnt3++;
 8008c7a:	8823      	ldrh	r3, [r4, #0]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	8023      	strh	r3, [r4, #0]
      	 } else {
      	    /* Disable the USART3 Transmit interrupt */
      	    USART_ITConfig(USART3, USART_IT_TXE, DISABLE);
      	    USART_ITConfig(USART3, USART_IT_TC, ENABLE);
      	 }
      	 USART_ClearITPendingBit(USART3, USART_IT_TXE);
 8008c82:	4813      	ldr	r0, [pc, #76]	@ (8008cd0 <USART3_IRQHandler+0xc8>)
 8008c84:	f240 7127 	movw	r1, #1831	@ 0x727
 8008c88:	f005 f9a0 	bl	800dfcc <USART_ClearITPendingBit>
      }
      if (USART_GetITStatus(USART3, USART_IT_TC) != RESET) {
 8008c8c:	4810      	ldr	r0, [pc, #64]	@ (8008cd0 <USART3_IRQHandler+0xc8>)
 8008c8e:	f240 6126 	movw	r1, #1574	@ 0x626
 8008c92:	f005 f97b 	bl	800df8c <USART_GetITStatus>
 8008c96:	b168      	cbz	r0, 8008cb4 <USART3_IRQHandler+0xac>
      	 USART_ITConfig(USART3, USART_IT_TC, DISABLE);
 8008c98:	2200      	movs	r2, #0
 8008c9a:	480d      	ldr	r0, [pc, #52]	@ (8008cd0 <USART3_IRQHandler+0xc8>)
 8008c9c:	f240 6126 	movw	r1, #1574	@ 0x626
 8008ca0:	f005 f95c 	bl	800df5c <USART_ITConfig>
      	 USART_ClearITPendingBit(USART3, USART_IT_TC);
 8008ca4:	480a      	ldr	r0, [pc, #40]	@ (8008cd0 <USART3_IRQHandler+0xc8>)
 8008ca6:	f240 6126 	movw	r1, #1574	@ 0x626
 8008caa:	f005 f98f 	bl	800dfcc <USART_ClearITPendingBit>
         tx_led = 0;
 8008cae:	4b11      	ldr	r3, [pc, #68]	@ (8008cf4 <USART3_IRQHandler+0xec>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
      }
}
 8008cb4:	bd10      	pop	{r4, pc}
      	    USART_ITConfig(USART3, USART_IT_TXE, DISABLE);
 8008cb6:	4806      	ldr	r0, [pc, #24]	@ (8008cd0 <USART3_IRQHandler+0xc8>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f240 7127 	movw	r1, #1831	@ 0x727
 8008cbe:	f005 f94d 	bl	800df5c <USART_ITConfig>
      	    USART_ITConfig(USART3, USART_IT_TC, ENABLE);
 8008cc2:	4803      	ldr	r0, [pc, #12]	@ (8008cd0 <USART3_IRQHandler+0xc8>)
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f240 6126 	movw	r1, #1574	@ 0x626
 8008cca:	f005 f947 	bl	800df5c <USART_ITConfig>
 8008cce:	e7d8      	b.n	8008c82 <USART3_IRQHandler+0x7a>
 8008cd0:	40004800 	.word	0x40004800
 8008cd4:	20002be6 	.word	0x20002be6
 8008cd8:	20001bd5 	.word	0x20001bd5
 8008cdc:	40011000 	.word	0x40011000
 8008ce0:	20002bde 	.word	0x20002bde
 8008ce4:	20002bdf 	.word	0x20002bdf
 8008ce8:	20002be4 	.word	0x20002be4
 8008cec:	20002be2 	.word	0x20002be2
 8008cf0:	200013d5 	.word	0x200013d5
 8008cf4:	20002bdd 	.word	0x20002bdd

08008cf8 <tx_enable3>:
      tx_led = 1;
}


void tx_enable3 (unsigned char max)
{
 8008cf8:	b508      	push	{r3, lr}
      maxtx3 = max;
 8008cfa:	4b07      	ldr	r3, [pc, #28]	@ (8008d18 <tx_enable3+0x20>)
 8008cfc:	8018      	strh	r0, [r3, #0]
      txcnt3 = 0;
 8008cfe:	4b07      	ldr	r3, [pc, #28]	@ (8008d1c <tx_enable3+0x24>)
      USART_ITConfig(USART3, USART_IT_TXE, ENABLE);
 8008d00:	4807      	ldr	r0, [pc, #28]	@ (8008d20 <tx_enable3+0x28>)
      txcnt3 = 0;
 8008d02:	2200      	movs	r2, #0
 8008d04:	801a      	strh	r2, [r3, #0]
      USART_ITConfig(USART3, USART_IT_TXE, ENABLE);
 8008d06:	f240 7127 	movw	r1, #1831	@ 0x727
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f005 f926 	bl	800df5c <USART_ITConfig>
      tx_led = 1;
 8008d10:	4b04      	ldr	r3, [pc, #16]	@ (8008d24 <tx_enable3+0x2c>)
 8008d12:	2201      	movs	r2, #1
 8008d14:	701a      	strb	r2, [r3, #0]
}
 8008d16:	bd08      	pop	{r3, pc}
 8008d18:	20002be2 	.word	0x20002be2
 8008d1c:	20002be4 	.word	0x20002be4
 8008d20:	40004800 	.word	0x40004800
 8008d24:	20002bdd 	.word	0x20002bdd

08008d28 <receive_check1>:


void receive_check1 (void)
{
 8008d28:	b538      	push	{r3, r4, r5, lr}
      unsigned char bcc,idx;
      if (rxcnt1) {
 8008d2a:	4c18      	ldr	r4, [pc, #96]	@ (8008d8c <receive_check1+0x64>)
 8008d2c:	8823      	ldrh	r3, [r4, #0]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	b343      	cbz	r3, 8008d84 <receive_check1+0x5c>
         if ((rxbuff1[0] == STX) && (rxbuff1[5] == ETX) && ((rxbuff1[1] == this_id) || (rxbuff1[1] == 33))) {
 8008d32:	4a17      	ldr	r2, [pc, #92]	@ (8008d90 <receive_check1+0x68>)
 8008d34:	7813      	ldrb	r3, [r2, #0]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d11c      	bne.n	8008d74 <receive_check1+0x4c>
 8008d3a:	7953      	ldrb	r3, [r2, #5]
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d119      	bne.n	8008d74 <receive_check1+0x4c>
 8008d40:	4914      	ldr	r1, [pc, #80]	@ (8008d94 <receive_check1+0x6c>)
 8008d42:	7853      	ldrb	r3, [r2, #1]
 8008d44:	7809      	ldrb	r1, [r1, #0]
 8008d46:	428b      	cmp	r3, r1
 8008d48:	d001      	beq.n	8008d4e <receive_check1+0x26>
 8008d4a:	2b21      	cmp	r3, #33	@ 0x21
 8008d4c:	d112      	bne.n	8008d74 <receive_check1+0x4c>
	    bcc = rxbuff1[0];
	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff1[idx];
 8008d4e:	7890      	ldrb	r0, [r2, #2]
 8008d50:	78d5      	ldrb	r5, [r2, #3]
 8008d52:	7911      	ldrb	r1, [r2, #4]
            if (bcc == rxbuff1[6]) {
 8008d54:	7992      	ldrb	r2, [r2, #6]
	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff1[idx];
 8008d56:	f083 0302 	eor.w	r3, r3, #2
 8008d5a:	4043      	eors	r3, r0
 8008d5c:	406b      	eors	r3, r5
 8008d5e:	404b      	eors	r3, r1
            if (bcc == rxbuff1[6]) {
 8008d60:	f083 0303 	eor.w	r3, r3, #3
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d105      	bne.n	8008d74 <receive_check1+0x4c>
	       if ((rxbuff1[2] == 0xFF) && (rxbuff1[3] == 0xFF) && (rxbuff1[4] == 0xFF)) {
 8008d68:	4028      	ands	r0, r5
 8008d6a:	4001      	ands	r1, r0
 8008d6c:	29ff      	cmp	r1, #255	@ 0xff
 8008d6e:	d101      	bne.n	8008d74 <receive_check1+0x4c>
	       	  NVIC_SystemReset();
 8008d70:	f7ff fbae 	bl	80084d0 <NVIC_SystemReset>
	       }
	    }
         }
         bzero(rxbuff1,rxcnt1);
 8008d74:	8822      	ldrh	r2, [r4, #0]
 8008d76:	4806      	ldr	r0, [pc, #24]	@ (8008d90 <receive_check1+0x68>)
 8008d78:	b292      	uxth	r2, r2
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	f005 f9c0 	bl	800e100 <memset>
         rxcnt1 = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	8023      	strh	r3, [r4, #0]
      }
      rx_led = 0;
 8008d84:	4b04      	ldr	r3, [pc, #16]	@ (8008d98 <receive_check1+0x70>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	701a      	strb	r2, [r3, #0]
}
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20002bf2 	.word	0x20002bf2
 8008d90:	200026d5 	.word	0x200026d5
 8008d94:	20002bdc 	.word	0x20002bdc
 8008d98:	20002bde 	.word	0x20002bde

08008d9c <receive_check2>:


void receive_check2 (void)
{
 8008d9c:	b538      	push	{r3, r4, r5, lr}
      unsigned char bcc,idx;
      if (rxcnt2) {
 8008d9e:	4c18      	ldr	r4, [pc, #96]	@ (8008e00 <receive_check2+0x64>)
 8008da0:	8823      	ldrh	r3, [r4, #0]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	b343      	cbz	r3, 8008df8 <receive_check2+0x5c>
         if ((rxbuff2[0] == STX) && (rxbuff2[5] == ETX) && ((rxbuff2[1] == this_id) || (rxbuff2[1] == 33))) {
 8008da6:	4a17      	ldr	r2, [pc, #92]	@ (8008e04 <receive_check2+0x68>)
 8008da8:	7813      	ldrb	r3, [r2, #0]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d11c      	bne.n	8008de8 <receive_check2+0x4c>
 8008dae:	7953      	ldrb	r3, [r2, #5]
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d119      	bne.n	8008de8 <receive_check2+0x4c>
 8008db4:	4914      	ldr	r1, [pc, #80]	@ (8008e08 <receive_check2+0x6c>)
 8008db6:	7853      	ldrb	r3, [r2, #1]
 8008db8:	7809      	ldrb	r1, [r1, #0]
 8008dba:	428b      	cmp	r3, r1
 8008dbc:	d001      	beq.n	8008dc2 <receive_check2+0x26>
 8008dbe:	2b21      	cmp	r3, #33	@ 0x21
 8008dc0:	d112      	bne.n	8008de8 <receive_check2+0x4c>
	    bcc = rxbuff2[0];
	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff2[idx];
 8008dc2:	7890      	ldrb	r0, [r2, #2]
 8008dc4:	78d5      	ldrb	r5, [r2, #3]
 8008dc6:	7911      	ldrb	r1, [r2, #4]
            if (bcc == rxbuff2[6]) {
 8008dc8:	7992      	ldrb	r2, [r2, #6]
	    for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff2[idx];
 8008dca:	f083 0302 	eor.w	r3, r3, #2
 8008dce:	4043      	eors	r3, r0
 8008dd0:	406b      	eors	r3, r5
 8008dd2:	404b      	eors	r3, r1
            if (bcc == rxbuff2[6]) {
 8008dd4:	f083 0303 	eor.w	r3, r3, #3
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d105      	bne.n	8008de8 <receive_check2+0x4c>
	       if ((rxbuff2[2] == 0xFF) && (rxbuff2[3] == 0xFF) && (rxbuff2[4] == 0xFF)) {
 8008ddc:	4028      	ands	r0, r5
 8008dde:	4001      	ands	r1, r0
 8008de0:	29ff      	cmp	r1, #255	@ 0xff
 8008de2:	d101      	bne.n	8008de8 <receive_check2+0x4c>
	       	  NVIC_SystemReset();
 8008de4:	f7ff fb74 	bl	80084d0 <NVIC_SystemReset>
	       }
	    }
         }
         bzero(rxbuff2,rxcnt2);
 8008de8:	8822      	ldrh	r2, [r4, #0]
 8008dea:	4806      	ldr	r0, [pc, #24]	@ (8008e04 <receive_check2+0x68>)
 8008dec:	b292      	uxth	r2, r2
 8008dee:	2100      	movs	r1, #0
 8008df0:	f005 f986 	bl	800e100 <memset>
         rxcnt2 = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	8023      	strh	r3, [r4, #0]
      }
      rx_led = 0;
 8008df8:	4b04      	ldr	r3, [pc, #16]	@ (8008e0c <receive_check2+0x70>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	701a      	strb	r2, [r3, #0]
}
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20002bec 	.word	0x20002bec
 8008e04:	200024d5 	.word	0x200024d5
 8008e08:	20002bdc 	.word	0x20002bdc
 8008e0c:	20002bde 	.word	0x20002bde

08008e10 <send_server_data>:

void send_server_data (unsigned char ack)
{
      unsigned short idx,encode;
      unsigned char bcc;
      tcp_tx[0] = STX;
 8008e10:	4b64      	ldr	r3, [pc, #400]	@ (8008fa4 <send_server_data+0x194>)
 8008e12:	2202      	movs	r2, #2
{
 8008e14:	b510      	push	{r4, lr}
      tcp_tx[0] = STX;
 8008e16:	701a      	strb	r2, [r3, #0]
      tcp_tx[1] = 0x41;
      tcp_tx[2] = ack;
 8008e18:	7098      	strb	r0, [r3, #2]
      tcp_tx[1] = 0x41;
 8008e1a:	2241      	movs	r2, #65	@ 0x41
      switch (ack) {
 8008e1c:	3811      	subs	r0, #17
      tcp_tx[1] = 0x41;
 8008e1e:	705a      	strb	r2, [r3, #1]
      switch (ack) {
 8008e20:	2805      	cmp	r0, #5
 8008e22:	d83e      	bhi.n	8008ea2 <send_server_data+0x92>
 8008e24:	e8df f000 	tbb	[pc, r0]
 8008e28:	897e6903 	.word	0x897e6903
 8008e2c:	a994      	.short	0xa994
         case 0x34:
         case 0x35:
         case 0x50:
           break;
         case 0x11:
           tcp_tx[3] = wifi_power;
 8008e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8008fa8 <send_server_data+0x198>)
 8008e30:	7812      	ldrb	r2, [r2, #0]
 8008e32:	70da      	strb	r2, [r3, #3]
           tcp_tx[4] = dhcp_disable;
 8008e34:	4a5d      	ldr	r2, [pc, #372]	@ (8008fac <send_server_data+0x19c>)
 8008e36:	7812      	ldrb	r2, [r2, #0]
 8008e38:	711a      	strb	r2, [r3, #4]
           tcp_tx[5] = keep_alive_time;
 8008e3a:	4a5d      	ldr	r2, [pc, #372]	@ (8008fb0 <send_server_data+0x1a0>)
 8008e3c:	7812      	ldrb	r2, [r2, #0]
 8008e3e:	715a      	strb	r2, [r3, #5]
           tcp_tx[6] = mqtt_mode;
 8008e40:	4a5c      	ldr	r2, [pc, #368]	@ (8008fb4 <send_server_data+0x1a4>)
 8008e42:	7812      	ldrb	r2, [r2, #0]
 8008e44:	719a      	strb	r2, [r3, #6]
           tcp_tx[7] = ap_mode;
 8008e46:	4a5c      	ldr	r2, [pc, #368]	@ (8008fb8 <send_server_data+0x1a8>)
 8008e48:	7812      	ldrb	r2, [r2, #0]
 8008e4a:	71da      	strb	r2, [r3, #7]
           tcp_tx[8] = (m_ip >> 24) & 0xFF;
 8008e4c:	4a5b      	ldr	r2, [pc, #364]	@ (8008fbc <send_server_data+0x1ac>)
 8008e4e:	6811      	ldr	r1, [r2, #0]
 8008e50:	0e09      	lsrs	r1, r1, #24
 8008e52:	7219      	strb	r1, [r3, #8]
           tcp_tx[9] = (m_ip >> 16) & 0xFF;
 8008e54:	6811      	ldr	r1, [r2, #0]
 8008e56:	0c09      	lsrs	r1, r1, #16
 8008e58:	7259      	strb	r1, [r3, #9]
           tcp_tx[10] = (m_ip >> 8) & 0xFF;
 8008e5a:	6811      	ldr	r1, [r2, #0]
           tcp_tx[11] = (m_ip >> 0) & 0xFF;
 8008e5c:	6812      	ldr	r2, [r2, #0]
 8008e5e:	72da      	strb	r2, [r3, #11]
           tcp_tx[12] = (m_gw >> 24) & 0xFF;
 8008e60:	4a57      	ldr	r2, [pc, #348]	@ (8008fc0 <send_server_data+0x1b0>)
           tcp_tx[10] = (m_ip >> 8) & 0xFF;
 8008e62:	0a09      	lsrs	r1, r1, #8
 8008e64:	7299      	strb	r1, [r3, #10]
           tcp_tx[12] = (m_gw >> 24) & 0xFF;
 8008e66:	6811      	ldr	r1, [r2, #0]
 8008e68:	0e09      	lsrs	r1, r1, #24
 8008e6a:	7319      	strb	r1, [r3, #12]
           tcp_tx[13] = (m_gw >> 16) & 0xFF;
 8008e6c:	6811      	ldr	r1, [r2, #0]
 8008e6e:	0c09      	lsrs	r1, r1, #16
 8008e70:	7359      	strb	r1, [r3, #13]
           tcp_tx[14] = (m_gw >> 8) & 0xFF;
 8008e72:	6811      	ldr	r1, [r2, #0]
           tcp_tx[15] = (m_gw >> 0) & 0xFF;
 8008e74:	6812      	ldr	r2, [r2, #0]
 8008e76:	73da      	strb	r2, [r3, #15]
           tcp_tx[16] = (m_nm >> 24) & 0xFF;
 8008e78:	4a52      	ldr	r2, [pc, #328]	@ (8008fc4 <send_server_data+0x1b4>)
           tcp_tx[14] = (m_gw >> 8) & 0xFF;
 8008e7a:	0a09      	lsrs	r1, r1, #8
 8008e7c:	7399      	strb	r1, [r3, #14]
           tcp_tx[16] = (m_nm >> 24) & 0xFF;
 8008e7e:	6811      	ldr	r1, [r2, #0]
 8008e80:	0e09      	lsrs	r1, r1, #24
 8008e82:	7419      	strb	r1, [r3, #16]
           tcp_tx[17] = (m_nm >> 16) & 0xFF;
 8008e84:	6811      	ldr	r1, [r2, #0]
 8008e86:	0c09      	lsrs	r1, r1, #16
 8008e88:	7459      	strb	r1, [r3, #17]
           tcp_tx[18] = (m_nm >> 8) & 0xFF;
 8008e8a:	6811      	ldr	r1, [r2, #0]
 8008e8c:	0a09      	lsrs	r1, r1, #8
 8008e8e:	7499      	strb	r1, [r3, #18]
           tcp_tx[19] = (m_nm >> 0) & 0xFF;
           tcp_tx[20] = (mqtt_port >> 8) & 0xFF;
 8008e90:	494d      	ldr	r1, [pc, #308]	@ (8008fc8 <send_server_data+0x1b8>)
           tcp_tx[19] = (m_nm >> 0) & 0xFF;
 8008e92:	6812      	ldr	r2, [r2, #0]
 8008e94:	74da      	strb	r2, [r3, #19]
           tcp_tx[20] = (mqtt_port >> 8) & 0xFF;
 8008e96:	880a      	ldrh	r2, [r1, #0]
 8008e98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8008e9c:	751a      	strb	r2, [r3, #20]
           tcp_tx[21] = mqtt_port & 0xFF;
 8008e9e:	880a      	ldrh	r2, [r1, #0]
 8008ea0:	755a      	strb	r2, [r3, #21]
         case 0x16:
           memcpy(tcp_tx + 3, tx_topic, 32);
           memcpy(tcp_tx + 35, rx_topic, 32);
           break;
      }
      tcp_tx[67] = ETX;
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	483f      	ldr	r0, [pc, #252]	@ (8008fa4 <send_server_data+0x194>)
 8008ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      bcc = tcp_tx[0];
 8008eaa:	2102      	movs	r1, #2
      tcp_tx[67] = ETX;
 8008eac:	2243      	movs	r2, #67	@ 0x43
      for (idx=1;idx<68;idx++) bcc = bcc ^ tcp_tx[idx];
 8008eae:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8008eb2:	3a01      	subs	r2, #1
 8008eb4:	b292      	uxth	r2, r2
 8008eb6:	4061      	eors	r1, r4
 8008eb8:	2a00      	cmp	r2, #0
 8008eba:	d1f8      	bne.n	8008eae <send_server_data+0x9e>
      tcp_tx[68] = bcc;
      tcp_txcnt = 69;
 8008ebc:	4c43      	ldr	r4, [pc, #268]	@ (8008fcc <send_server_data+0x1bc>)
      tcp_tx[68] = bcc;
 8008ebe:	f883 1044 	strb.w	r1, [r3, #68]	@ 0x44
      tcp_txcnt = 69;
 8008ec2:	2345      	movs	r3, #69	@ 0x45
 8008ec4:	8023      	strh	r3, [r4, #0]
      txcnt3 = base64_encode((unsigned char*)tcp_tx, tcp_txcnt, txbuff3);
 8008ec6:	8821      	ldrh	r1, [r4, #0]
 8008ec8:	4a41      	ldr	r2, [pc, #260]	@ (8008fd0 <send_server_data+0x1c0>)
 8008eca:	4836      	ldr	r0, [pc, #216]	@ (8008fa4 <send_server_data+0x194>)
 8008ecc:	b289      	uxth	r1, r1
 8008ece:	f7ff fd09 	bl	80088e4 <base64_encode>
 8008ed2:	4b40      	ldr	r3, [pc, #256]	@ (8008fd4 <send_server_data+0x1c4>)
      encode = BASE64_ENCODE_OUT_SIZE(tcp_txcnt);
      if (txcnt3 != (encode - 1)) {
         //txcnt3 = 0;
      }
      tcp_length = txcnt3;
      memcpy(tcp_tx,txbuff3,tcp_length);
 8008ed4:	493e      	ldr	r1, [pc, #248]	@ (8008fd0 <send_server_data+0x1c0>)
      txcnt3 = base64_encode((unsigned char*)tcp_tx, tcp_txcnt, txbuff3);
 8008ed6:	8018      	strh	r0, [r3, #0]
      encode = BASE64_ENCODE_OUT_SIZE(tcp_txcnt);
 8008ed8:	8822      	ldrh	r2, [r4, #0]
      if (txcnt3 != (encode - 1)) {
 8008eda:	881a      	ldrh	r2, [r3, #0]
      tcp_length = txcnt3;
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	4a3e      	ldr	r2, [pc, #248]	@ (8008fd8 <send_server_data+0x1c8>)
      memcpy(tcp_tx,txbuff3,tcp_length);
 8008ee0:	4830      	ldr	r0, [pc, #192]	@ (8008fa4 <send_server_data+0x194>)
      tcp_length = txcnt3;
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	8013      	strh	r3, [r2, #0]
      memcpy(tcp_tx,txbuff3,tcp_length);
 8008ee6:	8812      	ldrh	r2, [r2, #0]
 8008ee8:	b292      	uxth	r2, r2
 8008eea:	f005 fb77 	bl	800e5dc <memcpy>
      tcp_send = 1;
 8008eee:	4a3b      	ldr	r2, [pc, #236]	@ (8008fdc <send_server_data+0x1cc>)
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	7013      	strb	r3, [r2, #0]
      send_flag = 1;
 8008ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8008fe0 <send_server_data+0x1d0>)
 8008ef6:	7013      	strb	r3, [r2, #0]
}
 8008ef8:	bd10      	pop	{r4, pc}
           memcpy(tcp_tx + 3, ssid, 32);
 8008efa:	4a3a      	ldr	r2, [pc, #232]	@ (8008fe4 <send_server_data+0x1d4>)
 8008efc:	493a      	ldr	r1, [pc, #232]	@ (8008fe8 <send_server_data+0x1d8>)
 8008efe:	f102 0020 	add.w	r0, r2, #32
 8008f02:	f852 4b04 	ldr.w	r4, [r2], #4
 8008f06:	f841 4b04 	str.w	r4, [r1], #4
 8008f0a:	4282      	cmp	r2, r0
 8008f0c:	d1f9      	bne.n	8008f02 <send_server_data+0xf2>
           memcpy(tcp_tx + 35, passwd, 32);
 8008f0e:	4a37      	ldr	r2, [pc, #220]	@ (8008fec <send_server_data+0x1dc>)
 8008f10:	4937      	ldr	r1, [pc, #220]	@ (8008ff0 <send_server_data+0x1e0>)
 8008f12:	f102 0020 	add.w	r0, r2, #32
 8008f16:	f852 4b04 	ldr.w	r4, [r2], #4
 8008f1a:	f841 4b04 	str.w	r4, [r1], #4
 8008f1e:	4282      	cmp	r2, r0
 8008f20:	d1f9      	bne.n	8008f16 <send_server_data+0x106>
 8008f22:	e7be      	b.n	8008ea2 <send_server_data+0x92>
           memcpy(tcp_tx + 3, host_url, 64);
 8008f24:	4a33      	ldr	r2, [pc, #204]	@ (8008ff4 <send_server_data+0x1e4>)
 8008f26:	4930      	ldr	r1, [pc, #192]	@ (8008fe8 <send_server_data+0x1d8>)
 8008f28:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 8008f2c:	f852 4b04 	ldr.w	r4, [r2], #4
 8008f30:	f841 4b04 	str.w	r4, [r1], #4
 8008f34:	4282      	cmp	r2, r0
 8008f36:	d1f9      	bne.n	8008f2c <send_server_data+0x11c>
 8008f38:	e7b3      	b.n	8008ea2 <send_server_data+0x92>
           memcpy(tcp_tx + 3, ntp_url, 64);
 8008f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8008ff8 <send_server_data+0x1e8>)
 8008f3c:	492a      	ldr	r1, [pc, #168]	@ (8008fe8 <send_server_data+0x1d8>)
 8008f3e:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 8008f42:	f852 4b04 	ldr.w	r4, [r2], #4
 8008f46:	f841 4b04 	str.w	r4, [r1], #4
 8008f4a:	4282      	cmp	r2, r0
 8008f4c:	d1f9      	bne.n	8008f42 <send_server_data+0x132>
 8008f4e:	e7a8      	b.n	8008ea2 <send_server_data+0x92>
           memcpy(tcp_tx + 3, login_id, 32);
 8008f50:	4a2a      	ldr	r2, [pc, #168]	@ (8008ffc <send_server_data+0x1ec>)
 8008f52:	4925      	ldr	r1, [pc, #148]	@ (8008fe8 <send_server_data+0x1d8>)
 8008f54:	f102 0020 	add.w	r0, r2, #32
 8008f58:	f852 4b04 	ldr.w	r4, [r2], #4
 8008f5c:	f841 4b04 	str.w	r4, [r1], #4
 8008f60:	4282      	cmp	r2, r0
 8008f62:	d1f9      	bne.n	8008f58 <send_server_data+0x148>
           memcpy(tcp_tx + 35, login_pw, 32);
 8008f64:	4a26      	ldr	r2, [pc, #152]	@ (8009000 <send_server_data+0x1f0>)
 8008f66:	4922      	ldr	r1, [pc, #136]	@ (8008ff0 <send_server_data+0x1e0>)
 8008f68:	f102 0020 	add.w	r0, r2, #32
 8008f6c:	f852 4b04 	ldr.w	r4, [r2], #4
 8008f70:	f841 4b04 	str.w	r4, [r1], #4
 8008f74:	4282      	cmp	r2, r0
 8008f76:	d1f9      	bne.n	8008f6c <send_server_data+0x15c>
 8008f78:	e793      	b.n	8008ea2 <send_server_data+0x92>
           memcpy(tcp_tx + 3, tx_topic, 32);
 8008f7a:	4a22      	ldr	r2, [pc, #136]	@ (8009004 <send_server_data+0x1f4>)
 8008f7c:	491a      	ldr	r1, [pc, #104]	@ (8008fe8 <send_server_data+0x1d8>)
 8008f7e:	f102 0020 	add.w	r0, r2, #32
 8008f82:	f852 4b04 	ldr.w	r4, [r2], #4
 8008f86:	f841 4b04 	str.w	r4, [r1], #4
 8008f8a:	4282      	cmp	r2, r0
 8008f8c:	d1f9      	bne.n	8008f82 <send_server_data+0x172>
           memcpy(tcp_tx + 35, rx_topic, 32);
 8008f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8009008 <send_server_data+0x1f8>)
 8008f90:	4917      	ldr	r1, [pc, #92]	@ (8008ff0 <send_server_data+0x1e0>)
 8008f92:	f102 0020 	add.w	r0, r2, #32
 8008f96:	f852 4b04 	ldr.w	r4, [r2], #4
 8008f9a:	f841 4b04 	str.w	r4, [r1], #4
 8008f9e:	4282      	cmp	r2, r0
 8008fa0:	d1f9      	bne.n	8008f96 <send_server_data+0x186>
 8008fa2:	e77e      	b.n	8008ea2 <send_server_data+0x92>
 8008fa4:	200003d5 	.word	0x200003d5
 8008fa8:	20000366 	.word	0x20000366
 8008fac:	200003b0 	.word	0x200003b0
 8008fb0:	200003ae 	.word	0x200003ae
 8008fb4:	200003af 	.word	0x200003af
 8008fb8:	2000035f 	.word	0x2000035f
 8008fbc:	2000037c 	.word	0x2000037c
 8008fc0:	20000378 	.word	0x20000378
 8008fc4:	20000374 	.word	0x20000374
 8008fc8:	200003ac 	.word	0x200003ac
 8008fcc:	200003a0 	.word	0x200003a0
 8008fd0:	200013d5 	.word	0x200013d5
 8008fd4:	20002be4 	.word	0x20002be4
 8008fd8:	200003a8 	.word	0x200003a8
 8008fdc:	20000363 	.word	0x20000363
 8008fe0:	20000369 	.word	0x20000369
 8008fe4:	20000339 	.word	0x20000339
 8008fe8:	200003d8 	.word	0x200003d8
 8008fec:	20000319 	.word	0x20000319
 8008ff0:	200003f8 	.word	0x200003f8
 8008ff4:	200002d9 	.word	0x200002d9
 8008ff8:	20000299 	.word	0x20000299
 8008ffc:	20000279 	.word	0x20000279
 8009000:	20000259 	.word	0x20000259
 8009004:	20000239 	.word	0x20000239
 8009008:	20000219 	.word	0x20000219

0800900c <send_board_data>:

void send_board_data (void)
{
      unsigned short idx,encode;
      unsigned char bcc;
      tcp_tx[0] = STX;
 800900c:	4b2b      	ldr	r3, [pc, #172]	@ (80090bc <send_board_data+0xb0>)
      tcp_tx[1] = 0x42;
      tcp_tx[2] = (adc_temperature >> 8) & 0xFF;
 800900e:	482c      	ldr	r0, [pc, #176]	@ (80090c0 <send_board_data+0xb4>)
      tcp_tx[1] = 0x42;
 8009010:	2142      	movs	r1, #66	@ 0x42
{
 8009012:	b510      	push	{r4, lr}
      tcp_tx[1] = 0x42;
 8009014:	7059      	strb	r1, [r3, #1]
      tcp_tx[2] = (adc_temperature >> 8) & 0xFF;
 8009016:	8801      	ldrh	r1, [r0, #0]
 8009018:	f341 2107 	sbfx	r1, r1, #8, #8
 800901c:	7099      	strb	r1, [r3, #2]
      tcp_tx[3] = adc_temperature & 0xFF;
 800901e:	8801      	ldrh	r1, [r0, #0]
      tcp_tx[4] = (adc_voltage1 >> 8) & 0xFF;
 8009020:	4828      	ldr	r0, [pc, #160]	@ (80090c4 <send_board_data+0xb8>)
      tcp_tx[3] = adc_temperature & 0xFF;
 8009022:	70d9      	strb	r1, [r3, #3]
      tcp_tx[4] = (adc_voltage1 >> 8) & 0xFF;
 8009024:	8801      	ldrh	r1, [r0, #0]
 8009026:	f341 2107 	sbfx	r1, r1, #8, #8
 800902a:	7119      	strb	r1, [r3, #4]
      tcp_tx[5] = adc_voltage1 & 0xFF;
 800902c:	8801      	ldrh	r1, [r0, #0]
      tcp_tx[6] = (adc_voltage2 >> 8) & 0xFF;
 800902e:	4826      	ldr	r0, [pc, #152]	@ (80090c8 <send_board_data+0xbc>)
      tcp_tx[5] = adc_voltage1 & 0xFF;
 8009030:	7159      	strb	r1, [r3, #5]
      tcp_tx[6] = (adc_voltage2 >> 8) & 0xFF;
 8009032:	8801      	ldrh	r1, [r0, #0]
 8009034:	f341 2107 	sbfx	r1, r1, #8, #8
 8009038:	7199      	strb	r1, [r3, #6]
      tcp_tx[7] = adc_voltage2 & 0xFF;
 800903a:	8801      	ldrh	r1, [r0, #0]
 800903c:	71d9      	strb	r1, [r3, #7]
      tcp_tx[8] = (dac >> 8) & 0xFF;
 800903e:	4923      	ldr	r1, [pc, #140]	@ (80090cc <send_board_data+0xc0>)
 8009040:	8809      	ldrh	r1, [r1, #0]
 8009042:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8009046:	7219      	strb	r1, [r3, #8]
      tcp_tx[9] = send_dac & 0xFF;
 8009048:	4921      	ldr	r1, [pc, #132]	@ (80090d0 <send_board_data+0xc4>)
 800904a:	8809      	ldrh	r1, [r1, #0]
 800904c:	7259      	strb	r1, [r3, #9]
      tcp_tx[10] = read_key;
 800904e:	4921      	ldr	r1, [pc, #132]	@ (80090d4 <send_board_data+0xc8>)
 8009050:	7809      	ldrb	r1, [r1, #0]
 8009052:	7299      	strb	r1, [r3, #10]
      tcp_tx[11] = led1;
 8009054:	4920      	ldr	r1, [pc, #128]	@ (80090d8 <send_board_data+0xcc>)
 8009056:	7809      	ldrb	r1, [r1, #0]
 8009058:	72d9      	strb	r1, [r3, #11]
      tcp_tx[12] = led2;
 800905a:	4920      	ldr	r1, [pc, #128]	@ (80090dc <send_board_data+0xd0>)
 800905c:	7809      	ldrb	r1, [r1, #0]
 800905e:	7319      	strb	r1, [r3, #12]
      tcp_tx[13] = buz;
 8009060:	491f      	ldr	r1, [pc, #124]	@ (80090e0 <send_board_data+0xd4>)
 8009062:	7809      	ldrb	r1, [r1, #0]
 8009064:	7359      	strb	r1, [r3, #13]
      tcp_tx[0] = STX;
 8009066:	2202      	movs	r2, #2
      tcp_tx[14] = ETX;
 8009068:	2103      	movs	r1, #3
 800906a:	7399      	strb	r1, [r3, #14]
      tcp_tx[0] = STX;
 800906c:	701a      	strb	r2, [r3, #0]
      tcp_tx[14] = ETX;
 800906e:	210e      	movs	r1, #14
 8009070:	4618      	mov	r0, r3
      bcc = tcp_tx[0];
      for (idx=1;idx<15;idx++) bcc = bcc ^ tcp_tx[idx];
 8009072:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8009076:	3901      	subs	r1, #1
 8009078:	b289      	uxth	r1, r1
 800907a:	4062      	eors	r2, r4
 800907c:	2900      	cmp	r1, #0
 800907e:	d1f8      	bne.n	8009072 <send_board_data+0x66>
      tcp_tx[15] = bcc;
      tcp_txcnt = 16;
 8009080:	4c18      	ldr	r4, [pc, #96]	@ (80090e4 <send_board_data+0xd8>)
      tcp_tx[15] = bcc;
 8009082:	73c2      	strb	r2, [r0, #15]
      tcp_txcnt = 16;
 8009084:	2310      	movs	r3, #16
 8009086:	8023      	strh	r3, [r4, #0]
      txcnt3 = base64_encode((unsigned char*)tcp_tx, tcp_txcnt, txbuff3);
 8009088:	8821      	ldrh	r1, [r4, #0]
 800908a:	4a17      	ldr	r2, [pc, #92]	@ (80090e8 <send_board_data+0xdc>)
 800908c:	480b      	ldr	r0, [pc, #44]	@ (80090bc <send_board_data+0xb0>)
 800908e:	b289      	uxth	r1, r1
 8009090:	f7ff fc28 	bl	80088e4 <base64_encode>
 8009094:	4b15      	ldr	r3, [pc, #84]	@ (80090ec <send_board_data+0xe0>)
      encode = BASE64_ENCODE_OUT_SIZE(tcp_txcnt);
      if (txcnt3 != (encode - 1)) {
         //txcnt3 = 0;
      }
      tcp_length = txcnt3;
      memcpy(tcp_tx,txbuff3,tcp_length);
 8009096:	4914      	ldr	r1, [pc, #80]	@ (80090e8 <send_board_data+0xdc>)
      txcnt3 = base64_encode((unsigned char*)tcp_tx, tcp_txcnt, txbuff3);
 8009098:	8018      	strh	r0, [r3, #0]
      encode = BASE64_ENCODE_OUT_SIZE(tcp_txcnt);
 800909a:	8822      	ldrh	r2, [r4, #0]
      if (txcnt3 != (encode - 1)) {
 800909c:	881a      	ldrh	r2, [r3, #0]
      tcp_length = txcnt3;
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	4a13      	ldr	r2, [pc, #76]	@ (80090f0 <send_board_data+0xe4>)
      memcpy(tcp_tx,txbuff3,tcp_length);
 80090a2:	4806      	ldr	r0, [pc, #24]	@ (80090bc <send_board_data+0xb0>)
      tcp_length = txcnt3;
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	8013      	strh	r3, [r2, #0]
      memcpy(tcp_tx,txbuff3,tcp_length);
 80090a8:	8812      	ldrh	r2, [r2, #0]
 80090aa:	b292      	uxth	r2, r2
 80090ac:	f005 fa96 	bl	800e5dc <memcpy>
      mqtt_send = 1;
 80090b0:	4a10      	ldr	r2, [pc, #64]	@ (80090f4 <send_board_data+0xe8>)
 80090b2:	2301      	movs	r3, #1
 80090b4:	7013      	strb	r3, [r2, #0]
      send_flag = 1;
 80090b6:	4a10      	ldr	r2, [pc, #64]	@ (80090f8 <send_board_data+0xec>)
 80090b8:	7013      	strb	r3, [r2, #0]
}
 80090ba:	bd10      	pop	{r4, pc}
 80090bc:	200003d5 	.word	0x200003d5
 80090c0:	20002d58 	.word	0x20002d58
 80090c4:	20002d5c 	.word	0x20002d5c
 80090c8:	20002d5a 	.word	0x20002d5a
 80090cc:	20000214 	.word	0x20000214
 80090d0:	20002d72 	.word	0x20002d72
 80090d4:	2000020e 	.word	0x2000020e
 80090d8:	20000218 	.word	0x20000218
 80090dc:	20000217 	.word	0x20000217
 80090e0:	20000216 	.word	0x20000216
 80090e4:	200003a0 	.word	0x200003a0
 80090e8:	200013d5 	.word	0x200013d5
 80090ec:	20002be4 	.word	0x20002be4
 80090f0:	200003a8 	.word	0x200003a8
 80090f4:	20000364 	.word	0x20000364
 80090f8:	20000369 	.word	0x20000369

080090fc <rx_check>:


void rx_check (char *rxbuff, unsigned short rxcnt)
{
 80090fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      unsigned short idx,decode;
      unsigned char bcc;
      tcp_rxcnt = base64_decode(rxbuff, rxcnt, (unsigned char *)net_rx);
 8009100:	4cab      	ldr	r4, [pc, #684]	@ (80093b0 <rx_check+0x2b4>)
 8009102:	4dac      	ldr	r5, [pc, #688]	@ (80093b4 <rx_check+0x2b8>)
 8009104:	4622      	mov	r2, r4
 8009106:	f7ff fc55 	bl	80089b4 <base64_decode>
      decode = BASE64_DECODE_OUT_SIZE(rxcnt);
      if (decode) {
 800910a:	2903      	cmp	r1, #3
      tcp_rxcnt = base64_decode(rxbuff, rxcnt, (unsigned char *)net_rx);
 800910c:	8028      	strh	r0, [r5, #0]
      if (decode) {
 800910e:	f240 8198 	bls.w	8009442 <rx_check+0x346>
         if ((net_rx[0] == STX) && (net_rx[1] == 0x41) && (net_rx[67] == ETX) && (tcp_rxcnt >= 69)) {
 8009112:	7822      	ldrb	r2, [r4, #0]
 8009114:	2a02      	cmp	r2, #2
 8009116:	d13d      	bne.n	8009194 <rx_check+0x98>
 8009118:	7863      	ldrb	r3, [r4, #1]
 800911a:	2b41      	cmp	r3, #65	@ 0x41
 800911c:	d13a      	bne.n	8009194 <rx_check+0x98>
 800911e:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009122:	2b03      	cmp	r3, #3
 8009124:	d136      	bne.n	8009194 <rx_check+0x98>
 8009126:	882b      	ldrh	r3, [r5, #0]
 8009128:	b29b      	uxth	r3, r3
 800912a:	2b44      	cmp	r3, #68	@ 0x44
 800912c:	d932      	bls.n	8009194 <rx_check+0x98>
 800912e:	4621      	mov	r1, r4
 8009130:	2343      	movs	r3, #67	@ 0x43
            bcc = net_rx[0];
            for (idx=1;idx<68;idx++) bcc = bcc ^ net_rx[idx];
 8009132:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009136:	3b01      	subs	r3, #1
 8009138:	b29b      	uxth	r3, r3
 800913a:	4042      	eors	r2, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1f8      	bne.n	8009132 <rx_check+0x36>
            if (bcc == net_rx[68]) {
 8009140:	f894 1044 	ldrb.w	r1, [r4, #68]	@ 0x44
 8009144:	4291      	cmp	r1, r2
 8009146:	d125      	bne.n	8009194 <rx_check+0x98>
               ap_mode_time = 0;
               switch (net_rx[2]) {
 8009148:	78a0      	ldrb	r0, [r4, #2]
               ap_mode_time = 0;
 800914a:	4a9b      	ldr	r2, [pc, #620]	@ (80093b8 <rx_check+0x2bc>)
               switch (net_rx[2]) {
 800914c:	2825      	cmp	r0, #37	@ 0x25
               ap_mode_time = 0;
 800914e:	6013      	str	r3, [r2, #0]
               switch (net_rx[2]) {
 8009150:	d81d      	bhi.n	800918e <rx_check+0x92>
 8009152:	280f      	cmp	r0, #15
 8009154:	d91e      	bls.n	8009194 <rx_check+0x98>
 8009156:	f1a0 0310 	sub.w	r3, r0, #16
 800915a:	2b15      	cmp	r3, #21
 800915c:	d81a      	bhi.n	8009194 <rx_check+0x98>
 800915e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009162:	00a2      	.short	0x00a2
 8009164:	00a200a2 	.word	0x00a200a2
 8009168:	00a200a2 	.word	0x00a200a2
 800916c:	00a200a2 	.word	0x00a200a2
 8009170:	00190019 	.word	0x00190019
 8009174:	00190019 	.word	0x00190019
 8009178:	00190019 	.word	0x00190019
 800917c:	00190019 	.word	0x00190019
 8009180:	00a50019 	.word	0x00a50019
 8009184:	00dc00c6 	.word	0x00dc00c6
 8009188:	00f400e8 	.word	0x00f400e8
 800918c:	010a      	.short	0x010a
 800918e:	2850      	cmp	r0, #80	@ 0x50
 8009190:	f000 8086 	beq.w	80092a0 <rx_check+0x1a4>
                    write_wifi_data();
                    break;
               }
            }
         }
         if ((net_rx[0] == STX) && (net_rx[1] == 0x42) && (net_rx[23] == ETX) && (tcp_rxcnt >= 25)) {
 8009194:	7822      	ldrb	r2, [r4, #0]
 8009196:	2a02      	cmp	r2, #2
 8009198:	f040 8153 	bne.w	8009442 <rx_check+0x346>
 800919c:	7863      	ldrb	r3, [r4, #1]
 800919e:	2b42      	cmp	r3, #66	@ 0x42
 80091a0:	f040 814f 	bne.w	8009442 <rx_check+0x346>
 80091a4:	7de3      	ldrb	r3, [r4, #23]
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	f040 814b 	bne.w	8009442 <rx_check+0x346>
 80091ac:	882b      	ldrh	r3, [r5, #0]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	2b18      	cmp	r3, #24
 80091b2:	f240 8146 	bls.w	8009442 <rx_check+0x346>
 80091b6:	497e      	ldr	r1, [pc, #504]	@ (80093b0 <rx_check+0x2b4>)
 80091b8:	2317      	movs	r3, #23
            bcc = net_rx[0];
            for (idx=1;idx<24;idx++) bcc = bcc ^ net_rx[idx];
 80091ba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80091be:	3b01      	subs	r3, #1
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	4042      	eors	r2, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1f8      	bne.n	80091ba <rx_check+0xbe>
            if (bcc == net_rx[24]) {
 80091c8:	7e21      	ldrb	r1, [r4, #24]
 80091ca:	4291      	cmp	r1, r2
 80091cc:	f040 8139 	bne.w	8009442 <rx_check+0x346>
               ap_mode_time = 0;
 80091d0:	4a79      	ldr	r2, [pc, #484]	@ (80093b8 <rx_check+0x2bc>)
               remote = net_rx[2];
 80091d2:	f8df 925c 	ldr.w	r9, [pc, #604]	@ 8009430 <rx_check+0x334>
               ap_mode_time = 0;
 80091d6:	6013      	str	r3, [r2, #0]
               led1 = net_rx[3];
 80091d8:	f8df 8258 	ldr.w	r8, [pc, #600]	@ 8009434 <rx_check+0x338>
               remote = net_rx[2];
 80091dc:	78a3      	ldrb	r3, [r4, #2]
 80091de:	f889 3000 	strb.w	r3, [r9]
               led2 = net_rx[4];
 80091e2:	4f76      	ldr	r7, [pc, #472]	@ (80093bc <rx_check+0x2c0>)
               led1 = net_rx[3];
 80091e4:	78e3      	ldrb	r3, [r4, #3]
 80091e6:	f888 3000 	strb.w	r3, [r8]
               buz = net_rx[5];
 80091ea:	4d75      	ldr	r5, [pc, #468]	@ (80093c0 <rx_check+0x2c4>)
               led2 = net_rx[4];
 80091ec:	7923      	ldrb	r3, [r4, #4]
 80091ee:	703b      	strb	r3, [r7, #0]
               buz = net_rx[5];
 80091f0:	7963      	ldrb	r3, [r4, #5]
 80091f2:	702b      	strb	r3, [r5, #0]
               dac = (net_rx[6] & 0xFF) << 8 | (net_rx[7] & 0xFF);
 80091f4:	88e3      	ldrh	r3, [r4, #6]
 80091f6:	4c73      	ldr	r4, [pc, #460]	@ (80093c4 <rx_check+0x2c8>)
               memcpy(rx_message,net_rx + 8,16);
 80091f8:	4a73      	ldr	r2, [pc, #460]	@ (80093c8 <rx_check+0x2cc>)
 80091fa:	ba5b      	rev16	r3, r3
               dac = (net_rx[6] & 0xFF) << 8 | (net_rx[7] & 0xFF);
 80091fc:	8023      	strh	r3, [r4, #0]
               memcpy(rx_message,net_rx + 8,16);
 80091fe:	4b73      	ldr	r3, [pc, #460]	@ (80093cc <rx_check+0x2d0>)
 8009200:	4616      	mov	r6, r2
 8009202:	f103 0110 	add.w	r1, r3, #16
 8009206:	f853 0b04 	ldr.w	r0, [r3], #4
 800920a:	f842 0b04 	str.w	r0, [r2], #4
 800920e:	428b      	cmp	r3, r1
 8009210:	d1f9      	bne.n	8009206 <rx_check+0x10a>
               send_board_data();
 8009212:	f7ff fefb 	bl	800900c <send_board_data>
               if (remote) {
 8009216:	f899 3000 	ldrb.w	r3, [r9]
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 8111 	beq.w	8009442 <rx_check+0x346>
               	  if (led1) LED_OUT0 = 0;else LED_OUT0 = 1;
 8009220:	f898 2000 	ldrb.w	r2, [r8]
 8009224:	4b6a      	ldr	r3, [pc, #424]	@ (80093d0 <rx_check+0x2d4>)
 8009226:	2a00      	cmp	r2, #0
 8009228:	f000 80bf 	beq.w	80093aa <rx_check+0x2ae>
 800922c:	2200      	movs	r2, #0
 800922e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
               	  if (led2) LED_OUT1 = 0;else LED_OUT1 = 1;
 8009232:	783a      	ldrb	r2, [r7, #0]
 8009234:	4b66      	ldr	r3, [pc, #408]	@ (80093d0 <rx_check+0x2d4>)
 8009236:	2a00      	cmp	r2, #0
 8009238:	f000 80fe 	beq.w	8009438 <rx_check+0x33c>
 800923c:	2200      	movs	r2, #0
 800923e:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
               	  if (buz) BEEP = 1;else BEEP = 0;
 8009242:	782a      	ldrb	r2, [r5, #0]
 8009244:	4b62      	ldr	r3, [pc, #392]	@ (80093d0 <rx_check+0x2d4>)
 8009246:	f002 01ff 	and.w	r1, r2, #255	@ 0xff
 800924a:	2a00      	cmp	r2, #0
 800924c:	f000 80f6 	beq.w	800943c <rx_check+0x340>
 8009250:	2201      	movs	r2, #1
 8009252:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
               	  Dac1_Set_Voltage(dac);
 8009256:	8820      	ldrh	r0, [r4, #0]
               	  rx_message[16] = 0;
               	  message[16] = 0;
 8009258:	4c5e      	ldr	r4, [pc, #376]	@ (80093d4 <rx_check+0x2d8>)
               	  Dac1_Set_Voltage(dac);
 800925a:	b280      	uxth	r0, r0
 800925c:	f004 f8d4 	bl	800d408 <Dac1_Set_Voltage>
               	  rx_message[16] = 0;
 8009260:	2300      	movs	r3, #0
               	  if (strcmp(rx_message,message)) {
 8009262:	4859      	ldr	r0, [pc, #356]	@ (80093c8 <rx_check+0x2cc>)
               	  rx_message[16] = 0;
 8009264:	7433      	strb	r3, [r6, #16]
               	  if (strcmp(rx_message,message)) {
 8009266:	4621      	mov	r1, r4
               	  message[16] = 0;
 8009268:	7423      	strb	r3, [r4, #16]
               	  if (strcmp(rx_message,message)) {
 800926a:	f004 ffe9 	bl	800e240 <strcmp>
 800926e:	2800      	cmp	r0, #0
 8009270:	f000 80e7 	beq.w	8009442 <rx_check+0x346>
               	     memcpy(message,rx_message,16);
 8009274:	4b54      	ldr	r3, [pc, #336]	@ (80093c8 <rx_check+0x2cc>)
 8009276:	f103 0210 	add.w	r2, r3, #16
 800927a:	f853 1b04 	ldr.w	r1, [r3], #4
 800927e:	f844 1b04 	str.w	r1, [r4], #4
 8009282:	4293      	cmp	r3, r2
 8009284:	d1f9      	bne.n	800927a <rx_check+0x17e>
               	     lcd_printf(1,8,"RX:                  ");
 8009286:	4a54      	ldr	r2, [pc, #336]	@ (80093d8 <rx_check+0x2dc>)
 8009288:	2108      	movs	r1, #8
 800928a:	2001      	movs	r0, #1
 800928c:	f001 fff8 	bl	800b280 <lcd_printf>
                  }
               }
            }
         }
      }
}
 8009290:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
               	     lcd_printf(1,8,"RX: %s ",message);
 8009294:	4b4f      	ldr	r3, [pc, #316]	@ (80093d4 <rx_check+0x2d8>)
 8009296:	4a51      	ldr	r2, [pc, #324]	@ (80093dc <rx_check+0x2e0>)
 8009298:	2108      	movs	r1, #8
 800929a:	2001      	movs	r0, #1
 800929c:	f001 bff0 	b.w	800b280 <lcd_printf>
                    reboot_flag = 1;
 80092a0:	4b4f      	ldr	r3, [pc, #316]	@ (80093e0 <rx_check+0x2e4>)
 80092a2:	2201      	movs	r2, #1
 80092a4:	701a      	strb	r2, [r3, #0]
                    send_server_data(0x34);
 80092a6:	f7ff fdb3 	bl	8008e10 <send_server_data>
                    break;
 80092aa:	e773      	b.n	8009194 <rx_check+0x98>
                    wifi_power = net_rx[3];
 80092ac:	4b4d      	ldr	r3, [pc, #308]	@ (80093e4 <rx_check+0x2e8>)
 80092ae:	78e2      	ldrb	r2, [r4, #3]
 80092b0:	701a      	strb	r2, [r3, #0]
                    dhcp_disable = net_rx[4];
 80092b2:	4b4d      	ldr	r3, [pc, #308]	@ (80093e8 <rx_check+0x2ec>)
 80092b4:	7922      	ldrb	r2, [r4, #4]
 80092b6:	701a      	strb	r2, [r3, #0]
                    keep_alive_time = net_rx[5];
 80092b8:	4b4c      	ldr	r3, [pc, #304]	@ (80093ec <rx_check+0x2f0>)
 80092ba:	7962      	ldrb	r2, [r4, #5]
 80092bc:	701a      	strb	r2, [r3, #0]
                    mqtt_mode = net_rx[6];
 80092be:	4b4c      	ldr	r3, [pc, #304]	@ (80093f0 <rx_check+0x2f4>)
 80092c0:	79a2      	ldrb	r2, [r4, #6]
 80092c2:	701a      	strb	r2, [r3, #0]
                    ap_mode = net_rx[7];
 80092c4:	4b4b      	ldr	r3, [pc, #300]	@ (80093f4 <rx_check+0x2f8>)
 80092c6:	79e2      	ldrb	r2, [r4, #7]
 80092c8:	701a      	strb	r2, [r3, #0]
                    m_ip = (net_rx[8] & 0xFF) << 24 | (net_rx[9] & 0xFF) << 16 | (net_rx[10] & 0xFF) << 8 | (net_rx[11] & 0xFF);
 80092ca:	68a3      	ldr	r3, [r4, #8]
 80092cc:	4a4a      	ldr	r2, [pc, #296]	@ (80093f8 <rx_check+0x2fc>)
 80092ce:	ba1b      	rev	r3, r3
 80092d0:	6013      	str	r3, [r2, #0]
                    m_gw = (net_rx[12] & 0xFF) << 24 | (net_rx[13] & 0xFF) << 16 | (net_rx[14] & 0xFF) << 8 | (net_rx[15] & 0xFF);
 80092d2:	68e3      	ldr	r3, [r4, #12]
 80092d4:	4a49      	ldr	r2, [pc, #292]	@ (80093fc <rx_check+0x300>)
 80092d6:	ba1b      	rev	r3, r3
 80092d8:	6013      	str	r3, [r2, #0]
                    m_nm = (net_rx[16] & 0xFF) << 24 | (net_rx[17] & 0xFF) << 16 | (net_rx[18] & 0xFF) << 8 | (net_rx[19] & 0xFF);
 80092da:	6923      	ldr	r3, [r4, #16]
 80092dc:	4a48      	ldr	r2, [pc, #288]	@ (8009400 <rx_check+0x304>)
 80092de:	ba1b      	rev	r3, r3
 80092e0:	6013      	str	r3, [r2, #0]
                    mqtt_port = (unsigned short)(((net_rx[20] & 0xFF) << 8) + (net_rx[21] & 0xFF));
 80092e2:	8aa3      	ldrh	r3, [r4, #20]
 80092e4:	4a47      	ldr	r2, [pc, #284]	@ (8009404 <rx_check+0x308>)
 80092e6:	ba5b      	rev16	r3, r3
 80092e8:	8013      	strh	r3, [r2, #0]
                    send_server_data(0x30);
 80092ea:	2030      	movs	r0, #48	@ 0x30
 80092ec:	e7db      	b.n	80092a6 <rx_check+0x1aa>
                    memcpy(ssid, net_rx + 3, 32);
 80092ee:	4b46      	ldr	r3, [pc, #280]	@ (8009408 <rx_check+0x30c>)
 80092f0:	4a46      	ldr	r2, [pc, #280]	@ (800940c <rx_check+0x310>)
 80092f2:	f103 0120 	add.w	r1, r3, #32
 80092f6:	f853 0b04 	ldr.w	r0, [r3], #4
 80092fa:	f842 0b04 	str.w	r0, [r2], #4
 80092fe:	428b      	cmp	r3, r1
 8009300:	d1f9      	bne.n	80092f6 <rx_check+0x1fa>
                    memcpy(passwd, net_rx + 35, 32);
 8009302:	4b43      	ldr	r3, [pc, #268]	@ (8009410 <rx_check+0x314>)
 8009304:	4a43      	ldr	r2, [pc, #268]	@ (8009414 <rx_check+0x318>)
 8009306:	f103 0120 	add.w	r1, r3, #32
 800930a:	f853 0b04 	ldr.w	r0, [r3], #4
 800930e:	f842 0b04 	str.w	r0, [r2], #4
 8009312:	428b      	cmp	r3, r1
 8009314:	d1f9      	bne.n	800930a <rx_check+0x20e>
                    send_server_data(0x31);
 8009316:	2031      	movs	r0, #49	@ 0x31
 8009318:	e7c5      	b.n	80092a6 <rx_check+0x1aa>
                    memcpy(host_url, net_rx + 3, 64);
 800931a:	4b3b      	ldr	r3, [pc, #236]	@ (8009408 <rx_check+0x30c>)
 800931c:	4a3e      	ldr	r2, [pc, #248]	@ (8009418 <rx_check+0x31c>)
 800931e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009322:	f853 0b04 	ldr.w	r0, [r3], #4
 8009326:	f842 0b04 	str.w	r0, [r2], #4
 800932a:	428b      	cmp	r3, r1
 800932c:	d1f9      	bne.n	8009322 <rx_check+0x226>
                    send_server_data(0x32);
 800932e:	2032      	movs	r0, #50	@ 0x32
 8009330:	e7b9      	b.n	80092a6 <rx_check+0x1aa>
                    memcpy(ntp_url, net_rx + 3, 64);
 8009332:	4b35      	ldr	r3, [pc, #212]	@ (8009408 <rx_check+0x30c>)
 8009334:	4a39      	ldr	r2, [pc, #228]	@ (800941c <rx_check+0x320>)
 8009336:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800933a:	f853 0b04 	ldr.w	r0, [r3], #4
 800933e:	f842 0b04 	str.w	r0, [r2], #4
 8009342:	428b      	cmp	r3, r1
 8009344:	d1f9      	bne.n	800933a <rx_check+0x23e>
                    send_server_data(0x33);
 8009346:	2033      	movs	r0, #51	@ 0x33
 8009348:	e7ad      	b.n	80092a6 <rx_check+0x1aa>
                    memcpy(login_id, net_rx + 3, 32);
 800934a:	4b2f      	ldr	r3, [pc, #188]	@ (8009408 <rx_check+0x30c>)
 800934c:	4a34      	ldr	r2, [pc, #208]	@ (8009420 <rx_check+0x324>)
 800934e:	f103 0120 	add.w	r1, r3, #32
 8009352:	f853 0b04 	ldr.w	r0, [r3], #4
 8009356:	f842 0b04 	str.w	r0, [r2], #4
 800935a:	428b      	cmp	r3, r1
 800935c:	d1f9      	bne.n	8009352 <rx_check+0x256>
                    memcpy(login_pw, net_rx + 35, 32);
 800935e:	4b2c      	ldr	r3, [pc, #176]	@ (8009410 <rx_check+0x314>)
 8009360:	4a30      	ldr	r2, [pc, #192]	@ (8009424 <rx_check+0x328>)
 8009362:	f103 0120 	add.w	r1, r3, #32
 8009366:	f853 0b04 	ldr.w	r0, [r3], #4
 800936a:	f842 0b04 	str.w	r0, [r2], #4
 800936e:	428b      	cmp	r3, r1
 8009370:	d1f9      	bne.n	8009366 <rx_check+0x26a>
                    send_server_data(0x34);
 8009372:	2034      	movs	r0, #52	@ 0x34
 8009374:	e797      	b.n	80092a6 <rx_check+0x1aa>
                    memcpy(tx_topic, net_rx + 3, 32);
 8009376:	4b24      	ldr	r3, [pc, #144]	@ (8009408 <rx_check+0x30c>)
 8009378:	4a2b      	ldr	r2, [pc, #172]	@ (8009428 <rx_check+0x32c>)
 800937a:	f103 0120 	add.w	r1, r3, #32
 800937e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009382:	f842 0b04 	str.w	r0, [r2], #4
 8009386:	428b      	cmp	r3, r1
 8009388:	d1f9      	bne.n	800937e <rx_check+0x282>
                    memcpy(rx_topic, net_rx + 35, 32);
 800938a:	4b21      	ldr	r3, [pc, #132]	@ (8009410 <rx_check+0x314>)
 800938c:	4a27      	ldr	r2, [pc, #156]	@ (800942c <rx_check+0x330>)
 800938e:	f103 0120 	add.w	r1, r3, #32
 8009392:	f853 0b04 	ldr.w	r0, [r3], #4
 8009396:	f842 0b04 	str.w	r0, [r2], #4
 800939a:	428b      	cmp	r3, r1
 800939c:	d1f9      	bne.n	8009392 <rx_check+0x296>
                    send_server_data(0x35);
 800939e:	2035      	movs	r0, #53	@ 0x35
 80093a0:	f7ff fd36 	bl	8008e10 <send_server_data>
                    write_wifi_data();
 80093a4:	f7ff f8e6 	bl	8008574 <write_wifi_data>
                    break;
 80093a8:	e6f4      	b.n	8009194 <rx_check+0x98>
               	  if (led1) LED_OUT0 = 0;else LED_OUT0 = 1;
 80093aa:	2201      	movs	r2, #1
 80093ac:	e73f      	b.n	800922e <rx_check+0x132>
 80093ae:	bf00      	nop
 80093b0:	20000bd5 	.word	0x20000bd5
 80093b4:	2000039e 	.word	0x2000039e
 80093b8:	20000384 	.word	0x20000384
 80093bc:	20000217 	.word	0x20000217
 80093c0:	20000216 	.word	0x20000216
 80093c4:	20000214 	.word	0x20000214
 80093c8:	200003b1 	.word	0x200003b1
 80093cc:	20000bdd 	.word	0x20000bdd
 80093d0:	42428000 	.word	0x42428000
 80093d4:	200003c2 	.word	0x200003c2
 80093d8:	0800f4b5 	.word	0x0800f4b5
 80093dc:	0800f4cb 	.word	0x0800f4cb
 80093e0:	20000367 	.word	0x20000367
 80093e4:	20000366 	.word	0x20000366
 80093e8:	200003b0 	.word	0x200003b0
 80093ec:	200003ae 	.word	0x200003ae
 80093f0:	200003af 	.word	0x200003af
 80093f4:	2000035f 	.word	0x2000035f
 80093f8:	2000037c 	.word	0x2000037c
 80093fc:	20000378 	.word	0x20000378
 8009400:	20000374 	.word	0x20000374
 8009404:	200003ac 	.word	0x200003ac
 8009408:	20000bd8 	.word	0x20000bd8
 800940c:	20000339 	.word	0x20000339
 8009410:	20000bf8 	.word	0x20000bf8
 8009414:	20000319 	.word	0x20000319
 8009418:	200002d9 	.word	0x200002d9
 800941c:	20000299 	.word	0x20000299
 8009420:	20000279 	.word	0x20000279
 8009424:	20000259 	.word	0x20000259
 8009428:	20000239 	.word	0x20000239
 800942c:	20000219 	.word	0x20000219
 8009430:	2000020c 	.word	0x2000020c
 8009434:	20000218 	.word	0x20000218
               	  if (led2) LED_OUT1 = 0;else LED_OUT1 = 1;
 8009438:	2201      	movs	r2, #1
 800943a:	e700      	b.n	800923e <rx_check+0x142>
               	  if (buz) BEEP = 1;else BEEP = 0;
 800943c:	f8c3 12a0 	str.w	r1, [r3, #672]	@ 0x2a0
 8009440:	e709      	b.n	8009256 <rx_check+0x15a>
}
 8009442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009446:	bf00      	nop

08009448 <clear_flag>:


void clear_flag (void)
{
     pwr_flag = 0;
 8009448:	4a0b      	ldr	r2, [pc, #44]	@ (8009478 <clear_flag+0x30>)
 800944a:	2300      	movs	r3, #0
 800944c:	7013      	strb	r3, [r2, #0]
     mode_flag = 0;
 800944e:	4a0b      	ldr	r2, [pc, #44]	@ (800947c <clear_flag+0x34>)
 8009450:	7013      	strb	r3, [r2, #0]
     ssid_flag = 0;
 8009452:	4a0b      	ldr	r2, [pc, #44]	@ (8009480 <clear_flag+0x38>)
 8009454:	7013      	strb	r3, [r2, #0]
     ip_flag = 0;
 8009456:	4a0b      	ldr	r2, [pc, #44]	@ (8009484 <clear_flag+0x3c>)
 8009458:	7013      	strb	r3, [r2, #0]
     mux_flag = 0;
 800945a:	4a0b      	ldr	r2, [pc, #44]	@ (8009488 <clear_flag+0x40>)
 800945c:	7013      	strb	r3, [r2, #0]
     server_flag = 0;
 800945e:	4a0b      	ldr	r2, [pc, #44]	@ (800948c <clear_flag+0x44>)
 8009460:	7013      	strb	r3, [r2, #0]
     mqtt_cfg_flag = 0;
 8009462:	4a0b      	ldr	r2, [pc, #44]	@ (8009490 <clear_flag+0x48>)
 8009464:	7013      	strb	r3, [r2, #0]
     mqtt_connect_flag = 0;
 8009466:	4a0b      	ldr	r2, [pc, #44]	@ (8009494 <clear_flag+0x4c>)
 8009468:	7013      	strb	r3, [r2, #0]
     mqtt_sub_flag = 0;
 800946a:	4a0b      	ldr	r2, [pc, #44]	@ (8009498 <clear_flag+0x50>)
 800946c:	7013      	strb	r3, [r2, #0]
     send_flag = 0;
 800946e:	4a0b      	ldr	r2, [pc, #44]	@ (800949c <clear_flag+0x54>)
 8009470:	7013      	strb	r3, [r2, #0]
     ntp_req_flag = 0;
 8009472:	4a0b      	ldr	r2, [pc, #44]	@ (80094a0 <clear_flag+0x58>)
 8009474:	7013      	strb	r3, [r2, #0]
}
 8009476:	4770      	bx	lr
 8009478:	2000036f 	.word	0x2000036f
 800947c:	2000036e 	.word	0x2000036e
 8009480:	2000036a 	.word	0x2000036a
 8009484:	2000036d 	.word	0x2000036d
 8009488:	2000036c 	.word	0x2000036c
 800948c:	2000036b 	.word	0x2000036b
 8009490:	2000035b 	.word	0x2000035b
 8009494:	2000035a 	.word	0x2000035a
 8009498:	20000359 	.word	0x20000359
 800949c:	20000369 	.word	0x20000369
 80094a0:	2000035c 	.word	0x2000035c

080094a4 <send_data>:


void send_data (void)
{
 80094a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      if (time_out == 0) {
 80094a8:	4c86      	ldr	r4, [pc, #536]	@ (80096c4 <send_data+0x220>)
 80094aa:	6825      	ldr	r5, [r4, #0]
{
 80094ac:	b08a      	sub	sp, #40	@ 0x28
      if (time_out == 0) {
 80094ae:	2d00      	cmp	r5, #0
 80094b0:	f040 80bf 	bne.w	8009632 <send_data+0x18e>
         if (reset_flag) {
 80094b4:	4b84      	ldr	r3, [pc, #528]	@ (80096c8 <send_data+0x224>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	b153      	cbz	r3, 80094d0 <send_data+0x2c>
            clear_flag();
            sprintf(txbuff3, "AT+RST\r\n");
 80094ba:	4984      	ldr	r1, [pc, #528]	@ (80096cc <send_data+0x228>)
 80094bc:	4884      	ldr	r0, [pc, #528]	@ (80096d0 <send_data+0x22c>)
            clear_flag();
 80094be:	f7ff ffc3 	bl	8009448 <clear_flag>
            sprintf(txbuff3, "AT+RST\r\n");
 80094c2:	f005 f82d 	bl	800e520 <strcpy>
            mqtt_connect = 0;
 80094c6:	4b83      	ldr	r3, [pc, #524]	@ (80096d4 <send_data+0x230>)
 80094c8:	701d      	strb	r5, [r3, #0]
                                                sprintf(txbuff3, "AT+CIPSNTPCFG=1,8,\"%s\"\r\n",ntp_url);
                                                time_out = 200;
                                             } else {
                                                if (ntp_req_flag)  {
                                                   sprintf(txbuff3, "AT+CIPSNTPTIME?\r\n");
                                                   time_out = 1000;
 80094ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80094ce:	e02c      	b.n	800952a <send_data+0x86>
            if (pwr_flag) {
 80094d0:	4b81      	ldr	r3, [pc, #516]	@ (80096d8 <send_data+0x234>)
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	b1f3      	cbz	r3, 8009514 <send_data+0x70>
               if (wifi_power > 80) wifi_power = 80;
 80094d6:	4b81      	ldr	r3, [pc, #516]	@ (80096dc <send_data+0x238>)
               if (pwr_error >= 2) {
 80094d8:	4981      	ldr	r1, [pc, #516]	@ (80096e0 <send_data+0x23c>)
               if (wifi_power > 80) wifi_power = 80;
 80094da:	781a      	ldrb	r2, [r3, #0]
 80094dc:	2a50      	cmp	r2, #80	@ 0x50
 80094de:	bf84      	itt	hi
 80094e0:	2250      	movhi	r2, #80	@ 0x50
 80094e2:	701a      	strbhi	r2, [r3, #0]
               if (wifi_power < 3) wifi_power = 3;
 80094e4:	781a      	ldrb	r2, [r3, #0]
 80094e6:	2a02      	cmp	r2, #2
 80094e8:	bf9c      	itt	ls
 80094ea:	2203      	movls	r2, #3
 80094ec:	701a      	strbls	r2, [r3, #0]
               if (pwr_error >= 2) {
 80094ee:	880a      	ldrh	r2, [r1, #0]
 80094f0:	b292      	uxth	r2, r2
 80094f2:	2a01      	cmp	r2, #1
               	   pwr_error = 0;
 80094f4:	bf81      	itttt	hi
 80094f6:	2200      	movhi	r2, #0
 80094f8:	800a      	strhhi	r2, [r1, #0]
               	   wifi_power = 40;
 80094fa:	2228      	movhi	r2, #40	@ 0x28
 80094fc:	701a      	strbhi	r2, [r3, #0]
               if (wifi_power < 40) wifi_power = 40;
 80094fe:	781a      	ldrb	r2, [r3, #0]
               sprintf(txbuff3, "AT+RFPOWER=%d\r\n",wifi_power);// 40~80;	old -> min 3
 8009500:	4978      	ldr	r1, [pc, #480]	@ (80096e4 <send_data+0x240>)
               if (wifi_power < 40) wifi_power = 40;
 8009502:	2a27      	cmp	r2, #39	@ 0x27
 8009504:	bf9c      	itt	ls
 8009506:	2228      	movls	r2, #40	@ 0x28
 8009508:	701a      	strbls	r2, [r3, #0]
               sprintf(txbuff3, "AT+RFPOWER=%d\r\n",wifi_power);// 40~80;	old -> min 3
 800950a:	781a      	ldrb	r2, [r3, #0]
                                                sprintf(txbuff3, "AT+CIPSNTPCFG=1,8,\"%s\"\r\n",ntp_url);
 800950c:	4870      	ldr	r0, [pc, #448]	@ (80096d0 <send_data+0x22c>)
 800950e:	f003 fcc5 	bl	800ce9c <sprintf>
                                                time_out = 200;
 8009512:	e009      	b.n	8009528 <send_data+0x84>
               if (mode_flag) {
 8009514:	4b74      	ldr	r3, [pc, #464]	@ (80096e8 <send_data+0x244>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	b15b      	cbz	r3, 8009532 <send_data+0x8e>
                  if (ap_mode) {
 800951a:	4b74      	ldr	r3, [pc, #464]	@ (80096ec <send_data+0x248>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	b133      	cbz	r3, 800952e <send_data+0x8a>
                     sprintf(txbuff3, "AT+CWMODE=2\r\n");       //1 Station, 2 AP, 3 AP+Station
 8009520:	4973      	ldr	r1, [pc, #460]	@ (80096f0 <send_data+0x24c>)
                     sprintf(txbuff3, "AT+CWMODE=1\r\n");       //1 Station, 2 AP, 3 AP+Station
 8009522:	486b      	ldr	r0, [pc, #428]	@ (80096d0 <send_data+0x22c>)
 8009524:	f004 fffc 	bl	800e520 <strcpy>
                  time_out = 200;
 8009528:	23c8      	movs	r3, #200	@ 0xc8
                                                   time_out = 1000;
 800952a:	6023      	str	r3, [r4, #0]
 800952c:	e06c      	b.n	8009608 <send_data+0x164>
                     sprintf(txbuff3, "AT+CWMODE=1\r\n");       //1 Station, 2 AP, 3 AP+Station
 800952e:	4971      	ldr	r1, [pc, #452]	@ (80096f4 <send_data+0x250>)
 8009530:	e7f7      	b.n	8009522 <send_data+0x7e>
                  if (host_flag) {
 8009532:	4b71      	ldr	r3, [pc, #452]	@ (80096f8 <send_data+0x254>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	b10b      	cbz	r3, 800953c <send_data+0x98>
                     sprintf(txbuff3, "AT+CWHOSTNAME=\"CHOI\"\r\n");	//Host
 8009538:	4970      	ldr	r1, [pc, #448]	@ (80096fc <send_data+0x258>)
 800953a:	e7f2      	b.n	8009522 <send_data+0x7e>
                     if (ssid_flag) {
 800953c:	4b70      	ldr	r3, [pc, #448]	@ (8009700 <send_data+0x25c>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	b193      	cbz	r3, 8009568 <send_data+0xc4>
                        if (ap_mode) {
 8009542:	4b6a      	ldr	r3, [pc, #424]	@ (80096ec <send_data+0x248>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	b133      	cbz	r3, 8009556 <send_data+0xb2>
                           sprintf(txbuff3, "AT+CWSAP=\"APCHOI\",\"1234567890\",%d,3\r\n",wifi_ch);	//AP Name
 8009548:	4b6e      	ldr	r3, [pc, #440]	@ (8009704 <send_data+0x260>)
 800954a:	496f      	ldr	r1, [pc, #444]	@ (8009708 <send_data+0x264>)
 800954c:	781a      	ldrb	r2, [r3, #0]
                                          sprintf(txbuff3, "AT+MQTTSUB=0,\"%s\",1\r\n",rx_topic);
 800954e:	4860      	ldr	r0, [pc, #384]	@ (80096d0 <send_data+0x22c>)
 8009550:	f003 fca4 	bl	800ce9c <sprintf>
 8009554:	e005      	b.n	8009562 <send_data+0xbe>
                           sprintf(txbuff3, "AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,passwd);
 8009556:	4b6d      	ldr	r3, [pc, #436]	@ (800970c <send_data+0x268>)
 8009558:	4a6d      	ldr	r2, [pc, #436]	@ (8009710 <send_data+0x26c>)
 800955a:	496e      	ldr	r1, [pc, #440]	@ (8009714 <send_data+0x270>)
                                       sprintf(txbuff3, "AT+MQTTCONN=0,\"%s\",%d,1\r\n",host_url,mqtt_port);
 800955c:	485c      	ldr	r0, [pc, #368]	@ (80096d0 <send_data+0x22c>)
 800955e:	f003 fc9d 	bl	800ce9c <sprintf>
                                          time_out = 5000;
 8009562:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009566:	e7e0      	b.n	800952a <send_data+0x86>
                        if (ip_flag) {
 8009568:	4a6b      	ldr	r2, [pc, #428]	@ (8009718 <send_data+0x274>)
 800956a:	7813      	ldrb	r3, [r2, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d063      	beq.n	8009638 <send_data+0x194>
                           if (ap_mode) {
 8009570:	4b5e      	ldr	r3, [pc, #376]	@ (80096ec <send_data+0x248>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	b133      	cbz	r3, 8009584 <send_data+0xe0>
                              sprintf(txbuff3, "AT+CIPAP=\"192.168.1.254\",\"192.168.1.254\",\"255.255.255.0\"\r\n");
 8009576:	4969      	ldr	r1, [pc, #420]	@ (800971c <send_data+0x278>)
 8009578:	4855      	ldr	r0, [pc, #340]	@ (80096d0 <send_data+0x22c>)
 800957a:	f004 ffd1 	bl	800e520 <strcpy>
                                 time_out = 500;
 800957e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8009582:	e7d2      	b.n	800952a <send_data+0x86>
                              if (dhcp_disable) {
 8009584:	4b66      	ldr	r3, [pc, #408]	@ (8009720 <send_data+0x27c>)
 8009586:	7819      	ldrb	r1, [r3, #0]
 8009588:	f001 03ff 	and.w	r3, r1, #255	@ 0xff
 800958c:	2900      	cmp	r1, #0
 800958e:	d036      	beq.n	80095fe <send_data+0x15a>
                                 (m_ip >> 0) & 0xFF,(m_ip >> 8) & 0xFF,(m_ip >> 16) & 0xFF,(m_ip >> 24) & 0xFF,
 8009590:	4964      	ldr	r1, [pc, #400]	@ (8009724 <send_data+0x280>)
 8009592:	680a      	ldr	r2, [r1, #0]
 8009594:	680b      	ldr	r3, [r1, #0]
 8009596:	6808      	ldr	r0, [r1, #0]
 8009598:	680d      	ldr	r5, [r1, #0]
                                 (m_gw >> 0) & 0xFF,(m_gw >> 8) & 0xFF,(m_gw >> 16) & 0xFF,(m_gw >> 24) & 0xFF,
 800959a:	4963      	ldr	r1, [pc, #396]	@ (8009728 <send_data+0x284>)
 800959c:	680e      	ldr	r6, [r1, #0]
 800959e:	680f      	ldr	r7, [r1, #0]
 80095a0:	f8d1 c000 	ldr.w	ip, [r1]
 80095a4:	f8d1 e000 	ldr.w	lr, [r1]
                                 (m_nm >> 0) & 0xFF,(m_nm >> 8) & 0xFF,(m_nm >> 16) & 0xFF,(m_nm >> 24) & 0xFF);
 80095a8:	4960      	ldr	r1, [pc, #384]	@ (800972c <send_data+0x288>)
 80095aa:	f8d1 8000 	ldr.w	r8, [r1]
 80095ae:	f8d1 9000 	ldr.w	r9, [r1]
 80095b2:	f8d1 a000 	ldr.w	sl, [r1]
 80095b6:	6809      	ldr	r1, [r1, #0]
 80095b8:	0e09      	lsrs	r1, r1, #24
                                 sprintf(txbuff3, "AT+CIPSTA=\"%d.%d.%d.%d\",\"%d.%d.%d.%d\",\"%d.%d.%d.%d\"\r\n", // Ip, GateWay, NetMask
 80095ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80095bc:	f3ca 4107 	ubfx	r1, sl, #16, #8
 80095c0:	9108      	str	r1, [sp, #32]
 80095c2:	f3c9 2107 	ubfx	r1, r9, #8, #8
 80095c6:	9107      	str	r1, [sp, #28]
 80095c8:	fa5f f188 	uxtb.w	r1, r8
 80095cc:	9106      	str	r1, [sp, #24]
                                 (m_gw >> 0) & 0xFF,(m_gw >> 8) & 0xFF,(m_gw >> 16) & 0xFF,(m_gw >> 24) & 0xFF,
 80095ce:	ea4f 611e 	mov.w	r1, lr, lsr #24
                                 sprintf(txbuff3, "AT+CIPSTA=\"%d.%d.%d.%d\",\"%d.%d.%d.%d\",\"%d.%d.%d.%d\"\r\n", // Ip, GateWay, NetMask
 80095d2:	9105      	str	r1, [sp, #20]
 80095d4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80095d8:	f3cc 4107 	ubfx	r1, ip, #16, #8
 80095dc:	b2f6      	uxtb	r6, r6
                                 (m_ip >> 0) & 0xFF,(m_ip >> 8) & 0xFF,(m_ip >> 16) & 0xFF,(m_ip >> 24) & 0xFF,
 80095de:	0e2d      	lsrs	r5, r5, #24
                                 sprintf(txbuff3, "AT+CIPSTA=\"%d.%d.%d.%d\",\"%d.%d.%d.%d\",\"%d.%d.%d.%d\"\r\n", // Ip, GateWay, NetMask
 80095e0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80095e4:	9104      	str	r1, [sp, #16]
 80095e6:	9000      	str	r0, [sp, #0]
 80095e8:	4951      	ldr	r1, [pc, #324]	@ (8009730 <send_data+0x28c>)
 80095ea:	9703      	str	r7, [sp, #12]
 80095ec:	9602      	str	r6, [sp, #8]
 80095ee:	9501      	str	r5, [sp, #4]
 80095f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80095f4:	b2d2      	uxtb	r2, r2
 80095f6:	4836      	ldr	r0, [pc, #216]	@ (80096d0 <send_data+0x22c>)
 80095f8:	f003 fc50 	bl	800ce9c <sprintf>
 80095fc:	e7bf      	b.n	800957e <send_data+0xda>
                                 ip_flag = 0;
 80095fe:	7013      	strb	r3, [r2, #0]
                                 time_out = 0;
 8009600:	6023      	str	r3, [r4, #0]
                                 mux_flag = 1;
 8009602:	4b4c      	ldr	r3, [pc, #304]	@ (8009734 <send_data+0x290>)
 8009604:	2201      	movs	r2, #1
 8009606:	701a      	strb	r2, [r3, #0]
                     }
                  }
               }
            }
         }
         if (time_out) {
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	b193      	cbz	r3, 8009632 <send_data+0x18e>
            txcnt3 = strlen(txbuff3);
 800960c:	4830      	ldr	r0, [pc, #192]	@ (80096d0 <send_data+0x22c>)
 800960e:	f005 f897 	bl	800e740 <strlen>
 8009612:	4b49      	ldr	r3, [pc, #292]	@ (8009738 <send_data+0x294>)
 8009614:	b280      	uxth	r0, r0
 8009616:	8018      	strh	r0, [r3, #0]
            tx_enable3(txcnt3);
 8009618:	8818      	ldrh	r0, [r3, #0]
 800961a:	b2c0      	uxtb	r0, r0
 800961c:	f7ff fb6c 	bl	8008cf8 <tx_enable3>
            bzero(rxbuff3,2048);
 8009620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009624:	4845      	ldr	r0, [pc, #276]	@ (800973c <send_data+0x298>)
 8009626:	2100      	movs	r1, #0
 8009628:	f004 fd6a 	bl	800e100 <memset>
            rxcnt3 = 0;
 800962c:	4b44      	ldr	r3, [pc, #272]	@ (8009740 <send_data+0x29c>)
 800962e:	2200      	movs	r2, #0
 8009630:	801a      	strh	r2, [r3, #0]
         }
      }
}
 8009632:	b00a      	add	sp, #40	@ 0x28
 8009634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                           if (mux_flag) {
 8009638:	4b3e      	ldr	r3, [pc, #248]	@ (8009734 <send_data+0x290>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	b10b      	cbz	r3, 8009642 <send_data+0x19e>
                              sprintf(txbuff3, "AT+CIPMUX=1\r\n"); // 0 Single, 1 Mult
 800963e:	4941      	ldr	r1, [pc, #260]	@ (8009744 <send_data+0x2a0>)
 8009640:	e76f      	b.n	8009522 <send_data+0x7e>
                              if (server_flag) {
 8009642:	4b41      	ldr	r3, [pc, #260]	@ (8009748 <send_data+0x2a4>)
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	b10b      	cbz	r3, 800964c <send_data+0x1a8>
                                 sprintf(txbuff3, "AT+CIPSERVER=1,11000\r\n");     // 0 Disable 1 enable, Port
 8009648:	4940      	ldr	r1, [pc, #256]	@ (800974c <send_data+0x2a8>)
 800964a:	e76a      	b.n	8009522 <send_data+0x7e>
                                 if (mqtt_cfg_flag) {
 800964c:	4b40      	ldr	r3, [pc, #256]	@ (8009750 <send_data+0x2ac>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	b153      	cbz	r3, 8009668 <send_data+0x1c4>
                                    sprintf(txbuff3, "AT+MQTTUSERCFG=0,%d,\"CHOICHOI\",\"%s\",\"%s\",0,0,\"\"\r\n",
 8009652:	4b40      	ldr	r3, [pc, #256]	@ (8009754 <send_data+0x2b0>)
 8009654:	4940      	ldr	r1, [pc, #256]	@ (8009758 <send_data+0x2b4>)
 8009656:	781a      	ldrb	r2, [r3, #0]
 8009658:	4b40      	ldr	r3, [pc, #256]	@ (800975c <send_data+0x2b8>)
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	3201      	adds	r2, #1
 800965e:	4b40      	ldr	r3, [pc, #256]	@ (8009760 <send_data+0x2bc>)
 8009660:	481b      	ldr	r0, [pc, #108]	@ (80096d0 <send_data+0x22c>)
 8009662:	f003 fc1b 	bl	800ce9c <sprintf>
                                    time_out = 200;
 8009666:	e75f      	b.n	8009528 <send_data+0x84>
                                    if (mqtt_connect_flag) {
 8009668:	4b3e      	ldr	r3, [pc, #248]	@ (8009764 <send_data+0x2c0>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	b12b      	cbz	r3, 800967a <send_data+0x1d6>
                                       sprintf(txbuff3, "AT+MQTTCONN=0,\"%s\",%d,1\r\n",host_url,mqtt_port);
 800966e:	4b3e      	ldr	r3, [pc, #248]	@ (8009768 <send_data+0x2c4>)
 8009670:	4a3e      	ldr	r2, [pc, #248]	@ (800976c <send_data+0x2c8>)
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	493e      	ldr	r1, [pc, #248]	@ (8009770 <send_data+0x2cc>)
 8009676:	b29b      	uxth	r3, r3
 8009678:	e770      	b.n	800955c <send_data+0xb8>
                                       if (mqtt_sub_flag) {
 800967a:	4b3e      	ldr	r3, [pc, #248]	@ (8009774 <send_data+0x2d0>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	b12b      	cbz	r3, 800968c <send_data+0x1e8>
                                          mqtt_connect = 1;
 8009680:	4b14      	ldr	r3, [pc, #80]	@ (80096d4 <send_data+0x230>)
                                          sprintf(txbuff3, "AT+MQTTSUB=0,\"%s\",1\r\n",rx_topic);
 8009682:	493d      	ldr	r1, [pc, #244]	@ (8009778 <send_data+0x2d4>)
                                          mqtt_connect = 1;
 8009684:	2201      	movs	r2, #1
 8009686:	701a      	strb	r2, [r3, #0]
                                          sprintf(txbuff3, "AT+MQTTSUB=0,\"%s\",1\r\n",rx_topic);
 8009688:	4a3c      	ldr	r2, [pc, #240]	@ (800977c <send_data+0x2d8>)
 800968a:	e760      	b.n	800954e <send_data+0xaa>
                                          if (send_flag) {
 800968c:	4d3c      	ldr	r5, [pc, #240]	@ (8009780 <send_data+0x2dc>)
 800968e:	782b      	ldrb	r3, [r5, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 809b 	beq.w	80097cc <send_data+0x328>
                                             if (ap_mode) {
 8009696:	4b15      	ldr	r3, [pc, #84]	@ (80096ec <send_data+0x248>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	f003 07ff 	and.w	r7, r3, #255	@ 0xff
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d078      	beq.n	8009794 <send_data+0x2f0>
                                                   sprintf(txbuff3, "AT+CIPSEND=%d,%d\r\n",gid,tcp_length);
 80096a2:	4b38      	ldr	r3, [pc, #224]	@ (8009784 <send_data+0x2e0>)
 80096a4:	4938      	ldr	r1, [pc, #224]	@ (8009788 <send_data+0x2e4>)
 80096a6:	781a      	ldrb	r2, [r3, #0]
 80096a8:	4b38      	ldr	r3, [pc, #224]	@ (800978c <send_data+0x2e8>)
 80096aa:	4809      	ldr	r0, [pc, #36]	@ (80096d0 <send_data+0x22c>)
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	f003 fbf4 	bl	800ce9c <sprintf>
                                                    send_data_flag = 1;
 80096b4:	4b36      	ldr	r3, [pc, #216]	@ (8009790 <send_data+0x2ec>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]
                                                    time_out = 100;
 80096ba:	2364      	movs	r3, #100	@ 0x64
 80096bc:	6023      	str	r3, [r4, #0]
                                             send_flag = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	702b      	strb	r3, [r5, #0]
 80096c2:	e7a1      	b.n	8009608 <send_data+0x164>
 80096c4:	2000038c 	.word	0x2000038c
 80096c8:	20000370 	.word	0x20000370
 80096cc:	0800f4d3 	.word	0x0800f4d3
 80096d0:	200013d5 	.word	0x200013d5
 80096d4:	20000365 	.word	0x20000365
 80096d8:	2000036f 	.word	0x2000036f
 80096dc:	20000366 	.word	0x20000366
 80096e0:	200003aa 	.word	0x200003aa
 80096e4:	0800f4dc 	.word	0x0800f4dc
 80096e8:	2000036e 	.word	0x2000036e
 80096ec:	2000035f 	.word	0x2000035f
 80096f0:	0800f4ec 	.word	0x0800f4ec
 80096f4:	0800f4fa 	.word	0x0800f4fa
 80096f8:	20000362 	.word	0x20000362
 80096fc:	0800f508 	.word	0x0800f508
 8009700:	2000036a 	.word	0x2000036a
 8009704:	2000035e 	.word	0x2000035e
 8009708:	0800f51f 	.word	0x0800f51f
 800970c:	20000319 	.word	0x20000319
 8009710:	20000339 	.word	0x20000339
 8009714:	0800f545 	.word	0x0800f545
 8009718:	2000036d 	.word	0x2000036d
 800971c:	0800f55a 	.word	0x0800f55a
 8009720:	200003b0 	.word	0x200003b0
 8009724:	2000037c 	.word	0x2000037c
 8009728:	20000378 	.word	0x20000378
 800972c:	20000374 	.word	0x20000374
 8009730:	0800f595 	.word	0x0800f595
 8009734:	2000036c 	.word	0x2000036c
 8009738:	20002be4 	.word	0x20002be4
 800973c:	20001bd5 	.word	0x20001bd5
 8009740:	20002be6 	.word	0x20002be6
 8009744:	0800f5cb 	.word	0x0800f5cb
 8009748:	2000036b 	.word	0x2000036b
 800974c:	0800f5d9 	.word	0x0800f5d9
 8009750:	2000035b 	.word	0x2000035b
 8009754:	200003af 	.word	0x200003af
 8009758:	0800f5f0 	.word	0x0800f5f0
 800975c:	20000259 	.word	0x20000259
 8009760:	20000279 	.word	0x20000279
 8009764:	2000035a 	.word	0x2000035a
 8009768:	200003ac 	.word	0x200003ac
 800976c:	200002d9 	.word	0x200002d9
 8009770:	0800f622 	.word	0x0800f622
 8009774:	20000359 	.word	0x20000359
 8009778:	0800f63c 	.word	0x0800f63c
 800977c:	20000219 	.word	0x20000219
 8009780:	20000369 	.word	0x20000369
 8009784:	20000371 	.word	0x20000371
 8009788:	0800f652 	.word	0x0800f652
 800978c:	200003a8 	.word	0x200003a8
 8009790:	20000368 	.word	0x20000368
                                             	if (mqtt_send) {
 8009794:	4e15      	ldr	r6, [pc, #84]	@ (80097ec <send_data+0x348>)
 8009796:	7833      	ldrb	r3, [r6, #0]
 8009798:	b183      	cbz	r3, 80097bc <send_data+0x318>
                                                   if (mqtt_connect) {
 800979a:	4b15      	ldr	r3, [pc, #84]	@ (80097f0 <send_data+0x34c>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	b16b      	cbz	r3, 80097bc <send_data+0x318>
                                                      sprintf(txbuff3, "AT+MQTTPUBRAW=0,\"%s\",%d,0,0\r\n",tx_topic,txcnt3);
 80097a0:	4b14      	ldr	r3, [pc, #80]	@ (80097f4 <send_data+0x350>)
 80097a2:	4a15      	ldr	r2, [pc, #84]	@ (80097f8 <send_data+0x354>)
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	4915      	ldr	r1, [pc, #84]	@ (80097fc <send_data+0x358>)
 80097a8:	4815      	ldr	r0, [pc, #84]	@ (8009800 <send_data+0x35c>)
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	f003 fb76 	bl	800ce9c <sprintf>
                                                      send_data_flag = 1;
 80097b0:	4b14      	ldr	r3, [pc, #80]	@ (8009804 <send_data+0x360>)
 80097b2:	2201      	movs	r2, #1
 80097b4:	701a      	strb	r2, [r3, #0]
                                                      time_out = 100;
 80097b6:	2364      	movs	r3, #100	@ 0x64
                                                      mqtt_send = 0;
 80097b8:	7037      	strb	r7, [r6, #0]
                                                      time_out = 100;
 80097ba:	6023      	str	r3, [r4, #0]
                                                if (tcp_send) {
 80097bc:	4b12      	ldr	r3, [pc, #72]	@ (8009808 <send_data+0x364>)
 80097be:	781a      	ldrb	r2, [r3, #0]
 80097c0:	2a00      	cmp	r2, #0
 80097c2:	f43f af7c 	beq.w	80096be <send_data+0x21a>
                                                   tcp_send = 0;
 80097c6:	2200      	movs	r2, #0
 80097c8:	701a      	strb	r2, [r3, #0]
 80097ca:	e76a      	b.n	80096a2 <send_data+0x1fe>
                                             if (ntp_flag) {
 80097cc:	4b0f      	ldr	r3, [pc, #60]	@ (800980c <send_data+0x368>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	b113      	cbz	r3, 80097d8 <send_data+0x334>
                                                sprintf(txbuff3, "AT+CIPSNTPCFG=1,8,\"%s\"\r\n",ntp_url);
 80097d2:	4a0f      	ldr	r2, [pc, #60]	@ (8009810 <send_data+0x36c>)
 80097d4:	490f      	ldr	r1, [pc, #60]	@ (8009814 <send_data+0x370>)
 80097d6:	e699      	b.n	800950c <send_data+0x68>
                                                if (ntp_req_flag)  {
 80097d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009818 <send_data+0x374>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f43f af13 	beq.w	8009608 <send_data+0x164>
                                                   sprintf(txbuff3, "AT+CIPSNTPTIME?\r\n");
 80097e2:	490e      	ldr	r1, [pc, #56]	@ (800981c <send_data+0x378>)
 80097e4:	4806      	ldr	r0, [pc, #24]	@ (8009800 <send_data+0x35c>)
 80097e6:	f004 fe9b 	bl	800e520 <strcpy>
 80097ea:	e66e      	b.n	80094ca <send_data+0x26>
 80097ec:	20000364 	.word	0x20000364
 80097f0:	20000365 	.word	0x20000365
 80097f4:	20002be4 	.word	0x20002be4
 80097f8:	20000239 	.word	0x20000239
 80097fc:	0800f665 	.word	0x0800f665
 8009800:	200013d5 	.word	0x200013d5
 8009804:	20000368 	.word	0x20000368
 8009808:	20000363 	.word	0x20000363
 800980c:	2000035d 	.word	0x2000035d
 8009810:	20000299 	.word	0x20000299
 8009814:	0800f683 	.word	0x0800f683
 8009818:	2000035c 	.word	0x2000035c
 800981c:	0800f69c 	.word	0x0800f69c

08009820 <send_mode>:


void send_mode (void)
{
 8009820:	b410      	push	{r4}
      unsigned short idx;
      unsigned char bcc;
      txbuff3[0] = STX;
      txbuff3[1] = this_id;
 8009822:	490f      	ldr	r1, [pc, #60]	@ (8009860 <send_mode+0x40>)
      txbuff3[0] = STX;
 8009824:	4b0f      	ldr	r3, [pc, #60]	@ (8009864 <send_mode+0x44>)
      txbuff3[1] = this_id;
 8009826:	7809      	ldrb	r1, [r1, #0]
 8009828:	7059      	strb	r1, [r3, #1]
      txbuff3[2] = 0x41;
 800982a:	2141      	movs	r1, #65	@ 0x41
 800982c:	7099      	strb	r1, [r3, #2]
      txbuff3[3] = 0x20;
 800982e:	2120      	movs	r1, #32
      txbuff3[4] = 0x06;
 8009830:	2006      	movs	r0, #6
      txbuff3[0] = STX;
 8009832:	2202      	movs	r2, #2
      txbuff3[3] = 0x20;
 8009834:	70d9      	strb	r1, [r3, #3]
      txbuff3[5] = 0x20;
 8009836:	7159      	strb	r1, [r3, #5]
      txbuff3[6] = 0x20;
 8009838:	7199      	strb	r1, [r3, #6]
      txbuff3[7] = ETX;
 800983a:	2103      	movs	r1, #3
      txbuff3[4] = 0x06;
 800983c:	7118      	strb	r0, [r3, #4]
      txbuff3[7] = ETX;
 800983e:	71d9      	strb	r1, [r3, #7]
      txbuff3[0] = STX;
 8009840:	701a      	strb	r2, [r3, #0]
      txbuff3[7] = ETX;
 8009842:	2107      	movs	r1, #7
 8009844:	4618      	mov	r0, r3
      bcc = txbuff3[0];
      for (idx=1;idx<8;idx++) bcc = bcc ^ txbuff3[idx];
 8009846:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800984a:	3901      	subs	r1, #1
 800984c:	b289      	uxth	r1, r1
 800984e:	4062      	eors	r2, r4
 8009850:	2900      	cmp	r1, #0
 8009852:	d1f8      	bne.n	8009846 <send_mode+0x26>
      txbuff3[8] = bcc;
 8009854:	7202      	strb	r2, [r0, #8]
      tx_enable3(9);
}
 8009856:	f85d 4b04 	ldr.w	r4, [sp], #4
      tx_enable3(9);
 800985a:	2009      	movs	r0, #9
 800985c:	f7ff ba4c 	b.w	8008cf8 <tx_enable3>
 8009860:	20002bdc 	.word	0x20002bdc
 8009864:	200013d5 	.word	0x200013d5

08009868 <receive_check_wifi>:


void receive_check_wifi (void)
{
 8009868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      unsigned short idx,pos;
      unsigned char bcc,wait_wifi,rxok;
      if (rxcnt3 >= 2048) rxcnt3 = 0;
 800986c:	4e84      	ldr	r6, [pc, #528]	@ (8009a80 <receive_check_wifi+0x218>)
 800986e:	8833      	ldrh	r3, [r6, #0]
 8009870:	b29b      	uxth	r3, r3
 8009872:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009876:	bf24      	itt	cs
 8009878:	2300      	movcs	r3, #0
 800987a:	8033      	strhcs	r3, [r6, #0]
      if (rxcnt3) {
 800987c:	8833      	ldrh	r3, [r6, #0]
 800987e:	b29b      	uxth	r3, r3
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 8264 	beq.w	8009d4e <receive_check_wifi+0x4e6>
      	 rxok = 0;
         if ((rxbuff3[0] == STX) && (rxbuff3[1] == this_id) && (rxbuff3[5] == ETX) && (rxcnt3 >= 7)) {
 8009886:	4d7f      	ldr	r5, [pc, #508]	@ (8009a84 <receive_check_wifi+0x21c>)
 8009888:	782b      	ldrb	r3, [r5, #0]
 800988a:	2b02      	cmp	r3, #2
 800988c:	d128      	bne.n	80098e0 <receive_check_wifi+0x78>
 800988e:	4a7e      	ldr	r2, [pc, #504]	@ (8009a88 <receive_check_wifi+0x220>)
 8009890:	786b      	ldrb	r3, [r5, #1]
 8009892:	7812      	ldrb	r2, [r2, #0]
 8009894:	4293      	cmp	r3, r2
 8009896:	d123      	bne.n	80098e0 <receive_check_wifi+0x78>
 8009898:	796a      	ldrb	r2, [r5, #5]
 800989a:	2a03      	cmp	r2, #3
 800989c:	d120      	bne.n	80098e0 <receive_check_wifi+0x78>
 800989e:	8832      	ldrh	r2, [r6, #0]
 80098a0:	b292      	uxth	r2, r2
 80098a2:	2a06      	cmp	r2, #6
 80098a4:	d91c      	bls.n	80098e0 <receive_check_wifi+0x78>
            bcc = rxbuff3[0];
            for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff3[idx];
 80098a6:	78a9      	ldrb	r1, [r5, #2]
 80098a8:	78e8      	ldrb	r0, [r5, #3]
 80098aa:	792a      	ldrb	r2, [r5, #4]
            if (bcc == rxbuff3[6]) {
 80098ac:	79ac      	ldrb	r4, [r5, #6]
            for (idx=1;idx<6;idx++) bcc = bcc ^ rxbuff3[idx];
 80098ae:	f083 0302 	eor.w	r3, r3, #2
 80098b2:	404b      	eors	r3, r1
 80098b4:	4043      	eors	r3, r0
 80098b6:	4053      	eors	r3, r2
            if (bcc == rxbuff3[6]) {
 80098b8:	f083 0303 	eor.w	r3, r3, #3
 80098bc:	429c      	cmp	r4, r3
 80098be:	d10f      	bne.n	80098e0 <receive_check_wifi+0x78>
               if ((rxbuff3[2] == 0xFF) && (rxbuff3[3] == 0xFF) && (rxbuff3[4] == 0xFF)) {
 80098c0:	4001      	ands	r1, r0
 80098c2:	400a      	ands	r2, r1
 80098c4:	2aff      	cmp	r2, #255	@ 0xff
 80098c6:	d101      	bne.n	80098cc <receive_check_wifi+0x64>
                  NVIC_SystemReset();
 80098c8:	f7fe fe02 	bl	80084d0 <NVIC_SystemReset>
               } else {
                  send_mode();
 80098cc:	f7ff ffa8 	bl	8009820 <send_mode>
                  ap_mode = 1;
 80098d0:	4a6e      	ldr	r2, [pc, #440]	@ (8009a8c <receive_check_wifi+0x224>)
 80098d2:	2301      	movs	r3, #1
 80098d4:	7013      	strb	r3, [r2, #0]
                  reset_flag = 1;
 80098d6:	4a6e      	ldr	r2, [pc, #440]	@ (8009a90 <receive_check_wifi+0x228>)
 80098d8:	7013      	strb	r3, [r2, #0]
               }
               time_out = 100;
 80098da:	4b6e      	ldr	r3, [pc, #440]	@ (8009a94 <receive_check_wifi+0x22c>)
 80098dc:	2264      	movs	r2, #100	@ 0x64
 80098de:	601a      	str	r2, [r3, #0]
            }
         }
         // 2.x.x
         if ((rxbuff3[rxcnt3 - 3] == 0x0D) && (rxbuff3[rxcnt3 - 2] == 0x0A) && (rxbuff3[rxcnt3 - 1] == '>') && (rxcnt3 >= 4) && (rxok == 0)) {
 80098e0:	8833      	ldrh	r3, [r6, #0]
 80098e2:	fa15 f383 	uxtah	r3, r5, r3
 80098e6:	f813 3c03 	ldrb.w	r3, [r3, #-3]
 80098ea:	2b0d      	cmp	r3, #13
 80098ec:	f040 80b7 	bne.w	8009a5e <receive_check_wifi+0x1f6>
 80098f0:	8833      	ldrh	r3, [r6, #0]
 80098f2:	fa15 f383 	uxtah	r3, r5, r3
 80098f6:	f813 7c02 	ldrb.w	r7, [r3, #-2]
 80098fa:	2f0a      	cmp	r7, #10
 80098fc:	f040 80af 	bne.w	8009a5e <receive_check_wifi+0x1f6>
 8009900:	8833      	ldrh	r3, [r6, #0]
 8009902:	fa15 f383 	uxtah	r3, r5, r3
 8009906:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800990a:	2b3e      	cmp	r3, #62	@ 0x3e
 800990c:	f040 80a7 	bne.w	8009a5e <receive_check_wifi+0x1f6>
 8009910:	8833      	ldrh	r3, [r6, #0]
 8009912:	b29b      	uxth	r3, r3
 8009914:	2b03      	cmp	r3, #3
 8009916:	f240 80a2 	bls.w	8009a5e <receive_check_wifi+0x1f6>
            if (send_data_flag) {
 800991a:	4b5f      	ldr	r3, [pc, #380]	@ (8009a98 <receive_check_wifi+0x230>)
 800991c:	781a      	ldrb	r2, [r3, #0]
 800991e:	b19a      	cbz	r2, 8009948 <receive_check_wifi+0xe0>
               send_data_flag = 0;
               memcpy(txbuff3,tcp_tx,tcp_length);
 8009920:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8009ab0 <receive_check_wifi+0x248>
 8009924:	495d      	ldr	r1, [pc, #372]	@ (8009a9c <receive_check_wifi+0x234>)
 8009926:	485e      	ldr	r0, [pc, #376]	@ (8009aa0 <receive_check_wifi+0x238>)
               send_data_flag = 0;
 8009928:	2400      	movs	r4, #0
 800992a:	701c      	strb	r4, [r3, #0]
               memcpy(txbuff3,tcp_tx,tcp_length);
 800992c:	f8b8 2000 	ldrh.w	r2, [r8]
 8009930:	b292      	uxth	r2, r2
 8009932:	f004 fe53 	bl	800e5dc <memcpy>
               tx_enable3(tcp_length);
 8009936:	f8b8 0000 	ldrh.w	r0, [r8]
 800993a:	b2c0      	uxtb	r0, r0
 800993c:	f7ff f9dc 	bl	8008cf8 <tx_enable3>
               time_out = 10;
 8009940:	4b54      	ldr	r3, [pc, #336]	@ (8009a94 <receive_check_wifi+0x22c>)
 8009942:	601f      	str	r7, [r3, #0]
               main_time = 0;
 8009944:	4b57      	ldr	r3, [pc, #348]	@ (8009aa4 <receive_check_wifi+0x23c>)
 8009946:	601c      	str	r4, [r3, #0]
               //s_printf("Boot1 SEND %d \r\n",tcp_length);
            }
            rxok = 1;
 8009948:	2401      	movs	r4, #1
         }
	 //1.x.x
	 if ((rxbuff3[rxcnt3 - 4] == 0x0D) && (rxbuff3[rxcnt3 - 3] == 0x0A) && (rxbuff3[rxcnt3 - 2] == '>') && (rxbuff3[rxcnt3 - 1] == 0x20) && (rxcnt3 >= 5) && (rxok == 0)) {
 800994a:	8833      	ldrh	r3, [r6, #0]
 800994c:	fa15 f383 	uxtah	r3, r5, r3
 8009950:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8009954:	2b0d      	cmp	r3, #13
 8009956:	d130      	bne.n	80099ba <receive_check_wifi+0x152>
 8009958:	8833      	ldrh	r3, [r6, #0]
 800995a:	fa15 f383 	uxtah	r3, r5, r3
 800995e:	f813 7c03 	ldrb.w	r7, [r3, #-3]
 8009962:	2f0a      	cmp	r7, #10
 8009964:	d129      	bne.n	80099ba <receive_check_wifi+0x152>
 8009966:	8833      	ldrh	r3, [r6, #0]
 8009968:	fa15 f383 	uxtah	r3, r5, r3
 800996c:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8009970:	2b3e      	cmp	r3, #62	@ 0x3e
 8009972:	d122      	bne.n	80099ba <receive_check_wifi+0x152>
 8009974:	8833      	ldrh	r3, [r6, #0]
 8009976:	fa15 f383 	uxtah	r3, r5, r3
 800997a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800997e:	2b20      	cmp	r3, #32
 8009980:	d11b      	bne.n	80099ba <receive_check_wifi+0x152>
 8009982:	8833      	ldrh	r3, [r6, #0]
 8009984:	b29b      	uxth	r3, r3
 8009986:	2b04      	cmp	r3, #4
 8009988:	d917      	bls.n	80099ba <receive_check_wifi+0x152>
 800998a:	b9ac      	cbnz	r4, 80099b8 <receive_check_wifi+0x150>
	    if (send_data_flag) {
 800998c:	4b42      	ldr	r3, [pc, #264]	@ (8009a98 <receive_check_wifi+0x230>)
 800998e:	781a      	ldrb	r2, [r3, #0]
 8009990:	b192      	cbz	r2, 80099b8 <receive_check_wifi+0x150>
               send_data_flag = 0;
               memcpy(txbuff3,tcp_tx,tcp_length);
 8009992:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8009ab0 <receive_check_wifi+0x248>
               send_data_flag = 0;
 8009996:	701c      	strb	r4, [r3, #0]
               memcpy(txbuff3,tcp_tx,tcp_length);
 8009998:	f8b8 2000 	ldrh.w	r2, [r8]
 800999c:	493f      	ldr	r1, [pc, #252]	@ (8009a9c <receive_check_wifi+0x234>)
 800999e:	4840      	ldr	r0, [pc, #256]	@ (8009aa0 <receive_check_wifi+0x238>)
 80099a0:	b292      	uxth	r2, r2
 80099a2:	f004 fe1b 	bl	800e5dc <memcpy>
	       tx_enable3(tcp_length);
 80099a6:	f8b8 0000 	ldrh.w	r0, [r8]
 80099aa:	b2c0      	uxtb	r0, r0
 80099ac:	f7ff f9a4 	bl	8008cf8 <tx_enable3>
	       time_out = 10;
 80099b0:	4b38      	ldr	r3, [pc, #224]	@ (8009a94 <receive_check_wifi+0x22c>)
 80099b2:	601f      	str	r7, [r3, #0]
	       main_time = 0;
 80099b4:	4b3b      	ldr	r3, [pc, #236]	@ (8009aa4 <receive_check_wifi+0x23c>)
 80099b6:	601c      	str	r4, [r3, #0]
      	 rxok = 0;
 80099b8:	2401      	movs	r4, #1
	       //s_printf("Boot2 SEND %d \r\n",tcp_length);
	    }
	    rxok = 1;
	 }
         //AT+CIPSEND=, AT+MQTTPUBRAW=
         if (((strncmp(rxbuff3,"AT+CIPSEND=",11) == 0) || (strncmp(rxbuff3,"AT+MQTTPUBRAW=",14) == 0)) && (rxok == 0)) {
 80099ba:	493b      	ldr	r1, [pc, #236]	@ (8009aa8 <receive_check_wifi+0x240>)
 80099bc:	4831      	ldr	r0, [pc, #196]	@ (8009a84 <receive_check_wifi+0x21c>)
 80099be:	220b      	movs	r2, #11
 80099c0:	f004 fbf0 	bl	800e1a4 <strncmp>
 80099c4:	b128      	cbz	r0, 80099d2 <receive_check_wifi+0x16a>
 80099c6:	4939      	ldr	r1, [pc, #228]	@ (8009aac <receive_check_wifi+0x244>)
 80099c8:	482e      	ldr	r0, [pc, #184]	@ (8009a84 <receive_check_wifi+0x21c>)
 80099ca:	220e      	movs	r2, #14
 80099cc:	f004 fbea 	bl	800e1a4 <strncmp>
 80099d0:	bb10      	cbnz	r0, 8009a18 <receive_check_wifi+0x1b0>
 80099d2:	bb04      	cbnz	r4, 8009a16 <receive_check_wifi+0x1ae>
            if (rxbuff3[rxcnt3 - 1] == '>') {
 80099d4:	8833      	ldrh	r3, [r6, #0]
 80099d6:	fa15 f383 	uxtah	r3, r5, r3
 80099da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80099de:	2b3e      	cmp	r3, #62	@ 0x3e
 80099e0:	d119      	bne.n	8009a16 <receive_check_wifi+0x1ae>
               if (send_data_flag) {
 80099e2:	4b2d      	ldr	r3, [pc, #180]	@ (8009a98 <receive_check_wifi+0x230>)
 80099e4:	781a      	ldrb	r2, [r3, #0]
 80099e6:	b1b2      	cbz	r2, 8009a16 <receive_check_wifi+0x1ae>
                  send_data_flag = 0;
                  memcpy(txbuff3,tcp_tx,tcp_length);
 80099e8:	4f31      	ldr	r7, [pc, #196]	@ (8009ab0 <receive_check_wifi+0x248>)
                  send_data_flag = 0;
 80099ea:	701c      	strb	r4, [r3, #0]
                  memcpy(txbuff3,tcp_tx,tcp_length);
 80099ec:	883a      	ldrh	r2, [r7, #0]
 80099ee:	492b      	ldr	r1, [pc, #172]	@ (8009a9c <receive_check_wifi+0x234>)
 80099f0:	482b      	ldr	r0, [pc, #172]	@ (8009aa0 <receive_check_wifi+0x238>)
 80099f2:	b292      	uxth	r2, r2
 80099f4:	f004 fdf2 	bl	800e5dc <memcpy>
                  tx_enable3(tcp_length);
 80099f8:	8838      	ldrh	r0, [r7, #0]
 80099fa:	b2c0      	uxtb	r0, r0
 80099fc:	f7ff f97c 	bl	8008cf8 <tx_enable3>
                  bzero(rxbuff3, rxcnt3);
 8009a00:	8832      	ldrh	r2, [r6, #0]
 8009a02:	4820      	ldr	r0, [pc, #128]	@ (8009a84 <receive_check_wifi+0x21c>)
 8009a04:	b292      	uxth	r2, r2
 8009a06:	4621      	mov	r1, r4
 8009a08:	f004 fb7a 	bl	800e100 <memset>
                  rxcnt3 = 0;
                  time_out = 0;
 8009a0c:	4b21      	ldr	r3, [pc, #132]	@ (8009a94 <receive_check_wifi+0x22c>)
                  rxcnt3 = 0;
 8009a0e:	8034      	strh	r4, [r6, #0]
                  time_out = 0;
 8009a10:	601c      	str	r4, [r3, #0]
                  main_time = 0;
 8009a12:	4b24      	ldr	r3, [pc, #144]	@ (8009aa4 <receive_check_wifi+0x23c>)
 8009a14:	601c      	str	r4, [r3, #0]
      	 rxok = 0;
 8009a16:	2401      	movs	r4, #1
               }
            }
            rxok = 1;
         }
         //\r\n+IPD     1.xx    2.xx,3.xx +\r\n
         if (((rxbuff3[0] == 0x0D) && (rxbuff3[1] == 0x0A) && (strncmp(rxbuff3 + 2,"+IPD",4) == 0)) && (rxok == 0)) {
 8009a18:	782f      	ldrb	r7, [r5, #0]
 8009a1a:	2f0d      	cmp	r7, #13
 8009a1c:	f040 8089 	bne.w	8009b32 <receive_check_wifi+0x2ca>
 8009a20:	786b      	ldrb	r3, [r5, #1]
 8009a22:	2b0a      	cmp	r3, #10
 8009a24:	f040 8085 	bne.w	8009b32 <receive_check_wifi+0x2ca>
 8009a28:	4922      	ldr	r1, [pc, #136]	@ (8009ab4 <receive_check_wifi+0x24c>)
 8009a2a:	4823      	ldr	r0, [pc, #140]	@ (8009ab8 <receive_check_wifi+0x250>)
 8009a2c:	2204      	movs	r2, #4
 8009a2e:	f004 fbb9 	bl	800e1a4 <strncmp>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d17d      	bne.n	8009b32 <receive_check_wifi+0x2ca>
 8009a36:	2c00      	cmp	r4, #0
 8009a38:	d17a      	bne.n	8009b30 <receive_check_wifi+0x2c8>
            //RL+IPD,0,92:
            if (rxbuff3[6] == ',') {
 8009a3a:	79ab      	ldrb	r3, [r5, #6]
 8009a3c:	2b2c      	cmp	r3, #44	@ 0x2c
 8009a3e:	d177      	bne.n	8009b30 <receive_check_wifi+0x2c8>
               if (rxbuff3[8] == ',') {
 8009a40:	7a2b      	ldrb	r3, [r5, #8]
 8009a42:	2b2c      	cmp	r3, #44	@ 0x2c
 8009a44:	d174      	bne.n	8009b30 <receive_check_wifi+0x2c8>
                  if (rxbuff3[10] == ':') {
 8009a46:	7aab      	ldrb	r3, [r5, #10]
 8009a48:	491c      	ldr	r1, [pc, #112]	@ (8009abc <receive_check_wifi+0x254>)
 8009a4a:	481d      	ldr	r0, [pc, #116]	@ (8009ac0 <receive_check_wifi+0x258>)
 8009a4c:	2b3a      	cmp	r3, #58	@ 0x3a
 8009a4e:	d108      	bne.n	8009a62 <receive_check_wifi+0x1fa>
                     rx_length = rxbuff3[9] - 0x30;
 8009a50:	7a6b      	ldrb	r3, [r5, #9]
 8009a52:	3b30      	subs	r3, #48	@ 0x30
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	800b      	strh	r3, [r1, #0]
                     rx_offset = 11;
 8009a58:	230b      	movs	r3, #11
                  } else if (rxbuff3[12] == ':') {
                     rx_length = (rxbuff3[9] - 0x30) * 100 + (rxbuff3[10] - 0x30) * 10 + (rxbuff3[11] - 0x30);
                     rx_offset = 13;
                  } else if (rxbuff3[13] == ':') {
                     rx_length = (rxbuff3[9] - 0x30) * 1000 + (rxbuff3[10] - 0x30) * 100 + (rxbuff3[11] - 0x30) * 10 + (rxbuff3[12] - 0x30);
                     rx_offset = 14;
 8009a5a:	8003      	strh	r3, [r0, #0]
 8009a5c:	e047      	b.n	8009aee <receive_check_wifi+0x286>
      	 rxok = 0;
 8009a5e:	2400      	movs	r4, #0
 8009a60:	e773      	b.n	800994a <receive_check_wifi+0xe2>
                  } else if (rxbuff3[11] == ':') {
 8009a62:	7aec      	ldrb	r4, [r5, #11]
 8009a64:	2c3a      	cmp	r4, #58	@ 0x3a
 8009a66:	d12d      	bne.n	8009ac4 <receive_check_wifi+0x25c>
                     rx_length = (rxbuff3[9] - 0x30) * 10 + (rxbuff3[10] - 0x30);
 8009a68:	7a6a      	ldrb	r2, [r5, #9]
 8009a6a:	3a30      	subs	r2, #48	@ 0x30
 8009a6c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009a70:	3b30      	subs	r3, #48	@ 0x30
 8009a72:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	800b      	strh	r3, [r1, #0]
                     rx_offset = 12;
 8009a7a:	230c      	movs	r3, #12
 8009a7c:	e7ed      	b.n	8009a5a <receive_check_wifi+0x1f2>
 8009a7e:	bf00      	nop
 8009a80:	20002be6 	.word	0x20002be6
 8009a84:	20001bd5 	.word	0x20001bd5
 8009a88:	20002bdc 	.word	0x20002bdc
 8009a8c:	2000035f 	.word	0x2000035f
 8009a90:	20000370 	.word	0x20000370
 8009a94:	2000038c 	.word	0x2000038c
 8009a98:	20000368 	.word	0x20000368
 8009a9c:	200003d5 	.word	0x200003d5
 8009aa0:	200013d5 	.word	0x200013d5
 8009aa4:	20000388 	.word	0x20000388
 8009aa8:	0800f6ae 	.word	0x0800f6ae
 8009aac:	0800f6ba 	.word	0x0800f6ba
 8009ab0:	200003a8 	.word	0x200003a8
 8009ab4:	0800f6c9 	.word	0x0800f6c9
 8009ab8:	20001bd7 	.word	0x20001bd7
 8009abc:	200003a6 	.word	0x200003a6
 8009ac0:	200003a4 	.word	0x200003a4
                  } else if (rxbuff3[12] == ':') {
 8009ac4:	7b2a      	ldrb	r2, [r5, #12]
 8009ac6:	2a3a      	cmp	r2, #58	@ 0x3a
 8009ac8:	f040 8182 	bne.w	8009dd0 <receive_check_wifi+0x568>
                     rx_length = (rxbuff3[9] - 0x30) * 100 + (rxbuff3[10] - 0x30) * 10 + (rxbuff3[11] - 0x30);
 8009acc:	7a6a      	ldrb	r2, [r5, #9]
 8009ace:	3a30      	subs	r2, #48	@ 0x30
 8009ad0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009ad4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009ad8:	3c30      	subs	r4, #48	@ 0x30
 8009ada:	3b30      	subs	r3, #48	@ 0x30
 8009adc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8009ae0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009ae4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8009ae8:	b2a4      	uxth	r4, r4
 8009aea:	800c      	strh	r4, [r1, #0]
                     rx_offset = 13;
 8009aec:	8007      	strh	r7, [r0, #0]
                  }
                  if (rxcnt3 >= (rx_offset + rx_length)) {
 8009aee:	8832      	ldrh	r2, [r6, #0]
 8009af0:	8803      	ldrh	r3, [r0, #0]
 8009af2:	880c      	ldrh	r4, [r1, #0]
 8009af4:	b2a4      	uxth	r4, r4
 8009af6:	b292      	uxth	r2, r2
 8009af8:	fa14 f383 	uxtah	r3, r4, r3
 8009afc:	429a      	cmp	r2, r3
 8009afe:	db17      	blt.n	8009b30 <receive_check_wifi+0x2c8>
                     gid = rxbuff3[7] - 0x30;
 8009b00:	79eb      	ldrb	r3, [r5, #7]
 8009b02:	4a95      	ldr	r2, [pc, #596]	@ (8009d58 <receive_check_wifi+0x4f0>)
 8009b04:	3b30      	subs	r3, #48	@ 0x30
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	7013      	strb	r3, [r2, #0]
                     rx_check(rxbuff3 + rx_offset,rx_length);
 8009b0a:	8800      	ldrh	r0, [r0, #0]
 8009b0c:	8809      	ldrh	r1, [r1, #0]
 8009b0e:	fa15 f080 	uxtah	r0, r5, r0
 8009b12:	b289      	uxth	r1, r1
 8009b14:	f7ff faf2 	bl	80090fc <rx_check>
                     time_out = 0;
 8009b18:	4b90      	ldr	r3, [pc, #576]	@ (8009d5c <receive_check_wifi+0x4f4>)
                     main_time = 0;
                     bzero(rxbuff3, rxcnt3);
 8009b1a:	4891      	ldr	r0, [pc, #580]	@ (8009d60 <receive_check_wifi+0x4f8>)
                     time_out = 0;
 8009b1c:	2400      	movs	r4, #0
 8009b1e:	601c      	str	r4, [r3, #0]
                     main_time = 0;
 8009b20:	4b90      	ldr	r3, [pc, #576]	@ (8009d64 <receive_check_wifi+0x4fc>)
 8009b22:	601c      	str	r4, [r3, #0]
                     bzero(rxbuff3, rxcnt3);
 8009b24:	8832      	ldrh	r2, [r6, #0]
 8009b26:	4621      	mov	r1, r4
 8009b28:	b292      	uxth	r2, r2
 8009b2a:	f004 fae9 	bl	800e100 <memset>
                     rxcnt3 = 0;
 8009b2e:	8034      	strh	r4, [r6, #0]
      	 rxok = 0;
 8009b30:	2401      	movs	r4, #1
               }
            }
            rxok = 1;
         }
         //mqtt
         if ((strncmp(rxbuff3,"+MQTTSUBRECV", 12) == 0) && (rxok == 0)) {
 8009b32:	498d      	ldr	r1, [pc, #564]	@ (8009d68 <receive_check_wifi+0x500>)
 8009b34:	488a      	ldr	r0, [pc, #552]	@ (8009d60 <receive_check_wifi+0x4f8>)
 8009b36:	220c      	movs	r2, #12
 8009b38:	f004 fb34 	bl	800e1a4 <strncmp>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d135      	bne.n	8009bac <receive_check_wifi+0x344>
 8009b40:	2c00      	cmp	r4, #0
 8009b42:	d132      	bne.n	8009baa <receive_check_wifi+0x342>
            pos = 17 + rx_topic_length;
 8009b44:	4b89      	ldr	r3, [pc, #548]	@ (8009d6c <receive_check_wifi+0x504>)
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	f103 0111 	add.w	r1, r3, #17
            if (rxbuff3[pos] == ',') {
 8009b4e:	b289      	uxth	r1, r1
 8009b50:	5c6a      	ldrb	r2, [r5, r1]
 8009b52:	2a2c      	cmp	r2, #44	@ 0x2c
 8009b54:	d129      	bne.n	8009baa <receive_check_wifi+0x342>
               if (rxbuff3[pos + 2] == ',') {
 8009b56:	4429      	add	r1, r5
 8009b58:	4c85      	ldr	r4, [pc, #532]	@ (8009d70 <receive_check_wifi+0x508>)
 8009b5a:	788a      	ldrb	r2, [r1, #2]
 8009b5c:	4f85      	ldr	r7, [pc, #532]	@ (8009d74 <receive_check_wifi+0x50c>)
 8009b5e:	2a2c      	cmp	r2, #44	@ 0x2c
 8009b60:	f040 8153 	bne.w	8009e0a <receive_check_wifi+0x5a2>
                  rx_length = rxbuff3[pos + 1] - 0x30;
 8009b64:	784a      	ldrb	r2, [r1, #1]
 8009b66:	3a30      	subs	r2, #48	@ 0x30
 8009b68:	b292      	uxth	r2, r2
 8009b6a:	8022      	strh	r2, [r4, #0]
                  rx_offset = pos + 3;
 8009b6c:	3314      	adds	r3, #20
               } else if (rxbuff3[pos + 4] == ',') {
                  rx_length = (rxbuff3[pos + 1] - 0x30) * 100 + (rxbuff3[pos + 2] - 0x30) * 10 + (rxbuff3[pos + 3] - 0x30);
                  rx_offset = pos + 5;
               } else if (rxbuff3[pos + 5] == ',') {
                  rx_length = (rxbuff3[pos + 1] - 0x30) * 1000 + (rxbuff3[pos + 2] - 0x30) * 100 + (rxbuff3[pos + 3] - 0x30) * 10 + (rxbuff3[pos + 4] - 0x30);
                  rx_offset = pos + 6;
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	803b      	strh	r3, [r7, #0]
               }
               if (rxcnt3 >= (rx_offset + rx_length)) {
 8009b72:	8832      	ldrh	r2, [r6, #0]
 8009b74:	883b      	ldrh	r3, [r7, #0]
 8009b76:	8821      	ldrh	r1, [r4, #0]
 8009b78:	b289      	uxth	r1, r1
 8009b7a:	b292      	uxth	r2, r2
 8009b7c:	fa11 f383 	uxtah	r3, r1, r3
 8009b80:	429a      	cmp	r2, r3
 8009b82:	db12      	blt.n	8009baa <receive_check_wifi+0x342>
                  rx_check(rxbuff3 + rx_offset,rx_length);
 8009b84:	8838      	ldrh	r0, [r7, #0]
 8009b86:	8821      	ldrh	r1, [r4, #0]
 8009b88:	fa15 f080 	uxtah	r0, r5, r0
 8009b8c:	b289      	uxth	r1, r1
 8009b8e:	f7ff fab5 	bl	80090fc <rx_check>
                  bzero(rxbuff3, rxcnt3);
 8009b92:	8832      	ldrh	r2, [r6, #0]
 8009b94:	4872      	ldr	r0, [pc, #456]	@ (8009d60 <receive_check_wifi+0x4f8>)
 8009b96:	b292      	uxth	r2, r2
 8009b98:	2100      	movs	r1, #0
 8009b9a:	f004 fab1 	bl	800e100 <memset>
                  rxcnt3 = 0;
                  time_out = 0;
 8009b9e:	4a6f      	ldr	r2, [pc, #444]	@ (8009d5c <receive_check_wifi+0x4f4>)
                  rxcnt3 = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	8033      	strh	r3, [r6, #0]
                  time_out = 0;
 8009ba4:	6013      	str	r3, [r2, #0]
                  main_time = 0;
 8009ba6:	4a6f      	ldr	r2, [pc, #444]	@ (8009d64 <receive_check_wifi+0x4fc>)
 8009ba8:	6013      	str	r3, [r2, #0]
      	 rxok = 0;
 8009baa:	2401      	movs	r4, #1
               }
            }
            rxok = 1;
         }
         if (((rxbuff3[rxcnt3 - 2] == 0x0D) && (rxbuff3[rxcnt3 - 1] == 0x0A)) && (rxok == 0)) {
 8009bac:	8833      	ldrh	r3, [r6, #0]
 8009bae:	fa15 f383 	uxtah	r3, r5, r3
 8009bb2:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8009bb6:	2b0d      	cmp	r3, #13
 8009bb8:	f040 80be 	bne.w	8009d38 <receive_check_wifi+0x4d0>
 8009bbc:	8833      	ldrh	r3, [r6, #0]
 8009bbe:	fa15 f383 	uxtah	r3, r5, r3
 8009bc2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009bc6:	2b0a      	cmp	r3, #10
 8009bc8:	f040 80b6 	bne.w	8009d38 <receive_check_wifi+0x4d0>
 8009bcc:	2c00      	cmp	r4, #0
 8009bce:	f040 80b3 	bne.w	8009d38 <receive_check_wifi+0x4d0>
            main_time = 0;
 8009bd2:	f8df 8190 	ldr.w	r8, [pc, #400]	@ 8009d64 <receive_check_wifi+0x4fc>
            if ((strncmp(rxbuff3 + (rxcnt3 - 7),"ready",5) == 0) && (rxok == 0)) {
 8009bd6:	4968      	ldr	r1, [pc, #416]	@ (8009d78 <receive_check_wifi+0x510>)
            main_time = 0;
 8009bd8:	f8c8 4000 	str.w	r4, [r8]
            if ((strncmp(rxbuff3 + (rxcnt3 - 7),"ready",5) == 0) && (rxok == 0)) {
 8009bdc:	8830      	ldrh	r0, [r6, #0]
 8009bde:	b280      	uxth	r0, r0
 8009be0:	3807      	subs	r0, #7
 8009be2:	2205      	movs	r2, #5
 8009be4:	4428      	add	r0, r5
 8009be6:	f004 fadd 	bl	800e1a4 <strncmp>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	f040 8155 	bne.w	8009e9a <receive_check_wifi+0x632>
               time_out = 0;
 8009bf0:	4b5a      	ldr	r3, [pc, #360]	@ (8009d5c <receive_check_wifi+0x4f4>)
 8009bf2:	601c      	str	r4, [r3, #0]
               reset_flag = 0;
 8009bf4:	4b61      	ldr	r3, [pc, #388]	@ (8009d7c <receive_check_wifi+0x514>)
 8009bf6:	701c      	strb	r4, [r3, #0]
               pwr_flag = 1;
 8009bf8:	4b61      	ldr	r3, [pc, #388]	@ (8009d80 <receive_check_wifi+0x518>)
 8009bfa:	2701      	movs	r7, #1
 8009bfc:	701f      	strb	r7, [r3, #0]
               rxok = 1;
            }
            if ((strncmp(rxbuff3 + (rxcnt3 - 11),"busy p...",4) == 0) && (rxok == 0)) {
 8009bfe:	8830      	ldrh	r0, [r6, #0]
 8009c00:	4960      	ldr	r1, [pc, #384]	@ (8009d84 <receive_check_wifi+0x51c>)
 8009c02:	b280      	uxth	r0, r0
 8009c04:	380b      	subs	r0, #11
 8009c06:	2204      	movs	r2, #4
 8009c08:	4428      	add	r0, r5
 8009c0a:	f004 facb 	bl	800e1a4 <strncmp>
               wait_wifi = 1;
               rxok = 1;
            }
            //WIFI CONNECTED\r\nWIFI GOT IP\r\n		1.x.x
            if ((strncmp(rxbuff3,"WIFI CONNECTED",14) == 0) && (ap_mode == 0) && (rxok == 0)) {
 8009c0e:	495e      	ldr	r1, [pc, #376]	@ (8009d88 <receive_check_wifi+0x520>)
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f04f 020e 	mov.w	r2, #14
 8009c16:	4852      	ldr	r0, [pc, #328]	@ (8009d60 <receive_check_wifi+0x4f8>)
 8009c18:	bf08      	it	eq
 8009c1a:	2701      	moveq	r7, #1
 8009c1c:	f004 fac2 	bl	800e1a4 <strncmp>
 8009c20:	b980      	cbnz	r0, 8009c44 <receive_check_wifi+0x3dc>
 8009c22:	4b5a      	ldr	r3, [pc, #360]	@ (8009d8c <receive_check_wifi+0x524>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	b96b      	cbnz	r3, 8009c44 <receive_check_wifi+0x3dc>
 8009c28:	b95f      	cbnz	r7, 8009c42 <receive_check_wifi+0x3da>
               if (strncmp(rxbuff3 + 16,"WIFI GOT IP",11) == 0) {
 8009c2a:	4959      	ldr	r1, [pc, #356]	@ (8009d90 <receive_check_wifi+0x528>)
 8009c2c:	4859      	ldr	r0, [pc, #356]	@ (8009d94 <receive_check_wifi+0x52c>)
 8009c2e:	220b      	movs	r2, #11
 8009c30:	f004 fab8 	bl	800e1a4 <strncmp>
 8009c34:	b928      	cbnz	r0, 8009c42 <receive_check_wifi+0x3da>
               	  if (ssid_flag) {
 8009c36:	4b58      	ldr	r3, [pc, #352]	@ (8009d98 <receive_check_wifi+0x530>)
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	b113      	cbz	r3, 8009c42 <receive_check_wifi+0x3da>
               	     ssid_check =  1;
 8009c3c:	4b57      	ldr	r3, [pc, #348]	@ (8009d9c <receive_check_wifi+0x534>)
 8009c3e:	2201      	movs	r2, #1
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	2701      	movs	r7, #1
               	  }
               }
               rxok = 1;
            }
            if (((strncmp(rxbuff3 + (rxcnt3 - 7),"ERROR",5) == 0) || (strncmp(rxbuff3 + (rxcnt3 - 6),"FAIL",4) == 0)) && (rxok == 0)) {
 8009c44:	8830      	ldrh	r0, [r6, #0]
 8009c46:	4956      	ldr	r1, [pc, #344]	@ (8009da0 <receive_check_wifi+0x538>)
 8009c48:	b280      	uxth	r0, r0
 8009c4a:	3807      	subs	r0, #7
 8009c4c:	2205      	movs	r2, #5
 8009c4e:	4428      	add	r0, r5
 8009c50:	f004 faa8 	bl	800e1a4 <strncmp>
 8009c54:	b150      	cbz	r0, 8009c6c <receive_check_wifi+0x404>
 8009c56:	8830      	ldrh	r0, [r6, #0]
 8009c58:	4952      	ldr	r1, [pc, #328]	@ (8009da4 <receive_check_wifi+0x53c>)
 8009c5a:	b280      	uxth	r0, r0
 8009c5c:	3806      	subs	r0, #6
 8009c5e:	2204      	movs	r2, #4
 8009c60:	4428      	add	r0, r5
 8009c62:	f004 fa9f 	bl	800e1a4 <strncmp>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f040 813c 	bne.w	8009ee4 <receive_check_wifi+0x67c>
 8009c6c:	2f00      	cmp	r7, #0
 8009c6e:	f040 8139 	bne.w	8009ee4 <receive_check_wifi+0x67c>
               if ((ssid_flag) && (rxok == 0)) {
 8009c72:	4b49      	ldr	r3, [pc, #292]	@ (8009d98 <receive_check_wifi+0x530>)
 8009c74:	781a      	ldrb	r2, [r3, #0]
 8009c76:	f002 03ff 	and.w	r3, r2, #255	@ 0xff
 8009c7a:	b152      	cbz	r2, 8009c92 <receive_check_wifi+0x42a>
                  ssid_error++;
 8009c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8009da8 <receive_check_wifi+0x540>)
 8009c7e:	8813      	ldrh	r3, [r2, #0]
 8009c80:	3301      	adds	r3, #1
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	8013      	strh	r3, [r2, #0]
                  if (ssid_error >= 5) {
 8009c86:	8813      	ldrh	r3, [r2, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	f200 8107 	bhi.w	8009e9e <receive_check_wifi+0x636>
                     mqtt_port = 1883;
                     ap_mode = 1;
                     reset_flag = 1;
                     time_out = 0;
                  }
                  rxok = 1;
 8009c90:	2301      	movs	r3, #1
               }
               if ((mqtt_connect_flag) && (rxok == 0)) {
 8009c92:	4a46      	ldr	r2, [pc, #280]	@ (8009dac <receive_check_wifi+0x544>)
 8009c94:	7812      	ldrb	r2, [r2, #0]
 8009c96:	b1f2      	cbz	r2, 8009cd6 <receive_check_wifi+0x46e>
 8009c98:	b9e3      	cbnz	r3, 8009cd4 <receive_check_wifi+0x46c>
                  mqtt_connect_count++;
 8009c9a:	4945      	ldr	r1, [pc, #276]	@ (8009db0 <receive_check_wifi+0x548>)
 8009c9c:	880a      	ldrh	r2, [r1, #0]
 8009c9e:	3201      	adds	r2, #1
 8009ca0:	b292      	uxth	r2, r2
 8009ca2:	800a      	strh	r2, [r1, #0]
                  if (mqtt_connect_count >= 5) {
 8009ca4:	880a      	ldrh	r2, [r1, #0]
 8009ca6:	b292      	uxth	r2, r2
 8009ca8:	2a04      	cmp	r2, #4
 8009caa:	d913      	bls.n	8009cd4 <receive_check_wifi+0x46c>
                     mqtt_connect_count = 0;
                     reset_flag = 1;
 8009cac:	4a33      	ldr	r2, [pc, #204]	@ (8009d7c <receive_check_wifi+0x514>)
                     mqtt_connect_count = 0;
 8009cae:	800b      	strh	r3, [r1, #0]
                     reset_flag = 1;
 8009cb0:	2001      	movs	r0, #1
                     main_time = 0;
                     mqtt_check_cnt++;
 8009cb2:	4940      	ldr	r1, [pc, #256]	@ (8009db4 <receive_check_wifi+0x54c>)
                     reset_flag = 1;
 8009cb4:	7010      	strb	r0, [r2, #0]
                     main_time = 0;
 8009cb6:	f8c8 3000 	str.w	r3, [r8]
                     mqtt_check_cnt++;
 8009cba:	880a      	ldrh	r2, [r1, #0]
 8009cbc:	4402      	add	r2, r0
 8009cbe:	b292      	uxth	r2, r2
 8009cc0:	800a      	strh	r2, [r1, #0]
                     if (mqtt_check_cnt >= 2) {
 8009cc2:	880a      	ldrh	r2, [r1, #0]
 8009cc4:	b292      	uxth	r2, r2
 8009cc6:	4282      	cmp	r2, r0
 8009cc8:	d904      	bls.n	8009cd4 <receive_check_wifi+0x46c>
                        mqtt_check_cnt = 0;
                        ap_mode = 1;
 8009cca:	4a30      	ldr	r2, [pc, #192]	@ (8009d8c <receive_check_wifi+0x524>)
                        mqtt_check_cnt = 0;
 8009ccc:	800b      	strh	r3, [r1, #0]
                        ap_mode = 1;
 8009cce:	7010      	strb	r0, [r2, #0]
                        time_out = 0;
 8009cd0:	4a22      	ldr	r2, [pc, #136]	@ (8009d5c <receive_check_wifi+0x4f4>)
 8009cd2:	6013      	str	r3, [r2, #0]
                  rxok = 1;
 8009cd4:	2301      	movs	r3, #1
                     }
                  }
                  rxok = 1;
               }
               if ((mqtt_sub_flag) && (rxok == 0)) {
 8009cd6:	4a38      	ldr	r2, [pc, #224]	@ (8009db8 <receive_check_wifi+0x550>)
 8009cd8:	7812      	ldrb	r2, [r2, #0]
 8009cda:	b182      	cbz	r2, 8009cfe <receive_check_wifi+0x496>
 8009cdc:	b973      	cbnz	r3, 8009cfc <receive_check_wifi+0x494>
                  mqtt_sub_count++;
 8009cde:	4937      	ldr	r1, [pc, #220]	@ (8009dbc <receive_check_wifi+0x554>)
 8009ce0:	880a      	ldrh	r2, [r1, #0]
 8009ce2:	3201      	adds	r2, #1
 8009ce4:	b292      	uxth	r2, r2
 8009ce6:	800a      	strh	r2, [r1, #0]
                  if (mqtt_sub_count >= 10) {
 8009ce8:	880a      	ldrh	r2, [r1, #0]
 8009cea:	b292      	uxth	r2, r2
 8009cec:	2a09      	cmp	r2, #9
 8009cee:	d905      	bls.n	8009cfc <receive_check_wifi+0x494>
                     mqtt_sub_count = 0;
                     reset_flag = 1;
 8009cf0:	4a22      	ldr	r2, [pc, #136]	@ (8009d7c <receive_check_wifi+0x514>)
                     mqtt_sub_count = 0;
 8009cf2:	800b      	strh	r3, [r1, #0]
                     reset_flag = 1;
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	7011      	strb	r1, [r2, #0]
                     time_out = 0;
 8009cf8:	4a18      	ldr	r2, [pc, #96]	@ (8009d5c <receive_check_wifi+0x4f4>)
 8009cfa:	6013      	str	r3, [r2, #0]
                  rxok = 1;
 8009cfc:	2301      	movs	r3, #1
                  }
                  rxok = 1;
               }
               if ((send_flag) && (rxok == 0)) {
 8009cfe:	4a30      	ldr	r2, [pc, #192]	@ (8009dc0 <receive_check_wifi+0x558>)
 8009d00:	7812      	ldrb	r2, [r2, #0]
 8009d02:	b182      	cbz	r2, 8009d26 <receive_check_wifi+0x4be>
 8009d04:	b973      	cbnz	r3, 8009d24 <receive_check_wifi+0x4bc>
                  send_count++;
 8009d06:	492f      	ldr	r1, [pc, #188]	@ (8009dc4 <receive_check_wifi+0x55c>)
 8009d08:	880a      	ldrh	r2, [r1, #0]
 8009d0a:	3201      	adds	r2, #1
 8009d0c:	b292      	uxth	r2, r2
 8009d0e:	800a      	strh	r2, [r1, #0]
                  if (send_count >= 20) {
 8009d10:	880a      	ldrh	r2, [r1, #0]
 8009d12:	b292      	uxth	r2, r2
 8009d14:	2a13      	cmp	r2, #19
 8009d16:	d905      	bls.n	8009d24 <receive_check_wifi+0x4bc>
                     send_count = 0;
                     reset_flag = 1;
 8009d18:	4a18      	ldr	r2, [pc, #96]	@ (8009d7c <receive_check_wifi+0x514>)
                     send_count = 0;
 8009d1a:	800b      	strh	r3, [r1, #0]
                     reset_flag = 1;
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	7011      	strb	r1, [r2, #0]
                     time_out = 0;
 8009d20:	4a0e      	ldr	r2, [pc, #56]	@ (8009d5c <receive_check_wifi+0x4f4>)
 8009d22:	6013      	str	r3, [r2, #0]
                  rxok = 1;
 8009d24:	2301      	movs	r3, #1
                  }
                  rxok = 1;
               }
               if ((pwr_flag) && (rxok == 0)) {
 8009d26:	4a16      	ldr	r2, [pc, #88]	@ (8009d80 <receive_check_wifi+0x518>)
 8009d28:	7812      	ldrb	r2, [r2, #0]
 8009d2a:	b12a      	cbz	r2, 8009d38 <receive_check_wifi+0x4d0>
 8009d2c:	b923      	cbnz	r3, 8009d38 <receive_check_wifi+0x4d0>
                  pwr_error++;
 8009d2e:	4a26      	ldr	r2, [pc, #152]	@ (8009dc8 <receive_check_wifi+0x560>)
 8009d30:	8813      	ldrh	r3, [r2, #0]
 8009d32:	3301      	adds	r3, #1
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	8013      	strh	r3, [r2, #0]
                     }
                  }
               }
            }
         }
         if (rxcnt3) {
 8009d38:	8833      	ldrh	r3, [r6, #0]
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	b13b      	cbz	r3, 8009d4e <receive_check_wifi+0x4e6>
            if (wait_wifi == 0) {
               time_out = 0;
            }
            bzero(rxbuff3, rxcnt3);
 8009d3e:	8832      	ldrh	r2, [r6, #0]
 8009d40:	4807      	ldr	r0, [pc, #28]	@ (8009d60 <receive_check_wifi+0x4f8>)
 8009d42:	b292      	uxth	r2, r2
 8009d44:	2100      	movs	r1, #0
 8009d46:	f004 f9db 	bl	800e100 <memset>
            rxcnt3 = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	8033      	strh	r3, [r6, #0]
         }
      }
      rx_led = 0;
 8009d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8009dcc <receive_check_wifi+0x564>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
}
 8009d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d58:	20000371 	.word	0x20000371
 8009d5c:	2000038c 	.word	0x2000038c
 8009d60:	20001bd5 	.word	0x20001bd5
 8009d64:	20000388 	.word	0x20000388
 8009d68:	0800f6ce 	.word	0x0800f6ce
 8009d6c:	2000039c 	.word	0x2000039c
 8009d70:	200003a6 	.word	0x200003a6
 8009d74:	200003a4 	.word	0x200003a4
 8009d78:	0800f6db 	.word	0x0800f6db
 8009d7c:	20000370 	.word	0x20000370
 8009d80:	2000036f 	.word	0x2000036f
 8009d84:	0800f6e1 	.word	0x0800f6e1
 8009d88:	0800f6eb 	.word	0x0800f6eb
 8009d8c:	2000035f 	.word	0x2000035f
 8009d90:	0800f6fa 	.word	0x0800f6fa
 8009d94:	20001be5 	.word	0x20001be5
 8009d98:	2000036a 	.word	0x2000036a
 8009d9c:	20000361 	.word	0x20000361
 8009da0:	0800f706 	.word	0x0800f706
 8009da4:	0800f70c 	.word	0x0800f70c
 8009da8:	2000039a 	.word	0x2000039a
 8009dac:	2000035a 	.word	0x2000035a
 8009db0:	20000396 	.word	0x20000396
 8009db4:	20000394 	.word	0x20000394
 8009db8:	20000359 	.word	0x20000359
 8009dbc:	20000390 	.word	0x20000390
 8009dc0:	20000369 	.word	0x20000369
 8009dc4:	20000392 	.word	0x20000392
 8009dc8:	200003aa 	.word	0x200003aa
 8009dcc:	20002bde 	.word	0x20002bde
                  } else if (rxbuff3[13] == ':') {
 8009dd0:	7b6f      	ldrb	r7, [r5, #13]
 8009dd2:	2f3a      	cmp	r7, #58	@ 0x3a
 8009dd4:	f47f ae8b 	bne.w	8009aee <receive_check_wifi+0x286>
                     rx_length = (rxbuff3[9] - 0x30) * 1000 + (rxbuff3[10] - 0x30) * 100 + (rxbuff3[11] - 0x30) * 10 + (rxbuff3[12] - 0x30);
 8009dd8:	7a6f      	ldrb	r7, [r5, #9]
 8009dda:	3f30      	subs	r7, #48	@ 0x30
 8009ddc:	ebc7 1c47 	rsb	ip, r7, r7, lsl #5
 8009de0:	3b30      	subs	r3, #48	@ 0x30
 8009de2:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8009de6:	3a30      	subs	r2, #48	@ 0x30
 8009de8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009dec:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8009df0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009df4:	3c30      	subs	r4, #48	@ 0x30
 8009df6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dfa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009dfe:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	800b      	strh	r3, [r1, #0]
                     rx_offset = 14;
 8009e06:	230e      	movs	r3, #14
 8009e08:	e627      	b.n	8009a5a <receive_check_wifi+0x1f2>
               } else if (rxbuff3[pos + 3] == ',') {
 8009e0a:	f891 c003 	ldrb.w	ip, [r1, #3]
 8009e0e:	f1bc 0f2c 	cmp.w	ip, #44	@ 0x2c
 8009e12:	d10a      	bne.n	8009e2a <receive_check_wifi+0x5c2>
                  rx_length = (rxbuff3[pos + 1] - 0x30) * 10 + (rxbuff3[pos + 2] - 0x30);
 8009e14:	7849      	ldrb	r1, [r1, #1]
 8009e16:	3930      	subs	r1, #48	@ 0x30
 8009e18:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009e1c:	3a30      	subs	r2, #48	@ 0x30
 8009e1e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8009e22:	b292      	uxth	r2, r2
 8009e24:	8022      	strh	r2, [r4, #0]
                  rx_offset = pos + 4;
 8009e26:	3315      	adds	r3, #21
 8009e28:	e6a1      	b.n	8009b6e <receive_check_wifi+0x306>
               } else if (rxbuff3[pos + 4] == ',') {
 8009e2a:	7908      	ldrb	r0, [r1, #4]
 8009e2c:	282c      	cmp	r0, #44	@ 0x2c
 8009e2e:	d114      	bne.n	8009e5a <receive_check_wifi+0x5f2>
                  rx_length = (rxbuff3[pos + 1] - 0x30) * 100 + (rxbuff3[pos + 2] - 0x30) * 10 + (rxbuff3[pos + 3] - 0x30);
 8009e30:	7849      	ldrb	r1, [r1, #1]
 8009e32:	3930      	subs	r1, #48	@ 0x30
 8009e34:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009e38:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009e3c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8009e40:	3a30      	subs	r2, #48	@ 0x30
 8009e42:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 8009e46:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009e4a:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
 8009e4e:	fa1f fc8c 	uxth.w	ip, ip
 8009e52:	f8a4 c000 	strh.w	ip, [r4]
                  rx_offset = pos + 5;
 8009e56:	3316      	adds	r3, #22
 8009e58:	e689      	b.n	8009b6e <receive_check_wifi+0x306>
               } else if (rxbuff3[pos + 5] == ',') {
 8009e5a:	f891 e005 	ldrb.w	lr, [r1, #5]
 8009e5e:	f1be 0f2c 	cmp.w	lr, #44	@ 0x2c
 8009e62:	f47f ae86 	bne.w	8009b72 <receive_check_wifi+0x30a>
                  rx_length = (rxbuff3[pos + 1] - 0x30) * 1000 + (rxbuff3[pos + 2] - 0x30) * 100 + (rxbuff3[pos + 3] - 0x30) * 10 + (rxbuff3[pos + 4] - 0x30);
 8009e66:	7849      	ldrb	r1, [r1, #1]
 8009e68:	3930      	subs	r1, #48	@ 0x30
 8009e6a:	ebc1 1e41 	rsb	lr, r1, r1, lsl #5
 8009e6e:	3a30      	subs	r2, #48	@ 0x30
 8009e70:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8009e74:	3830      	subs	r0, #48	@ 0x30
 8009e76:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009e7a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8009e7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009e82:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8009e86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009e8a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8009e8e:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 8009e92:	b292      	uxth	r2, r2
 8009e94:	8022      	strh	r2, [r4, #0]
                  rx_offset = pos + 6;
 8009e96:	3317      	adds	r3, #23
 8009e98:	e669      	b.n	8009b6e <receive_check_wifi+0x306>
 8009e9a:	4627      	mov	r7, r4
 8009e9c:	e6af      	b.n	8009bfe <receive_check_wifi+0x396>
                     dhcp_disable = 0;
 8009e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec8 <receive_check_wifi+0x660>)
                     ssid_error = 0;
 8009ea0:	8017      	strh	r7, [r2, #0]
                     dhcp_disable = 0;
 8009ea2:	701f      	strb	r7, [r3, #0]
                     keep_alive_time = 60;
 8009ea4:	4b09      	ldr	r3, [pc, #36]	@ (8009ecc <receive_check_wifi+0x664>)
 8009ea6:	223c      	movs	r2, #60	@ 0x3c
 8009ea8:	701a      	strb	r2, [r3, #0]
                     mqtt_mode = 0;
 8009eaa:	4b09      	ldr	r3, [pc, #36]	@ (8009ed0 <receive_check_wifi+0x668>)
 8009eac:	701f      	strb	r7, [r3, #0]
                     mqtt_port = 1883;
 8009eae:	4b09      	ldr	r3, [pc, #36]	@ (8009ed4 <receive_check_wifi+0x66c>)
 8009eb0:	f240 725b 	movw	r2, #1883	@ 0x75b
 8009eb4:	801a      	strh	r2, [r3, #0]
                     ap_mode = 1;
 8009eb6:	4a08      	ldr	r2, [pc, #32]	@ (8009ed8 <receive_check_wifi+0x670>)
 8009eb8:	2301      	movs	r3, #1
 8009eba:	7013      	strb	r3, [r2, #0]
                     reset_flag = 1;
 8009ebc:	4a07      	ldr	r2, [pc, #28]	@ (8009edc <receive_check_wifi+0x674>)
 8009ebe:	7013      	strb	r3, [r2, #0]
                     time_out = 0;
 8009ec0:	4b07      	ldr	r3, [pc, #28]	@ (8009ee0 <receive_check_wifi+0x678>)
 8009ec2:	601f      	str	r7, [r3, #0]
 8009ec4:	e6e4      	b.n	8009c90 <receive_check_wifi+0x428>
 8009ec6:	bf00      	nop
 8009ec8:	200003b0 	.word	0x200003b0
 8009ecc:	200003ae 	.word	0x200003ae
 8009ed0:	200003af 	.word	0x200003af
 8009ed4:	200003ac 	.word	0x200003ac
 8009ed8:	2000035f 	.word	0x2000035f
 8009edc:	20000370 	.word	0x20000370
 8009ee0:	2000038c 	.word	0x2000038c
               if ((rxbuff3[rxcnt3 - 4] == 'O') && (rxbuff3[rxcnt3 - 3] == 'K')) {
 8009ee4:	8833      	ldrh	r3, [r6, #0]
 8009ee6:	fa15 f383 	uxtah	r3, r5, r3
 8009eea:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8009eee:	2b4f      	cmp	r3, #79	@ 0x4f
 8009ef0:	f47f af22 	bne.w	8009d38 <receive_check_wifi+0x4d0>
 8009ef4:	8833      	ldrh	r3, [r6, #0]
 8009ef6:	fa15 f383 	uxtah	r3, r5, r3
 8009efa:	f813 3c03 	ldrb.w	r3, [r3, #-3]
 8009efe:	2b4b      	cmp	r3, #75	@ 0x4b
 8009f00:	f47f af1a 	bne.w	8009d38 <receive_check_wifi+0x4d0>
                  if ((rxbuff3[rxcnt3 - 6] == 0x0D) && (rxbuff3[rxcnt3 - 5] == 0x0A)) {
 8009f04:	8833      	ldrh	r3, [r6, #0]
 8009f06:	fa15 f383 	uxtah	r3, r5, r3
 8009f0a:	f813 3c06 	ldrb.w	r3, [r3, #-6]
 8009f0e:	2b0d      	cmp	r3, #13
 8009f10:	f47f af12 	bne.w	8009d38 <receive_check_wifi+0x4d0>
 8009f14:	8833      	ldrh	r3, [r6, #0]
 8009f16:	fa15 f383 	uxtah	r3, r5, r3
 8009f1a:	f813 3c05 	ldrb.w	r3, [r3, #-5]
 8009f1e:	2b0a      	cmp	r3, #10
 8009f20:	f47f af0a 	bne.w	8009d38 <receive_check_wifi+0x4d0>
                     if ((strncmp(rxbuff3,"+MQTTPUB",8) == 0) && (strncmp(rxbuff3,"SEND",4) == 0) && (rxok == 0)) {
 8009f24:	4983      	ldr	r1, [pc, #524]	@ (800a134 <receive_check_wifi+0x8cc>)
 8009f26:	4884      	ldr	r0, [pc, #528]	@ (800a138 <receive_check_wifi+0x8d0>)
 8009f28:	2208      	movs	r2, #8
 8009f2a:	f004 f93b 	bl	800e1a4 <strncmp>
 8009f2e:	b960      	cbnz	r0, 8009f4a <receive_check_wifi+0x6e2>
 8009f30:	4982      	ldr	r1, [pc, #520]	@ (800a13c <receive_check_wifi+0x8d4>)
 8009f32:	4881      	ldr	r0, [pc, #516]	@ (800a138 <receive_check_wifi+0x8d0>)
 8009f34:	2204      	movs	r2, #4
 8009f36:	f004 f935 	bl	800e1a4 <strncmp>
 8009f3a:	b930      	cbnz	r0, 8009f4a <receive_check_wifi+0x6e2>
                        if (send_flag) {
 8009f3c:	4b80      	ldr	r3, [pc, #512]	@ (800a140 <receive_check_wifi+0x8d8>)
 8009f3e:	781a      	ldrb	r2, [r3, #0]
 8009f40:	b112      	cbz	r2, 8009f48 <receive_check_wifi+0x6e0>
                           send_flag = 0;
 8009f42:	7018      	strb	r0, [r3, #0]
                           send_count = 0;
 8009f44:	4b7f      	ldr	r3, [pc, #508]	@ (800a144 <receive_check_wifi+0x8dc>)
 8009f46:	8018      	strh	r0, [r3, #0]
                        rxok = 1;
 8009f48:	2401      	movs	r4, #1
                     if (((rxbuff3[0] == 0x0D) && (rxbuff3[1] == 0x0A) && (rxbuff3[2] == 'O') && (rxbuff3[3] == 'K')) && (rxok == 0)) {
 8009f4a:	782b      	ldrb	r3, [r5, #0]
 8009f4c:	2b0d      	cmp	r3, #13
 8009f4e:	d12c      	bne.n	8009faa <receive_check_wifi+0x742>
 8009f50:	786b      	ldrb	r3, [r5, #1]
 8009f52:	2b0a      	cmp	r3, #10
 8009f54:	d129      	bne.n	8009faa <receive_check_wifi+0x742>
 8009f56:	78ab      	ldrb	r3, [r5, #2]
 8009f58:	2b4f      	cmp	r3, #79	@ 0x4f
 8009f5a:	d126      	bne.n	8009faa <receive_check_wifi+0x742>
 8009f5c:	78eb      	ldrb	r3, [r5, #3]
 8009f5e:	2b4b      	cmp	r3, #75	@ 0x4b
 8009f60:	d123      	bne.n	8009faa <receive_check_wifi+0x742>
 8009f62:	bb0c      	cbnz	r4, 8009fa8 <receive_check_wifi+0x740>
                        if ((ap_mode) && (ssid_flag)) {
 8009f64:	4b78      	ldr	r3, [pc, #480]	@ (800a148 <receive_check_wifi+0x8e0>)
 8009f66:	781a      	ldrb	r2, [r3, #0]
 8009f68:	b142      	cbz	r2, 8009f7c <receive_check_wifi+0x714>
 8009f6a:	4a78      	ldr	r2, [pc, #480]	@ (800a14c <receive_check_wifi+0x8e4>)
 8009f6c:	7811      	ldrb	r1, [r2, #0]
 8009f6e:	b129      	cbz	r1, 8009f7c <receive_check_wifi+0x714>
                           ssid_flag = 0;
 8009f70:	7014      	strb	r4, [r2, #0]
                           ip_flag = 1;
 8009f72:	4a77      	ldr	r2, [pc, #476]	@ (800a150 <receive_check_wifi+0x8e8>)
 8009f74:	2101      	movs	r1, #1
 8009f76:	7011      	strb	r1, [r2, #0]
                           time_out = 0;
 8009f78:	4a76      	ldr	r2, [pc, #472]	@ (800a154 <receive_check_wifi+0x8ec>)
 8009f7a:	6014      	str	r4, [r2, #0]
                        if ((ap_mode == 0) && (ssid_check)) {
 8009f7c:	781a      	ldrb	r2, [r3, #0]
 8009f7e:	f002 03ff 	and.w	r3, r2, #255	@ 0xff
 8009f82:	b93a      	cbnz	r2, 8009f94 <receive_check_wifi+0x72c>
 8009f84:	4a74      	ldr	r2, [pc, #464]	@ (800a158 <receive_check_wifi+0x8f0>)
 8009f86:	7811      	ldrb	r1, [r2, #0]
 8009f88:	b121      	cbz	r1, 8009f94 <receive_check_wifi+0x72c>
                           ssid_check = 0;
 8009f8a:	7013      	strb	r3, [r2, #0]
                           ssid_flag = 0;
 8009f8c:	4a6f      	ldr	r2, [pc, #444]	@ (800a14c <receive_check_wifi+0x8e4>)
 8009f8e:	7013      	strb	r3, [r2, #0]
                           time_out = 0;
 8009f90:	4a70      	ldr	r2, [pc, #448]	@ (800a154 <receive_check_wifi+0x8ec>)
 8009f92:	6013      	str	r3, [r2, #0]
                        if (mqtt_sub_flag) {
 8009f94:	4a71      	ldr	r2, [pc, #452]	@ (800a15c <receive_check_wifi+0x8f4>)
 8009f96:	7813      	ldrb	r3, [r2, #0]
 8009f98:	b133      	cbz	r3, 8009fa8 <receive_check_wifi+0x740>
                           mqtt_sub_flag = 0;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	7013      	strb	r3, [r2, #0]
                           ntp_flag = 1;
 8009f9e:	4a70      	ldr	r2, [pc, #448]	@ (800a160 <receive_check_wifi+0x8f8>)
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	7011      	strb	r1, [r2, #0]
                           time_out = 0;
 8009fa4:	4a6b      	ldr	r2, [pc, #428]	@ (800a154 <receive_check_wifi+0x8ec>)
 8009fa6:	6013      	str	r3, [r2, #0]
                        rxok = 1;
 8009fa8:	2401      	movs	r4, #1
                     if ((strncmp(rxbuff3,"AT+CWSAP",8) == 0) && (rxok == 0)) {	//1.xx
 8009faa:	496e      	ldr	r1, [pc, #440]	@ (800a164 <receive_check_wifi+0x8fc>)
 8009fac:	4862      	ldr	r0, [pc, #392]	@ (800a138 <receive_check_wifi+0x8d0>)
 8009fae:	2208      	movs	r2, #8
 8009fb0:	f004 f8f8 	bl	800e1a4 <strncmp>
 8009fb4:	b960      	cbnz	r0, 8009fd0 <receive_check_wifi+0x768>
 8009fb6:	b95c      	cbnz	r4, 8009fd0 <receive_check_wifi+0x768>
                        if ((ap_mode) && (ssid_flag)) {
 8009fb8:	4b63      	ldr	r3, [pc, #396]	@ (800a148 <receive_check_wifi+0x8e0>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b143      	cbz	r3, 8009fd0 <receive_check_wifi+0x768>
 8009fbe:	4b63      	ldr	r3, [pc, #396]	@ (800a14c <receive_check_wifi+0x8e4>)
 8009fc0:	781a      	ldrb	r2, [r3, #0]
 8009fc2:	b12a      	cbz	r2, 8009fd0 <receive_check_wifi+0x768>
                           ssid_flag = 0;
 8009fc4:	701c      	strb	r4, [r3, #0]
                           ip_flag = 1;
 8009fc6:	4b62      	ldr	r3, [pc, #392]	@ (800a150 <receive_check_wifi+0x8e8>)
 8009fc8:	2201      	movs	r2, #1
 8009fca:	701a      	strb	r2, [r3, #0]
                           time_out = 0;
 8009fcc:	4b61      	ldr	r3, [pc, #388]	@ (800a154 <receive_check_wifi+0x8ec>)
 8009fce:	601c      	str	r4, [r3, #0]
                     if ((strncmp(rxbuff3 + rxcnt3 - 19,"WIFI GOT IP",11) == 0) && (rxok == 0))  {
 8009fd0:	8830      	ldrh	r0, [r6, #0]
 8009fd2:	4965      	ldr	r1, [pc, #404]	@ (800a168 <receive_check_wifi+0x900>)
 8009fd4:	b280      	uxth	r0, r0
 8009fd6:	3813      	subs	r0, #19
 8009fd8:	220b      	movs	r2, #11
 8009fda:	4428      	add	r0, r5
 8009fdc:	f004 f8e2 	bl	800e1a4 <strncmp>
 8009fe0:	b960      	cbnz	r0, 8009ffc <receive_check_wifi+0x794>
 8009fe2:	b954      	cbnz	r4, 8009ffa <receive_check_wifi+0x792>
                        if (ssid_flag) {
 8009fe4:	4b59      	ldr	r3, [pc, #356]	@ (800a14c <receive_check_wifi+0x8e4>)
 8009fe6:	781a      	ldrb	r2, [r3, #0]
 8009fe8:	2a00      	cmp	r2, #0
 8009fea:	f000 8112 	beq.w	800a212 <receive_check_wifi+0x9aa>
                           ssid_flag = 0;
 8009fee:	701c      	strb	r4, [r3, #0]
                           ip_flag = 1;	//OK
 8009ff0:	4b57      	ldr	r3, [pc, #348]	@ (800a150 <receive_check_wifi+0x8e8>)
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	701a      	strb	r2, [r3, #0]
                           time_out = 0;
 8009ff6:	4b57      	ldr	r3, [pc, #348]	@ (800a154 <receive_check_wifi+0x8ec>)
 8009ff8:	601c      	str	r4, [r3, #0]
                        rxok = 1;
 8009ffa:	2401      	movs	r4, #1
                     if ((strncmp(rxbuff3,"AT+CIPSERVER",12) == 0) && (rxok == 0)) {
 8009ffc:	495b      	ldr	r1, [pc, #364]	@ (800a16c <receive_check_wifi+0x904>)
 8009ffe:	484e      	ldr	r0, [pc, #312]	@ (800a138 <receive_check_wifi+0x8d0>)
 800a000:	220c      	movs	r2, #12
 800a002:	f004 f8cf 	bl	800e1a4 <strncmp>
 800a006:	b988      	cbnz	r0, 800a02c <receive_check_wifi+0x7c4>
 800a008:	b97c      	cbnz	r4, 800a02a <receive_check_wifi+0x7c2>
                        if (server_flag) {
 800a00a:	4b59      	ldr	r3, [pc, #356]	@ (800a170 <receive_check_wifi+0x908>)
 800a00c:	781a      	ldrb	r2, [r3, #0]
 800a00e:	b162      	cbz	r2, 800a02a <receive_check_wifi+0x7c2>
                           server_flag = 0;
 800a010:	701c      	strb	r4, [r3, #0]
                           if (ap_mode == 0) {
 800a012:	4b4d      	ldr	r3, [pc, #308]	@ (800a148 <receive_check_wifi+0x8e0>)
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	b92b      	cbnz	r3, 800a024 <receive_check_wifi+0x7bc>
                              if (mqtt_protocol) {
 800a018:	4b56      	ldr	r3, [pc, #344]	@ (800a174 <receive_check_wifi+0x90c>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	b113      	cbz	r3, 800a024 <receive_check_wifi+0x7bc>
                                 mqtt_cfg_flag = 1;
 800a01e:	4b56      	ldr	r3, [pc, #344]	@ (800a178 <receive_check_wifi+0x910>)
 800a020:	2201      	movs	r2, #1
 800a022:	701a      	strb	r2, [r3, #0]
                           time_out = 0;
 800a024:	4b4b      	ldr	r3, [pc, #300]	@ (800a154 <receive_check_wifi+0x8ec>)
 800a026:	2200      	movs	r2, #0
 800a028:	601a      	str	r2, [r3, #0]
                        rxok = 1;
 800a02a:	2401      	movs	r4, #1
                     if ((strncmp(rxbuff3,"AT+RFPOWER",10) == 0) && (rxok == 0)) {
 800a02c:	4953      	ldr	r1, [pc, #332]	@ (800a17c <receive_check_wifi+0x914>)
 800a02e:	4842      	ldr	r0, [pc, #264]	@ (800a138 <receive_check_wifi+0x8d0>)
 800a030:	220a      	movs	r2, #10
 800a032:	f004 f8b7 	bl	800e1a4 <strncmp>
 800a036:	b950      	cbnz	r0, 800a04e <receive_check_wifi+0x7e6>
 800a038:	b944      	cbnz	r4, 800a04c <receive_check_wifi+0x7e4>
                        if (pwr_flag) {
 800a03a:	4b51      	ldr	r3, [pc, #324]	@ (800a180 <receive_check_wifi+0x918>)
 800a03c:	781a      	ldrb	r2, [r3, #0]
 800a03e:	b12a      	cbz	r2, 800a04c <receive_check_wifi+0x7e4>
                           pwr_flag = 0;
 800a040:	701c      	strb	r4, [r3, #0]
                           mode_flag = 1;
 800a042:	4b50      	ldr	r3, [pc, #320]	@ (800a184 <receive_check_wifi+0x91c>)
 800a044:	2201      	movs	r2, #1
 800a046:	701a      	strb	r2, [r3, #0]
                           time_out = 0;
 800a048:	4b42      	ldr	r3, [pc, #264]	@ (800a154 <receive_check_wifi+0x8ec>)
 800a04a:	601c      	str	r4, [r3, #0]
                        rxok = 1;
 800a04c:	2401      	movs	r4, #1
                     if ((strncmp(rxbuff3,"AT+CWMODE",9) == 0) && (rxok == 0)) {
 800a04e:	494e      	ldr	r1, [pc, #312]	@ (800a188 <receive_check_wifi+0x920>)
 800a050:	4839      	ldr	r0, [pc, #228]	@ (800a138 <receive_check_wifi+0x8d0>)
 800a052:	2209      	movs	r2, #9
 800a054:	f004 f8a6 	bl	800e1a4 <strncmp>
 800a058:	b978      	cbnz	r0, 800a07a <receive_check_wifi+0x812>
 800a05a:	b974      	cbnz	r4, 800a07a <receive_check_wifi+0x812>
                        if (mode_flag) {
 800a05c:	4b49      	ldr	r3, [pc, #292]	@ (800a184 <receive_check_wifi+0x91c>)
 800a05e:	781a      	ldrb	r2, [r3, #0]
 800a060:	b15a      	cbz	r2, 800a07a <receive_check_wifi+0x812>
                           mode_flag = 0;
 800a062:	701c      	strb	r4, [r3, #0]
                           if (ap_mode == 0) {
 800a064:	4b38      	ldr	r3, [pc, #224]	@ (800a148 <receive_check_wifi+0x8e0>)
 800a066:	781a      	ldrb	r2, [r3, #0]
 800a068:	2301      	movs	r3, #1
 800a06a:	2a00      	cmp	r2, #0
 800a06c:	f040 80de 	bne.w	800a22c <receive_check_wifi+0x9c4>
                              host_flag = 1;
 800a070:	4a46      	ldr	r2, [pc, #280]	@ (800a18c <receive_check_wifi+0x924>)
                              ssid_flag = 1;
 800a072:	7013      	strb	r3, [r2, #0]
                           time_out = 0;
 800a074:	4b37      	ldr	r3, [pc, #220]	@ (800a154 <receive_check_wifi+0x8ec>)
 800a076:	2200      	movs	r2, #0
 800a078:	601a      	str	r2, [r3, #0]
                     if (((strncmp(rxbuff3,"AT+CIPAP",8) == 0) || (strncmp(rxbuff3,"AT+CIPSTA",9) == 0)) && (rxok == 0)) {
 800a07a:	4945      	ldr	r1, [pc, #276]	@ (800a190 <receive_check_wifi+0x928>)
 800a07c:	482e      	ldr	r0, [pc, #184]	@ (800a138 <receive_check_wifi+0x8d0>)
 800a07e:	2208      	movs	r2, #8
 800a080:	f004 f890 	bl	800e1a4 <strncmp>
 800a084:	b128      	cbz	r0, 800a092 <receive_check_wifi+0x82a>
 800a086:	4943      	ldr	r1, [pc, #268]	@ (800a194 <receive_check_wifi+0x92c>)
 800a088:	482b      	ldr	r0, [pc, #172]	@ (800a138 <receive_check_wifi+0x8d0>)
 800a08a:	2209      	movs	r2, #9
 800a08c:	f004 f88a 	bl	800e1a4 <strncmp>
 800a090:	b950      	cbnz	r0, 800a0a8 <receive_check_wifi+0x840>
 800a092:	b944      	cbnz	r4, 800a0a6 <receive_check_wifi+0x83e>
                        if (ip_flag) {
 800a094:	4b2e      	ldr	r3, [pc, #184]	@ (800a150 <receive_check_wifi+0x8e8>)
 800a096:	781a      	ldrb	r2, [r3, #0]
 800a098:	b12a      	cbz	r2, 800a0a6 <receive_check_wifi+0x83e>
                           ip_flag = 0;
 800a09a:	701c      	strb	r4, [r3, #0]
                           mux_flag = 1;
 800a09c:	4b3e      	ldr	r3, [pc, #248]	@ (800a198 <receive_check_wifi+0x930>)
 800a09e:	2201      	movs	r2, #1
 800a0a0:	701a      	strb	r2, [r3, #0]
                           time_out = 0;
 800a0a2:	4b2c      	ldr	r3, [pc, #176]	@ (800a154 <receive_check_wifi+0x8ec>)
 800a0a4:	601c      	str	r4, [r3, #0]
                        rxok = 1;
 800a0a6:	2401      	movs	r4, #1
                     if ((strncmp(rxbuff3,"AT+CIPMUX",9) == 0) && (rxok == 0)) {
 800a0a8:	493c      	ldr	r1, [pc, #240]	@ (800a19c <receive_check_wifi+0x934>)
 800a0aa:	4823      	ldr	r0, [pc, #140]	@ (800a138 <receive_check_wifi+0x8d0>)
 800a0ac:	2209      	movs	r2, #9
 800a0ae:	f004 f879 	bl	800e1a4 <strncmp>
 800a0b2:	b950      	cbnz	r0, 800a0ca <receive_check_wifi+0x862>
 800a0b4:	b944      	cbnz	r4, 800a0c8 <receive_check_wifi+0x860>
                        if (mux_flag) {
 800a0b6:	4b38      	ldr	r3, [pc, #224]	@ (800a198 <receive_check_wifi+0x930>)
 800a0b8:	781a      	ldrb	r2, [r3, #0]
 800a0ba:	b12a      	cbz	r2, 800a0c8 <receive_check_wifi+0x860>
                           mux_flag = 0;
 800a0bc:	701c      	strb	r4, [r3, #0]
                           server_flag = 1;
 800a0be:	4b2c      	ldr	r3, [pc, #176]	@ (800a170 <receive_check_wifi+0x908>)
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	701a      	strb	r2, [r3, #0]
                           time_out = 0;
 800a0c4:	4b23      	ldr	r3, [pc, #140]	@ (800a154 <receive_check_wifi+0x8ec>)
 800a0c6:	601c      	str	r4, [r3, #0]
                        rxok = 1;
 800a0c8:	2401      	movs	r4, #1
                     if ((strncmp(rxbuff3,"AT+MQTTUSERCFG",14) == 0) && (rxok == 0)) {
 800a0ca:	4935      	ldr	r1, [pc, #212]	@ (800a1a0 <receive_check_wifi+0x938>)
 800a0cc:	481a      	ldr	r0, [pc, #104]	@ (800a138 <receive_check_wifi+0x8d0>)
 800a0ce:	220e      	movs	r2, #14
 800a0d0:	f004 f868 	bl	800e1a4 <strncmp>
 800a0d4:	b950      	cbnz	r0, 800a0ec <receive_check_wifi+0x884>
 800a0d6:	b944      	cbnz	r4, 800a0ea <receive_check_wifi+0x882>
                        if (mqtt_cfg_flag) {
 800a0d8:	4b27      	ldr	r3, [pc, #156]	@ (800a178 <receive_check_wifi+0x910>)
 800a0da:	781a      	ldrb	r2, [r3, #0]
 800a0dc:	b12a      	cbz	r2, 800a0ea <receive_check_wifi+0x882>
                           mqtt_cfg_flag = 0;
 800a0de:	701c      	strb	r4, [r3, #0]
                           mqtt_connect_flag = 1;
 800a0e0:	4b30      	ldr	r3, [pc, #192]	@ (800a1a4 <receive_check_wifi+0x93c>)
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	701a      	strb	r2, [r3, #0]
                           time_out = 0;
 800a0e6:	4b1b      	ldr	r3, [pc, #108]	@ (800a154 <receive_check_wifi+0x8ec>)
 800a0e8:	601c      	str	r4, [r3, #0]
                        rxok = 1;
 800a0ea:	2401      	movs	r4, #1
                     if ((strncmp(rxbuff3,"+MQTTCONNECTED",14) == 0) && (rxok == 0)) {
 800a0ec:	492e      	ldr	r1, [pc, #184]	@ (800a1a8 <receive_check_wifi+0x940>)
 800a0ee:	4812      	ldr	r0, [pc, #72]	@ (800a138 <receive_check_wifi+0x8d0>)
 800a0f0:	220e      	movs	r2, #14
 800a0f2:	f004 f857 	bl	800e1a4 <strncmp>
 800a0f6:	b970      	cbnz	r0, 800a116 <receive_check_wifi+0x8ae>
 800a0f8:	b964      	cbnz	r4, 800a114 <receive_check_wifi+0x8ac>
                        if (mqtt_connect_flag) {
 800a0fa:	4b2a      	ldr	r3, [pc, #168]	@ (800a1a4 <receive_check_wifi+0x93c>)
 800a0fc:	781a      	ldrb	r2, [r3, #0]
 800a0fe:	b14a      	cbz	r2, 800a114 <receive_check_wifi+0x8ac>
                           mqtt_connect_flag = 0;
 800a100:	701c      	strb	r4, [r3, #0]
                           mqtt_sub_flag = 1;
 800a102:	4b16      	ldr	r3, [pc, #88]	@ (800a15c <receive_check_wifi+0x8f4>)
 800a104:	2201      	movs	r2, #1
 800a106:	701a      	strb	r2, [r3, #0]
                           mqtt_check_cnt = 0;
 800a108:	4b28      	ldr	r3, [pc, #160]	@ (800a1ac <receive_check_wifi+0x944>)
 800a10a:	801c      	strh	r4, [r3, #0]
                           mqtt_connect_count = 0;
 800a10c:	4b28      	ldr	r3, [pc, #160]	@ (800a1b0 <receive_check_wifi+0x948>)
 800a10e:	801c      	strh	r4, [r3, #0]
                           time_out = 0;
 800a110:	4b10      	ldr	r3, [pc, #64]	@ (800a154 <receive_check_wifi+0x8ec>)
 800a112:	601c      	str	r4, [r3, #0]
                        rxok = 1;
 800a114:	2401      	movs	r4, #1
                     if ((strncmp(rxbuff3,"AT+CIPSNTPCFG",13) == 0) && (rxok == 0)) {
 800a116:	4927      	ldr	r1, [pc, #156]	@ (800a1b4 <receive_check_wifi+0x94c>)
 800a118:	4807      	ldr	r0, [pc, #28]	@ (800a138 <receive_check_wifi+0x8d0>)
 800a11a:	220d      	movs	r2, #13
 800a11c:	f004 f842 	bl	800e1a4 <strncmp>
 800a120:	2800      	cmp	r0, #0
 800a122:	d150      	bne.n	800a1c6 <receive_check_wifi+0x95e>
 800a124:	2c00      	cmp	r4, #0
 800a126:	d14d      	bne.n	800a1c4 <receive_check_wifi+0x95c>
                        if (ntp_flag) {
 800a128:	4b0d      	ldr	r3, [pc, #52]	@ (800a160 <receive_check_wifi+0x8f8>)
 800a12a:	781a      	ldrb	r2, [r3, #0]
 800a12c:	2a00      	cmp	r2, #0
 800a12e:	d049      	beq.n	800a1c4 <receive_check_wifi+0x95c>
 800a130:	e042      	b.n	800a1b8 <receive_check_wifi+0x950>
 800a132:	bf00      	nop
 800a134:	0800f711 	.word	0x0800f711
 800a138:	20001bd5 	.word	0x20001bd5
 800a13c:	0800f71a 	.word	0x0800f71a
 800a140:	20000369 	.word	0x20000369
 800a144:	20000392 	.word	0x20000392
 800a148:	2000035f 	.word	0x2000035f
 800a14c:	2000036a 	.word	0x2000036a
 800a150:	2000036d 	.word	0x2000036d
 800a154:	2000038c 	.word	0x2000038c
 800a158:	20000361 	.word	0x20000361
 800a15c:	20000359 	.word	0x20000359
 800a160:	2000035d 	.word	0x2000035d
 800a164:	0800f71f 	.word	0x0800f71f
 800a168:	0800f6fa 	.word	0x0800f6fa
 800a16c:	0800f728 	.word	0x0800f728
 800a170:	2000036b 	.word	0x2000036b
 800a174:	20000360 	.word	0x20000360
 800a178:	2000035b 	.word	0x2000035b
 800a17c:	0800f735 	.word	0x0800f735
 800a180:	2000036f 	.word	0x2000036f
 800a184:	2000036e 	.word	0x2000036e
 800a188:	0800f740 	.word	0x0800f740
 800a18c:	20000362 	.word	0x20000362
 800a190:	0800f74a 	.word	0x0800f74a
 800a194:	0800f753 	.word	0x0800f753
 800a198:	2000036c 	.word	0x2000036c
 800a19c:	0800f75d 	.word	0x0800f75d
 800a1a0:	0800f767 	.word	0x0800f767
 800a1a4:	2000035a 	.word	0x2000035a
 800a1a8:	0800f776 	.word	0x0800f776
 800a1ac:	20000394 	.word	0x20000394
 800a1b0:	20000396 	.word	0x20000396
 800a1b4:	0800f785 	.word	0x0800f785
                           ntp_flag = 0;
 800a1b8:	701c      	strb	r4, [r3, #0]
                           ntp_req_flag = 1;
 800a1ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a230 <receive_check_wifi+0x9c8>)
 800a1bc:	2201      	movs	r2, #1
 800a1be:	701a      	strb	r2, [r3, #0]
                           mqtt_sub_count = 0;
 800a1c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a234 <receive_check_wifi+0x9cc>)
 800a1c2:	801c      	strh	r4, [r3, #0]
                        rxok = 1;
 800a1c4:	2401      	movs	r4, #1
                     if ((strncmp(rxbuff3,"AT+CIPSNTPTIME",14) == 0) && (rxok == 0)) {
 800a1c6:	491c      	ldr	r1, [pc, #112]	@ (800a238 <receive_check_wifi+0x9d0>)
 800a1c8:	481c      	ldr	r0, [pc, #112]	@ (800a23c <receive_check_wifi+0x9d4>)
 800a1ca:	220e      	movs	r2, #14
 800a1cc:	f003 ffea 	bl	800e1a4 <strncmp>
 800a1d0:	b928      	cbnz	r0, 800a1de <receive_check_wifi+0x976>
 800a1d2:	b91c      	cbnz	r4, 800a1dc <receive_check_wifi+0x974>
                        if (ntp_req_flag) {
 800a1d4:	4b16      	ldr	r3, [pc, #88]	@ (800a230 <receive_check_wifi+0x9c8>)
 800a1d6:	781a      	ldrb	r2, [r3, #0]
 800a1d8:	b102      	cbz	r2, 800a1dc <receive_check_wifi+0x974>
                           ntp_req_flag = 0;
 800a1da:	701c      	strb	r4, [r3, #0]
                        rxok = 1;
 800a1dc:	2401      	movs	r4, #1
                     if ((strncmp(rxbuff3,"AT+CWHOSTNAME",13) == 0) && (rxok == 0)) {
 800a1de:	4918      	ldr	r1, [pc, #96]	@ (800a240 <receive_check_wifi+0x9d8>)
 800a1e0:	4816      	ldr	r0, [pc, #88]	@ (800a23c <receive_check_wifi+0x9d4>)
 800a1e2:	220d      	movs	r2, #13
 800a1e4:	f003 ffde 	bl	800e1a4 <strncmp>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	f47f ada5 	bne.w	8009d38 <receive_check_wifi+0x4d0>
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	f47f ada2 	bne.w	8009d38 <receive_check_wifi+0x4d0>
                        if (host_flag) {
 800a1f4:	4b13      	ldr	r3, [pc, #76]	@ (800a244 <receive_check_wifi+0x9dc>)
 800a1f6:	781a      	ldrb	r2, [r3, #0]
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	f43f ad9d 	beq.w	8009d38 <receive_check_wifi+0x4d0>
                           host_flag = 0;
 800a1fe:	701c      	strb	r4, [r3, #0]
                           if (ap_mode == 0) {
 800a200:	4b11      	ldr	r3, [pc, #68]	@ (800a248 <receive_check_wifi+0x9e0>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	f47f ad97 	bne.w	8009d38 <receive_check_wifi+0x4d0>
                              ssid_flag = 1;
 800a20a:	4b10      	ldr	r3, [pc, #64]	@ (800a24c <receive_check_wifi+0x9e4>)
 800a20c:	2201      	movs	r2, #1
 800a20e:	701a      	strb	r2, [r3, #0]
 800a210:	e592      	b.n	8009d38 <receive_check_wifi+0x4d0>
                           if (dhcp_disable) {
 800a212:	4b0f      	ldr	r3, [pc, #60]	@ (800a250 <receive_check_wifi+0x9e8>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	f43f aeef 	beq.w	8009ffa <receive_check_wifi+0x792>
                              if (ip_flag) {
 800a21c:	4b0d      	ldr	r3, [pc, #52]	@ (800a254 <receive_check_wifi+0x9ec>)
 800a21e:	781a      	ldrb	r2, [r3, #0]
 800a220:	2a00      	cmp	r2, #0
 800a222:	f43f aeea 	beq.w	8009ffa <receive_check_wifi+0x792>
                                 ip_flag = 0;
 800a226:	701c      	strb	r4, [r3, #0]
                                 mux_flag = 1;
 800a228:	4b0b      	ldr	r3, [pc, #44]	@ (800a258 <receive_check_wifi+0x9f0>)
 800a22a:	e6e2      	b.n	8009ff2 <receive_check_wifi+0x78a>
                              ssid_flag = 1;
 800a22c:	4a07      	ldr	r2, [pc, #28]	@ (800a24c <receive_check_wifi+0x9e4>)
 800a22e:	e720      	b.n	800a072 <receive_check_wifi+0x80a>
 800a230:	2000035c 	.word	0x2000035c
 800a234:	20000390 	.word	0x20000390
 800a238:	0800f793 	.word	0x0800f793
 800a23c:	20001bd5 	.word	0x20001bd5
 800a240:	0800f7a2 	.word	0x0800f7a2
 800a244:	20000362 	.word	0x20000362
 800a248:	2000035f 	.word	0x2000035f
 800a24c:	2000036a 	.word	0x2000036a
 800a250:	200003b0 	.word	0x200003b0
 800a254:	2000036d 	.word	0x2000036d
 800a258:	2000036c 	.word	0x2000036c

0800a25c <serial_check>:


void serial_check (void)
{
      unsigned int max_time;
      if ((rxcnt1 != 0) && (rxck1 >= 3)) {
 800a25c:	4b42      	ldr	r3, [pc, #264]	@ (800a368 <serial_check+0x10c>)
 800a25e:	881b      	ldrh	r3, [r3, #0]
 800a260:	b29b      	uxth	r3, r3
{
 800a262:	b510      	push	{r4, lr}
      if ((rxcnt1 != 0) && (rxck1 >= 3)) {
 800a264:	b13b      	cbz	r3, 800a276 <serial_check+0x1a>
 800a266:	4b41      	ldr	r3, [pc, #260]	@ (800a36c <serial_check+0x110>)
 800a268:	781a      	ldrb	r2, [r3, #0]
 800a26a:	2a02      	cmp	r2, #2
 800a26c:	d903      	bls.n	800a276 <serial_check+0x1a>
         rxck1 = 0;
 800a26e:	2200      	movs	r2, #0
 800a270:	701a      	strb	r2, [r3, #0]
         receive_check1();
 800a272:	f7fe fd59 	bl	8008d28 <receive_check1>
      }
      if ((rxcnt2 != 0) && (rxck2 >= 3)) {
 800a276:	4b3e      	ldr	r3, [pc, #248]	@ (800a370 <serial_check+0x114>)
 800a278:	881b      	ldrh	r3, [r3, #0]
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	b13b      	cbz	r3, 800a28e <serial_check+0x32>
 800a27e:	4b3d      	ldr	r3, [pc, #244]	@ (800a374 <serial_check+0x118>)
 800a280:	781a      	ldrb	r2, [r3, #0]
 800a282:	2a02      	cmp	r2, #2
 800a284:	d903      	bls.n	800a28e <serial_check+0x32>
         rxck2 = 0;
 800a286:	2200      	movs	r2, #0
 800a288:	701a      	strb	r2, [r3, #0]
         receive_check2();
 800a28a:	f7fe fd87 	bl	8008d9c <receive_check2>
      }
      if ((rxcnt3 != 0) && (rxck3 >= 5)) {
 800a28e:	4b3a      	ldr	r3, [pc, #232]	@ (800a378 <serial_check+0x11c>)
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	b29b      	uxth	r3, r3
 800a294:	b13b      	cbz	r3, 800a2a6 <serial_check+0x4a>
 800a296:	4b39      	ldr	r3, [pc, #228]	@ (800a37c <serial_check+0x120>)
 800a298:	781a      	ldrb	r2, [r3, #0]
 800a29a:	2a04      	cmp	r2, #4
 800a29c:	d903      	bls.n	800a2a6 <serial_check+0x4a>
         rxck3 = 0;
 800a29e:	2200      	movs	r2, #0
 800a2a0:	701a      	strb	r2, [r3, #0]
         receive_check_wifi();
 800a2a2:	f7ff fae1 	bl	8009868 <receive_check_wifi>
      }
      if (time_out == 0) {
 800a2a6:	4b36      	ldr	r3, [pc, #216]	@ (800a380 <serial_check+0x124>)
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	2a00      	cmp	r2, #0
 800a2ac:	d14f      	bne.n	800a34e <serial_check+0xf2>
         send_data();
 800a2ae:	f7ff f8f9 	bl	80094a4 <send_data>
      } else {
         time_out--;
      }
      main_time++;
 800a2b2:	4c34      	ldr	r4, [pc, #208]	@ (800a384 <serial_check+0x128>)
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	6023      	str	r3, [r4, #0]
      if (mqtt_connect) {
 800a2ba:	4b33      	ldr	r3, [pc, #204]	@ (800a388 <serial_check+0x12c>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d04e      	beq.n	800a360 <serial_check+0x104>
         max_time = 600000;
         time_req++;
 800a2c2:	4b32      	ldr	r3, [pc, #200]	@ (800a38c <serial_check+0x130>)
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	3201      	adds	r2, #1
 800a2c8:	601a      	str	r2, [r3, #0]
         if (time_req >= 1800000) {
 800a2ca:	6819      	ldr	r1, [r3, #0]
 800a2cc:	4a30      	ldr	r2, [pc, #192]	@ (800a390 <serial_check+0x134>)
 800a2ce:	4291      	cmp	r1, r2
 800a2d0:	d304      	bcc.n	800a2dc <serial_check+0x80>
            time_req = 0;
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]
            ntp_req_flag = 1;
 800a2d6:	4b2f      	ldr	r3, [pc, #188]	@ (800a394 <serial_check+0x138>)
 800a2d8:	2201      	movs	r2, #1
 800a2da:	701a      	strb	r2, [r3, #0]
         }
         status_time++;
 800a2dc:	4a2e      	ldr	r2, [pc, #184]	@ (800a398 <serial_check+0x13c>)
 800a2de:	8813      	ldrh	r3, [r2, #0]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	8013      	strh	r3, [r2, #0]
         if (status_time >= 30000) {
 800a2e6:	8813      	ldrh	r3, [r2, #0]
 800a2e8:	f247 512f 	movw	r1, #29999	@ 0x752f
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	428b      	cmp	r3, r1
 800a2f0:	d831      	bhi.n	800a356 <serial_check+0xfa>
         max_time = 600000;
 800a2f2:	4b2a      	ldr	r3, [pc, #168]	@ (800a39c <serial_check+0x140>)
            send_board_data();
         }
      } else {
         max_time = 60000;
      }
      if (main_time >= max_time) {
 800a2f4:	6822      	ldr	r2, [r4, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d304      	bcc.n	800a304 <serial_check+0xa8>
         main_time = 0;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	6023      	str	r3, [r4, #0]
         reset_flag = 1;
 800a2fe:	4b28      	ldr	r3, [pc, #160]	@ (800a3a0 <serial_check+0x144>)
 800a300:	2201      	movs	r2, #1
 800a302:	701a      	strb	r2, [r3, #0]
      }
      if (reboot_flag) {
 800a304:	4927      	ldr	r1, [pc, #156]	@ (800a3a4 <serial_check+0x148>)
 800a306:	780b      	ldrb	r3, [r1, #0]
 800a308:	b17b      	cbz	r3, 800a32a <serial_check+0xce>
         reboot_count++;
 800a30a:	4a27      	ldr	r2, [pc, #156]	@ (800a3a8 <serial_check+0x14c>)
 800a30c:	8813      	ldrh	r3, [r2, #0]
 800a30e:	3301      	adds	r3, #1
 800a310:	b29b      	uxth	r3, r3
 800a312:	8013      	strh	r3, [r2, #0]
         if (reboot_count >= 500) {
 800a314:	8813      	ldrh	r3, [r2, #0]
 800a316:	b29b      	uxth	r3, r3
 800a318:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a31c:	d305      	bcc.n	800a32a <serial_check+0xce>
            reboot_count = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	8013      	strh	r3, [r2, #0]
            reboot_flag = 0;
 800a322:	700b      	strb	r3, [r1, #0]
            reset_flag = 1;
 800a324:	4b1e      	ldr	r3, [pc, #120]	@ (800a3a0 <serial_check+0x144>)
 800a326:	2201      	movs	r2, #1
 800a328:	701a      	strb	r2, [r3, #0]
         }
      }
      if (ap_mode) {
 800a32a:	4920      	ldr	r1, [pc, #128]	@ (800a3ac <serial_check+0x150>)
 800a32c:	780b      	ldrb	r3, [r1, #0]
 800a32e:	b16b      	cbz	r3, 800a34c <serial_check+0xf0>
      	 ap_mode_time++;
 800a330:	4b1f      	ldr	r3, [pc, #124]	@ (800a3b0 <serial_check+0x154>)
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	3201      	adds	r2, #1
 800a336:	601a      	str	r2, [r3, #0]
      	 if (ap_mode_time >= 600000) {
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	4a1e      	ldr	r2, [pc, #120]	@ (800a3b4 <serial_check+0x158>)
 800a33c:	4290      	cmp	r0, r2
 800a33e:	d905      	bls.n	800a34c <serial_check+0xf0>
      	    ap_mode_time = 0;
 800a340:	2200      	movs	r2, #0
 800a342:	601a      	str	r2, [r3, #0]
      	    ap_mode = 0;
      	    reset_flag = 1;
 800a344:	4b16      	ldr	r3, [pc, #88]	@ (800a3a0 <serial_check+0x144>)
      	    ap_mode = 0;
 800a346:	700a      	strb	r2, [r1, #0]
      	    reset_flag = 1;
 800a348:	2201      	movs	r2, #1
 800a34a:	701a      	strb	r2, [r3, #0]
      	 }
      }
}
 800a34c:	bd10      	pop	{r4, pc}
         time_out--;
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	3a01      	subs	r2, #1
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	e7ad      	b.n	800a2b2 <serial_check+0x56>
            status_time = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	8013      	strh	r3, [r2, #0]
            send_board_data();
 800a35a:	f7fe fe57 	bl	800900c <send_board_data>
 800a35e:	e7c8      	b.n	800a2f2 <serial_check+0x96>
         max_time = 60000;
 800a360:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800a364:	e7c6      	b.n	800a2f4 <serial_check+0x98>
 800a366:	bf00      	nop
 800a368:	20002bf2 	.word	0x20002bf2
 800a36c:	20002be1 	.word	0x20002be1
 800a370:	20002bec 	.word	0x20002bec
 800a374:	20002be0 	.word	0x20002be0
 800a378:	20002be6 	.word	0x20002be6
 800a37c:	20002bdf 	.word	0x20002bdf
 800a380:	2000038c 	.word	0x2000038c
 800a384:	20000388 	.word	0x20000388
 800a388:	20000365 	.word	0x20000365
 800a38c:	20000380 	.word	0x20000380
 800a390:	001b7740 	.word	0x001b7740
 800a394:	2000035c 	.word	0x2000035c
 800a398:	20000398 	.word	0x20000398
 800a39c:	000927c0 	.word	0x000927c0
 800a3a0:	20000370 	.word	0x20000370
 800a3a4:	20000367 	.word	0x20000367
 800a3a8:	200003a2 	.word	0x200003a2
 800a3ac:	2000035f 	.word	0x2000035f
 800a3b0:	20000384 	.word	0x20000384
 800a3b4:	000927bf 	.word	0x000927bf

0800a3b8 <change_ap_mode>:


void change_ap_mode (void)
{
     dhcp_disable = 0;
 800a3b8:	4a09      	ldr	r2, [pc, #36]	@ (800a3e0 <change_ap_mode+0x28>)
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	7013      	strb	r3, [r2, #0]
     keep_alive_time = 60;
 800a3be:	4a09      	ldr	r2, [pc, #36]	@ (800a3e4 <change_ap_mode+0x2c>)
 800a3c0:	213c      	movs	r1, #60	@ 0x3c
 800a3c2:	7011      	strb	r1, [r2, #0]
     mqtt_mode = 0;
 800a3c4:	4a08      	ldr	r2, [pc, #32]	@ (800a3e8 <change_ap_mode+0x30>)
 800a3c6:	7013      	strb	r3, [r2, #0]
     mqtt_port = 1883;
 800a3c8:	4a08      	ldr	r2, [pc, #32]	@ (800a3ec <change_ap_mode+0x34>)
 800a3ca:	f240 715b 	movw	r1, #1883	@ 0x75b
 800a3ce:	8011      	strh	r1, [r2, #0]
     ap_mode = 1;
 800a3d0:	4907      	ldr	r1, [pc, #28]	@ (800a3f0 <change_ap_mode+0x38>)
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	700a      	strb	r2, [r1, #0]
     reset_flag = 1;
 800a3d6:	4907      	ldr	r1, [pc, #28]	@ (800a3f4 <change_ap_mode+0x3c>)
 800a3d8:	700a      	strb	r2, [r1, #0]
     time_out = 0;
 800a3da:	4a07      	ldr	r2, [pc, #28]	@ (800a3f8 <change_ap_mode+0x40>)
 800a3dc:	6013      	str	r3, [r2, #0]
}
 800a3de:	4770      	bx	lr
 800a3e0:	200003b0 	.word	0x200003b0
 800a3e4:	200003ae 	.word	0x200003ae
 800a3e8:	200003af 	.word	0x200003af
 800a3ec:	200003ac 	.word	0x200003ac
 800a3f0:	2000035f 	.word	0x2000035f
 800a3f4:	20000370 	.word	0x20000370
 800a3f8:	2000038c 	.word	0x2000038c

0800a3fc <serial_init>:


void serial_init (void)
{
 800a3fc:	b530      	push	{r4, r5, lr}
      USART_InitTypeDef	USART_InitStructure;
      NVIC_InitTypeDef NVIC_InitStructure;
      USART1_PORT = 0;
      USART3_PORT = 0;
      rxcnt1 = 0;
 800a3fe:	4a8f      	ldr	r2, [pc, #572]	@ (800a63c <serial_init+0x240>)
      USART1_PORT = 0;
 800a400:	4d8f      	ldr	r5, [pc, #572]	@ (800a640 <serial_init+0x244>)
      USART3_PORT = 0;
 800a402:	4c90      	ldr	r4, [pc, #576]	@ (800a644 <serial_init+0x248>)
      USART1_PORT = 0;
 800a404:	2300      	movs	r3, #0
{
 800a406:	b087      	sub	sp, #28
      rxcnt1 = 0;
 800a408:	8013      	strh	r3, [r2, #0]
      txcnt1 = 0;
 800a40a:	4a8f      	ldr	r2, [pc, #572]	@ (800a648 <serial_init+0x24c>)
      USART1_PORT = 0;
 800a40c:	702b      	strb	r3, [r5, #0]
      txcnt1 = 0;
 800a40e:	8013      	strh	r3, [r2, #0]
      maxtx1 = 0;
 800a410:	4a8e      	ldr	r2, [pc, #568]	@ (800a64c <serial_init+0x250>)
      USART3_PORT = 0;
 800a412:	7023      	strb	r3, [r4, #0]
      maxtx1 = 0;
 800a414:	8013      	strh	r3, [r2, #0]
      rxcnt2 = 0;
 800a416:	4a8e      	ldr	r2, [pc, #568]	@ (800a650 <serial_init+0x254>)
 800a418:	8013      	strh	r3, [r2, #0]
      txcnt2 = 0;
 800a41a:	4a8e      	ldr	r2, [pc, #568]	@ (800a654 <serial_init+0x258>)
 800a41c:	8013      	strh	r3, [r2, #0]
      maxtx2 = 0;
 800a41e:	4a8e      	ldr	r2, [pc, #568]	@ (800a658 <serial_init+0x25c>)
 800a420:	8013      	strh	r3, [r2, #0]
      rxcnt3 = 0;
 800a422:	4a8e      	ldr	r2, [pc, #568]	@ (800a65c <serial_init+0x260>)
 800a424:	8013      	strh	r3, [r2, #0]
      txcnt3 = 0;
 800a426:	4a8e      	ldr	r2, [pc, #568]	@ (800a660 <serial_init+0x264>)
 800a428:	8013      	strh	r3, [r2, #0]
      maxtx3 = 0;
 800a42a:	4a8e      	ldr	r2, [pc, #568]	@ (800a664 <serial_init+0x268>)
      /* Enable the USART1 Interrupt */
      NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
      NVIC_Init(&NVIC_InitStructure);
 800a42c:	a801      	add	r0, sp, #4
      maxtx3 = 0;
 800a42e:	8013      	strh	r3, [r2, #0]
      NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 800a430:	4b8d      	ldr	r3, [pc, #564]	@ (800a668 <serial_init+0x26c>)
 800a432:	9301      	str	r3, [sp, #4]
      NVIC_Init(&NVIC_InitStructure);
 800a434:	f003 f92c 	bl	800d690 <NVIC_Init>
      switch (USART1_PORT) {
 800a438:	782b      	ldrb	r3, [r5, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f000 80a2 	beq.w	800a584 <serial_init+0x188>
 800a440:	2b01      	cmp	r3, #1
 800a442:	f000 80b8 	beq.w	800a5b6 <serial_init+0x1ba>
           GPIO_Init_Pin(GPIOB,GPIO_Pin_6,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
           GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
           break;
      }
      /* Enable the USART2 Interrupt */
      NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 800a446:	4b89      	ldr	r3, [pc, #548]	@ (800a66c <serial_init+0x270>)
 800a448:	9301      	str	r3, [sp, #4]
      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
      NVIC_Init(&NVIC_InitStructure);
 800a44a:	a801      	add	r0, sp, #4
 800a44c:	f003 f920 	bl	800d690 <NVIC_Init>
      GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
 800a450:	4887      	ldr	r0, [pc, #540]	@ (800a670 <serial_init+0x274>)
 800a452:	2207      	movs	r2, #7
 800a454:	2102      	movs	r1, #2
 800a456:	f003 faf9 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
 800a45a:	4885      	ldr	r0, [pc, #532]	@ (800a670 <serial_init+0x274>)
 800a45c:	2207      	movs	r2, #7
 800a45e:	2103      	movs	r1, #3
 800a460:	f003 faf4 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_Init_Pin(GPIOA,TXD2,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a464:	4882      	ldr	r0, [pc, #520]	@ (800a670 <serial_init+0x274>)
 800a466:	2312      	movs	r3, #18
 800a468:	2203      	movs	r2, #3
 800a46a:	2104      	movs	r1, #4
 800a46c:	f003 fb00 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOA,RXD2,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a470:	487f      	ldr	r0, [pc, #508]	@ (800a670 <serial_init+0x274>)
 800a472:	2312      	movs	r3, #18
 800a474:	2203      	movs	r2, #3
 800a476:	2108      	movs	r1, #8
 800a478:	f003 fafa 	bl	800da70 <GPIO_Init_Pin>
      /* Enable the USART3 Interrupt */
      NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 800a47c:	4b7d      	ldr	r3, [pc, #500]	@ (800a674 <serial_init+0x278>)
 800a47e:	9301      	str	r3, [sp, #4]
      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
      NVIC_Init(&NVIC_InitStructure);
 800a480:	a801      	add	r0, sp, #4
 800a482:	f003 f905 	bl	800d690 <NVIC_Init>
      switch (USART3_PORT) {
 800a486:	7823      	ldrb	r3, [r4, #0]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	f000 80a9 	beq.w	800a5e0 <serial_init+0x1e4>
 800a48e:	2b02      	cmp	r3, #2
 800a490:	f000 80bd 	beq.w	800a60e <serial_init+0x212>
 800a494:	b9bb      	cbnz	r3, 800a4c6 <serial_init+0xca>
      	 case 0:
           GPIO_PinAFConfig(GPIOB,GPIO_PinSource10,GPIO_AF_USART3);
 800a496:	4878      	ldr	r0, [pc, #480]	@ (800a678 <serial_init+0x27c>)
 800a498:	2207      	movs	r2, #7
 800a49a:	210a      	movs	r1, #10
 800a49c:	f003 fad6 	bl	800da4c <GPIO_PinAFConfig>
           GPIO_PinAFConfig(GPIOB,GPIO_PinSource11,GPIO_AF_USART3);
 800a4a0:	4875      	ldr	r0, [pc, #468]	@ (800a678 <serial_init+0x27c>)
 800a4a2:	2207      	movs	r2, #7
 800a4a4:	210b      	movs	r1, #11
 800a4a6:	f003 fad1 	bl	800da4c <GPIO_PinAFConfig>
           /* Configure USART3 TX (PB10) */
           GPIO_Init_Pin(GPIOB,TXD3,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a4aa:	4873      	ldr	r0, [pc, #460]	@ (800a678 <serial_init+0x27c>)
 800a4ac:	2312      	movs	r3, #18
 800a4ae:	2203      	movs	r2, #3
 800a4b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a4b4:	f003 fadc 	bl	800da70 <GPIO_Init_Pin>
           /* Configure USART3 TX (PB10) */
           GPIO_Init_Pin(GPIOB,RXD3,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a4b8:	486f      	ldr	r0, [pc, #444]	@ (800a678 <serial_init+0x27c>)
 800a4ba:	2312      	movs	r3, #18
 800a4bc:	2203      	movs	r2, #3
 800a4be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
           GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
           GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
           /* Configure USART3 TX (PD8) */
           GPIO_Init_Pin(GPIOD,GPIO_Pin_8,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
           /* Configure USART3 RX (PD9) */
           GPIO_Init_Pin(GPIOD,GPIO_Pin_9,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a4c2:	f003 fad5 	bl	800da70 <GPIO_Init_Pin>
           break;
      }
      USART_InitStructure.USART_BaudRate = 115200;
      USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a4cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
      USART_InitStructure.USART_StopBits = USART_StopBits_1;
      USART_InitStructure.USART_Parity = USART_Parity_No;
      USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      USART_DeInit(USART1);
 800a4d0:	486a      	ldr	r0, [pc, #424]	@ (800a67c <serial_init+0x280>)
      USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800a4d2:	f8ad 3014 	strh.w	r3, [sp, #20]
      USART_InitStructure.USART_Parity = USART_Parity_No;
 800a4d6:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800a4da:	9204      	str	r2, [sp, #16]
      USART_DeInit(USART1);
 800a4dc:	f003 fc60 	bl	800dda0 <USART_DeInit>
      /* Enable USART1 clock */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	2010      	movs	r0, #16
 800a4e4:	f003 fc1c 	bl	800dd20 <RCC_APB2PeriphClockCmd>
      /* Configure USART1 */
      USART_Init(USART1, &USART_InitStructure);
 800a4e8:	a902      	add	r1, sp, #8
 800a4ea:	4864      	ldr	r0, [pc, #400]	@ (800a67c <serial_init+0x280>)
 800a4ec:	f003 fccc 	bl	800de88 <USART_Init>
      /* Enable USART1 Receive and Transmit interrupts */
      USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	4862      	ldr	r0, [pc, #392]	@ (800a67c <serial_init+0x280>)
 800a4f4:	f240 5125 	movw	r1, #1317	@ 0x525
 800a4f8:	f003 fd30 	bl	800df5c <USART_ITConfig>
      /* Enable the USART1 */
      USART_Cmd(USART1, ENABLE);
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	485f      	ldr	r0, [pc, #380]	@ (800a67c <serial_init+0x280>)
 800a500:	f003 fd18 	bl	800df34 <USART_Cmd>
      USART_DeInit(USART2);
 800a504:	485e      	ldr	r0, [pc, #376]	@ (800a680 <serial_init+0x284>)
 800a506:	f003 fc4b 	bl	800dda0 <USART_DeInit>
      /* Enable USART2 clock */
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800a50a:	2101      	movs	r1, #1
 800a50c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a510:	f003 fbfa 	bl	800dd08 <RCC_APB1PeriphClockCmd>
      /* Configure USART2 */
      USART_Init(USART2, &USART_InitStructure);
 800a514:	a902      	add	r1, sp, #8
 800a516:	485a      	ldr	r0, [pc, #360]	@ (800a680 <serial_init+0x284>)
 800a518:	f003 fcb6 	bl	800de88 <USART_Init>
      /* Enable USART2 Receive and Transmit interrupts */
      USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800a51c:	2201      	movs	r2, #1
 800a51e:	4858      	ldr	r0, [pc, #352]	@ (800a680 <serial_init+0x284>)
 800a520:	f240 5125 	movw	r1, #1317	@ 0x525
 800a524:	f003 fd1a 	bl	800df5c <USART_ITConfig>
      /* Enable the USART2 */
      USART_Cmd(USART2, ENABLE);
 800a528:	2101      	movs	r1, #1
 800a52a:	4855      	ldr	r0, [pc, #340]	@ (800a680 <serial_init+0x284>)
 800a52c:	f003 fd02 	bl	800df34 <USART_Cmd>
      USART_DeInit(USART3);
 800a530:	4854      	ldr	r0, [pc, #336]	@ (800a684 <serial_init+0x288>)
 800a532:	f003 fc35 	bl	800dda0 <USART_DeInit>
      /* Enable USART3 clock */
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 800a536:	2101      	movs	r1, #1
 800a538:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a53c:	f003 fbe4 	bl	800dd08 <RCC_APB1PeriphClockCmd>
      /* Configure USART3 */
      USART_Init(USART3, &USART_InitStructure);
 800a540:	a902      	add	r1, sp, #8
 800a542:	4850      	ldr	r0, [pc, #320]	@ (800a684 <serial_init+0x288>)
 800a544:	f003 fca0 	bl	800de88 <USART_Init>
      /* Enable USART3 Receive and Transmit interrupts */
      USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 800a548:	2201      	movs	r2, #1
 800a54a:	484e      	ldr	r0, [pc, #312]	@ (800a684 <serial_init+0x288>)
 800a54c:	f240 5125 	movw	r1, #1317	@ 0x525
 800a550:	f003 fd04 	bl	800df5c <USART_ITConfig>
      /* Enable the USART3 */
      USART_Cmd(USART3, ENABLE);
 800a554:	2101      	movs	r1, #1
 800a556:	484b      	ldr	r0, [pc, #300]	@ (800a684 <serial_init+0x288>)
 800a558:	f003 fcec 	bl	800df34 <USART_Cmd>
      read_wifi_data();
 800a55c:	f7fe f8c4 	bl	80086e8 <read_wifi_data>
      this_id = 1;
 800a560:	4b49      	ldr	r3, [pc, #292]	@ (800a688 <serial_init+0x28c>)
      reset_flag = 1;
      rx_topic_length = strlen(rx_topic);
 800a562:	484a      	ldr	r0, [pc, #296]	@ (800a68c <serial_init+0x290>)
      this_id = 1;
 800a564:	2401      	movs	r4, #1
 800a566:	701c      	strb	r4, [r3, #0]
      reset_flag = 1;
 800a568:	4b49      	ldr	r3, [pc, #292]	@ (800a690 <serial_init+0x294>)
 800a56a:	701c      	strb	r4, [r3, #0]
      rx_topic_length = strlen(rx_topic);
 800a56c:	f004 f8e8 	bl	800e740 <strlen>
 800a570:	4b48      	ldr	r3, [pc, #288]	@ (800a694 <serial_init+0x298>)
 800a572:	b280      	uxth	r0, r0
 800a574:	8018      	strh	r0, [r3, #0]
      mqtt_protocol = 1;
 800a576:	4b48      	ldr	r3, [pc, #288]	@ (800a698 <serial_init+0x29c>)
 800a578:	701c      	strb	r4, [r3, #0]
      wifi_ch = 5;
 800a57a:	4b48      	ldr	r3, [pc, #288]	@ (800a69c <serial_init+0x2a0>)
 800a57c:	2205      	movs	r2, #5
 800a57e:	701a      	strb	r2, [r3, #0]
 800a580:	b007      	add	sp, #28
 800a582:	bd30      	pop	{r4, r5, pc}
           GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
 800a584:	483a      	ldr	r0, [pc, #232]	@ (800a670 <serial_init+0x274>)
 800a586:	2207      	movs	r2, #7
 800a588:	2109      	movs	r1, #9
 800a58a:	f003 fa5f 	bl	800da4c <GPIO_PinAFConfig>
           GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
 800a58e:	4838      	ldr	r0, [pc, #224]	@ (800a670 <serial_init+0x274>)
 800a590:	2207      	movs	r2, #7
 800a592:	210a      	movs	r1, #10
 800a594:	f003 fa5a 	bl	800da4c <GPIO_PinAFConfig>
           GPIO_Init_Pin(GPIOA,TXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a598:	4835      	ldr	r0, [pc, #212]	@ (800a670 <serial_init+0x274>)
 800a59a:	2312      	movs	r3, #18
 800a59c:	2203      	movs	r2, #3
 800a59e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a5a2:	f003 fa65 	bl	800da70 <GPIO_Init_Pin>
           GPIO_Init_Pin(GPIOA,RXD1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a5a6:	4832      	ldr	r0, [pc, #200]	@ (800a670 <serial_init+0x274>)
 800a5a8:	2312      	movs	r3, #18
 800a5aa:	2203      	movs	r2, #3
 800a5ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
           GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a5b0:	f003 fa5e 	bl	800da70 <GPIO_Init_Pin>
           break;
 800a5b4:	e747      	b.n	800a446 <serial_init+0x4a>
           GPIO_PinAFConfig(GPIOB,GPIO_PinSource6,GPIO_AF_USART1);
 800a5b6:	4830      	ldr	r0, [pc, #192]	@ (800a678 <serial_init+0x27c>)
 800a5b8:	2207      	movs	r2, #7
 800a5ba:	2106      	movs	r1, #6
 800a5bc:	f003 fa46 	bl	800da4c <GPIO_PinAFConfig>
           GPIO_PinAFConfig(GPIOB,GPIO_PinSource7,GPIO_AF_USART1);
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	482c      	ldr	r0, [pc, #176]	@ (800a678 <serial_init+0x27c>)
 800a5c6:	f003 fa41 	bl	800da4c <GPIO_PinAFConfig>
           GPIO_Init_Pin(GPIOB,GPIO_Pin_6,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a5ca:	482b      	ldr	r0, [pc, #172]	@ (800a678 <serial_init+0x27c>)
 800a5cc:	2312      	movs	r3, #18
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	2140      	movs	r1, #64	@ 0x40
 800a5d2:	f003 fa4d 	bl	800da70 <GPIO_Init_Pin>
           GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a5d6:	4828      	ldr	r0, [pc, #160]	@ (800a678 <serial_init+0x27c>)
 800a5d8:	2312      	movs	r3, #18
 800a5da:	2203      	movs	r2, #3
 800a5dc:	2180      	movs	r1, #128	@ 0x80
 800a5de:	e7e7      	b.n	800a5b0 <serial_init+0x1b4>
           GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_USART3);
 800a5e0:	482f      	ldr	r0, [pc, #188]	@ (800a6a0 <serial_init+0x2a4>)
 800a5e2:	2207      	movs	r2, #7
 800a5e4:	210a      	movs	r1, #10
 800a5e6:	f003 fa31 	bl	800da4c <GPIO_PinAFConfig>
           GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_USART3);
 800a5ea:	482d      	ldr	r0, [pc, #180]	@ (800a6a0 <serial_init+0x2a4>)
 800a5ec:	2207      	movs	r2, #7
 800a5ee:	210b      	movs	r1, #11
 800a5f0:	f003 fa2c 	bl	800da4c <GPIO_PinAFConfig>
           GPIO_Init_Pin(GPIOC,GPIO_Pin_10,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a5f4:	482a      	ldr	r0, [pc, #168]	@ (800a6a0 <serial_init+0x2a4>)
 800a5f6:	2312      	movs	r3, #18
 800a5f8:	2203      	movs	r2, #3
 800a5fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a5fe:	f003 fa37 	bl	800da70 <GPIO_Init_Pin>
           GPIO_Init_Pin(GPIOC,GPIO_Pin_11,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a602:	4827      	ldr	r0, [pc, #156]	@ (800a6a0 <serial_init+0x2a4>)
 800a604:	2312      	movs	r3, #18
 800a606:	2203      	movs	r2, #3
 800a608:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a60c:	e759      	b.n	800a4c2 <serial_init+0xc6>
           GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_USART3);
 800a60e:	4825      	ldr	r0, [pc, #148]	@ (800a6a4 <serial_init+0x2a8>)
 800a610:	2207      	movs	r2, #7
 800a612:	2108      	movs	r1, #8
 800a614:	f003 fa1a 	bl	800da4c <GPIO_PinAFConfig>
           GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_USART3);
 800a618:	4822      	ldr	r0, [pc, #136]	@ (800a6a4 <serial_init+0x2a8>)
 800a61a:	2207      	movs	r2, #7
 800a61c:	2109      	movs	r1, #9
 800a61e:	f003 fa15 	bl	800da4c <GPIO_PinAFConfig>
           GPIO_Init_Pin(GPIOD,GPIO_Pin_8,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a622:	4820      	ldr	r0, [pc, #128]	@ (800a6a4 <serial_init+0x2a8>)
 800a624:	2312      	movs	r3, #18
 800a626:	2203      	movs	r2, #3
 800a628:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a62c:	f003 fa20 	bl	800da70 <GPIO_Init_Pin>
           GPIO_Init_Pin(GPIOD,GPIO_Pin_9,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800a630:	481c      	ldr	r0, [pc, #112]	@ (800a6a4 <serial_init+0x2a8>)
 800a632:	2312      	movs	r3, #18
 800a634:	2203      	movs	r2, #3
 800a636:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a63a:	e742      	b.n	800a4c2 <serial_init+0xc6>
 800a63c:	20002bf2 	.word	0x20002bf2
 800a640:	200003d4 	.word	0x200003d4
 800a644:	200003d3 	.word	0x200003d3
 800a648:	20002bf0 	.word	0x20002bf0
 800a64c:	20002bee 	.word	0x20002bee
 800a650:	20002bec 	.word	0x20002bec
 800a654:	20002bea 	.word	0x20002bea
 800a658:	20002be8 	.word	0x20002be8
 800a65c:	20002be6 	.word	0x20002be6
 800a660:	20002be4 	.word	0x20002be4
 800a664:	20002be2 	.word	0x20002be2
 800a668:	01000225 	.word	0x01000225
 800a66c:	01000226 	.word	0x01000226
 800a670:	40020000 	.word	0x40020000
 800a674:	01000227 	.word	0x01000227
 800a678:	40020400 	.word	0x40020400
 800a67c:	40011000 	.word	0x40011000
 800a680:	40004400 	.word	0x40004400
 800a684:	40004800 	.word	0x40004800
 800a688:	20002bdc 	.word	0x20002bdc
 800a68c:	20000219 	.word	0x20000219
 800a690:	20000370 	.word	0x20000370
 800a694:	2000039c 	.word	0x2000039c
 800a698:	20000360 	.word	0x20000360
 800a69c:	2000035e 	.word	0x2000035e
 800a6a0:	40020800 	.word	0x40020800
 800a6a4:	40020c00 	.word	0x40020c00

0800a6a8 <I2C_LowLevel_Init>:
      return data;
}


void I2C_LowLevel_Init (void)
{
 800a6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      I2C_InitTypeDef I2C_InitStructure;
      if (I2C_CHANNEL == 0) {
 800a6aa:	4b3b      	ldr	r3, [pc, #236]	@ (800a798 <I2C_LowLevel_Init+0xf0>)
 800a6ac:	781b      	ldrb	r3, [r3, #0]
         /* Enable I2C1 clock */
         RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800a6ae:	2101      	movs	r1, #1
      if (I2C_CHANNEL == 0) {
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d145      	bne.n	800a740 <I2C_LowLevel_Init+0x98>
         RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800a6b4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a6b8:	f003 fb26 	bl	800dd08 <RCC_APB1PeriphClockCmd>
         if (I2C1_PORT == 0) {
 800a6bc:	4b37      	ldr	r3, [pc, #220]	@ (800a79c <I2C_LowLevel_Init+0xf4>)
 800a6be:	781b      	ldrb	r3, [r3, #0]
            GPIO_PinAFConfig(GPIOB,GPIO_PinSource6,GPIO_AF_I2C1);
 800a6c0:	2204      	movs	r2, #4
         if (I2C1_PORT == 0) {
 800a6c2:	bb43      	cbnz	r3, 800a716 <I2C_LowLevel_Init+0x6e>
            GPIO_PinAFConfig(GPIOB,GPIO_PinSource6,GPIO_AF_I2C1);
 800a6c4:	4836      	ldr	r0, [pc, #216]	@ (800a7a0 <I2C_LowLevel_Init+0xf8>)
 800a6c6:	2106      	movs	r1, #6
 800a6c8:	f003 f9c0 	bl	800da4c <GPIO_PinAFConfig>
            GPIO_PinAFConfig(GPIOB,GPIO_PinSource7,GPIO_AF_I2C1);         	
 800a6cc:	4834      	ldr	r0, [pc, #208]	@ (800a7a0 <I2C_LowLevel_Init+0xf8>)
 800a6ce:	2204      	movs	r2, #4
 800a6d0:	2107      	movs	r1, #7
 800a6d2:	f003 f9bb 	bl	800da4c <GPIO_PinAFConfig>
            /* I2C1 SDA and SCL configuration */
            GPIO_Init_Pin(GPIOB,GPIO_Pin_6,GPIO_Speed_100MHz,GPIO_Mode_AF_OD);
 800a6d6:	2342      	movs	r3, #66	@ 0x42
 800a6d8:	2203      	movs	r2, #3
 800a6da:	2140      	movs	r1, #64	@ 0x40
 800a6dc:	4830      	ldr	r0, [pc, #192]	@ (800a7a0 <I2C_LowLevel_Init+0xf8>)
 800a6de:	f003 f9c7 	bl	800da70 <GPIO_Init_Pin>
            GPIO_Init_Pin(GPIOB,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_AF_OD);
 800a6e2:	2342      	movs	r3, #66	@ 0x42
 800a6e4:	2203      	movs	r2, #3
 800a6e6:	2180      	movs	r1, #128	@ 0x80
         } else {
            GPIO_PinAFConfig(GPIOB,GPIO_PinSource8,GPIO_AF_I2C1);
            GPIO_PinAFConfig(GPIOB,GPIO_PinSource9,GPIO_AF_I2C1);             
            /* I2C1 SDA and SCL configuration */
            GPIO_Init_Pin(GPIOB,GPIO_Pin_8,GPIO_Speed_100MHz,GPIO_Mode_AF_OD);
            GPIO_Init_Pin(GPIOB,GPIO_Pin_9,GPIO_Speed_100MHz,GPIO_Mode_AF_OD);
 800a6e8:	482d      	ldr	r0, [pc, #180]	@ (800a7a0 <I2C_LowLevel_Init+0xf8>)
 800a6ea:	f003 f9c1 	bl	800da70 <GPIO_Init_Pin>
         }
         I2C_DeInit(I2C1);
 800a6ee:	482d      	ldr	r0, [pc, #180]	@ (800a7a4 <I2C_LowLevel_Init+0xfc>)
 800a6f0:	f003 fa02 	bl	800daf8 <I2C_DeInit>
         /* I2C1 configuration */
         I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800a6f4:	492c      	ldr	r1, [pc, #176]	@ (800a7a8 <I2C_LowLevel_Init+0x100>)
 800a6f6:	4b2d      	ldr	r3, [pc, #180]	@ (800a7ac <I2C_LowLevel_Init+0x104>)
         I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
         I2C_InitStructure.I2C_OwnAddress1 = OwnAddress1;
         I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
         I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
         I2C_InitStructure.I2C_ClockSpeed = ClockSpeed;
         I2C_Init(I2C1, &I2C_InitStructure);
 800a6f8:	482a      	ldr	r0, [pc, #168]	@ (800a7a4 <I2C_LowLevel_Init+0xfc>)
         I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800a6fa:	e9cd 1300 	strd	r1, r3, [sp]
         I2C_InitStructure.I2C_OwnAddress1 = OwnAddress1;
 800a6fe:	4b2c      	ldr	r3, [pc, #176]	@ (800a7b0 <I2C_LowLevel_Init+0x108>)
 800a700:	9302      	str	r3, [sp, #8]
         I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800a702:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a706:	f8ad 300c 	strh.w	r3, [sp, #12]
         I2C_Init(I2C1, &I2C_InitStructure);
 800a70a:	4669      	mov	r1, sp
         I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
         I2C_InitStructure.I2C_OwnAddress1 = OwnAddress2;
         I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
         I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
         I2C_InitStructure.I2C_ClockSpeed = ClockSpeed;
         I2C_Init(I2C2, &I2C_InitStructure);
 800a70c:	f003 fa24 	bl	800db58 <I2C_Init>
      }
}
 800a710:	b005      	add	sp, #20
 800a712:	f85d fb04 	ldr.w	pc, [sp], #4
            GPIO_PinAFConfig(GPIOB,GPIO_PinSource8,GPIO_AF_I2C1);
 800a716:	4822      	ldr	r0, [pc, #136]	@ (800a7a0 <I2C_LowLevel_Init+0xf8>)
 800a718:	2108      	movs	r1, #8
 800a71a:	f003 f997 	bl	800da4c <GPIO_PinAFConfig>
            GPIO_PinAFConfig(GPIOB,GPIO_PinSource9,GPIO_AF_I2C1);             
 800a71e:	4820      	ldr	r0, [pc, #128]	@ (800a7a0 <I2C_LowLevel_Init+0xf8>)
 800a720:	2204      	movs	r2, #4
 800a722:	2109      	movs	r1, #9
 800a724:	f003 f992 	bl	800da4c <GPIO_PinAFConfig>
            GPIO_Init_Pin(GPIOB,GPIO_Pin_8,GPIO_Speed_100MHz,GPIO_Mode_AF_OD);
 800a728:	2342      	movs	r3, #66	@ 0x42
 800a72a:	2203      	movs	r2, #3
 800a72c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a730:	481b      	ldr	r0, [pc, #108]	@ (800a7a0 <I2C_LowLevel_Init+0xf8>)
 800a732:	f003 f99d 	bl	800da70 <GPIO_Init_Pin>
            GPIO_Init_Pin(GPIOB,GPIO_Pin_9,GPIO_Speed_100MHz,GPIO_Mode_AF_OD);
 800a736:	2342      	movs	r3, #66	@ 0x42
 800a738:	2203      	movs	r2, #3
 800a73a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a73e:	e7d3      	b.n	800a6e8 <I2C_LowLevel_Init+0x40>
         RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 800a740:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800a744:	f003 fae0 	bl	800dd08 <RCC_APB1PeriphClockCmd>
         GPIO_PinAFConfig(GPIOB,GPIO_PinSource10,GPIO_AF_I2C2);
 800a748:	4815      	ldr	r0, [pc, #84]	@ (800a7a0 <I2C_LowLevel_Init+0xf8>)
 800a74a:	2204      	movs	r2, #4
 800a74c:	210a      	movs	r1, #10
 800a74e:	f003 f97d 	bl	800da4c <GPIO_PinAFConfig>
         GPIO_PinAFConfig(GPIOB,GPIO_PinSource11,GPIO_AF_I2C2);         
 800a752:	4813      	ldr	r0, [pc, #76]	@ (800a7a0 <I2C_LowLevel_Init+0xf8>)
 800a754:	2204      	movs	r2, #4
 800a756:	210b      	movs	r1, #11
 800a758:	f003 f978 	bl	800da4c <GPIO_PinAFConfig>
         GPIO_Init_Pin(GPIOB,GPIO_Pin_10,GPIO_Speed_100MHz,GPIO_Mode_AF_OD);
 800a75c:	4810      	ldr	r0, [pc, #64]	@ (800a7a0 <I2C_LowLevel_Init+0xf8>)
 800a75e:	2342      	movs	r3, #66	@ 0x42
 800a760:	2203      	movs	r2, #3
 800a762:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a766:	f003 f983 	bl	800da70 <GPIO_Init_Pin>
         GPIO_Init_Pin(GPIOB,GPIO_Pin_11,GPIO_Speed_100MHz,GPIO_Mode_AF_OD);
 800a76a:	2342      	movs	r3, #66	@ 0x42
 800a76c:	2203      	movs	r2, #3
 800a76e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a772:	480b      	ldr	r0, [pc, #44]	@ (800a7a0 <I2C_LowLevel_Init+0xf8>)
 800a774:	f003 f97c 	bl	800da70 <GPIO_Init_Pin>
         I2C_DeInit(I2C2);
 800a778:	480e      	ldr	r0, [pc, #56]	@ (800a7b4 <I2C_LowLevel_Init+0x10c>)
 800a77a:	f003 f9bd 	bl	800daf8 <I2C_DeInit>
         I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800a77e:	4b0b      	ldr	r3, [pc, #44]	@ (800a7ac <I2C_LowLevel_Init+0x104>)
 800a780:	4a09      	ldr	r2, [pc, #36]	@ (800a7a8 <I2C_LowLevel_Init+0x100>)
         I2C_Init(I2C2, &I2C_InitStructure);
 800a782:	480c      	ldr	r0, [pc, #48]	@ (800a7b4 <I2C_LowLevel_Init+0x10c>)
         I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800a784:	e9cd 2300 	strd	r2, r3, [sp]
         I2C_InitStructure.I2C_OwnAddress1 = OwnAddress2;
 800a788:	4b0b      	ldr	r3, [pc, #44]	@ (800a7b8 <I2C_LowLevel_Init+0x110>)
 800a78a:	9302      	str	r3, [sp, #8]
         I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800a78c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a790:	f8ad 300c 	strh.w	r3, [sp, #12]
         I2C_Init(I2C2, &I2C_InitStructure);
 800a794:	4669      	mov	r1, sp
 800a796:	e7b9      	b.n	800a70c <I2C_LowLevel_Init+0x64>
 800a798:	20002bf4 	.word	0x20002bf4
 800a79c:	20000001 	.word	0x20000001
 800a7a0:	40020400 	.word	0x40020400
 800a7a4:	40005400 	.word	0x40005400
 800a7a8:	00030d40 	.word	0x00030d40
 800a7ac:	bfff0000 	.word	0xbfff0000
 800a7b0:	04000058 	.word	0x04000058
 800a7b4:	40005800 	.word	0x40005800
 800a7b8:	04000060 	.word	0x04000060

0800a7bc <init_i2c_24xx>:
      u8_write(SEEP_PAGE0,address,data);
}


void init_i2c_24xx (void)
{
 800a7bc:	b538      	push	{r3, r4, r5, lr}
      I2C_LowLevel_Init();	
      if (I2C_CHANNEL == 0) {
 800a7be:	4d08      	ldr	r5, [pc, #32]	@ (800a7e0 <init_i2c_24xx+0x24>)
      I2C_LowLevel_Init();	
 800a7c0:	f7ff ff72 	bl	800a6a8 <I2C_LowLevel_Init>
      if (I2C_CHANNEL == 0) {
 800a7c4:	782c      	ldrb	r4, [r5, #0]
         I2C_Cmd(I2C1, ENABLE);
 800a7c6:	2101      	movs	r1, #1
      if (I2C_CHANNEL == 0) {
 800a7c8:	b924      	cbnz	r4, 800a7d4 <init_i2c_24xx+0x18>
         I2C_Cmd(I2C1, ENABLE);
 800a7ca:	4806      	ldr	r0, [pc, #24]	@ (800a7e4 <init_i2c_24xx+0x28>)
 800a7cc:	f003 fa2c 	bl	800dc28 <I2C_Cmd>
         I2C_CHANNEL = 0;
 800a7d0:	702c      	strb	r4, [r5, #0]
      } else {
         I2C_Cmd(I2C2, ENABLE);
         I2C_CHANNEL = 1;
      }
}
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
         I2C_Cmd(I2C2, ENABLE);
 800a7d4:	4804      	ldr	r0, [pc, #16]	@ (800a7e8 <init_i2c_24xx+0x2c>)
 800a7d6:	f003 fa27 	bl	800dc28 <I2C_Cmd>
 800a7da:	2401      	movs	r4, #1
 800a7dc:	e7f8      	b.n	800a7d0 <init_i2c_24xx+0x14>
 800a7de:	bf00      	nop
 800a7e0:	20002bf4 	.word	0x20002bf4
 800a7e4:	40005400 	.word	0x40005400
 800a7e8:	40005800 	.word	0x40005800

0800a7ec <beep_control.part.0>:


void beep_control (unsigned char ctl)
{
      if (ctl == ON) {
         beep_on = 1;
 800a7ec:	4b03      	ldr	r3, [pc, #12]	@ (800a7fc <beep_control.part.0+0x10>)
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	701a      	strb	r2, [r3, #0]
         beep_cnt = 0;
 800a7f2:	4b03      	ldr	r3, [pc, #12]	@ (800a800 <beep_control.part.0+0x14>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	801a      	strh	r2, [r3, #0]
      } else {
         beep_on = 0;
         beep_cnt = 0;
         BEEP = 0;
      }
}
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	20002bfc 	.word	0x20002bfc
 800a800:	20002bfa 	.word	0x20002bfa

0800a804 <beep_control>:
      if (ctl == ON) {
 800a804:	2801      	cmp	r0, #1
 800a806:	d101      	bne.n	800a80c <beep_control+0x8>
 800a808:	f7ff bff0 	b.w	800a7ec <beep_control.part.0>
         beep_on = 0;
 800a80c:	4a04      	ldr	r2, [pc, #16]	@ (800a820 <beep_control+0x1c>)
 800a80e:	2300      	movs	r3, #0
 800a810:	7013      	strb	r3, [r2, #0]
         beep_cnt = 0;
 800a812:	4a04      	ldr	r2, [pc, #16]	@ (800a824 <beep_control+0x20>)
 800a814:	8013      	strh	r3, [r2, #0]
         BEEP = 0;
 800a816:	4a04      	ldr	r2, [pc, #16]	@ (800a828 <beep_control+0x24>)
 800a818:	f8c2 32a0 	str.w	r3, [r2, #672]	@ 0x2a0
}
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	20002bfc 	.word	0x20002bfc
 800a824:	20002bfa 	.word	0x20002bfa
 800a828:	42428000 	.word	0x42428000

0800a82c <beep_check>:


void beep_check (void)
{
      if (beep_on) {
 800a82c:	4b0d      	ldr	r3, [pc, #52]	@ (800a864 <beep_check+0x38>)
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	b1bb      	cbz	r3, 800a862 <beep_check+0x36>
         beep_cnt++;
 800a832:	4a0d      	ldr	r2, [pc, #52]	@ (800a868 <beep_check+0x3c>)
 800a834:	8813      	ldrh	r3, [r2, #0]
 800a836:	3301      	adds	r3, #1
 800a838:	b29b      	uxth	r3, r3
 800a83a:	8013      	strh	r3, [r2, #0]
         if (beep_cnt < 200) {
 800a83c:	8813      	ldrh	r3, [r2, #0]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	2bc7      	cmp	r3, #199	@ 0xc7
 800a842:	4b0a      	ldr	r3, [pc, #40]	@ (800a86c <beep_check+0x40>)
            BEEP = 1;
 800a844:	bf94      	ite	ls
 800a846:	2101      	movls	r1, #1
         } else {
            BEEP = 0;
 800a848:	2100      	movhi	r1, #0
 800a84a:	f8c3 12a0 	str.w	r1, [r3, #672]	@ 0x2a0
         }
         if (beep_cnt >= beep_max) {
 800a84e:	4b08      	ldr	r3, [pc, #32]	@ (800a870 <beep_check+0x44>)
 800a850:	8812      	ldrh	r2, [r2, #0]
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	b292      	uxth	r2, r2
 800a856:	b29b      	uxth	r3, r3
 800a858:	429a      	cmp	r2, r3
 800a85a:	d302      	bcc.n	800a862 <beep_check+0x36>
            beep_control(OFF);
 800a85c:	2000      	movs	r0, #0
 800a85e:	f7ff bfd1 	b.w	800a804 <beep_control>
         }
      }
}
 800a862:	4770      	bx	lr
 800a864:	20002bfc 	.word	0x20002bfc
 800a868:	20002bfa 	.word	0x20002bfa
 800a86c:	42428000 	.word	0x42428000
 800a870:	20002bf8 	.word	0x20002bf8

0800a874 <key_read>:


unsigned char key_read (void)
{
 800a874:	b538      	push	{r3, r4, r5, lr}
      if (KEY0 == RESET) {
 800a876:	4b4f      	ldr	r3, [pc, #316]	@ (800a9b4 <key_read+0x140>)
 800a878:	4c4f      	ldr	r4, [pc, #316]	@ (800a9b8 <key_read+0x144>)
 800a87a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a87e:	4b4f      	ldr	r3, [pc, #316]	@ (800a9bc <key_read+0x148>)
 800a880:	2900      	cmp	r1, #0
 800a882:	d175      	bne.n	800a970 <key_read+0xfc>
         key_cnt1++;
 800a884:	781a      	ldrb	r2, [r3, #0]
 800a886:	3201      	adds	r2, #1
 800a888:	b2d2      	uxtb	r2, r2
 800a88a:	701a      	strb	r2, [r3, #0]
         if (key_cnt1 >= KEY_TIME) {
 800a88c:	781a      	ldrb	r2, [r3, #0]
 800a88e:	2a09      	cmp	r2, #9
 800a890:	d909      	bls.n	800a8a6 <key_read+0x32>
            key_cnt1 = 0;
 800a892:	7019      	strb	r1, [r3, #0]
            if ((key_value & 0x01) == 0) {
 800a894:	7823      	ldrb	r3, [r4, #0]
 800a896:	07dd      	lsls	r5, r3, #31
 800a898:	d405      	bmi.n	800a8a6 <key_read+0x32>
               key_value |= 0x01;
 800a89a:	7823      	ldrb	r3, [r4, #0]
 800a89c:	f043 0301 	orr.w	r3, r3, #1
 800a8a0:	7023      	strb	r3, [r4, #0]
      if (ctl == ON) {
 800a8a2:	f7ff ffa3 	bl	800a7ec <beep_control.part.0>
         }
      } else {
         key_cnt1 = 0;
         key_value &= ~(0x01);
      }
      if (KEY1 == RESET) {
 800a8a6:	4b43      	ldr	r3, [pc, #268]	@ (800a9b4 <key_read+0x140>)
 800a8a8:	f8d3 120c 	ldr.w	r1, [r3, #524]	@ 0x20c
 800a8ac:	4b44      	ldr	r3, [pc, #272]	@ (800a9c0 <key_read+0x14c>)
 800a8ae:	2900      	cmp	r1, #0
 800a8b0:	d165      	bne.n	800a97e <key_read+0x10a>
         key_cnt2++;
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	3201      	adds	r2, #1
 800a8b6:	b2d2      	uxtb	r2, r2
 800a8b8:	701a      	strb	r2, [r3, #0]
         if (key_cnt2 >= KEY_TIME) {
 800a8ba:	781a      	ldrb	r2, [r3, #0]
 800a8bc:	2a09      	cmp	r2, #9
 800a8be:	d909      	bls.n	800a8d4 <key_read+0x60>
            key_cnt2 = 0;
 800a8c0:	7019      	strb	r1, [r3, #0]
            if ((key_value & 0x02) == 0) {
 800a8c2:	7823      	ldrb	r3, [r4, #0]
 800a8c4:	0798      	lsls	r0, r3, #30
 800a8c6:	d405      	bmi.n	800a8d4 <key_read+0x60>
               key_value |= 0x02;
 800a8c8:	7823      	ldrb	r3, [r4, #0]
 800a8ca:	f043 0302 	orr.w	r3, r3, #2
 800a8ce:	7023      	strb	r3, [r4, #0]
      if (ctl == ON) {
 800a8d0:	f7ff ff8c 	bl	800a7ec <beep_control.part.0>
         }
      } else {
         key_cnt2 = 0;
         key_value &= ~(0x02);
      }
      if (KEY2 == RESET) {
 800a8d4:	4b37      	ldr	r3, [pc, #220]	@ (800a9b4 <key_read+0x140>)
 800a8d6:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800a8da:	4b3a      	ldr	r3, [pc, #232]	@ (800a9c4 <key_read+0x150>)
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	d155      	bne.n	800a98c <key_read+0x118>
         key_cnt3++;
 800a8e0:	781a      	ldrb	r2, [r3, #0]
 800a8e2:	3201      	adds	r2, #1
 800a8e4:	b2d2      	uxtb	r2, r2
 800a8e6:	701a      	strb	r2, [r3, #0]
         if (key_cnt3 >= KEY_TIME) {
 800a8e8:	781a      	ldrb	r2, [r3, #0]
 800a8ea:	2a09      	cmp	r2, #9
 800a8ec:	d909      	bls.n	800a902 <key_read+0x8e>
            key_cnt3 = 0;
 800a8ee:	7019      	strb	r1, [r3, #0]
            if ((key_value & 0x04) == 0) {
 800a8f0:	7823      	ldrb	r3, [r4, #0]
 800a8f2:	0759      	lsls	r1, r3, #29
 800a8f4:	d405      	bmi.n	800a902 <key_read+0x8e>
               key_value |= 0x04;
 800a8f6:	7823      	ldrb	r3, [r4, #0]
 800a8f8:	f043 0304 	orr.w	r3, r3, #4
 800a8fc:	7023      	strb	r3, [r4, #0]
      if (ctl == ON) {
 800a8fe:	f7ff ff75 	bl	800a7ec <beep_control.part.0>
         }
      } else {
         key_cnt3 = 0;
         key_value &= ~(0x04);
      }
      if (KEY_UP == SET) {
 800a902:	4b31      	ldr	r3, [pc, #196]	@ (800a9c8 <key_read+0x154>)
 800a904:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
 800a908:	4b30      	ldr	r3, [pc, #192]	@ (800a9cc <key_read+0x158>)
 800a90a:	2801      	cmp	r0, #1
 800a90c:	d145      	bne.n	800a99a <key_read+0x126>
         key_cnt4++;
 800a90e:	781a      	ldrb	r2, [r3, #0]
 800a910:	3201      	adds	r2, #1
 800a912:	b2d2      	uxtb	r2, r2
 800a914:	701a      	strb	r2, [r3, #0]
         if (key_cnt4 >= KEY_TIME) {
 800a916:	781a      	ldrb	r2, [r3, #0]
 800a918:	2a09      	cmp	r2, #9
 800a91a:	d925      	bls.n	800a968 <key_read+0xf4>
            key_cnt4 = 0;
	    key_press_time++;
 800a91c:	4d2c      	ldr	r5, [pc, #176]	@ (800a9d0 <key_read+0x15c>)
            key_cnt4 = 0;
 800a91e:	2200      	movs	r2, #0
 800a920:	701a      	strb	r2, [r3, #0]
	    key_press_time++;
 800a922:	882b      	ldrh	r3, [r5, #0]
 800a924:	3301      	adds	r3, #1
 800a926:	b29b      	uxth	r3, r3
 800a928:	802b      	strh	r3, [r5, #0]
            if ((key_value & 0x08) == 0) {
 800a92a:	7823      	ldrb	r3, [r4, #0]
 800a92c:	071a      	lsls	r2, r3, #28
 800a92e:	d409      	bmi.n	800a944 <key_read+0xd0>
               key_value |= 0x08;
 800a930:	7823      	ldrb	r3, [r4, #0]
 800a932:	f043 0308 	orr.w	r3, r3, #8
 800a936:	7023      	strb	r3, [r4, #0]
               beep_control(ON);
	       lcd_printf(1,10,"Key UP START");
 800a938:	210a      	movs	r1, #10
 800a93a:	f7ff ff57 	bl	800a7ec <beep_control.part.0>
 800a93e:	4a25      	ldr	r2, [pc, #148]	@ (800a9d4 <key_read+0x160>)
 800a940:	f000 fc9e 	bl	800b280 <lcd_printf>
            }
	    if(key_press_time >= 500) {
 800a944:	882b      	ldrh	r3, [r5, #0]
 800a946:	b29b      	uxth	r3, r3
 800a948:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a94c:	d30c      	bcc.n	800a968 <key_read+0xf4>
	      lcd_printf(1,10,"Key UP %5d",key_press_time);
 800a94e:	882b      	ldrh	r3, [r5, #0]
 800a950:	4a21      	ldr	r2, [pc, #132]	@ (800a9d8 <key_read+0x164>)
 800a952:	b29b      	uxth	r3, r3
 800a954:	210a      	movs	r1, #10
 800a956:	2001      	movs	r0, #1
 800a958:	f000 fc92 	bl	800b280 <lcd_printf>
	      key_press_time = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	802b      	strh	r3, [r5, #0]
      if (ctl == ON) {
 800a960:	f7ff ff44 	bl	800a7ec <beep_control.part.0>
	      beep_control(ON);
	      change_ap_mode();
 800a964:	f7ff fd28 	bl	800a3b8 <change_ap_mode>
	   key_press_time = 0;
	   key_value &= ~(0x08);
	 }
         
      }
      beep_check();
 800a968:	f7ff ff60 	bl	800a82c <beep_check>
      return key_value;
 800a96c:	7820      	ldrb	r0, [r4, #0]
}
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
         key_cnt1 = 0;
 800a970:	2200      	movs	r2, #0
 800a972:	701a      	strb	r2, [r3, #0]
         key_value &= ~(0x01);
 800a974:	7823      	ldrb	r3, [r4, #0]
 800a976:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a97a:	7023      	strb	r3, [r4, #0]
 800a97c:	e793      	b.n	800a8a6 <key_read+0x32>
         key_cnt2 = 0;
 800a97e:	2200      	movs	r2, #0
 800a980:	701a      	strb	r2, [r3, #0]
         key_value &= ~(0x02);
 800a982:	7823      	ldrb	r3, [r4, #0]
 800a984:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 800a988:	7023      	strb	r3, [r4, #0]
 800a98a:	e7a3      	b.n	800a8d4 <key_read+0x60>
         key_cnt3 = 0;
 800a98c:	2200      	movs	r2, #0
 800a98e:	701a      	strb	r2, [r3, #0]
         key_value &= ~(0x04);
 800a990:	7823      	ldrb	r3, [r4, #0]
 800a992:	f003 03fb 	and.w	r3, r3, #251	@ 0xfb
 800a996:	7023      	strb	r3, [r4, #0]
 800a998:	e7b3      	b.n	800a902 <key_read+0x8e>
         key_cnt4 = 0;
 800a99a:	2200      	movs	r2, #0
 800a99c:	701a      	strb	r2, [r3, #0]
	 if(key_value & 0x08) {
 800a99e:	7823      	ldrb	r3, [r4, #0]
 800a9a0:	071b      	lsls	r3, r3, #28
 800a9a2:	d5e1      	bpl.n	800a968 <key_read+0xf4>
	   key_press_time = 0;
 800a9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a9d0 <key_read+0x15c>)
 800a9a6:	801a      	strh	r2, [r3, #0]
	   key_value &= ~(0x08);
 800a9a8:	7823      	ldrb	r3, [r4, #0]
 800a9aa:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
 800a9ae:	7023      	strb	r3, [r4, #0]
 800a9b0:	e7da      	b.n	800a968 <key_read+0xf4>
 800a9b2:	bf00      	nop
 800a9b4:	42420000 	.word	0x42420000
 800a9b8:	20002bfd 	.word	0x20002bfd
 800a9bc:	20002c01 	.word	0x20002c01
 800a9c0:	20002c00 	.word	0x20002c00
 800a9c4:	20002bff 	.word	0x20002bff
 800a9c8:	42400000 	.word	0x42400000
 800a9cc:	20002bfe 	.word	0x20002bfe
 800a9d0:	20002bf6 	.word	0x20002bf6
 800a9d4:	0800f7b0 	.word	0x0800f7b0
 800a9d8:	0800f7bd 	.word	0x0800f7bd

0800a9dc <key_init>:


void key_init (void)
{
 800a9dc:	b510      	push	{r4, lr}
      /* Enable GPIO clocks */
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF, ENABLE);
      GPIO_Init_Pin(GPIOE,GPIO_Pin_2,GPIO_Speed_100MHz,GPIO_Mode_IPU);		// KEY 2
 800a9de:	4c18      	ldr	r4, [pc, #96]	@ (800aa40 <key_init+0x64>)
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF, ENABLE);
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	2031      	movs	r0, #49	@ 0x31
 800a9e4:	f003 f978 	bl	800dcd8 <RCC_AHB1PeriphClockCmd>
      GPIO_Init_Pin(GPIOE,GPIO_Pin_2,GPIO_Speed_100MHz,GPIO_Mode_IPU);		// KEY 2
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	2203      	movs	r2, #3
 800a9ec:	2104      	movs	r1, #4
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f003 f83e 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOE,GPIO_Pin_3,GPIO_Speed_100MHz,GPIO_Mode_IPU);		// KEY 1
 800a9f4:	2310      	movs	r3, #16
 800a9f6:	2203      	movs	r2, #3
 800a9f8:	2108      	movs	r1, #8
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f003 f838 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOE,GPIO_Pin_4,GPIO_Speed_100MHz,GPIO_Mode_IPU);		// KEY 0
 800aa00:	2310      	movs	r3, #16
 800aa02:	4619      	mov	r1, r3
 800aa04:	2203      	movs	r2, #3
 800aa06:	4620      	mov	r0, r4
 800aa08:	f003 f832 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOA,GPIO_Pin_0,GPIO_Speed_100MHz,GPIO_Mode_IPD);		// WAKEUP_KEY
 800aa0c:	480d      	ldr	r0, [pc, #52]	@ (800aa44 <key_init+0x68>)
 800aa0e:	2320      	movs	r3, #32
 800aa10:	2203      	movs	r2, #3
 800aa12:	2101      	movs	r1, #1
 800aa14:	f003 f82c 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOF,GPIO_Pin_8,GPIO_Speed_100MHz,GPIO_Mode_Out_PP);	// BUZZER
 800aa18:	2301      	movs	r3, #1
 800aa1a:	2203      	movs	r2, #3
 800aa1c:	480a      	ldr	r0, [pc, #40]	@ (800aa48 <key_init+0x6c>)
 800aa1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800aa22:	f003 f825 	bl	800da70 <GPIO_Init_Pin>
      BEEP = 0;
 800aa26:	4a09      	ldr	r2, [pc, #36]	@ (800aa4c <key_init+0x70>)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f8c2 32a0 	str.w	r3, [r2, #672]	@ 0x2a0
      beep_on = 0;
 800aa2e:	4a08      	ldr	r2, [pc, #32]	@ (800aa50 <key_init+0x74>)
 800aa30:	7013      	strb	r3, [r2, #0]
      beep_cnt = 0;
 800aa32:	4a08      	ldr	r2, [pc, #32]	@ (800aa54 <key_init+0x78>)
 800aa34:	8013      	strh	r3, [r2, #0]
      beep_max = 500;
 800aa36:	4b08      	ldr	r3, [pc, #32]	@ (800aa58 <key_init+0x7c>)
 800aa38:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800aa3c:	801a      	strh	r2, [r3, #0]
}
 800aa3e:	bd10      	pop	{r4, pc}
 800aa40:	40021000 	.word	0x40021000
 800aa44:	40020000 	.word	0x40020000
 800aa48:	40021400 	.word	0x40021400
 800aa4c:	42428000 	.word	0x42428000
 800aa50:	20002bfc 	.word	0x20002bfc
 800aa54:	20002bfa 	.word	0x20002bfa
 800aa58:	20002bf8 	.word	0x20002bf8

0800aa5c <delay_us>:



void delay_us (unsigned short delay)
{
      delay_count = 0;
 800aa5c:	4a0c      	ldr	r2, [pc, #48]	@ (800aa90 <delay_us+0x34>)
      while (delay_count < delay) {
      	    for (delay_tick=0;delay_tick<9;delay_tick++);
 800aa5e:	490d      	ldr	r1, [pc, #52]	@ (800aa94 <delay_us+0x38>)
{
 800aa60:	b510      	push	{r4, lr}
      delay_count = 0;
 800aa62:	2400      	movs	r4, #0
 800aa64:	8014      	strh	r4, [r2, #0]
      while (delay_count < delay) {
 800aa66:	8813      	ldrh	r3, [r2, #0]
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	4283      	cmp	r3, r0
 800aa6c:	d300      	bcc.n	800aa70 <delay_us+0x14>
      	    delay_count++;
      }
}
 800aa6e:	bd10      	pop	{r4, pc}
      	    for (delay_tick=0;delay_tick<9;delay_tick++);
 800aa70:	800c      	strh	r4, [r1, #0]
 800aa72:	880b      	ldrh	r3, [r1, #0]
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	2b08      	cmp	r3, #8
 800aa78:	d904      	bls.n	800aa84 <delay_us+0x28>
      	    delay_count++;
 800aa7a:	8813      	ldrh	r3, [r2, #0]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	8013      	strh	r3, [r2, #0]
 800aa82:	e7f0      	b.n	800aa66 <delay_us+0xa>
      	    for (delay_tick=0;delay_tick<9;delay_tick++);
 800aa84:	880b      	ldrh	r3, [r1, #0]
 800aa86:	3301      	adds	r3, #1
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	800b      	strh	r3, [r1, #0]
 800aa8c:	e7f1      	b.n	800aa72 <delay_us+0x16>
 800aa8e:	bf00      	nop
 800aa90:	20002c12 	.word	0x20002c12
 800aa94:	20002c10 	.word	0x20002c10

0800aa98 <LCD_WR_REG>:


void LCD_WR_REG (volatile unsigned short regval)
{
 800aa98:	b082      	sub	sp, #8
      regval = regval;
      LCD->LCD_REG = regval;
 800aa9a:	f04f 42d8 	mov.w	r2, #1811939328	@ 0x6c000000
{
 800aa9e:	f8ad 0006 	strh.w	r0, [sp, #6]
      regval = regval;
 800aaa2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	f8ad 3006 	strh.w	r3, [sp, #6]
      LCD->LCD_REG = regval;
 800aaac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	f8a2 307e 	strh.w	r3, [r2, #126]	@ 0x7e
}
 800aab6:	b002      	add	sp, #8
 800aab8:	4770      	bx	lr

0800aaba <LCD_WR_DATA>:


void LCD_WR_DATA (volatile unsigned short data)
{
 800aaba:	b082      	sub	sp, #8
      data = data;
      LCD->LCD_RAM = data;
 800aabc:	f04f 42d8 	mov.w	r2, #1811939328	@ 0x6c000000
{
 800aac0:	f8ad 0006 	strh.w	r0, [sp, #6]
      data = data;
 800aac4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	f8ad 3006 	strh.w	r3, [sp, #6]
      LCD->LCD_RAM = data;
 800aace:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	f8a2 3080 	strh.w	r3, [r2, #128]	@ 0x80
}
 800aad8:	b002      	add	sp, #8
 800aada:	4770      	bx	lr

0800aadc <LCD_RD_DATA>:


 unsigned short LCD_RD_DATA (void)
{
      volatile unsigned short ram;
      ram = LCD->LCD_RAM;
 800aadc:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
{
 800aae0:	b082      	sub	sp, #8
      ram = LCD->LCD_RAM;
 800aae2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	f8ad 3006 	strh.w	r3, [sp, #6]
      return ram;
 800aaec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800aaf0:	b280      	uxth	r0, r0
 800aaf2:	b002      	add	sp, #8
 800aaf4:	4770      	bx	lr

0800aaf6 <LCD_ReadReg>:
      LCD->LCD_RAM = LCD_RegValue;
}


unsigned short LCD_ReadReg (unsigned short LCD_Reg)
{
 800aaf6:	b508      	push	{r3, lr}
      LCD_WR_REG(LCD_Reg);
 800aaf8:	f7ff ffce 	bl	800aa98 <LCD_WR_REG>
      delay_us(5);
 800aafc:	2005      	movs	r0, #5
 800aafe:	f7ff ffad 	bl	800aa5c <delay_us>
      return LCD_RD_DATA();
}
 800ab02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      return LCD_RD_DATA();
 800ab06:	f7ff bfe9 	b.w	800aadc <LCD_RD_DATA>
	...

0800ab0c <LCD_WriteRAM_Prepare>:


void LCD_WriteRAM_Prepare (void)
{
      LCD->LCD_REG = lcddev.wramcmd;
 800ab0c:	4b03      	ldr	r3, [pc, #12]	@ (800ab1c <LCD_WriteRAM_Prepare+0x10>)
 800ab0e:	891a      	ldrh	r2, [r3, #8]
 800ab10:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 800ab14:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
}
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	20002c02 	.word	0x20002c02

0800ab20 <LCD_SetCursor>:
      while (i--);
}


void LCD_SetCursor (unsigned short Xpos, unsigned short Ypos)
{
 800ab20:	b538      	push	{r3, r4, r5, lr}
      LCD_WR_REG(lcddev.setxcmd);
 800ab22:	4d0b      	ldr	r5, [pc, #44]	@ (800ab50 <LCD_SetCursor+0x30>)
{
 800ab24:	4604      	mov	r4, r0
      LCD_WR_REG(lcddev.setxcmd);
 800ab26:	8968      	ldrh	r0, [r5, #10]
 800ab28:	f7ff ffb6 	bl	800aa98 <LCD_WR_REG>
      LCD_WR_DATA(Xpos >> 8);
 800ab2c:	0a20      	lsrs	r0, r4, #8
 800ab2e:	f7ff ffc4 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_DATA(Xpos & 0xFF);
 800ab32:	b2e0      	uxtb	r0, r4
 800ab34:	f7ff ffc1 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_REG(lcddev.setycmd);
 800ab38:	89a8      	ldrh	r0, [r5, #12]
 800ab3a:	f7ff ffad 	bl	800aa98 <LCD_WR_REG>
      LCD_WR_DATA(Ypos >> 8);
 800ab3e:	0a08      	lsrs	r0, r1, #8
 800ab40:	f7ff ffbb 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_DATA(Ypos & 0xFF);
}
 800ab44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      LCD_WR_DATA(Ypos & 0xFF);
 800ab48:	b2c8      	uxtb	r0, r1
 800ab4a:	f7ff bfb6 	b.w	800aaba <LCD_WR_DATA>
 800ab4e:	bf00      	nop
 800ab50:	20002c02 	.word	0x20002c02

0800ab54 <LCD_Scan_Dir>:
      LCD_WR_REG(0x28);
}


void LCD_Scan_Dir (unsigned char dir)
{
 800ab54:	b510      	push	{r4, lr}
      unsigned short regval = 0;
      unsigned short dirreg = 0;
      unsigned short temp;
      if (lcddev.dir == 1) {
 800ab56:	492d      	ldr	r1, [pc, #180]	@ (800ac0c <LCD_Scan_Dir+0xb8>)
 800ab58:	798b      	ldrb	r3, [r1, #6]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d107      	bne.n	800ab6e <LCD_Scan_Dir+0x1a>
	 switch (dir) {
 800ab5e:	2807      	cmp	r0, #7
 800ab60:	d82b      	bhi.n	800abba <LCD_Scan_Dir+0x66>
 800ab62:	e8df f000 	tbb	[pc, r0]
 800ab66:	280d      	.short	0x280d
 800ab68:	2a202224 	.word	0x2a202224
 800ab6c:	1e26      	.short	0x1e26
	    case 7:
	      dir = 2;
	      break;
	 }
      }
      switch (dir) {
 800ab6e:	3801      	subs	r0, #1
 800ab70:	2806      	cmp	r0, #6
 800ab72:	d822      	bhi.n	800abba <LCD_Scan_Dir+0x66>
 800ab74:	e8df f000 	tbb	[pc, r0]
 800ab78:	1b1d1517 	.word	0x1b1d1517
 800ab7c:	0419      	.short	0x0419
 800ab7e:	1f          	.byte	0x1f
 800ab7f:	00          	.byte	0x00
           break;
         case U2D_R2L:
           regval |= (0 << 7) | (1 << 6) | (1 << 5);
           break;
         case D2U_L2R:
           regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800ab80:	23a0      	movs	r3, #160	@ 0xa0
      LCD->LCD_REG = LCD_Reg;
 800ab82:	f04f 42d8 	mov.w	r2, #1811939328	@ 0x6c000000
 800ab86:	2036      	movs	r0, #54	@ 0x36
 800ab88:	f8a2 007e 	strh.w	r0, [r2, #126]	@ 0x7e
      LCD->LCD_RAM = LCD_RegValue;
 800ab8c:	f8a2 3080 	strh.w	r3, [r2, #128]	@ 0x80
           regval |= (1 << 7) | (1 << 6) | (1 << 5);
           break;
      }
      dirreg = 0x36;
      LCD_WriteReg(dirreg,regval);
      if (regval & 0x20) {
 800ab90:	069b      	lsls	r3, r3, #26
         if (lcddev.width < lcddev.height) {
 800ab92:	880a      	ldrh	r2, [r1, #0]
 800ab94:	8848      	ldrh	r0, [r1, #2]
      if (regval & 0x20) {
 800ab96:	d512      	bpl.n	800abbe <LCD_Scan_Dir+0x6a>
         if (lcddev.width < lcddev.height) {
 800ab98:	4282      	cmp	r2, r0
 800ab9a:	d212      	bcs.n	800abc2 <LCD_Scan_Dir+0x6e>
            lcddev.height = temp;
         }
      } else {
         if (lcddev.width > lcddev.height) {
            temp = lcddev.width;
            lcddev.width = lcddev.height;
 800ab9c:	8008      	strh	r0, [r1, #0]
            lcddev.height = temp;
 800ab9e:	804a      	strh	r2, [r1, #2]
 800aba0:	e00f      	b.n	800abc2 <LCD_Scan_Dir+0x6e>
      switch (dir) {
 800aba2:	2340      	movs	r3, #64	@ 0x40
 800aba4:	e7ed      	b.n	800ab82 <LCD_Scan_Dir+0x2e>
           regval |= (1 << 7) | (0 << 6) | (0 << 5);
 800aba6:	2380      	movs	r3, #128	@ 0x80
 800aba8:	e7eb      	b.n	800ab82 <LCD_Scan_Dir+0x2e>
           regval |= (0 << 7) | (1 << 6) | (1 << 5);
 800abaa:	2360      	movs	r3, #96	@ 0x60
 800abac:	e7e9      	b.n	800ab82 <LCD_Scan_Dir+0x2e>
           regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800abae:	2320      	movs	r3, #32
 800abb0:	e7e7      	b.n	800ab82 <LCD_Scan_Dir+0x2e>
           regval |= (1 << 7) | (1 << 6) | (0 << 5);
 800abb2:	23c0      	movs	r3, #192	@ 0xc0
 800abb4:	e7e5      	b.n	800ab82 <LCD_Scan_Dir+0x2e>
           regval |= (1 << 7) | (1 << 6) | (1 << 5);
 800abb6:	23e0      	movs	r3, #224	@ 0xe0
 800abb8:	e7e3      	b.n	800ab82 <LCD_Scan_Dir+0x2e>
      unsigned short regval = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	e7e1      	b.n	800ab82 <LCD_Scan_Dir+0x2e>
         if (lcddev.width > lcddev.height) {
 800abbe:	4282      	cmp	r2, r0
 800abc0:	d8ec      	bhi.n	800ab9c <LCD_Scan_Dir+0x48>
         }
      }
      LCD_WR_REG(lcddev.setxcmd);
 800abc2:	8948      	ldrh	r0, [r1, #10]
 800abc4:	f7ff ff68 	bl	800aa98 <LCD_WR_REG>
      LCD_WR_DATA(0);
 800abc8:	2000      	movs	r0, #0
 800abca:	f7ff ff76 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_DATA(0);
 800abce:	f7ff ff74 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_DATA((lcddev.width - 1) >> 8);
 800abd2:	880c      	ldrh	r4, [r1, #0]
 800abd4:	3c01      	subs	r4, #1
 800abd6:	f3c4 200f 	ubfx	r0, r4, #8, #16
 800abda:	f7ff ff6e 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_DATA((lcddev.width - 1) & 0xFF);
 800abde:	b2e0      	uxtb	r0, r4
 800abe0:	f7ff ff6b 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_REG(lcddev.setycmd);
 800abe4:	8988      	ldrh	r0, [r1, #12]
 800abe6:	f7ff ff57 	bl	800aa98 <LCD_WR_REG>
      LCD_WR_DATA(0);
 800abea:	2000      	movs	r0, #0
 800abec:	f7ff ff65 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_DATA(0);
 800abf0:	f7ff ff63 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_DATA((lcddev.height - 1) >> 8);
 800abf4:	8849      	ldrh	r1, [r1, #2]
 800abf6:	3901      	subs	r1, #1
 800abf8:	f3c1 200f 	ubfx	r0, r1, #8, #16
 800abfc:	f7ff ff5d 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_DATA((lcddev.height - 1) & 0xFF);
}
 800ac00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      LCD_WR_DATA((lcddev.height - 1) & 0xFF);
 800ac04:	b2c8      	uxtb	r0, r1
 800ac06:	f7ff bf58 	b.w	800aaba <LCD_WR_DATA>
 800ac0a:	bf00      	nop
 800ac0c:	20002c02 	.word	0x20002c02

0800ac10 <LCD_Fast_DrawPoint>:
}


void LCD_Fast_DrawPoint (unsigned short x, unsigned short y, unsigned short color)
{
      if ((x >= maxx) || (y >= maxy)) return;
 800ac10:	4b12      	ldr	r3, [pc, #72]	@ (800ac5c <LCD_Fast_DrawPoint+0x4c>)
 800ac12:	881b      	ldrh	r3, [r3, #0]
 800ac14:	4283      	cmp	r3, r0
{
 800ac16:	b570      	push	{r4, r5, r6, lr}
 800ac18:	4604      	mov	r4, r0
 800ac1a:	4615      	mov	r5, r2
      if ((x >= maxx) || (y >= maxy)) return;
 800ac1c:	d91d      	bls.n	800ac5a <LCD_Fast_DrawPoint+0x4a>
 800ac1e:	4b10      	ldr	r3, [pc, #64]	@ (800ac60 <LCD_Fast_DrawPoint+0x50>)
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	428b      	cmp	r3, r1
 800ac24:	d919      	bls.n	800ac5a <LCD_Fast_DrawPoint+0x4a>
      LCD_WR_REG(lcddev.setxcmd);
 800ac26:	4e0f      	ldr	r6, [pc, #60]	@ (800ac64 <LCD_Fast_DrawPoint+0x54>)
 800ac28:	8970      	ldrh	r0, [r6, #10]
 800ac2a:	f7ff ff35 	bl	800aa98 <LCD_WR_REG>
      LCD_WR_DATA(x >> 8);
 800ac2e:	0a20      	lsrs	r0, r4, #8
 800ac30:	f7ff ff43 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_DATA(x & 0xFF);
 800ac34:	b2e0      	uxtb	r0, r4
 800ac36:	f7ff ff40 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_REG(lcddev.setycmd);
 800ac3a:	89b0      	ldrh	r0, [r6, #12]
 800ac3c:	f7ff ff2c 	bl	800aa98 <LCD_WR_REG>
      LCD_WR_DATA(y >> 8);
 800ac40:	0a08      	lsrs	r0, r1, #8
 800ac42:	f7ff ff3a 	bl	800aaba <LCD_WR_DATA>
      LCD_WR_DATA(y & 0xFF);
 800ac46:	b2c8      	uxtb	r0, r1
 800ac48:	f7ff ff37 	bl	800aaba <LCD_WR_DATA>
      LCD->LCD_REG = lcddev.wramcmd;
 800ac4c:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
 800ac50:	8932      	ldrh	r2, [r6, #8]
 800ac52:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      LCD->LCD_RAM = color;
 800ac56:	f8a3 5080 	strh.w	r5, [r3, #128]	@ 0x80
}
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	20002d48 	.word	0x20002d48
 800ac60:	20002d46 	.word	0x20002d46
 800ac64:	20002c02 	.word	0x20002c02

0800ac68 <LCD_Display_Dir>:
      LCD_WR_DATA(0x00);
}


void LCD_Display_Dir (unsigned char dir)
{
 800ac68:	b510      	push	{r4, lr}
      if (dir == 0) {
 800ac6a:	2800      	cmp	r0, #0
	 lcddev.dir = 0;
 800ac6c:	4c1c      	ldr	r4, [pc, #112]	@ (800ace0 <LCD_Display_Dir+0x78>)
      if (dir == 0) {
 800ac6e:	4603      	mov	r3, r0
 800ac70:	bf0c      	ite	eq
 800ac72:	4603      	moveq	r3, r0
 800ac74:	2301      	movne	r3, #1
	 lcddev.dir = 0;
 800ac76:	71a3      	strb	r3, [r4, #6]
	 lcddev.wramcmd = 0x2C;
 800ac78:	f04f 032c 	mov.w	r3, #44	@ 0x2c
      if (dir == 0) {
 800ac7c:	bf0c      	ite	eq
 800ac7e:	f44f 72f0 	moveq.w	r2, #480	@ 0x1e0
 800ac82:	f44f 72a0 	movne.w	r2, #320	@ 0x140
	 lcddev.wramcmd = 0x2C;
 800ac86:	8123      	strh	r3, [r4, #8]
	 lcddev.setxcmd = 0x2A;
 800ac88:	f04f 032a 	mov.w	r3, #42	@ 0x2a
 800ac8c:	8163      	strh	r3, [r4, #10]
	 lcddev.setycmd = 0x2B;
 	 lcddev.width = 320;
	 lcddev.height = 480;
 800ac8e:	8062      	strh	r2, [r4, #2]
	 lcddev.setycmd = 0x2B;
 800ac90:	f04f 032b 	mov.w	r3, #43	@ 0x2b
	 lcddev.setxcmd = 0x2A;
	 lcddev.setycmd = 0x2B;
 	 lcddev.width = 480;
	 lcddev.height = 320;
      }
      if (lcddev.id != 0x9481) LCD_Scan_Dir(DFT_SCAN_DIR);
 800ac94:	88a2      	ldrh	r2, [r4, #4]
	 lcddev.setycmd = 0x2B;
 800ac96:	81a3      	strh	r3, [r4, #12]
      if (lcddev.id != 0x9481) LCD_Scan_Dir(DFT_SCAN_DIR);
 800ac98:	f249 4381 	movw	r3, #38017	@ 0x9481
      if (dir == 0) {
 800ac9c:	bf0c      	ite	eq
 800ac9e:	f44f 71a0 	moveq.w	r1, #320	@ 0x140
 800aca2:	f44f 71f0 	movne.w	r1, #480	@ 0x1e0
      if (lcddev.id != 0x9481) LCD_Scan_Dir(DFT_SCAN_DIR);
 800aca6:	429a      	cmp	r2, r3
 	 lcddev.width = 320;
 800aca8:	8021      	strh	r1, [r4, #0]
      if (lcddev.id != 0x9481) LCD_Scan_Dir(DFT_SCAN_DIR);
 800acaa:	d002      	beq.n	800acb2 <LCD_Display_Dir+0x4a>
 800acac:	2000      	movs	r0, #0
 800acae:	f7ff ff51 	bl	800ab54 <LCD_Scan_Dir>
      if (lcddev.dir == 0) {
 800acb2:	79a3      	ldrb	r3, [r4, #6]
         maxx = 320;
 800acb4:	490b      	ldr	r1, [pc, #44]	@ (800ace4 <LCD_Display_Dir+0x7c>)
      if (lcddev.dir == 0) {
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	bf0c      	ite	eq
 800acba:	f44f 72a0 	moveq.w	r2, #320	@ 0x140
 800acbe:	f44f 72f0 	movne.w	r2, #480	@ 0x1e0
         maxx = 320;
 800acc2:	800a      	strh	r2, [r1, #0]
         maxy = 480;
 800acc4:	4908      	ldr	r1, [pc, #32]	@ (800ace8 <LCD_Display_Dir+0x80>)
      if (lcddev.dir == 0) {
 800acc6:	bf0c      	ite	eq
 800acc8:	f44f 73f0 	moveq.w	r3, #480	@ 0x1e0
 800accc:	f44f 73a0 	movne.w	r3, #320	@ 0x140
         maxy = 480;
 800acd0:	800b      	strh	r3, [r1, #0]
      } else {
         maxx = 480;
         maxy = 320;
      }
      max_col = (maxx / 8);
 800acd2:	4906      	ldr	r1, [pc, #24]	@ (800acec <LCD_Display_Dir+0x84>)
 800acd4:	08d2      	lsrs	r2, r2, #3
 800acd6:	800a      	strh	r2, [r1, #0]
      max_row = (maxy / 16);
 800acd8:	4a05      	ldr	r2, [pc, #20]	@ (800acf0 <LCD_Display_Dir+0x88>)
 800acda:	091b      	lsrs	r3, r3, #4
 800acdc:	8013      	strh	r3, [r2, #0]
}
 800acde:	bd10      	pop	{r4, pc}
 800ace0:	20002c02 	.word	0x20002c02
 800ace4:	20002d48 	.word	0x20002d48
 800ace8:	20002d46 	.word	0x20002d46
 800acec:	20002d40 	.word	0x20002d40
 800acf0:	20002d3e 	.word	0x20002d3e

0800acf4 <LCD_Clear>:
      LCD_WR_DATA(theight & 0xFF);
}


void LCD_Clear (unsigned short color)
{
 800acf4:	b538      	push	{r3, r4, r5, lr}
      unsigned int index = 0;
      unsigned int totalpoint = lcddev.width;
 800acf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ad20 <LCD_Clear+0x2c>)
      totalpoint *= lcddev.height;
      LCD_SetCursor(0x00,0x0000);
 800acf8:	2100      	movs	r1, #0
      unsigned int totalpoint = lcddev.width;
 800acfa:	881a      	ldrh	r2, [r3, #0]
      totalpoint *= lcddev.height;
 800acfc:	885c      	ldrh	r4, [r3, #2]
{
 800acfe:	4605      	mov	r5, r0
      LCD_SetCursor(0x00,0x0000);
 800ad00:	4608      	mov	r0, r1
      totalpoint *= lcddev.height;
 800ad02:	4354      	muls	r4, r2
      LCD_SetCursor(0x00,0x0000);
 800ad04:	f7ff ff0c 	bl	800ab20 <LCD_SetCursor>
      LCD_WriteRAM_Prepare();
 800ad08:	f7ff ff00 	bl	800ab0c <LCD_WriteRAM_Prepare>
      for (index=0;index<totalpoint;index++) {
	  LCD->LCD_RAM = color;
 800ad0c:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
      for (index=0;index<totalpoint;index++) {
 800ad10:	42a1      	cmp	r1, r4
 800ad12:	d100      	bne.n	800ad16 <LCD_Clear+0x22>
      }
}
 800ad14:	bd38      	pop	{r3, r4, r5, pc}
	  LCD->LCD_RAM = color;
 800ad16:	f8a3 5080 	strh.w	r5, [r3, #128]	@ 0x80
      for (index=0;index<totalpoint;index++) {
 800ad1a:	3101      	adds	r1, #1
 800ad1c:	e7f8      	b.n	800ad10 <LCD_Clear+0x1c>
 800ad1e:	bf00      	nop
 800ad20:	20002c02 	.word	0x20002c02

0800ad24 <LCD_Fill>:


void LCD_Fill (short sx, short sy, short ex, short ey, unsigned short color)
{
 800ad24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      unsigned short i,j;
      unsigned short xlen = 0;
      xlen = ex - sx + 1;
 800ad28:	b285      	uxth	r5, r0
 800ad2a:	1b54      	subs	r4, r2, r5
 800ad2c:	3401      	adds	r4, #1
{
 800ad2e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800ad32:	461e      	mov	r6, r3
      xlen = ex - sx + 1;
 800ad34:	b2a4      	uxth	r4, r4
      for (i=sy;i<=ey;i++) {
 800ad36:	b289      	uxth	r1, r1
	  LCD_SetCursor(sx,i);
	  LCD_WriteRAM_Prepare();
	  for (j=0;j<xlen;j++) LCD->LCD_RAM = color;
 800ad38:	f04f 48d8 	mov.w	r8, #1811939328	@ 0x6c000000
      for (i=sy;i<=ey;i++) {
 800ad3c:	42b1      	cmp	r1, r6
 800ad3e:	dd01      	ble.n	800ad44 <LCD_Fill+0x20>
      }
}
 800ad40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  LCD_SetCursor(sx,i);
 800ad44:	4628      	mov	r0, r5
 800ad46:	f7ff feeb 	bl	800ab20 <LCD_SetCursor>
	  LCD_WriteRAM_Prepare();
 800ad4a:	f7ff fedf 	bl	800ab0c <LCD_WriteRAM_Prepare>
	  for (j=0;j<xlen;j++) LCD->LCD_RAM = color;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	4294      	cmp	r4, r2
 800ad54:	d802      	bhi.n	800ad5c <LCD_Fill+0x38>
      for (i=sy;i<=ey;i++) {
 800ad56:	3101      	adds	r1, #1
 800ad58:	b289      	uxth	r1, r1
 800ad5a:	e7ef      	b.n	800ad3c <LCD_Fill+0x18>
	  for (j=0;j<xlen;j++) LCD->LCD_RAM = color;
 800ad5c:	f8a8 7080 	strh.w	r7, [r8, #128]	@ 0x80
 800ad60:	3301      	adds	r3, #1
 800ad62:	e7f5      	b.n	800ad50 <LCD_Fill+0x2c>

0800ad64 <set_color>:
}


void set_color (unsigned short color)
{
      foreground_color = color;
 800ad64:	4b01      	ldr	r3, [pc, #4]	@ (800ad6c <set_color+0x8>)
 800ad66:	8018      	strh	r0, [r3, #0]
}
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	20002d4c 	.word	0x20002d4c

0800ad70 <set_pixel>:
      background_color = color;
}


void set_pixel (unsigned short x, unsigned short y, unsigned short color)
{
 800ad70:	b538      	push	{r3, r4, r5, lr}
      unsigned short temp = foreground_color;
 800ad72:	4c03      	ldr	r4, [pc, #12]	@ (800ad80 <set_pixel+0x10>)
 800ad74:	8825      	ldrh	r5, [r4, #0]
      foreground_color = color;
 800ad76:	8022      	strh	r2, [r4, #0]
      //lcd_set_pixel(x,y);
      LCD_Fast_DrawPoint(x,y,color);
 800ad78:	f7ff ff4a 	bl	800ac10 <LCD_Fast_DrawPoint>
      foreground_color = temp;
 800ad7c:	8025      	strh	r5, [r4, #0]
}
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	20002d4c 	.word	0x20002d4c

0800ad84 <out_lcd>:


void out_lcd (char wchar)
{
 800ad84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad88:	4f0c      	ldr	r7, [pc, #48]	@ (800adbc <out_lcd+0x38>)
      int idx;
      for (idx=0;idx<8;idx++) {
          if ((s_bit[idx] & wchar) == 0) set_pixel(tx,ty,background_color); else set_pixel(tx,ty,foreground_color);
 800ad8a:	4d0d      	ldr	r5, [pc, #52]	@ (800adc0 <out_lcd+0x3c>)
 800ad8c:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 800adcc <out_lcd+0x48>
{
 800ad90:	4606      	mov	r6, r0
      for (idx=0;idx<8;idx++) {
 800ad92:	2400      	movs	r4, #0
          if ((s_bit[idx] & wchar) == 0) set_pixel(tx,ty,background_color); else set_pixel(tx,ty,foreground_color);
 800ad94:	f817 3b01 	ldrb.w	r3, [r7], #1
 800ad98:	8828      	ldrh	r0, [r5, #0]
 800ad9a:	f8b8 1000 	ldrh.w	r1, [r8]
 800ad9e:	4233      	tst	r3, r6
 800ada0:	bf0c      	ite	eq
 800ada2:	4b08      	ldreq	r3, [pc, #32]	@ (800adc4 <out_lcd+0x40>)
 800ada4:	4b08      	ldrne	r3, [pc, #32]	@ (800adc8 <out_lcd+0x44>)
 800ada6:	881a      	ldrh	r2, [r3, #0]
 800ada8:	f7ff ffe2 	bl	800ad70 <set_pixel>
          tx++;
 800adac:	882b      	ldrh	r3, [r5, #0]
      for (idx=0;idx<8;idx++) {
 800adae:	3401      	adds	r4, #1
          tx++;
 800adb0:	3301      	adds	r3, #1
      for (idx=0;idx<8;idx++) {
 800adb2:	2c08      	cmp	r4, #8
          tx++;
 800adb4:	802b      	strh	r3, [r5, #0]
      for (idx=0;idx<8;idx++) {
 800adb6:	d1ed      	bne.n	800ad94 <out_lcd+0x10>
      }
}
 800adb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adbc:	0800f9a0 	.word	0x0800f9a0
 800adc0:	20002d3c 	.word	0x20002d3c
 800adc4:	20002d4a 	.word	0x20002d4a
 800adc8:	20002d4c 	.word	0x20002d4c
 800adcc:	20002d3a 	.word	0x20002d3a

0800add0 <uni_to_kssm>:

unsigned short uni_to_kssm (unsigned short wchar)
{
      unsigned short cho,joong,jong;
      unsigned short result = 0x8000;
      cho = 2 + (wchar - 0xAC00) / (21 * 28);
 800add0:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800add4:	f5a0 402c 	sub.w	r0, r0, #44032	@ 0xac00
 800add8:	fb90 f3f1 	sdiv	r3, r0, r1
 800addc:	1c9a      	adds	r2, r3, #2
      joong = (wchar - 0xAC00) % (21 * 28) / 28;
 800adde:	fb01 0313 	mls	r3, r1, r3, r0
 800ade2:	211c      	movs	r1, #28
 800ade4:	fb93 f3f1 	sdiv	r3, r3, r1
 800ade8:	b29b      	uxth	r3, r3
      if (joong < 5) joong += 3;
 800adea:	2b04      	cmp	r3, #4
{
 800adec:	b510      	push	{r4, lr}
      cho = 2 + (wchar - 0xAC00) / (21 * 28);
 800adee:	b292      	uxth	r2, r2
      if (joong < 5) joong += 3;
 800adf0:	d816      	bhi.n	800ae20 <uni_to_kssm+0x50>
 800adf2:	3303      	adds	r3, #3
      else if (joong < 11) joong += 5;
      else if (joong < 17) joong += 7;
      else joong += 9;
      jong  = (wchar - 0xAC00) % 28;
 800adf4:	211c      	movs	r1, #28
      else joong += 9;
 800adf6:	b29b      	uxth	r3, r3
      jong  = (wchar - 0xAC00) % 28;
 800adf8:	fb90 f4f1 	sdiv	r4, r0, r1
      if (jong < 17) jong++;
      else jong += 2;
      result |= cho << 10;
      result |= joong << 5;
 800adfc:	015b      	lsls	r3, r3, #5
      jong  = (wchar - 0xAC00) % 28;
 800adfe:	fb01 0014 	mls	r0, r1, r4, r0
 800ae02:	b280      	uxth	r0, r0
      result |= joong << 5;
 800ae04:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
      if (jong < 17) jong++;
 800ae08:	2810      	cmp	r0, #16
      result |= joong << 5;
 800ae0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
      if (jong < 17) jong++;
 800ae0e:	bf94      	ite	ls
 800ae10:	3001      	addls	r0, #1
      else jong += 2;
 800ae12:	3002      	addhi	r0, #2
      result |= joong << 5;
 800ae14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae18:	b29b      	uxth	r3, r3
      else jong += 2;
 800ae1a:	b280      	uxth	r0, r0
      result |= jong;
      return result;
}
 800ae1c:	4318      	orrs	r0, r3
 800ae1e:	bd10      	pop	{r4, pc}
      else if (joong < 11) joong += 5;
 800ae20:	2b0a      	cmp	r3, #10
 800ae22:	d801      	bhi.n	800ae28 <uni_to_kssm+0x58>
 800ae24:	3305      	adds	r3, #5
 800ae26:	e7e5      	b.n	800adf4 <uni_to_kssm+0x24>
      else if (joong < 17) joong += 7;
 800ae28:	2b10      	cmp	r3, #16
 800ae2a:	bf94      	ite	ls
 800ae2c:	3307      	addls	r3, #7
      else joong += 9;
 800ae2e:	3309      	addhi	r3, #9
 800ae30:	e7e0      	b.n	800adf4 <uni_to_kssm+0x24>
	...

0800ae34 <ks5601_to_kssm>:
{
      unsigned char xh,xl;
      unsigned short i,result;
      xh = ((wchar >> 8) & 0xFF);
      xl = (wchar & 0x00FF);
      if ((xh >= 0xB0) && (xl >= 0xA0)) {
 800ae34:	f5b0 4f30 	cmp.w	r0, #45056	@ 0xb000
      xh = ((wchar >> 8) & 0xFF);
 800ae38:	ea4f 2310 	mov.w	r3, r0, lsr #8
      if ((xh >= 0xB0) && (xl >= 0xA0)) {
 800ae3c:	d313      	bcc.n	800ae66 <ks5601_to_kssm+0x32>
      xl = (wchar & 0x00FF);
 800ae3e:	b2c0      	uxtb	r0, r0
      if ((xh >= 0xB0) && (xl >= 0xA0)) {
 800ae40:	289f      	cmp	r0, #159	@ 0x9f
 800ae42:	d910      	bls.n	800ae66 <ks5601_to_kssm+0x32>
         xh = xh - 0xB0;
 800ae44:	3350      	adds	r3, #80	@ 0x50
         xl = xl - 0xA0;
         i = xl + xh * 96;
 800ae46:	b2db      	uxtb	r3, r3
         xl = xl - 0xA0;
 800ae48:	3060      	adds	r0, #96	@ 0x60
         i = xl + xh * 96;
 800ae4a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ae4e:	b2c3      	uxtb	r3, r0
         result = KS_CODE[i][0] << 8 | KS_CODE[i][1];
 800ae50:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ae54:	4a05      	ldr	r2, [pc, #20]	@ (800ae6c <ks5601_to_kssm+0x38>)
 800ae56:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800ae5a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800ae5e:	7850      	ldrb	r0, [r2, #1]
 800ae60:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
         return result;
 800ae64:	4770      	bx	lr
      }
      return 0;
 800ae66:	2000      	movs	r0, #0
}
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	0800f9a8 	.word	0x0800f9a8

0800ae70 <put_eng>:


void put_eng (char cdata)
{
      unsigned short val,pi;
      if (cdata < 0x20) {
 800ae70:	281f      	cmp	r0, #31
{
 800ae72:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (cdata < 0x20) {
 800ae76:	d813      	bhi.n	800aea0 <put_eng+0x30>
         if (cdata == 0x0D) ax = 0;
 800ae78:	280d      	cmp	r0, #13
 800ae7a:	d104      	bne.n	800ae86 <put_eng+0x16>
         if (cdata == 0x0A) {
            ay++;
            if (ay >= max_row) {
               ay -= 1;
               ax = 0;
 800ae7c:	4b30      	ldr	r3, [pc, #192]	@ (800af40 <put_eng+0xd0>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	801a      	strh	r2, [r3, #0]
            if (ay >= max_row) {
               ay -= 1;
            }
         }
      }
}
 800ae82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if (cdata == 0x0A) {
 800ae86:	280a      	cmp	r0, #10
 800ae88:	d1fb      	bne.n	800ae82 <put_eng+0x12>
            ay++;
 800ae8a:	4a2e      	ldr	r2, [pc, #184]	@ (800af44 <put_eng+0xd4>)
            if (ay >= max_row) {
 800ae8c:	482e      	ldr	r0, [pc, #184]	@ (800af48 <put_eng+0xd8>)
            ay++;
 800ae8e:	8811      	ldrh	r1, [r2, #0]
            if (ay >= max_row) {
 800ae90:	8800      	ldrh	r0, [r0, #0]
            ay++;
 800ae92:	1c4b      	adds	r3, r1, #1
 800ae94:	b29b      	uxth	r3, r3
            if (ay >= max_row) {
 800ae96:	4298      	cmp	r0, r3
            ay++;
 800ae98:	8013      	strh	r3, [r2, #0]
            if (ay >= max_row) {
 800ae9a:	d8f2      	bhi.n	800ae82 <put_eng+0x12>
               ay -= 1;
 800ae9c:	8011      	strh	r1, [r2, #0]
 800ae9e:	e7ed      	b.n	800ae7c <put_eng+0xc>
         ty = ay * 16;
 800aea0:	4f28      	ldr	r7, [pc, #160]	@ (800af44 <put_eng+0xd4>)
 800aea2:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 800af68 <put_eng+0xf8>
 800aea6:	883b      	ldrh	r3, [r7, #0]
 800aea8:	4d28      	ldr	r5, [pc, #160]	@ (800af4c <put_eng+0xdc>)
 800aeaa:	4e29      	ldr	r6, [pc, #164]	@ (800af50 <put_eng+0xe0>)
             tx = ax * 8;
 800aeac:	4929      	ldr	r1, [pc, #164]	@ (800af54 <put_eng+0xe4>)
 800aeae:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 800af40 <put_eng+0xd0>
         ty = ay * 16;
 800aeb2:	011b      	lsls	r3, r3, #4
 800aeb4:	f04f 0a10 	mov.w	sl, #16
 800aeb8:	f8a9 3000 	strh.w	r3, [r9]
         for (pi=0;pi<16;pi++) {
 800aebc:	ea4f 1b40 	mov.w	fp, r0, lsl #5
 800aec0:	eb05 1540 	add.w	r5, r5, r0, lsl #5
 800aec4:	eb0a 1a40 	add.w	sl, sl, r0, lsl #5
 800aec8:	0104      	lsls	r4, r0, #4
             tx = ax * 8;
 800aeca:	f8b8 3000 	ldrh.w	r3, [r8]
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	800b      	strh	r3, [r1, #0]
             if (eng_mode == 0) {
 800aed2:	4b21      	ldr	r3, [pc, #132]	@ (800af58 <put_eng+0xe8>)
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	bb4b      	cbnz	r3, 800af2c <put_eng+0xbc>
                dumy_data[pi] = eng_font[val][pi];
 800aed8:	eba5 030b 	sub.w	r3, r5, fp
 800aedc:	5d1b      	ldrb	r3, [r3, r4]
 800aede:	7033      	strb	r3, [r6, #0]
             out_lcd(dumy_data[pi]);
 800aee0:	f816 0b01 	ldrb.w	r0, [r6], #1
 800aee4:	f7ff ff4e 	bl	800ad84 <out_lcd>
             ty++;
 800aee8:	f8b9 3000 	ldrh.w	r3, [r9]
         for (pi=0;pi<16;pi++) {
 800aeec:	4a1b      	ldr	r2, [pc, #108]	@ (800af5c <put_eng+0xec>)
 800aeee:	4919      	ldr	r1, [pc, #100]	@ (800af54 <put_eng+0xe4>)
             ty++;
 800aef0:	3301      	adds	r3, #1
         for (pi=0;pi<16;pi++) {
 800aef2:	4296      	cmp	r6, r2
             ty++;
 800aef4:	f8a9 3000 	strh.w	r3, [r9]
         for (pi=0;pi<16;pi++) {
 800aef8:	f105 0501 	add.w	r5, r5, #1
 800aefc:	d1e5      	bne.n	800aeca <put_eng+0x5a>
         ax++;
 800aefe:	f8b8 3000 	ldrh.w	r3, [r8]
         if (ax >= max_col) {
 800af02:	4a17      	ldr	r2, [pc, #92]	@ (800af60 <put_eng+0xf0>)
         ax++;
 800af04:	3301      	adds	r3, #1
         if (ax >= max_col) {
 800af06:	8812      	ldrh	r2, [r2, #0]
         ax++;
 800af08:	b29b      	uxth	r3, r3
         if (ax >= max_col) {
 800af0a:	429a      	cmp	r2, r3
         ax++;
 800af0c:	f8a8 3000 	strh.w	r3, [r8]
         if (ax >= max_col) {
 800af10:	d8b7      	bhi.n	800ae82 <put_eng+0x12>
            ax = 0;
 800af12:	2300      	movs	r3, #0
            if (ay >= max_row) {
 800af14:	490c      	ldr	r1, [pc, #48]	@ (800af48 <put_eng+0xd8>)
            ax = 0;
 800af16:	f8a8 3000 	strh.w	r3, [r8]
            ay++;
 800af1a:	883b      	ldrh	r3, [r7, #0]
            if (ay >= max_row) {
 800af1c:	8809      	ldrh	r1, [r1, #0]
            ay++;
 800af1e:	1c5a      	adds	r2, r3, #1
 800af20:	b292      	uxth	r2, r2
               ay -= 1;
 800af22:	4291      	cmp	r1, r2
 800af24:	bf88      	it	hi
 800af26:	4613      	movhi	r3, r2
 800af28:	803b      	strh	r3, [r7, #0]
 800af2a:	e7aa      	b.n	800ae82 <put_eng+0x12>
                if (page == 0) dumy_data[pi] = eng_font[val*2][pi];else dumy_data[pi] = eng_font[val*2+1][pi];
 800af2c:	4b0d      	ldr	r3, [pc, #52]	@ (800af64 <put_eng+0xf4>)
 800af2e:	881b      	ldrh	r3, [r3, #0]
 800af30:	b90b      	cbnz	r3, 800af36 <put_eng+0xc6>
 800af32:	782b      	ldrb	r3, [r5, #0]
 800af34:	e7d3      	b.n	800aede <put_eng+0x6e>
 800af36:	eba5 030b 	sub.w	r3, r5, fp
 800af3a:	f813 300a 	ldrb.w	r3, [r3, sl]
 800af3e:	e7ce      	b.n	800aede <put_eng+0x6e>
 800af40:	20002d44 	.word	0x20002d44
 800af44:	20002d42 	.word	0x20002d42
 800af48:	20002d3e 	.word	0x20002d3e
 800af4c:	08013968 	.word	0x08013968
 800af50:	20002c15 	.word	0x20002c15
 800af54:	20002d3c 	.word	0x20002d3c
 800af58:	20002d38 	.word	0x20002d38
 800af5c:	20002c25 	.word	0x20002c25
 800af60:	20002d40 	.word	0x20002d40
 800af64:	20002d36 	.word	0x20002d36
 800af68:	20002d3a 	.word	0x20002d3a

0800af6c <put_han>:


void put_han (unsigned short c)
{
 800af6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      unsigned char i,first,mid,last,b1,b2,b3;
      unsigned short cc,hlx1,hlx2,hlx3;
      if (hangul_mode == 0) cc = ks5601_to_kssm(c);else cc = uni_to_kssm(c);
 800af70:	4ba4      	ldr	r3, [pc, #656]	@ (800b204 <put_han+0x298>)
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d144      	bne.n	800b002 <put_han+0x96>
 800af78:	f7ff ff5c 	bl	800ae34 <ks5601_to_kssm>
      first = ((cc & 0x7C00) >> 10);
      mid = ((cc & 0x03E0) >> 5);
      last = (cc & 0x001F);
      first = han_tbl[0][first];
 800af7c:	4ba2      	ldr	r3, [pc, #648]	@ (800b208 <put_han+0x29c>)
 800af7e:	f3c0 2284 	ubfx	r2, r0, #10, #5
 800af82:	f813 e002 	ldrb.w	lr, [r3, r2]
      mid = han_tbl[1][mid];
 800af86:	f3c0 1244 	ubfx	r2, r0, #5, #5
 800af8a:	441a      	add	r2, r3
      last = han_tbl[2][last];
 800af8c:	f000 001f 	and.w	r0, r0, #31
      mid = han_tbl[1][mid];
 800af90:	f892 6020 	ldrb.w	r6, [r2, #32]
      last = han_tbl[2][last];
 800af94:	4403      	add	r3, r0
      b1 = 0;
      b2 = 0;
      b3 = 0;
      switch (mid) {
 800af96:	2e15      	cmp	r6, #21
      last = han_tbl[2][last];
 800af98:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
      switch (mid) {
 800af9c:	d834      	bhi.n	800b008 <put_han+0x9c>
 800af9e:	4a9b      	ldr	r2, [pc, #620]	@ (800b20c <put_han+0x2a0>)
 800afa0:	2501      	movs	r5, #1
 800afa2:	fa05 f306 	lsl.w	r3, r5, r6
 800afa6:	4213      	tst	r3, r2
 800afa8:	d107      	bne.n	800afba <put_han+0x4e>
 800afaa:	4a99      	ldr	r2, [pc, #612]	@ (800b210 <put_han+0x2a4>)
 800afac:	4213      	tst	r3, r2
 800afae:	d12d      	bne.n	800b00c <put_han+0xa0>
         case 9:
         case 13:
         case 14:
         case 18:
         case 19:
           b3 = 3;
 800afb0:	4a98      	ldr	r2, [pc, #608]	@ (800b214 <put_han+0x2a8>)
 800afb2:	4213      	tst	r3, r2
 800afb4:	bf0c      	ite	eq
 800afb6:	2500      	moveq	r5, #0
 800afb8:	2503      	movne	r5, #3
           break;
      }
      switch (first) {
 800afba:	f1be 0f01 	cmp.w	lr, #1
 800afbe:	d002      	beq.n	800afc6 <put_han+0x5a>
 800afc0:	f1be 0f10 	cmp.w	lr, #16
 800afc4:	d124      	bne.n	800b010 <put_han+0xa4>
         case 1:
         case 16:
           if (last == 0) b2 = 0;else b2 = 2;
 800afc6:	1e02      	subs	r2, r0, #0
 800afc8:	bf18      	it	ne
 800afca:	2201      	movne	r2, #1
           break;
         default:
           if (last == 0) b2 = 1;else b2 = 3;
      }
      switch (mid) {
 800afcc:	1e73      	subs	r3, r6, #1
           if (last == 0) b2 = 0;else b2 = 2;
 800afce:	0052      	lsls	r2, r2, #1
      switch (mid) {
 800afd0:	2b14      	cmp	r3, #20
 800afd2:	d83e      	bhi.n	800b052 <put_han+0xe6>
 800afd4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800afd8:	003a003a 	.word	0x003a003a
 800afdc:	003a003a 	.word	0x003a003a
 800afe0:	003a003a 	.word	0x003a003a
 800afe4:	003a003a 	.word	0x003a003a
 800afe8:	00db00d5 	.word	0x00db00d5
 800afec:	00db00db 	.word	0x00db00db
 800aff0:	00d800d5 	.word	0x00d800d5
 800aff4:	00e100e1 	.word	0x00e100e1
 800aff8:	00d800e1 	.word	0x00d800e1
 800affc:	00db00d5 	.word	0x00db00d5
 800b000:	003a      	.short	0x003a
      if (hangul_mode == 0) cc = ks5601_to_kssm(c);else cc = uni_to_kssm(c);
 800b002:	f7ff fee5 	bl	800add0 <uni_to_kssm>
 800b006:	e7b9      	b.n	800af7c <put_han+0x10>
      b3 = 0;
 800b008:	2500      	movs	r5, #0
 800b00a:	e7d6      	b.n	800afba <put_han+0x4e>
           b3 = 2;
 800b00c:	2502      	movs	r5, #2
 800b00e:	e7d4      	b.n	800afba <put_han+0x4e>
           if (last == 0) b2 = 1;else b2 = 3;
 800b010:	2800      	cmp	r0, #0
 800b012:	f000 80cf 	beq.w	800b1b4 <put_han+0x248>
      switch (mid) {
 800b016:	1e73      	subs	r3, r6, #1
 800b018:	2b14      	cmp	r3, #20
 800b01a:	f200 80b0 	bhi.w	800b17e <put_han+0x212>
 800b01e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b022:	00ed      	.short	0x00ed
 800b024:	00ed00ed 	.word	0x00ed00ed
 800b028:	00ed00ed 	.word	0x00ed00ed
 800b02c:	00ed00ed 	.word	0x00ed00ed
 800b030:	00c100ed 	.word	0x00c100ed
 800b034:	00c700c7 	.word	0x00c700c7
 800b038:	00c100c7 	.word	0x00c100c7
 800b03c:	00c700c1 	.word	0x00c700c1
 800b040:	00c700c7 	.word	0x00c700c7
 800b044:	00c100c1 	.word	0x00c100c1
 800b048:	00ed00c7 	.word	0x00ed00c7
         case 5:
         case 6:
         case 7:
         case 8:
         case 21:
           if (last == 0) b1 = 0; else b1 = 5;
 800b04c:	2800      	cmp	r0, #0
 800b04e:	f040 80d6 	bne.w	800b1fe <put_han+0x292>
      b1 = 0;
 800b052:	2300      	movs	r3, #0
         case 17:
           if (last == 0) b1 = 4;else b1 = 7;
           break;
      }
      if ((mid == 0) && (last == 0)) b1 = 0;
      for (i=0;i<16;i++) {
 800b054:	4970      	ldr	r1, [pc, #448]	@ (800b218 <put_han+0x2ac>)
          if (first != 0) {
             hlx1 = first + loc1[b1];
             dumy_data[i*2] = kor_font[hlx1][i*2];
 800b056:	f8df 81e8 	ldr.w	r8, [pc, #488]	@ 800b240 <put_han+0x2d4>
           if (last == 0) b1 = 1;else b1 = 6;
 800b05a:	f04f 0c01 	mov.w	ip, #1
 800b05e:	2700      	movs	r7, #0
 800b060:	468a      	mov	sl, r1
          if (first != 0) {
 800b062:	f1be 0f00 	cmp.w	lr, #0
 800b066:	d00d      	beq.n	800b084 <put_han+0x118>
             hlx1 = first + loc1[b1];
 800b068:	4c6c      	ldr	r4, [pc, #432]	@ (800b21c <put_han+0x2b0>)
 800b06a:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
 800b06e:	4474      	add	r4, lr
             dumy_data[i*2] = kor_font[hlx1][i*2];
 800b070:	b2a4      	uxth	r4, r4
 800b072:	eb08 1444 	add.w	r4, r8, r4, lsl #5
 800b076:	f814 9007 	ldrb.w	r9, [r4, r7]
             dumy_data[i*2+1] = kor_font[hlx1][i*2+1];
 800b07a:	f814 400c 	ldrb.w	r4, [r4, ip]
             dumy_data[i*2] = kor_font[hlx1][i*2];
 800b07e:	f881 9000 	strb.w	r9, [r1]
             dumy_data[i*2+1] = kor_font[hlx1][i*2+1];
 800b082:	704c      	strb	r4, [r1, #1]
          }
          if (mid != 0) {
 800b084:	b1b6      	cbz	r6, 800b0b4 <put_han+0x148>
             hlx2 = mid + loc2[b2];
 800b086:	4c66      	ldr	r4, [pc, #408]	@ (800b220 <put_han+0x2b4>)
             dumy_data[i*2] = dumy_data[i*2] | kor_font[hlx2][i*2];
 800b088:	f891 9000 	ldrb.w	r9, [r1]
             hlx2 = mid + loc2[b2];
 800b08c:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
 800b090:	4434      	add	r4, r6
             dumy_data[i*2] = dumy_data[i*2] | kor_font[hlx2][i*2];
 800b092:	b2a4      	uxth	r4, r4
 800b094:	eb08 1444 	add.w	r4, r8, r4, lsl #5
 800b098:	f814 b007 	ldrb.w	fp, [r4, r7]
             dumy_data[i*2+1] = dumy_data[i*2+1] | kor_font[hlx2][i*2+1];
 800b09c:	f814 400c 	ldrb.w	r4, [r4, ip]
             dumy_data[i*2] = dumy_data[i*2] | kor_font[hlx2][i*2];
 800b0a0:	ea49 090b 	orr.w	r9, r9, fp
 800b0a4:	f881 9000 	strb.w	r9, [r1]
             dumy_data[i*2+1] = dumy_data[i*2+1] | kor_font[hlx2][i*2+1];
 800b0a8:	f891 9001 	ldrb.w	r9, [r1, #1]
 800b0ac:	ea49 0904 	orr.w	r9, r9, r4
 800b0b0:	f881 9001 	strb.w	r9, [r1, #1]
          }
          if (last != 0) {
 800b0b4:	b1b0      	cbz	r0, 800b0e4 <put_han+0x178>
             hlx3 = last + loc3[b3];
 800b0b6:	4c5b      	ldr	r4, [pc, #364]	@ (800b224 <put_han+0x2b8>)
             dumy_data[i*2] = dumy_data[i*2] | kor_font[hlx3][i*2];
 800b0b8:	f891 9000 	ldrb.w	r9, [r1]
             hlx3 = last + loc3[b3];
 800b0bc:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 800b0c0:	4404      	add	r4, r0
             dumy_data[i*2] = dumy_data[i*2] | kor_font[hlx3][i*2];
 800b0c2:	b2a4      	uxth	r4, r4
 800b0c4:	eb08 1444 	add.w	r4, r8, r4, lsl #5
 800b0c8:	f814 b007 	ldrb.w	fp, [r4, r7]
             dumy_data[i*2+1] = dumy_data[i*2+1] | kor_font[hlx3][i*2+1];
 800b0cc:	f814 400c 	ldrb.w	r4, [r4, ip]
             dumy_data[i*2] = dumy_data[i*2] | kor_font[hlx3][i*2];
 800b0d0:	ea49 090b 	orr.w	r9, r9, fp
 800b0d4:	f881 9000 	strb.w	r9, [r1]
             dumy_data[i*2+1] = dumy_data[i*2+1] | kor_font[hlx3][i*2+1];
 800b0d8:	f891 9001 	ldrb.w	r9, [r1, #1]
 800b0dc:	ea49 0904 	orr.w	r9, r9, r4
 800b0e0:	f881 9001 	strb.w	r9, [r1, #1]
      for (i=0;i<16;i++) {
 800b0e4:	3702      	adds	r7, #2
 800b0e6:	2f20      	cmp	r7, #32
 800b0e8:	f101 0102 	add.w	r1, r1, #2
 800b0ec:	f10c 0c02 	add.w	ip, ip, #2
 800b0f0:	d1b7      	bne.n	800b062 <put_han+0xf6>
          }
      }
      ty = ay * 16;
 800b0f2:	4e4d      	ldr	r6, [pc, #308]	@ (800b228 <put_han+0x2bc>)
 800b0f4:	4c4d      	ldr	r4, [pc, #308]	@ (800b22c <put_han+0x2c0>)
 800b0f6:	8833      	ldrh	r3, [r6, #0]
      for (i=0;i<16;i++) {
          tx = ax * 8;
 800b0f8:	4f4d      	ldr	r7, [pc, #308]	@ (800b230 <put_han+0x2c4>)
 800b0fa:	4d4e      	ldr	r5, [pc, #312]	@ (800b234 <put_han+0x2c8>)
      ty = ay * 16;
 800b0fc:	011b      	lsls	r3, r3, #4
 800b0fe:	8023      	strh	r3, [r4, #0]
 800b100:	f04f 0800 	mov.w	r8, #0
          tx = ax * 8;
 800b104:	882b      	ldrh	r3, [r5, #0]
          out_lcd(dumy_data[i*2]);
 800b106:	f81a 0018 	ldrb.w	r0, [sl, r8, lsl #1]
          tx = ax * 8;
 800b10a:	00db      	lsls	r3, r3, #3
 800b10c:	803b      	strh	r3, [r7, #0]
          out_lcd(dumy_data[i*2]);
 800b10e:	f7ff fe39 	bl	800ad84 <out_lcd>
          ty++;
 800b112:	8823      	ldrh	r3, [r4, #0]
      for (i=0;i<16;i++) {
 800b114:	f108 0801 	add.w	r8, r8, #1
          ty++;
 800b118:	3301      	adds	r3, #1
      for (i=0;i<16;i++) {
 800b11a:	f1b8 0f10 	cmp.w	r8, #16
          ty++;
 800b11e:	8023      	strh	r3, [r4, #0]
      for (i=0;i<16;i++) {
 800b120:	d1f0      	bne.n	800b104 <put_han+0x198>
      }
      ty = ay * 16;
 800b122:	8833      	ldrh	r3, [r6, #0]
      for (i=0;i<16;i++) {
          tx = (ax+1) * 8;
          out_lcd(dumy_data[i*2+1]);
 800b124:	f8df 911c 	ldr.w	r9, [pc, #284]	@ 800b244 <put_han+0x2d8>
      ty = ay * 16;
 800b128:	011b      	lsls	r3, r3, #4
 800b12a:	8023      	strh	r3, [r4, #0]
 800b12c:	f04f 0800 	mov.w	r8, #0
          tx = (ax+1) * 8;
 800b130:	882b      	ldrh	r3, [r5, #0]
          out_lcd(dumy_data[i*2+1]);
 800b132:	f819 0018 	ldrb.w	r0, [r9, r8, lsl #1]
          tx = (ax+1) * 8;
 800b136:	3301      	adds	r3, #1
 800b138:	00db      	lsls	r3, r3, #3
 800b13a:	803b      	strh	r3, [r7, #0]
          out_lcd(dumy_data[i*2+1]);
 800b13c:	f7ff fe22 	bl	800ad84 <out_lcd>
          ty++;
 800b140:	8823      	ldrh	r3, [r4, #0]
      for (i=0;i<16;i++) {
 800b142:	f108 0801 	add.w	r8, r8, #1
          ty++;
 800b146:	3301      	adds	r3, #1
      for (i=0;i<16;i++) {
 800b148:	f1b8 0f10 	cmp.w	r8, #16
          ty++;
 800b14c:	8023      	strh	r3, [r4, #0]
      for (i=0;i<16;i++) {
 800b14e:	d1ef      	bne.n	800b130 <put_han+0x1c4>
      }
      ax += 2;
 800b150:	882b      	ldrh	r3, [r5, #0]
      if (ax >= max_col) {
 800b152:	4a39      	ldr	r2, [pc, #228]	@ (800b238 <put_han+0x2cc>)
      ax += 2;
 800b154:	3302      	adds	r3, #2
      if (ax >= max_col) {
 800b156:	8812      	ldrh	r2, [r2, #0]
      ax += 2;
 800b158:	b29b      	uxth	r3, r3
      if (ax >= max_col) {
 800b15a:	429a      	cmp	r2, r3
      ax += 2;
 800b15c:	802b      	strh	r3, [r5, #0]
      if (ax >= max_col) {
 800b15e:	d80a      	bhi.n	800b176 <put_han+0x20a>
         ax = 0;
 800b160:	2300      	movs	r3, #0
         ay++;
         if (ay >= max_row) {
 800b162:	4936      	ldr	r1, [pc, #216]	@ (800b23c <put_han+0x2d0>)
         ax = 0;
 800b164:	802b      	strh	r3, [r5, #0]
         ay++;
 800b166:	8833      	ldrh	r3, [r6, #0]
         if (ay >= max_row) {
 800b168:	8809      	ldrh	r1, [r1, #0]
         ay++;
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	b292      	uxth	r2, r2
            ay -= 1;
 800b16e:	4291      	cmp	r1, r2
 800b170:	bf88      	it	hi
 800b172:	4613      	movhi	r3, r2
 800b174:	8033      	strh	r3, [r6, #0]
         }
      }
}
 800b176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
           if (last == 0) b2 = 1;else b2 = 3;
 800b17a:	2201      	movs	r2, #1
 800b17c:	e769      	b.n	800b052 <put_han+0xe6>
 800b17e:	2203      	movs	r2, #3
 800b180:	e767      	b.n	800b052 <put_han+0xe6>
           if (last == 0) b1 = 1;else b1 = 6;
 800b182:	b980      	cbnz	r0, 800b1a6 <put_han+0x23a>
 800b184:	2301      	movs	r3, #1
 800b186:	e765      	b.n	800b054 <put_han+0xe8>
           if (last == 0) b1 = 2;else b1 = 6;
 800b188:	b968      	cbnz	r0, 800b1a6 <put_han+0x23a>
 800b18a:	2302      	movs	r3, #2
 800b18c:	e762      	b.n	800b054 <put_han+0xe8>
           if (last == 0) b1 = 3;else b1 = 7;
 800b18e:	b168      	cbz	r0, 800b1ac <put_han+0x240>
 800b190:	2307      	movs	r3, #7
 800b192:	e75f      	b.n	800b054 <put_han+0xe8>
           if (last == 0) b2 = 1;else b2 = 3;
 800b194:	2201      	movs	r2, #1
           if (last == 0) b1 = 4;else b1 = 7;
 800b196:	2304      	movs	r3, #4
 800b198:	e75c      	b.n	800b054 <put_han+0xe8>
           if (last == 0) b1 = 3;else b1 = 7;
 800b19a:	2800      	cmp	r0, #0
 800b19c:	bf0c      	ite	eq
 800b19e:	2304      	moveq	r3, #4
 800b1a0:	2307      	movne	r3, #7
 800b1a2:	e757      	b.n	800b054 <put_han+0xe8>
           if (last == 0) b2 = 1;else b2 = 3;
 800b1a4:	2203      	movs	r2, #3
           if (last == 0) b1 = 1;else b1 = 6;
 800b1a6:	2306      	movs	r3, #6
 800b1a8:	e754      	b.n	800b054 <put_han+0xe8>
           if (last == 0) b2 = 1;else b2 = 3;
 800b1aa:	2201      	movs	r2, #1
           if (last == 0) b1 = 3;else b1 = 7;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e751      	b.n	800b054 <put_han+0xe8>
           if (last == 0) b2 = 1;else b2 = 3;
 800b1b0:	2203      	movs	r2, #3
 800b1b2:	e7ed      	b.n	800b190 <put_han+0x224>
      switch (mid) {
 800b1b4:	f1a6 0309 	sub.w	r3, r6, #9
 800b1b8:	2b0b      	cmp	r3, #11
 800b1ba:	d8de      	bhi.n	800b17a <put_han+0x20e>
 800b1bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c4 <put_han+0x258>)
 800b1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c2:	bf00      	nop
 800b1c4:	0800b1f9 	.word	0x0800b1f9
 800b1c8:	0800b1ab 	.word	0x0800b1ab
 800b1cc:	0800b1ab 	.word	0x0800b1ab
 800b1d0:	0800b1ab 	.word	0x0800b1ab
 800b1d4:	0800b1f9 	.word	0x0800b1f9
 800b1d8:	0800b1f5 	.word	0x0800b1f5
 800b1dc:	0800b195 	.word	0x0800b195
 800b1e0:	0800b195 	.word	0x0800b195
 800b1e4:	0800b195 	.word	0x0800b195
 800b1e8:	0800b1f5 	.word	0x0800b1f5
 800b1ec:	0800b1f9 	.word	0x0800b1f9
 800b1f0:	0800b1ab 	.word	0x0800b1ab
           if (last == 0) b2 = 1;else b2 = 3;
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	e7c8      	b.n	800b18a <put_han+0x21e>
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	e7c3      	b.n	800b184 <put_han+0x218>
 800b1fc:	2203      	movs	r2, #3
           if (last == 0) b1 = 0; else b1 = 5;
 800b1fe:	2305      	movs	r3, #5
 800b200:	e728      	b.n	800b054 <put_han+0xe8>
 800b202:	bf00      	nop
 800b204:	20002c14 	.word	0x20002c14
 800b208:	0800f940 	.word	0x0800f940
 800b20c:	003290a0 	.word	0x003290a0
 800b210:	00010954 	.word	0x00010954
 800b214:	000c6200 	.word	0x000c6200
 800b218:	20002c15 	.word	0x20002c15
 800b21c:	0800f930 	.word	0x0800f930
 800b220:	0800f928 	.word	0x0800f928
 800b224:	0800f920 	.word	0x0800f920
 800b228:	20002d42 	.word	0x20002d42
 800b22c:	20002d3a 	.word	0x20002d3a
 800b230:	20002d3c 	.word	0x20002d3c
 800b234:	20002d44 	.word	0x20002d44
 800b238:	20002d40 	.word	0x20002d40
 800b23c:	20002d3e 	.word	0x20002d3e
 800b240:	08010c68 	.word	0x08010c68
 800b244:	20002c16 	.word	0x20002c16

0800b248 <lput_char>:
      }
}


void lput_char (char *str)
{
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	4605      	mov	r5, r0
      unsigned char len,n;
      unsigned short hangul_char;
      len = strlen(str);
 800b24c:	f003 fa78 	bl	800e740 <strlen>
      for (n=0;n<len;n++) {
 800b250:	2400      	movs	r4, #0
      len = strlen(str);
 800b252:	b2c6      	uxtb	r6, r0
      for (n=0;n<len;n++) {
 800b254:	42b4      	cmp	r4, r6
 800b256:	d300      	bcc.n	800b25a <lput_char+0x12>
             hangul_char= hangul_char | str[n + 1];
             put_han(hangul_char);
             n++;
          }
      }
}
 800b258:	bd70      	pop	{r4, r5, r6, pc}
      	  if ((str[n] & 0x80) == 0) {
 800b25a:	572a      	ldrsb	r2, [r5, r4]
 800b25c:	5d28      	ldrb	r0, [r5, r4]
 800b25e:	2a00      	cmp	r2, #0
 800b260:	4623      	mov	r3, r4
 800b262:	db04      	blt.n	800b26e <lput_char+0x26>
             put_eng(str[n]);
 800b264:	f7ff fe04 	bl	800ae70 <put_eng>
      for (n=0;n<len;n++) {
 800b268:	3401      	adds	r4, #1
 800b26a:	b2e4      	uxtb	r4, r4
 800b26c:	e7f2      	b.n	800b254 <lput_char+0xc>
             hangul_char= hangul_char | str[n + 1];
 800b26e:	442b      	add	r3, r5
             n++;
 800b270:	3401      	adds	r4, #1
             hangul_char= hangul_char | str[n + 1];
 800b272:	785b      	ldrb	r3, [r3, #1]
             put_han(hangul_char);
 800b274:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
             n++;
 800b278:	b2e4      	uxtb	r4, r4
             put_han(hangul_char);
 800b27a:	f7ff fe77 	bl	800af6c <put_han>
             n++;
 800b27e:	e7f3      	b.n	800b268 <lput_char+0x20>

0800b280 <lcd_printf>:
      }
}


void lcd_printf (unsigned short x,unsigned short y,char *form,...)
{
 800b280:	b40c      	push	{r2, r3}
 800b282:	b513      	push	{r0, r1, r4, lr}
      va_list argptr;
      ax = x;
 800b284:	4c0a      	ldr	r4, [pc, #40]	@ (800b2b0 <lcd_printf+0x30>)
{
 800b286:	aa04      	add	r2, sp, #16
      ax = x;
 800b288:	8020      	strh	r0, [r4, #0]
{
 800b28a:	f852 3b04 	ldr.w	r3, [r2], #4
      ay = y;
      va_start(argptr,form);
      vsprintf(buff,form,argptr);
 800b28e:	4c09      	ldr	r4, [pc, #36]	@ (800b2b4 <lcd_printf+0x34>)
      ay = y;
 800b290:	4809      	ldr	r0, [pc, #36]	@ (800b2b8 <lcd_printf+0x38>)
      va_start(argptr,form);
 800b292:	9201      	str	r2, [sp, #4]
      ay = y;
 800b294:	8001      	strh	r1, [r0, #0]
      vsprintf(buff,form,argptr);
 800b296:	4619      	mov	r1, r3
 800b298:	4620      	mov	r0, r4
 800b29a:	f001 fe1d 	bl	800ced8 <vsprintf>
      lput_char(buff);
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f7ff ffd2 	bl	800b248 <lput_char>
      va_end(argptr);
}
 800b2a4:	b002      	add	sp, #8
 800b2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2aa:	b002      	add	sp, #8
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	20002d44 	.word	0x20002d44
 800b2b4:	20002c35 	.word	0x20002c35
 800b2b8:	20002d42 	.word	0x20002d42

0800b2bc <ili_9481_rotation>:


void ili_9481_rotation (unsigned char rotation)
{
 800b2bc:	4601      	mov	r1, r0
 800b2be:	b508      	push	{r3, lr}
      LCD_WR_REG(0x36);
 800b2c0:	2036      	movs	r0, #54	@ 0x36
 800b2c2:	f7ff fbe9 	bl	800aa98 <LCD_WR_REG>
      switch (rotation) {
 800b2c6:	2903      	cmp	r1, #3
 800b2c8:	d80e      	bhi.n	800b2e8 <ili_9481_rotation+0x2c>
 800b2ca:	e8df f001 	tbb	[pc, r1]
 800b2ce:	0702      	.short	0x0702
 800b2d0:	0b09      	.short	0x0b09
         case 0: // Portrait
           LCD_WR_DATA(0x08 | 0x02);
 800b2d2:	200a      	movs	r0, #10
           break;
         case 3: // Inverted landscape
           LCD_WR_DATA(0x20 | 0x08 | 0x02 | 0x01);
           break;
      }
}
 800b2d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           LCD_WR_DATA(0x20 | 0x08 | 0x02 | 0x01);
 800b2d8:	f7ff bbef 	b.w	800aaba <LCD_WR_DATA>
           LCD_WR_DATA(0x20 | 0x08);
 800b2dc:	2028      	movs	r0, #40	@ 0x28
 800b2de:	e7f9      	b.n	800b2d4 <ili_9481_rotation+0x18>
           LCD_WR_DATA(0x08 | 0x01);
 800b2e0:	2009      	movs	r0, #9
 800b2e2:	e7f7      	b.n	800b2d4 <ili_9481_rotation+0x18>
           LCD_WR_DATA(0x20 | 0x08 | 0x02 | 0x01);
 800b2e4:	202b      	movs	r0, #43	@ 0x2b
 800b2e6:	e7f5      	b.n	800b2d4 <ili_9481_rotation+0x18>
}
 800b2e8:	bd08      	pop	{r3, pc}
	...

0800b2ec <LCD_Init>:


void LCD_Init (void)
{
 800b2ec:	b530      	push	{r4, r5, lr}
      FSMC_NORSRAMInitTypeDef FSMC_NORSRAMInitStructure;
      FSMC_NORSRAMTimingInitTypeDef readWriteTiming;
      FSMC_NORSRAMTimingInitTypeDef writeTiming;
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOG, ENABLE);
 800b2ee:	2101      	movs	r1, #1
{
 800b2f0:	b0a1      	sub	sp, #132	@ 0x84
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOG, ENABLE);
 800b2f2:	207a      	movs	r0, #122	@ 0x7a
 800b2f4:	f002 fcf0 	bl	800dcd8 <RCC_AHB1PeriphClockCmd>
      RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC,ENABLE);
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	4608      	mov	r0, r1
 800b2fc:	f002 fcf8 	bl	800dcf0 <RCC_AHB3PeriphClockCmd>
      GPIO_Init_Pin(GPIOB,GPIO_Pin_15,GPIO_Speed_100MHz,GPIO_Mode_Out_PP);
 800b300:	48d5      	ldr	r0, [pc, #852]	@ (800b658 <LCD_Init+0x36c>)
 800b302:	2301      	movs	r3, #1
 800b304:	2203      	movs	r2, #3
 800b306:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b30a:	f002 fbb1 	bl	800da70 <GPIO_Init_Pin>
      //PD0,1,4,5,8,9,10,14,15 AF OUT
      GPIO_Init_Pin(GPIOD,GPIO_Pin_0,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b30e:	48d3      	ldr	r0, [pc, #844]	@ (800b65c <LCD_Init+0x370>)
 800b310:	2312      	movs	r3, #18
 800b312:	2203      	movs	r2, #3
 800b314:	2101      	movs	r1, #1
 800b316:	f002 fbab 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_1,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b31a:	48d0      	ldr	r0, [pc, #832]	@ (800b65c <LCD_Init+0x370>)
 800b31c:	2312      	movs	r3, #18
 800b31e:	2203      	movs	r2, #3
 800b320:	2102      	movs	r1, #2
 800b322:	f002 fba5 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_4,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b326:	48cd      	ldr	r0, [pc, #820]	@ (800b65c <LCD_Init+0x370>)
 800b328:	2312      	movs	r3, #18
 800b32a:	2203      	movs	r2, #3
 800b32c:	2110      	movs	r1, #16
 800b32e:	f002 fb9f 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_5,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b332:	48ca      	ldr	r0, [pc, #808]	@ (800b65c <LCD_Init+0x370>)
 800b334:	2312      	movs	r3, #18
 800b336:	2203      	movs	r2, #3
 800b338:	2120      	movs	r1, #32
 800b33a:	f002 fb99 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_8,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b33e:	48c7      	ldr	r0, [pc, #796]	@ (800b65c <LCD_Init+0x370>)
 800b340:	2312      	movs	r3, #18
 800b342:	2203      	movs	r2, #3
 800b344:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b348:	f002 fb92 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_9,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b34c:	48c3      	ldr	r0, [pc, #780]	@ (800b65c <LCD_Init+0x370>)
 800b34e:	2312      	movs	r3, #18
 800b350:	2203      	movs	r2, #3
 800b352:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b356:	f002 fb8b 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_10,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b35a:	48c0      	ldr	r0, [pc, #768]	@ (800b65c <LCD_Init+0x370>)
 800b35c:	2312      	movs	r3, #18
 800b35e:	2203      	movs	r2, #3
 800b360:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b364:	f002 fb84 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_14,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b368:	48bc      	ldr	r0, [pc, #752]	@ (800b65c <LCD_Init+0x370>)
 800b36a:	2312      	movs	r3, #18
 800b36c:	2203      	movs	r2, #3
 800b36e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b372:	f002 fb7d 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOD,GPIO_Pin_15,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b376:	48b9      	ldr	r0, [pc, #740]	@ (800b65c <LCD_Init+0x370>)
 800b378:	2312      	movs	r3, #18
 800b37a:	2203      	movs	r2, #3
 800b37c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b380:	f002 fb76 	bl	800da70 <GPIO_Init_Pin>
      //PE7~15,AF OUT
      GPIO_Init_Pin(GPIOE,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b384:	48b6      	ldr	r0, [pc, #728]	@ (800b660 <LCD_Init+0x374>)
 800b386:	2312      	movs	r3, #18
 800b388:	2203      	movs	r2, #3
 800b38a:	2180      	movs	r1, #128	@ 0x80
 800b38c:	f002 fb70 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOE,GPIO_Pin_8,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b390:	48b3      	ldr	r0, [pc, #716]	@ (800b660 <LCD_Init+0x374>)
 800b392:	2312      	movs	r3, #18
 800b394:	2203      	movs	r2, #3
 800b396:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b39a:	f002 fb69 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOE,GPIO_Pin_9,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b39e:	48b0      	ldr	r0, [pc, #704]	@ (800b660 <LCD_Init+0x374>)
 800b3a0:	2312      	movs	r3, #18
 800b3a2:	2203      	movs	r2, #3
 800b3a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b3a8:	f002 fb62 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOE,GPIO_Pin_10,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b3ac:	48ac      	ldr	r0, [pc, #688]	@ (800b660 <LCD_Init+0x374>)
 800b3ae:	2312      	movs	r3, #18
 800b3b0:	2203      	movs	r2, #3
 800b3b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b3b6:	f002 fb5b 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOE,GPIO_Pin_11,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b3ba:	48a9      	ldr	r0, [pc, #676]	@ (800b660 <LCD_Init+0x374>)
 800b3bc:	2312      	movs	r3, #18
 800b3be:	2203      	movs	r2, #3
 800b3c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b3c4:	f002 fb54 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOE,GPIO_Pin_12,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b3c8:	48a5      	ldr	r0, [pc, #660]	@ (800b660 <LCD_Init+0x374>)
 800b3ca:	2312      	movs	r3, #18
 800b3cc:	2203      	movs	r2, #3
 800b3ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b3d2:	f002 fb4d 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOE,GPIO_Pin_13,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b3d6:	48a2      	ldr	r0, [pc, #648]	@ (800b660 <LCD_Init+0x374>)
 800b3d8:	2312      	movs	r3, #18
 800b3da:	2203      	movs	r2, #3
 800b3dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b3e0:	f002 fb46 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOE,GPIO_Pin_14,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b3e4:	489e      	ldr	r0, [pc, #632]	@ (800b660 <LCD_Init+0x374>)
 800b3e6:	2312      	movs	r3, #18
 800b3e8:	2203      	movs	r2, #3
 800b3ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b3ee:	f002 fb3f 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOE,GPIO_Pin_15,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b3f2:	489b      	ldr	r0, [pc, #620]	@ (800b660 <LCD_Init+0x374>)
 800b3f4:	2312      	movs	r3, #18
 800b3f6:	2203      	movs	r2, #3
 800b3f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b3fc:	f002 fb38 	bl	800da70 <GPIO_Init_Pin>
      //PF12,FSMC_A6
      GPIO_Init_Pin(GPIOF,GPIO_Pin_12,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b400:	4898      	ldr	r0, [pc, #608]	@ (800b664 <LCD_Init+0x378>)
 800b402:	2312      	movs	r3, #18
 800b404:	2203      	movs	r2, #3
 800b406:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b40a:	f002 fb31 	bl	800da70 <GPIO_Init_Pin>
      //PG12,FSMC_NE4
      GPIO_Init_Pin(GPIOG,GPIO_Pin_12,GPIO_Speed_100MHz,GPIO_Mode_AF_PP_PU);
 800b40e:	2312      	movs	r3, #18
 800b410:	4895      	ldr	r0, [pc, #596]	@ (800b668 <LCD_Init+0x37c>)
 800b412:	2203      	movs	r2, #3
 800b414:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b418:	f002 fb2a 	bl	800da70 <GPIO_Init_Pin>
      //AF
      GPIO_PinAFConfig(GPIOD,GPIO_PinSource0,GPIO_AF_FSMC);
 800b41c:	488f      	ldr	r0, [pc, #572]	@ (800b65c <LCD_Init+0x370>)
 800b41e:	220c      	movs	r2, #12
 800b420:	2100      	movs	r1, #0
 800b422:	f002 fb13 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOD,GPIO_PinSource1,GPIO_AF_FSMC);
 800b426:	488d      	ldr	r0, [pc, #564]	@ (800b65c <LCD_Init+0x370>)
 800b428:	220c      	movs	r2, #12
 800b42a:	2101      	movs	r1, #1
 800b42c:	f002 fb0e 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOD,GPIO_PinSource4,GPIO_AF_FSMC);
 800b430:	488a      	ldr	r0, [pc, #552]	@ (800b65c <LCD_Init+0x370>)
 800b432:	220c      	movs	r2, #12
 800b434:	2104      	movs	r1, #4
 800b436:	f002 fb09 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOD,GPIO_PinSource5,GPIO_AF_FSMC);
 800b43a:	4888      	ldr	r0, [pc, #544]	@ (800b65c <LCD_Init+0x370>)
 800b43c:	220c      	movs	r2, #12
 800b43e:	2105      	movs	r1, #5
 800b440:	f002 fb04 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_FSMC);
 800b444:	4885      	ldr	r0, [pc, #532]	@ (800b65c <LCD_Init+0x370>)
 800b446:	220c      	movs	r2, #12
 800b448:	2108      	movs	r1, #8
 800b44a:	f002 faff 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_FSMC);
 800b44e:	4883      	ldr	r0, [pc, #524]	@ (800b65c <LCD_Init+0x370>)
 800b450:	220c      	movs	r2, #12
 800b452:	2109      	movs	r1, #9
 800b454:	f002 fafa 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOD,GPIO_PinSource10,GPIO_AF_FSMC);
 800b458:	4880      	ldr	r0, [pc, #512]	@ (800b65c <LCD_Init+0x370>)
 800b45a:	220c      	movs	r2, #12
 800b45c:	210a      	movs	r1, #10
 800b45e:	f002 faf5 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOD,GPIO_PinSource14,GPIO_AF_FSMC);
 800b462:	487e      	ldr	r0, [pc, #504]	@ (800b65c <LCD_Init+0x370>)
 800b464:	220c      	movs	r2, #12
 800b466:	210e      	movs	r1, #14
 800b468:	f002 faf0 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOD,GPIO_PinSource15,GPIO_AF_FSMC);
 800b46c:	487b      	ldr	r0, [pc, #492]	@ (800b65c <LCD_Init+0x370>)
 800b46e:	220c      	movs	r2, #12
 800b470:	210f      	movs	r1, #15
 800b472:	f002 faeb 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOE,GPIO_PinSource7,GPIO_AF_FSMC);
 800b476:	487a      	ldr	r0, [pc, #488]	@ (800b660 <LCD_Init+0x374>)
 800b478:	220c      	movs	r2, #12
 800b47a:	2107      	movs	r1, #7
 800b47c:	f002 fae6 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOE,GPIO_PinSource8,GPIO_AF_FSMC);
 800b480:	4877      	ldr	r0, [pc, #476]	@ (800b660 <LCD_Init+0x374>)
 800b482:	220c      	movs	r2, #12
 800b484:	2108      	movs	r1, #8
 800b486:	f002 fae1 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOE,GPIO_PinSource9,GPIO_AF_FSMC);
 800b48a:	4875      	ldr	r0, [pc, #468]	@ (800b660 <LCD_Init+0x374>)
 800b48c:	220c      	movs	r2, #12
 800b48e:	2109      	movs	r1, #9
 800b490:	f002 fadc 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOE,GPIO_PinSource10,GPIO_AF_FSMC);
 800b494:	4872      	ldr	r0, [pc, #456]	@ (800b660 <LCD_Init+0x374>)
 800b496:	220c      	movs	r2, #12
 800b498:	210a      	movs	r1, #10
 800b49a:	f002 fad7 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOE,GPIO_PinSource11,GPIO_AF_FSMC);
 800b49e:	4870      	ldr	r0, [pc, #448]	@ (800b660 <LCD_Init+0x374>)
 800b4a0:	220c      	movs	r2, #12
 800b4a2:	210b      	movs	r1, #11
 800b4a4:	f002 fad2 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOE,GPIO_PinSource12,GPIO_AF_FSMC);
 800b4a8:	220c      	movs	r2, #12
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	486c      	ldr	r0, [pc, #432]	@ (800b660 <LCD_Init+0x374>)
 800b4ae:	f002 facd 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOE,GPIO_PinSource13,GPIO_AF_FSMC);
 800b4b2:	486b      	ldr	r0, [pc, #428]	@ (800b660 <LCD_Init+0x374>)
 800b4b4:	220c      	movs	r2, #12
 800b4b6:	210d      	movs	r1, #13
 800b4b8:	f002 fac8 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOE,GPIO_PinSource14,GPIO_AF_FSMC);
 800b4bc:	4868      	ldr	r0, [pc, #416]	@ (800b660 <LCD_Init+0x374>)
 800b4be:	220c      	movs	r2, #12
 800b4c0:	210e      	movs	r1, #14
 800b4c2:	f002 fac3 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOE,GPIO_PinSource15,GPIO_AF_FSMC);
 800b4c6:	4866      	ldr	r0, [pc, #408]	@ (800b660 <LCD_Init+0x374>)
 800b4c8:	220c      	movs	r2, #12
 800b4ca:	210f      	movs	r1, #15
 800b4cc:	f002 fabe 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOF,GPIO_PinSource12,GPIO_AF_FSMC);
 800b4d0:	220c      	movs	r2, #12
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	4863      	ldr	r0, [pc, #396]	@ (800b664 <LCD_Init+0x378>)
 800b4d6:	f002 fab9 	bl	800da4c <GPIO_PinAFConfig>
      GPIO_PinAFConfig(GPIOG,GPIO_PinSource12,GPIO_AF_FSMC);
 800b4da:	220c      	movs	r2, #12
 800b4dc:	4611      	mov	r1, r2
 800b4de:	4862      	ldr	r0, [pc, #392]	@ (800b668 <LCD_Init+0x37c>)
 800b4e0:	f002 fab4 	bl	800da4c <GPIO_PinAFConfig>

      readWriteTiming.FSMC_AddressSetupTime = 0xF;	// ADDSET16 HCLK 1/168M = 6ns * 16 = 96ns
      readWriteTiming.FSMC_AddressHoldTime = 0x00;	// ADDHLD
 800b4e4:	2400      	movs	r4, #0
 800b4e6:	230f      	movs	r3, #15
 800b4e8:	e9cd 3403 	strd	r3, r4, [sp, #12]
      readWriteTiming.FSMC_DataSetupTime = 60;		// 60HCLK = 6 * 60 = 360ns
 800b4ec:	233c      	movs	r3, #60	@ 0x3c
      readWriteTiming.FSMC_BusTurnAroundDuration = 0x00;
 800b4ee:	e9cd 3405 	strd	r3, r4, [sp, #20]
      readWriteTiming.FSMC_CLKDivision = 0x00;
      readWriteTiming.FSMC_DataLatency = 0x00;
      readWriteTiming.FSMC_AccessMode = FSMC_AccessMode_A;

      writeTiming.FSMC_AddressSetupTime =9;		// ADDSET 9HCLK = 54ns
 800b4f2:	2309      	movs	r3, #9
      writeTiming.FSMC_AddressHoldTime = 0x00;
 800b4f4:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
      writeTiming.FSMC_DataSetupTime = 8;		// 6ns * 9HCLK = 54ns
 800b4f8:	2308      	movs	r3, #8
      writeTiming.FSMC_BusTurnAroundDuration = 0x00;
 800b4fa:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
      writeTiming.FSMC_AccessMode = FSMC_AccessMode_A;

      FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM4;
      FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
      FSMC_NORSRAMInitStructure.FSMC_MemoryType =FSMC_MemoryType_SRAM;			// FSMC_MemoryType_SRAM; SRAM
      FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;	// 16bit
 800b4fe:	2310      	movs	r3, #16
      FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode =FSMC_BurstAccessMode_Disable;	// FSMC_BurstAccessMode_Disable;
 800b500:	e9cd 3414 	strd	r3, r4, [sp, #80]	@ 0x50
      FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
      FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait=FSMC_AsynchronousWait_Disable;
      FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
      FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
      FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 800b504:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
      FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
 800b508:	e9cd 341a 	strd	r3, r4, [sp, #104]	@ 0x68
      FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Enable;
 800b50c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
      FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 800b510:	e9cd 341c 	strd	r3, r4, [sp, #112]	@ 0x70
      FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &readWriteTiming;
 800b514:	ab03      	add	r3, sp, #12
      FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM4;
 800b516:	2506      	movs	r5, #6
      FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &readWriteTiming;
 800b518:	931e      	str	r3, [sp, #120]	@ 0x78
      FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &writeTiming;
      FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
 800b51a:	a811      	add	r0, sp, #68	@ 0x44
      FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &writeTiming;
 800b51c:	ab0a      	add	r3, sp, #40	@ 0x28
 800b51e:	931f      	str	r3, [sp, #124]	@ 0x7c
      readWriteTiming.FSMC_DataLatency = 0x00;
 800b520:	e9cd 4407 	strd	r4, r4, [sp, #28]
      writeTiming.FSMC_DataLatency = 0x00;
 800b524:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
      FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
 800b528:	e9cd 5411 	strd	r5, r4, [sp, #68]	@ 0x44
      FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait=FSMC_AsynchronousWait_Disable;
 800b52c:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
      FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 800b530:	e9cd 4418 	strd	r4, r4, [sp, #96]	@ 0x60
      readWriteTiming.FSMC_AccessMode = FSMC_AccessMode_A;
 800b534:	9409      	str	r4, [sp, #36]	@ 0x24
      writeTiming.FSMC_AccessMode = FSMC_AccessMode_A;
 800b536:	9410      	str	r4, [sp, #64]	@ 0x40
      FSMC_NORSRAMInitStructure.FSMC_MemoryType =FSMC_MemoryType_SRAM;			// FSMC_MemoryType_SRAM; SRAM
 800b538:	9413      	str	r4, [sp, #76]	@ 0x4c
      FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
 800b53a:	f002 fd4f 	bl	800dfdc <FSMC_NORSRAMInit>
      FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);
 800b53e:	2101      	movs	r1, #1
 800b540:	4628      	mov	r0, r5
 800b542:	f002 fdab 	bl	800e09c <FSMC_NORSRAMCmd>
      wait_ms(50);	// delay 50 ms
 800b546:	2032      	movs	r0, #50	@ 0x32
 800b548:	f7fc fe46 	bl	80081d8 <wait_ms>
      LCD->LCD_REG = LCD_Reg;
 800b54c:	f04f 43d8 	mov.w	r3, #1811939328	@ 0x6c000000
      LCD->LCD_RAM = LCD_RegValue;
 800b550:	2201      	movs	r2, #1
      LCD->LCD_REG = LCD_Reg;
 800b552:	f8a3 407e 	strh.w	r4, [r3, #126]	@ 0x7e
      LCD_WriteReg(0x0000,0x0001);
      wait_ms(50);	// delay 50 ms
 800b556:	2032      	movs	r0, #50	@ 0x32
      LCD->LCD_RAM = LCD_RegValue;
 800b558:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
      wait_ms(50);	// delay 50 ms
 800b55c:	f7fc fe3c 	bl	80081d8 <wait_ms>
      lcddev.id = LCD_ReadReg(0x0000);
 800b560:	4620      	mov	r0, r4
 800b562:	f7ff fac8 	bl	800aaf6 <LCD_ReadReg>
      if (lcddev.id < 0xFF || lcddev.id == 0xFFFF || lcddev.id == 0x9300) {
 800b566:	f1a0 03ff 	sub.w	r3, r0, #255	@ 0xff
      lcddev.id = LCD_ReadReg(0x0000);
 800b56a:	4c40      	ldr	r4, [pc, #256]	@ (800b66c <LCD_Init+0x380>)
      if (lcddev.id < 0xFF || lcddev.id == 0xFFFF || lcddev.id == 0x9300) {
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
      lcddev.id = LCD_ReadReg(0x0000);
 800b572:	80a0      	strh	r0, [r4, #4]
      if (lcddev.id < 0xFF || lcddev.id == 0xFFFF || lcddev.id == 0x9300) {
 800b574:	d202      	bcs.n	800b57c <LCD_Init+0x290>
 800b576:	f5b0 4f13 	cmp.w	r0, #37632	@ 0x9300
 800b57a:	d15a      	bne.n	800b632 <LCD_Init+0x346>
	 LCD_WR_REG(0xD3);
 800b57c:	20d3      	movs	r0, #211	@ 0xd3
 800b57e:	f7ff fa8b 	bl	800aa98 <LCD_WR_REG>
	 lcddev.id = LCD_RD_DATA();	//dummy read
 800b582:	f7ff faab 	bl	800aadc <LCD_RD_DATA>
 	 lcddev.id = LCD_RD_DATA();
 800b586:	f7ff faa9 	bl	800aadc <LCD_RD_DATA>
  	 lcddev.id = LCD_RD_DATA();
 800b58a:	f7ff faa7 	bl	800aadc <LCD_RD_DATA>
 800b58e:	4602      	mov	r2, r0
 	 lcddev.id <<= 8;
	 lcddev.id |= LCD_RD_DATA();
 800b590:	f7ff faa4 	bl	800aadc <LCD_RD_DATA>
 800b594:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800b598:	b280      	uxth	r0, r0
 	 if (lcddev.id != 0x9341) {
 800b59a:	f249 3341 	movw	r3, #37697	@ 0x9341
 800b59e:	4298      	cmp	r0, r3
	 lcddev.id |= LCD_RD_DATA();
 800b5a0:	80a0      	strh	r0, [r4, #4]
 	 if (lcddev.id != 0x9341) {
 800b5a2:	d046      	beq.n	800b632 <LCD_Init+0x346>
 	    LCD_WR_REG(0xBF);
 800b5a4:	20bf      	movs	r0, #191	@ 0xbf
 800b5a6:	f7ff fa77 	bl	800aa98 <LCD_WR_REG>
	    lcddev.id = LCD_RD_DATA();	//dummy read
 800b5aa:	f7ff fa97 	bl	800aadc <LCD_RD_DATA>
	    lcddev.id = LCD_RD_DATA();
 800b5ae:	f7ff fa95 	bl	800aadc <LCD_RD_DATA>
	    lcddev.id = LCD_RD_DATA();
 800b5b2:	f7ff fa93 	bl	800aadc <LCD_RD_DATA>
	    lcddev.id = LCD_RD_DATA();
 800b5b6:	f7ff fa91 	bl	800aadc <LCD_RD_DATA>
 800b5ba:	4602      	mov	r2, r0
	    lcddev.id <<= 8;
	    lcddev.id |= LCD_RD_DATA();
 800b5bc:	f7ff fa8e 	bl	800aadc <LCD_RD_DATA>
 800b5c0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800b5c4:	b280      	uxth	r0, r0
	    if (lcddev.id != 0x6804) {
 800b5c6:	f646 0304 	movw	r3, #26628	@ 0x6804
 800b5ca:	4298      	cmp	r0, r3
	    lcddev.id |= LCD_RD_DATA();
 800b5cc:	80a0      	strh	r0, [r4, #4]
	    if (lcddev.id != 0x6804) {
 800b5ce:	d030      	beq.n	800b632 <LCD_Init+0x346>
	       LCD_WR_REG(0xD4);
 800b5d0:	20d4      	movs	r0, #212	@ 0xd4
 800b5d2:	f7ff fa61 	bl	800aa98 <LCD_WR_REG>
	       lcddev.id = LCD_RD_DATA();//dummy read
 800b5d6:	f7ff fa81 	bl	800aadc <LCD_RD_DATA>
	       lcddev.id = LCD_RD_DATA();
 800b5da:	f7ff fa7f 	bl	800aadc <LCD_RD_DATA>
	       lcddev.id = LCD_RD_DATA();
 800b5de:	f7ff fa7d 	bl	800aadc <LCD_RD_DATA>
 800b5e2:	4602      	mov	r2, r0
	       lcddev.id <<= 8;
	       lcddev.id |= LCD_RD_DATA();
 800b5e4:	f7ff fa7a 	bl	800aadc <LCD_RD_DATA>
 800b5e8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800b5ec:	b280      	uxth	r0, r0
	       if (lcddev.id != 0x5310) {
 800b5ee:	f245 3310 	movw	r3, #21264	@ 0x5310
 800b5f2:	4298      	cmp	r0, r3
	       lcddev.id |= LCD_RD_DATA();
 800b5f4:	80a0      	strh	r0, [r4, #4]
	       if (lcddev.id != 0x5310) {
 800b5f6:	d01c      	beq.n	800b632 <LCD_Init+0x346>
		  LCD_WR_REG(0xDA00);
 800b5f8:	f44f 405a 	mov.w	r0, #55808	@ 0xda00
 800b5fc:	f7ff fa4c 	bl	800aa98 <LCD_WR_REG>
		  lcddev.id=LCD_RD_DATA();
 800b600:	f7ff fa6c 	bl	800aadc <LCD_RD_DATA>
		  LCD_WR_REG(0xDB00);
 800b604:	f44f 405b 	mov.w	r0, #56064	@ 0xdb00
 800b608:	f7ff fa46 	bl	800aa98 <LCD_WR_REG>
		  lcddev.id = LCD_RD_DATA();
 800b60c:	f7ff fa66 	bl	800aadc <LCD_RD_DATA>
 800b610:	4601      	mov	r1, r0
		  lcddev.id <<= 8;
		  LCD_WR_REG(0xDC00);
 800b612:	f44f 405c 	mov.w	r0, #56320	@ 0xdc00
 800b616:	f7ff fa3f 	bl	800aa98 <LCD_WR_REG>
		  lcddev.id |= LCD_RD_DATA();
 800b61a:	f7ff fa5f 	bl	800aadc <LCD_RD_DATA>
 800b61e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800b622:	b280      	uxth	r0, r0
		  if (lcddev.id == 0x8000) lcddev.id = 0x5510;
 800b624:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800b628:	f245 5310 	movw	r3, #21776	@ 0x5510
 800b62c:	f041 802b 	bne.w	800c686 <LCD_Init+0x139a>
 800b630:	80a3      	strh	r3, [r4, #4]
		  }
	       }
	    }
 	 }
      }
      FSMC_Bank1E->BWTR[6] &= ~(0xF << 0);	// ADDSET
 800b632:	4b0f      	ldr	r3, [pc, #60]	@ (800b670 <LCD_Init+0x384>)
 800b634:	69da      	ldr	r2, [r3, #28]
 800b636:	f022 020f 	bic.w	r2, r2, #15
 800b63a:	61da      	str	r2, [r3, #28]
      FSMC_Bank1E->BWTR[6] &= ~(0xF << 8);
 800b63c:	69da      	ldr	r2, [r3, #28]
 800b63e:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800b642:	61da      	str	r2, [r3, #28]
      FSMC_Bank1E->BWTR[6] |= 3 << 0;		// ADDSET 3HCLK = 18ns
 800b644:	69da      	ldr	r2, [r3, #28]
 800b646:	f042 0203 	orr.w	r2, r2, #3
 800b64a:	61da      	str	r2, [r3, #28]
      FSMC_Bank1E->BWTR[6] |= 2 << 8;		// DATAST 6ns * 3HCLK = 18ns
 800b64c:	69da      	ldr	r2, [r3, #28]
 800b64e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b652:	61da      	str	r2, [r3, #28]
      if (lcddev.id == 0x5310) {
 800b654:	88a2      	ldrh	r2, [r4, #4]
 800b656:	e00d      	b.n	800b674 <LCD_Init+0x388>
 800b658:	40020400 	.word	0x40020400
 800b65c:	40020c00 	.word	0x40020c00
 800b660:	40021000 	.word	0x40021000
 800b664:	40021400 	.word	0x40021400
 800b668:	40021800 	.word	0x40021800
 800b66c:	20002c02 	.word	0x20002c02
 800b670:	a0000100 	.word	0xa0000100
 800b674:	f245 3310 	movw	r3, #21264	@ 0x5310
 800b678:	429a      	cmp	r2, r3
 800b67a:	f040 8724 	bne.w	800c4c6 <LCD_Init+0x11da>
         LCD_WR_REG(0xED);
 800b67e:	20ed      	movs	r0, #237	@ 0xed
 800b680:	f7ff fa0a 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x01);
 800b684:	2001      	movs	r0, #1
 800b686:	f7ff fa18 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xFE);
 800b68a:	20fe      	movs	r0, #254	@ 0xfe
 800b68c:	f7ff fa15 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xEE);
 800b690:	20ee      	movs	r0, #238	@ 0xee
 800b692:	f7ff fa01 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0xDE);
 800b696:	20de      	movs	r0, #222	@ 0xde
 800b698:	f7ff fa0f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x21);
 800b69c:	2021      	movs	r0, #33	@ 0x21
 800b69e:	f7ff fa0c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xF1);
 800b6a2:	20f1      	movs	r0, #241	@ 0xf1
 800b6a4:	f7ff f9f8 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x01);
 800b6a8:	2001      	movs	r0, #1
 800b6aa:	f7ff fa06 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xDF);
 800b6ae:	20df      	movs	r0, #223	@ 0xdf
 800b6b0:	f7ff f9f2 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x10);
 800b6b4:	2010      	movs	r0, #16
 800b6b6:	f7ff fa00 	bl	800aaba <LCD_WR_DATA>
         //VCOMvoltage//
         LCD_WR_REG(0xC4);
 800b6ba:	20c4      	movs	r0, #196	@ 0xc4
 800b6bc:	f7ff f9ec 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x8F);	//5f
 800b6c0:	208f      	movs	r0, #143	@ 0x8f
 800b6c2:	f7ff f9fa 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xC6);
 800b6c6:	20c6      	movs	r0, #198	@ 0xc6
 800b6c8:	f7ff f9e6 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	f7ff f9f4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xE2);
 800b6d2:	20e2      	movs	r0, #226	@ 0xe2
 800b6d4:	f7ff f9f1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xE2);
 800b6d8:	f7ff f9ef 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xE2);
 800b6dc:	f7ff f9ed 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xBF);
 800b6e0:	20bf      	movs	r0, #191	@ 0xbf
 800b6e2:	f7ff f9d9 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0xAA);
 800b6e6:	20aa      	movs	r0, #170	@ 0xaa
 800b6e8:	f7ff f9e7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xB0);
 800b6ec:	20b0      	movs	r0, #176	@ 0xb0
 800b6ee:	f7ff f9d3 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x0D);
 800b6f2:	200d      	movs	r0, #13
 800b6f4:	f7ff f9e1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	f7ff f9de 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x0D);
 800b6fe:	200d      	movs	r0, #13
 800b700:	f7ff f9db 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b704:	2000      	movs	r0, #0
 800b706:	f7ff f9d8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x11);
 800b70a:	2011      	movs	r0, #17
 800b70c:	f7ff f9d5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b710:	2000      	movs	r0, #0
 800b712:	f7ff f9d2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x19);
 800b716:	2019      	movs	r0, #25
 800b718:	f7ff f9cf 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b71c:	2000      	movs	r0, #0
 800b71e:	f7ff f9cc 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x21);
 800b722:	2021      	movs	r0, #33	@ 0x21
 800b724:	f7ff f9c9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b728:	2000      	movs	r0, #0
 800b72a:	f7ff f9c6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x2D);
 800b72e:	202d      	movs	r0, #45	@ 0x2d
 800b730:	f7ff f9c3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b734:	2000      	movs	r0, #0
 800b736:	f7ff f9c0 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x3D);
 800b73a:	203d      	movs	r0, #61	@ 0x3d
 800b73c:	f7ff f9bd 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b740:	2000      	movs	r0, #0
 800b742:	f7ff f9ba 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x5D);
 800b746:	205d      	movs	r0, #93	@ 0x5d
 800b748:	f7ff f9b7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b74c:	2000      	movs	r0, #0
 800b74e:	f7ff f9b4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x5D);
 800b752:	205d      	movs	r0, #93	@ 0x5d
 800b754:	f7ff f9b1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b758:	2000      	movs	r0, #0
 800b75a:	f7ff f9ae 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xB1);
 800b75e:	20b1      	movs	r0, #177	@ 0xb1
 800b760:	f7ff f99a 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x80);
 800b764:	2080      	movs	r0, #128	@ 0x80
 800b766:	f7ff f9a8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b76a:	2000      	movs	r0, #0
 800b76c:	f7ff f9a5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x8B);
 800b770:	208b      	movs	r0, #139	@ 0x8b
 800b772:	f7ff f9a2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b776:	2000      	movs	r0, #0
 800b778:	f7ff f99f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x96);
 800b77c:	2096      	movs	r0, #150	@ 0x96
 800b77e:	f7ff f99c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b782:	2000      	movs	r0, #0
 800b784:	f7ff f999 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xB2);
 800b788:	20b2      	movs	r0, #178	@ 0xb2
 800b78a:	f7ff f985 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800b78e:	2000      	movs	r0, #0
 800b790:	f7ff f993 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b794:	f7ff f991 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x02);
 800b798:	2002      	movs	r0, #2
 800b79a:	f7ff f98e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b79e:	2000      	movs	r0, #0
 800b7a0:	f7ff f98b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x03);
 800b7a4:	2003      	movs	r0, #3
 800b7a6:	f7ff f988 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	f7ff f985 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xB3);
 800b7b0:	20b3      	movs	r0, #179	@ 0xb3
 800b7b2:	f7ff f971 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	f7ff f97f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7bc:	f7ff f97d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7c0:	f7ff f97b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7c4:	f7ff f979 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7c8:	f7ff f977 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7cc:	f7ff f975 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7d0:	f7ff f973 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7d4:	f7ff f971 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7d8:	f7ff f96f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7dc:	f7ff f96d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7e0:	f7ff f96b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7e4:	f7ff f969 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7e8:	f7ff f967 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7ec:	f7ff f965 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7f0:	f7ff f963 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7f4:	f7ff f961 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7f8:	f7ff f95f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b7fc:	f7ff f95d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b800:	f7ff f95b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b804:	f7ff f959 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b808:	f7ff f957 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b80c:	f7ff f955 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b810:	f7ff f953 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b814:	f7ff f951 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xB4);
 800b818:	20b4      	movs	r0, #180	@ 0xb4
 800b81a:	f7ff f93d 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x8B);
 800b81e:	208b      	movs	r0, #139	@ 0x8b
 800b820:	f7ff f94b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b824:	2000      	movs	r0, #0
 800b826:	f7ff f948 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x96);
 800b82a:	2096      	movs	r0, #150	@ 0x96
 800b82c:	f7ff f945 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b830:	2000      	movs	r0, #0
 800b832:	f7ff f942 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xA1);
 800b836:	20a1      	movs	r0, #161	@ 0xa1
 800b838:	f7ff f93f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b83c:	2000      	movs	r0, #0
 800b83e:	f7ff f93c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xB5);
 800b842:	20b5      	movs	r0, #181	@ 0xb5
 800b844:	f7ff f928 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x02);
 800b848:	2002      	movs	r0, #2
 800b84a:	f7ff f936 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b84e:	2000      	movs	r0, #0
 800b850:	f7ff f933 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x03);
 800b854:	2003      	movs	r0, #3
 800b856:	f7ff f930 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b85a:	2000      	movs	r0, #0
 800b85c:	f7ff f92d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x04);
 800b860:	2004      	movs	r0, #4
 800b862:	f7ff f92a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b866:	2000      	movs	r0, #0
 800b868:	f7ff f927 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xB6);
 800b86c:	20b6      	movs	r0, #182	@ 0xb6
 800b86e:	f7ff f913 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800b872:	2000      	movs	r0, #0
 800b874:	f7ff f921 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b878:	f7ff f91f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xB7);
 800b87c:	20b7      	movs	r0, #183	@ 0xb7
 800b87e:	f7ff f90b 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800b882:	2000      	movs	r0, #0
 800b884:	f7ff f919 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b888:	f7ff f917 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x3F);
 800b88c:	203f      	movs	r0, #63	@ 0x3f
 800b88e:	f7ff f914 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b892:	2000      	movs	r0, #0
 800b894:	f7ff f911 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x5E);
 800b898:	205e      	movs	r0, #94	@ 0x5e
 800b89a:	f7ff f90e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b89e:	2000      	movs	r0, #0
 800b8a0:	f7ff f90b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x64);
 800b8a4:	2064      	movs	r0, #100	@ 0x64
 800b8a6:	f7ff f908 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	f7ff f905 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x8C);
 800b8b0:	208c      	movs	r0, #140	@ 0x8c
 800b8b2:	f7ff f902 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	f7ff f8ff 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xAC);
 800b8bc:	20ac      	movs	r0, #172	@ 0xac
 800b8be:	f7ff f8fc 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	f7ff f8f9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xDC);
 800b8c8:	20dc      	movs	r0, #220	@ 0xdc
 800b8ca:	f7ff f8f6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	f7ff f8f3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x70);
 800b8d4:	2070      	movs	r0, #112	@ 0x70
 800b8d6:	f7ff f8f0 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b8da:	2000      	movs	r0, #0
 800b8dc:	f7ff f8ed 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x90);
 800b8e0:	2090      	movs	r0, #144	@ 0x90
 800b8e2:	f7ff f8ea 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	f7ff f8e7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xEB);
 800b8ec:	20eb      	movs	r0, #235	@ 0xeb
 800b8ee:	f7ff f8e4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	f7ff f8e1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xDC);
 800b8f8:	20dc      	movs	r0, #220	@ 0xdc
 800b8fa:	f7ff f8de 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b8fe:	2000      	movs	r0, #0
 800b900:	f7ff f8db 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xB8);
 800b904:	20b8      	movs	r0, #184	@ 0xb8
 800b906:	f7ff f8c7 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800b90a:	2000      	movs	r0, #0
 800b90c:	f7ff f8d5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b910:	f7ff f8d3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b914:	f7ff f8d1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b918:	f7ff f8cf 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b91c:	f7ff f8cd 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b920:	f7ff f8cb 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b924:	f7ff f8c9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b928:	f7ff f8c7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xBA);
 800b92c:	20ba      	movs	r0, #186	@ 0xba
 800b92e:	f7ff f8b3 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x24);
 800b932:	2024      	movs	r0, #36	@ 0x24
 800b934:	f7ff f8c1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b938:	2000      	movs	r0, #0
 800b93a:	f7ff f8be 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b93e:	f7ff f8bc 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b942:	f7ff f8ba 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xC1);
 800b946:	20c1      	movs	r0, #193	@ 0xc1
 800b948:	f7ff f8a6 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x20);
 800b94c:	2020      	movs	r0, #32
 800b94e:	f7ff f8b4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b952:	2000      	movs	r0, #0
 800b954:	f7ff f8b1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x54);
 800b958:	2054      	movs	r0, #84	@ 0x54
 800b95a:	f7ff f8ae 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b95e:	2000      	movs	r0, #0
 800b960:	f7ff f8ab 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xFF);
 800b964:	20ff      	movs	r0, #255	@ 0xff
 800b966:	f7ff f8a8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b96a:	2000      	movs	r0, #0
 800b96c:	f7ff f8a5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xC2);
 800b970:	20c2      	movs	r0, #194	@ 0xc2
 800b972:	f7ff f891 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x0A);
 800b976:	200a      	movs	r0, #10
 800b978:	f7ff f89f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b97c:	2000      	movs	r0, #0
 800b97e:	f7ff f89c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x04);
 800b982:	2004      	movs	r0, #4
 800b984:	f7ff f899 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b988:	2000      	movs	r0, #0
 800b98a:	f7ff f896 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xC3);
 800b98e:	20c3      	movs	r0, #195	@ 0xc3
 800b990:	f7ff f882 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x3C);
 800b994:	203c      	movs	r0, #60	@ 0x3c
 800b996:	f7ff f890 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b99a:	2000      	movs	r0, #0
 800b99c:	f7ff f88d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x3A);
 800b9a0:	203a      	movs	r0, #58	@ 0x3a
 800b9a2:	f7ff f88a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	f7ff f887 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x39);
 800b9ac:	2039      	movs	r0, #57	@ 0x39
 800b9ae:	f7ff f884 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	f7ff f881 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x37);
 800b9b8:	2037      	movs	r0, #55	@ 0x37
 800b9ba:	f7ff f87e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b9be:	2000      	movs	r0, #0
 800b9c0:	f7ff f87b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x3C);
 800b9c4:	203c      	movs	r0, #60	@ 0x3c
 800b9c6:	f7ff f878 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	f7ff f875 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x36);
 800b9d0:	2036      	movs	r0, #54	@ 0x36
 800b9d2:	f7ff f872 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b9d6:	2000      	movs	r0, #0
 800b9d8:	f7ff f86f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x32);
 800b9dc:	2032      	movs	r0, #50	@ 0x32
 800b9de:	f7ff f86c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	f7ff f869 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x2F);
 800b9e8:	202f      	movs	r0, #47	@ 0x2f
 800b9ea:	f7ff f866 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	f7ff f863 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x2C);
 800b9f4:	202c      	movs	r0, #44	@ 0x2c
 800b9f6:	f7ff f860 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	f7ff f85d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x29);
 800ba00:	2029      	movs	r0, #41	@ 0x29
 800ba02:	f7ff f85a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba06:	2000      	movs	r0, #0
 800ba08:	f7ff f857 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x26);
 800ba0c:	2026      	movs	r0, #38	@ 0x26
 800ba0e:	f7ff f854 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba12:	2000      	movs	r0, #0
 800ba14:	f7ff f851 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x24);
 800ba18:	2024      	movs	r0, #36	@ 0x24
 800ba1a:	f7ff f84e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba1e:	2000      	movs	r0, #0
 800ba20:	f7ff f84b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x24);
 800ba24:	2024      	movs	r0, #36	@ 0x24
 800ba26:	f7ff f848 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	f7ff f845 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x23);
 800ba30:	2023      	movs	r0, #35	@ 0x23
 800ba32:	f7ff f842 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba36:	2000      	movs	r0, #0
 800ba38:	f7ff f83f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x3C);
 800ba3c:	203c      	movs	r0, #60	@ 0x3c
 800ba3e:	f7ff f83c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba42:	2000      	movs	r0, #0
 800ba44:	f7ff f839 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x36);
 800ba48:	2036      	movs	r0, #54	@ 0x36
 800ba4a:	f7ff f836 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba4e:	2000      	movs	r0, #0
 800ba50:	f7ff f833 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x32);
 800ba54:	2032      	movs	r0, #50	@ 0x32
 800ba56:	f7ff f830 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	f7ff f82d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x2F);
 800ba60:	202f      	movs	r0, #47	@ 0x2f
 800ba62:	f7ff f82a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba66:	2000      	movs	r0, #0
 800ba68:	f7ff f827 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x2C);
 800ba6c:	202c      	movs	r0, #44	@ 0x2c
 800ba6e:	f7ff f824 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba72:	2000      	movs	r0, #0
 800ba74:	f7ff f821 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x29);
 800ba78:	2029      	movs	r0, #41	@ 0x29
 800ba7a:	f7ff f81e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba7e:	2000      	movs	r0, #0
 800ba80:	f7ff f81b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x26);
 800ba84:	2026      	movs	r0, #38	@ 0x26
 800ba86:	f7ff f818 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	f7ff f815 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x24);
 800ba90:	2024      	movs	r0, #36	@ 0x24
 800ba92:	f7ff f812 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800ba96:	2000      	movs	r0, #0
 800ba98:	f7ff f80f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x24);
 800ba9c:	2024      	movs	r0, #36	@ 0x24
 800ba9e:	f7ff f80c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800baa2:	2000      	movs	r0, #0
 800baa4:	f7ff f809 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x23);
 800baa8:	2023      	movs	r0, #35	@ 0x23
 800baaa:	f7ff f806 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800baae:	2000      	movs	r0, #0
 800bab0:	f7ff f803 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xC4);
 800bab4:	20c4      	movs	r0, #196	@ 0xc4
 800bab6:	f7fe ffef 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x62);
 800baba:	2062      	movs	r0, #98	@ 0x62
 800babc:	f7fe fffd 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bac0:	2000      	movs	r0, #0
 800bac2:	f7fe fffa 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x05);
 800bac6:	2005      	movs	r0, #5
 800bac8:	f7fe fff7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bacc:	2000      	movs	r0, #0
 800bace:	f7fe fff4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x84);
 800bad2:	2084      	movs	r0, #132	@ 0x84
 800bad4:	f7fe fff1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bad8:	2000      	movs	r0, #0
 800bada:	f7fe ffee 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xF0);
 800bade:	20f0      	movs	r0, #240	@ 0xf0
 800bae0:	f7fe ffeb 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bae4:	2000      	movs	r0, #0
 800bae6:	f7fe ffe8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x18);
 800baea:	2018      	movs	r0, #24
 800baec:	f7fe ffe5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800baf0:	2000      	movs	r0, #0
 800baf2:	f7fe ffe2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xA4);
 800baf6:	20a4      	movs	r0, #164	@ 0xa4
 800baf8:	f7fe ffdf 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bafc:	2000      	movs	r0, #0
 800bafe:	f7fe ffdc 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x18);
 800bb02:	2018      	movs	r0, #24
 800bb04:	f7fe ffd9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb08:	2000      	movs	r0, #0
 800bb0a:	f7fe ffd6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x50);
 800bb0e:	2050      	movs	r0, #80	@ 0x50
 800bb10:	f7fe ffd3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb14:	2000      	movs	r0, #0
 800bb16:	f7fe ffd0 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x0C);
 800bb1a:	200c      	movs	r0, #12
 800bb1c:	f7fe ffcd 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb20:	2000      	movs	r0, #0
 800bb22:	f7fe ffca 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x17);
 800bb26:	2017      	movs	r0, #23
 800bb28:	f7fe ffc7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	f7fe ffc4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x95);
 800bb32:	2095      	movs	r0, #149	@ 0x95
 800bb34:	f7fe ffc1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f7fe ffbe 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xF3);
 800bb3e:	20f3      	movs	r0, #243	@ 0xf3
 800bb40:	f7fe ffbb 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb44:	2000      	movs	r0, #0
 800bb46:	f7fe ffb8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xE6);
 800bb4a:	20e6      	movs	r0, #230	@ 0xe6
 800bb4c:	f7fe ffb5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb50:	2000      	movs	r0, #0
 800bb52:	f7fe ffb2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xC5);
 800bb56:	20c5      	movs	r0, #197	@ 0xc5
 800bb58:	f7fe ff9e 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x32);
 800bb5c:	2032      	movs	r0, #50	@ 0x32
 800bb5e:	f7fe ffac 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb62:	2000      	movs	r0, #0
 800bb64:	f7fe ffa9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x44);
 800bb68:	2044      	movs	r0, #68	@ 0x44
 800bb6a:	f7fe ffa6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb6e:	2000      	movs	r0, #0
 800bb70:	f7fe ffa3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x65);
 800bb74:	2065      	movs	r0, #101	@ 0x65
 800bb76:	f7fe ffa0 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	f7fe ff9d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x76);
 800bb80:	2076      	movs	r0, #118	@ 0x76
 800bb82:	f7fe ff9a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb86:	2000      	movs	r0, #0
 800bb88:	f7fe ff97 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x88);
 800bb8c:	2088      	movs	r0, #136	@ 0x88
 800bb8e:	f7fe ff94 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bb92:	2000      	movs	r0, #0
 800bb94:	f7fe ff91 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xC6);
 800bb98:	20c6      	movs	r0, #198	@ 0xc6
 800bb9a:	f7fe ff7d 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x20);
 800bb9e:	2020      	movs	r0, #32
 800bba0:	f7fe ff8b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bba4:	2000      	movs	r0, #0
 800bba6:	f7fe ff88 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x17);
 800bbaa:	2017      	movs	r0, #23
 800bbac:	f7fe ff85 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	f7fe ff82 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x01);
 800bbb6:	2001      	movs	r0, #1
 800bbb8:	f7fe ff7f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	f7fe ff7c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xC7);
 800bbc2:	20c7      	movs	r0, #199	@ 0xc7
 800bbc4:	f7fe ff68 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800bbc8:	2000      	movs	r0, #0
 800bbca:	f7fe ff76 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bbce:	f7fe ff74 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bbd2:	f7fe ff72 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bbd6:	f7fe ff70 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xC8);
 800bbda:	20c8      	movs	r0, #200	@ 0xc8
 800bbdc:	f7fe ff5c 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	f7fe ff6a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bbe6:	f7fe ff68 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bbea:	f7fe ff66 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bbee:	f7fe ff64 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xC9);
 800bbf2:	20c9      	movs	r0, #201	@ 0xc9
 800bbf4:	f7fe ff50 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	f7fe ff5e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bbfe:	f7fe ff5c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc02:	f7fe ff5a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc06:	f7fe ff58 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc0a:	f7fe ff56 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc0e:	f7fe ff54 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc12:	f7fe ff52 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc16:	f7fe ff50 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc1a:	f7fe ff4e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc1e:	f7fe ff4c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc22:	f7fe ff4a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc26:	f7fe ff48 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc2a:	f7fe ff46 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc2e:	f7fe ff44 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc32:	f7fe ff42 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc36:	f7fe ff40 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xE0);
 800bc3a:	20e0      	movs	r0, #224	@ 0xe0
 800bc3c:	f7fe ff2c 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x16);
 800bc40:	2016      	movs	r0, #22
 800bc42:	f7fe ff3a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc46:	2000      	movs	r0, #0
 800bc48:	f7fe ff37 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x1C);
 800bc4c:	201c      	movs	r0, #28
 800bc4e:	f7fe ff34 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc52:	2000      	movs	r0, #0
 800bc54:	f7fe ff31 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x21);
 800bc58:	2021      	movs	r0, #33	@ 0x21
 800bc5a:	f7fe ff2e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc5e:	2000      	movs	r0, #0
 800bc60:	f7fe ff2b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x36);
 800bc64:	2036      	movs	r0, #54	@ 0x36
 800bc66:	f7fe ff28 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	f7fe ff25 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x46);
 800bc70:	2046      	movs	r0, #70	@ 0x46
 800bc72:	f7fe ff22 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc76:	2000      	movs	r0, #0
 800bc78:	f7fe ff1f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x52);
 800bc7c:	2052      	movs	r0, #82	@ 0x52
 800bc7e:	f7fe ff1c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc82:	2000      	movs	r0, #0
 800bc84:	f7fe ff19 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x64);
 800bc88:	2064      	movs	r0, #100	@ 0x64
 800bc8a:	f7fe ff16 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc8e:	2000      	movs	r0, #0
 800bc90:	f7fe ff13 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x7A);
 800bc94:	207a      	movs	r0, #122	@ 0x7a
 800bc96:	f7fe ff10 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	f7fe ff0d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x8B);
 800bca0:	208b      	movs	r0, #139	@ 0x8b
 800bca2:	f7fe ff0a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bca6:	2000      	movs	r0, #0
 800bca8:	f7fe ff07 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x99);
 800bcac:	2099      	movs	r0, #153	@ 0x99
 800bcae:	f7fe ff04 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	f7fe ff01 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xA8);
 800bcb8:	20a8      	movs	r0, #168	@ 0xa8
 800bcba:	f7fe fefe 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	f7fe fefb 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xB9);
 800bcc4:	20b9      	movs	r0, #185	@ 0xb9
 800bcc6:	f7fe fef8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bcca:	2000      	movs	r0, #0
 800bccc:	f7fe fef5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xC4);
 800bcd0:	20c4      	movs	r0, #196	@ 0xc4
 800bcd2:	f7fe fef2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	f7fe feef 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xCA);
 800bcdc:	20ca      	movs	r0, #202	@ 0xca
 800bcde:	f7fe feec 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bce2:	2000      	movs	r0, #0
 800bce4:	f7fe fee9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xD2);
 800bce8:	20d2      	movs	r0, #210	@ 0xd2
 800bcea:	f7fe fee6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bcee:	2000      	movs	r0, #0
 800bcf0:	f7fe fee3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xD9);
 800bcf4:	20d9      	movs	r0, #217	@ 0xd9
 800bcf6:	f7fe fee0 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	f7fe fedd 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xE0);
 800bd00:	20e0      	movs	r0, #224	@ 0xe0
 800bd02:	f7fe feda 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd06:	2000      	movs	r0, #0
 800bd08:	f7fe fed7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xF3);
 800bd0c:	20f3      	movs	r0, #243	@ 0xf3
 800bd0e:	f7fe fed4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd12:	2000      	movs	r0, #0
 800bd14:	f7fe fed1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xE1);
 800bd18:	20e1      	movs	r0, #225	@ 0xe1
 800bd1a:	f7fe febd 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x16);
 800bd1e:	2016      	movs	r0, #22
 800bd20:	f7fe fecb 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd24:	2000      	movs	r0, #0
 800bd26:	f7fe fec8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x1C);
 800bd2a:	201c      	movs	r0, #28
 800bd2c:	f7fe fec5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd30:	2000      	movs	r0, #0
 800bd32:	f7fe fec2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x22);
 800bd36:	2022      	movs	r0, #34	@ 0x22
 800bd38:	f7fe febf 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	f7fe febc 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x36);
 800bd42:	2036      	movs	r0, #54	@ 0x36
 800bd44:	f7fe feb9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd48:	2000      	movs	r0, #0
 800bd4a:	f7fe feb6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x45);
 800bd4e:	2045      	movs	r0, #69	@ 0x45
 800bd50:	f7fe feb3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd54:	2000      	movs	r0, #0
 800bd56:	f7fe feb0 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x52);
 800bd5a:	2052      	movs	r0, #82	@ 0x52
 800bd5c:	f7fe fead 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd60:	2000      	movs	r0, #0
 800bd62:	f7fe feaa 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x64);
 800bd66:	2064      	movs	r0, #100	@ 0x64
 800bd68:	f7fe fea7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	f7fe fea4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x7A);
 800bd72:	207a      	movs	r0, #122	@ 0x7a
 800bd74:	f7fe fea1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd78:	2000      	movs	r0, #0
 800bd7a:	f7fe fe9e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x8B);
 800bd7e:	208b      	movs	r0, #139	@ 0x8b
 800bd80:	f7fe fe9b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd84:	2000      	movs	r0, #0
 800bd86:	f7fe fe98 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x99);
 800bd8a:	2099      	movs	r0, #153	@ 0x99
 800bd8c:	f7fe fe95 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd90:	2000      	movs	r0, #0
 800bd92:	f7fe fe92 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xA8);
 800bd96:	20a8      	movs	r0, #168	@ 0xa8
 800bd98:	f7fe fe8f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	f7fe fe8c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xB9);
 800bda2:	20b9      	movs	r0, #185	@ 0xb9
 800bda4:	f7fe fe89 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bda8:	2000      	movs	r0, #0
 800bdaa:	f7fe fe86 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xC4);
 800bdae:	20c4      	movs	r0, #196	@ 0xc4
 800bdb0:	f7fe fe83 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	f7fe fe80 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xCA);
 800bdba:	20ca      	movs	r0, #202	@ 0xca
 800bdbc:	f7fe fe7d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	f7fe fe7a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xD2);
 800bdc6:	20d2      	movs	r0, #210	@ 0xd2
 800bdc8:	f7fe fe77 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bdcc:	2000      	movs	r0, #0
 800bdce:	f7fe fe74 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xD8);
 800bdd2:	20d8      	movs	r0, #216	@ 0xd8
 800bdd4:	f7fe fe71 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bdd8:	2000      	movs	r0, #0
 800bdda:	f7fe fe6e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xE0);
 800bdde:	20e0      	movs	r0, #224	@ 0xe0
 800bde0:	f7fe fe6b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bde4:	2000      	movs	r0, #0
 800bde6:	f7fe fe68 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xF3);
 800bdea:	20f3      	movs	r0, #243	@ 0xf3
 800bdec:	f7fe fe65 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	f7fe fe62 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xE2);
 800bdf6:	20e2      	movs	r0, #226	@ 0xe2
 800bdf8:	f7fe fe4e 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x05);
 800bdfc:	2005      	movs	r0, #5
 800bdfe:	f7fe fe5c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be02:	2000      	movs	r0, #0
 800be04:	f7fe fe59 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x0B);
 800be08:	200b      	movs	r0, #11
 800be0a:	f7fe fe56 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be0e:	2000      	movs	r0, #0
 800be10:	f7fe fe53 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x1B);
 800be14:	201b      	movs	r0, #27
 800be16:	f7fe fe50 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be1a:	2000      	movs	r0, #0
 800be1c:	f7fe fe4d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x34);
 800be20:	2034      	movs	r0, #52	@ 0x34
 800be22:	f7fe fe4a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be26:	2000      	movs	r0, #0
 800be28:	f7fe fe47 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x44);
 800be2c:	2044      	movs	r0, #68	@ 0x44
 800be2e:	f7fe fe44 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be32:	2000      	movs	r0, #0
 800be34:	f7fe fe41 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x4F);
 800be38:	204f      	movs	r0, #79	@ 0x4f
 800be3a:	f7fe fe3e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be3e:	2000      	movs	r0, #0
 800be40:	f7fe fe3b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x61);
 800be44:	2061      	movs	r0, #97	@ 0x61
 800be46:	f7fe fe38 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be4a:	2000      	movs	r0, #0
 800be4c:	f7fe fe35 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x79);
 800be50:	2079      	movs	r0, #121	@ 0x79
 800be52:	f7fe fe32 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be56:	2000      	movs	r0, #0
 800be58:	f7fe fe2f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x88);
 800be5c:	2088      	movs	r0, #136	@ 0x88
 800be5e:	f7fe fe2c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be62:	2000      	movs	r0, #0
 800be64:	f7fe fe29 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x97);
 800be68:	2097      	movs	r0, #151	@ 0x97
 800be6a:	f7fe fe26 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be6e:	2000      	movs	r0, #0
 800be70:	f7fe fe23 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xA6);
 800be74:	20a6      	movs	r0, #166	@ 0xa6
 800be76:	f7fe fe20 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be7a:	2000      	movs	r0, #0
 800be7c:	f7fe fe1d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xB7);
 800be80:	20b7      	movs	r0, #183	@ 0xb7
 800be82:	f7fe fe1a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be86:	2000      	movs	r0, #0
 800be88:	f7fe fe17 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xC2);
 800be8c:	20c2      	movs	r0, #194	@ 0xc2
 800be8e:	f7fe fe14 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be92:	2000      	movs	r0, #0
 800be94:	f7fe fe11 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xC7);
 800be98:	20c7      	movs	r0, #199	@ 0xc7
 800be9a:	f7fe fe0e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800be9e:	2000      	movs	r0, #0
 800bea0:	f7fe fe0b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xD1);
 800bea4:	20d1      	movs	r0, #209	@ 0xd1
 800bea6:	f7fe fe08 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800beaa:	2000      	movs	r0, #0
 800beac:	f7fe fe05 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xD6);
 800beb0:	20d6      	movs	r0, #214	@ 0xd6
 800beb2:	f7fe fe02 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800beb6:	2000      	movs	r0, #0
 800beb8:	f7fe fdff 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xDD);
 800bebc:	20dd      	movs	r0, #221	@ 0xdd
 800bebe:	f7fe fdfc 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bec2:	2000      	movs	r0, #0
 800bec4:	f7fe fdf9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xF3);
 800bec8:	20f3      	movs	r0, #243	@ 0xf3
 800beca:	f7fe fdf6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bece:	2000      	movs	r0, #0
 800bed0:	f7fe fdf3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xE3);
 800bed4:	20e3      	movs	r0, #227	@ 0xe3
 800bed6:	f7fe fddf 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x05);
 800beda:	2005      	movs	r0, #5
 800bedc:	f7fe fded 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bee0:	2000      	movs	r0, #0
 800bee2:	f7fe fdea 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xA);
 800bee6:	200a      	movs	r0, #10
 800bee8:	f7fe fde7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800beec:	2000      	movs	r0, #0
 800beee:	f7fe fde4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x1C);
 800bef2:	201c      	movs	r0, #28
 800bef4:	f7fe fde1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bef8:	2000      	movs	r0, #0
 800befa:	f7fe fdde 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x33);
 800befe:	2033      	movs	r0, #51	@ 0x33
 800bf00:	f7fe fddb 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf04:	2000      	movs	r0, #0
 800bf06:	f7fe fdd8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x44);
 800bf0a:	2044      	movs	r0, #68	@ 0x44
 800bf0c:	f7fe fdd5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf10:	2000      	movs	r0, #0
 800bf12:	f7fe fdd2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x50);
 800bf16:	2050      	movs	r0, #80	@ 0x50
 800bf18:	f7fe fdcf 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	f7fe fdcc 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x62);
 800bf22:	2062      	movs	r0, #98	@ 0x62
 800bf24:	f7fe fdc9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf28:	2000      	movs	r0, #0
 800bf2a:	f7fe fdc6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x78);
 800bf2e:	2078      	movs	r0, #120	@ 0x78
 800bf30:	f7fe fdc3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf34:	2000      	movs	r0, #0
 800bf36:	f7fe fdc0 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x88);
 800bf3a:	2088      	movs	r0, #136	@ 0x88
 800bf3c:	f7fe fdbd 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf40:	2000      	movs	r0, #0
 800bf42:	f7fe fdba 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x97);
 800bf46:	2097      	movs	r0, #151	@ 0x97
 800bf48:	f7fe fdb7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	f7fe fdb4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xA6);
 800bf52:	20a6      	movs	r0, #166	@ 0xa6
 800bf54:	f7fe fdb1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf58:	2000      	movs	r0, #0
 800bf5a:	f7fe fdae 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xB7);
 800bf5e:	20b7      	movs	r0, #183	@ 0xb7
 800bf60:	f7fe fdab 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf64:	2000      	movs	r0, #0
 800bf66:	f7fe fda8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xC2);
 800bf6a:	20c2      	movs	r0, #194	@ 0xc2
 800bf6c:	f7fe fda5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf70:	2000      	movs	r0, #0
 800bf72:	f7fe fda2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xC7);
 800bf76:	20c7      	movs	r0, #199	@ 0xc7
 800bf78:	f7fe fd9f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	f7fe fd9c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xD1);
 800bf82:	20d1      	movs	r0, #209	@ 0xd1
 800bf84:	f7fe fd99 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf88:	2000      	movs	r0, #0
 800bf8a:	f7fe fd96 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xD5);
 800bf8e:	20d5      	movs	r0, #213	@ 0xd5
 800bf90:	f7fe fd93 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bf94:	2000      	movs	r0, #0
 800bf96:	f7fe fd90 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xDD);
 800bf9a:	20dd      	movs	r0, #221	@ 0xdd
 800bf9c:	f7fe fd8d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	f7fe fd8a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xF3);
 800bfa6:	20f3      	movs	r0, #243	@ 0xf3
 800bfa8:	f7fe fd87 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bfac:	2000      	movs	r0, #0
 800bfae:	f7fe fd84 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xE4);
 800bfb2:	20e4      	movs	r0, #228	@ 0xe4
 800bfb4:	f7fe fd70 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x01);
 800bfb8:	2001      	movs	r0, #1
 800bfba:	f7fe fd7e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	f7fe fd7b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x01);
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	f7fe fd78 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bfca:	2000      	movs	r0, #0
 800bfcc:	f7fe fd75 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x02);
 800bfd0:	2002      	movs	r0, #2
 800bfd2:	f7fe fd72 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	f7fe fd6f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x2A);
 800bfdc:	202a      	movs	r0, #42	@ 0x2a
 800bfde:	f7fe fd6c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	f7fe fd69 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x3C);
 800bfe8:	203c      	movs	r0, #60	@ 0x3c
 800bfea:	f7fe fd66 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bfee:	2000      	movs	r0, #0
 800bff0:	f7fe fd63 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x4B);
 800bff4:	204b      	movs	r0, #75	@ 0x4b
 800bff6:	f7fe fd60 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800bffa:	2000      	movs	r0, #0
 800bffc:	f7fe fd5d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x5D);
 800c000:	205d      	movs	r0, #93	@ 0x5d
 800c002:	f7fe fd5a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c006:	2000      	movs	r0, #0
 800c008:	f7fe fd57 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x74);
 800c00c:	2074      	movs	r0, #116	@ 0x74
 800c00e:	f7fe fd54 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c012:	2000      	movs	r0, #0
 800c014:	f7fe fd51 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x84);
 800c018:	2084      	movs	r0, #132	@ 0x84
 800c01a:	f7fe fd4e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c01e:	2000      	movs	r0, #0
 800c020:	f7fe fd4b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x93);
 800c024:	2093      	movs	r0, #147	@ 0x93
 800c026:	f7fe fd48 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c02a:	2000      	movs	r0, #0
 800c02c:	f7fe fd45 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xA2);
 800c030:	20a2      	movs	r0, #162	@ 0xa2
 800c032:	f7fe fd42 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c036:	2000      	movs	r0, #0
 800c038:	f7fe fd3f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xB3);
 800c03c:	20b3      	movs	r0, #179	@ 0xb3
 800c03e:	f7fe fd3c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c042:	2000      	movs	r0, #0
 800c044:	f7fe fd39 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xBE);
 800c048:	20be      	movs	r0, #190	@ 0xbe
 800c04a:	f7fe fd36 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c04e:	2000      	movs	r0, #0
 800c050:	f7fe fd33 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xC4);
 800c054:	20c4      	movs	r0, #196	@ 0xc4
 800c056:	f7fe fd30 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c05a:	2000      	movs	r0, #0
 800c05c:	f7fe fd2d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xCD);
 800c060:	20cd      	movs	r0, #205	@ 0xcd
 800c062:	f7fe fd2a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c066:	2000      	movs	r0, #0
 800c068:	f7fe fd27 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xD3);
 800c06c:	20d3      	movs	r0, #211	@ 0xd3
 800c06e:	f7fe fd24 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c072:	2000      	movs	r0, #0
 800c074:	f7fe fd21 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xDD);
 800c078:	20dd      	movs	r0, #221	@ 0xdd
 800c07a:	f7fe fd1e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c07e:	2000      	movs	r0, #0
 800c080:	f7fe fd1b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xF3);
 800c084:	20f3      	movs	r0, #243	@ 0xf3
 800c086:	f7fe fd18 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c08a:	2000      	movs	r0, #0
 800c08c:	f7fe fd15 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xE5);
 800c090:	20e5      	movs	r0, #229	@ 0xe5
 800c092:	f7fe fd01 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800c096:	2000      	movs	r0, #0
 800c098:	f7fe fd0f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c09c:	f7fe fd0d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c0a0:	f7fe fd0b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c0a4:	f7fe fd09 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x02);
 800c0a8:	2002      	movs	r0, #2
 800c0aa:	f7fe fd06 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	f7fe fd03 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x29);
 800c0b4:	2029      	movs	r0, #41	@ 0x29
 800c0b6:	f7fe fd00 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	f7fe fcfd 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x3C);
 800c0c0:	203c      	movs	r0, #60	@ 0x3c
 800c0c2:	f7fe fcfa 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	f7fe fcf7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x4B);
 800c0cc:	204b      	movs	r0, #75	@ 0x4b
 800c0ce:	f7fe fcf4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	f7fe fcf1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x5D);
 800c0d8:	205d      	movs	r0, #93	@ 0x5d
 800c0da:	f7fe fcee 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f7fe fceb 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x74);
 800c0e4:	2074      	movs	r0, #116	@ 0x74
 800c0e6:	f7fe fce8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	f7fe fce5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x84);
 800c0f0:	2084      	movs	r0, #132	@ 0x84
 800c0f2:	f7fe fce2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	f7fe fcdf 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x93);
 800c0fc:	2093      	movs	r0, #147	@ 0x93
 800c0fe:	f7fe fcdc 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c102:	2000      	movs	r0, #0
 800c104:	f7fe fcd9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xA2);
 800c108:	20a2      	movs	r0, #162	@ 0xa2
 800c10a:	f7fe fcd6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c10e:	2000      	movs	r0, #0
 800c110:	f7fe fcd3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xB3);
 800c114:	20b3      	movs	r0, #179	@ 0xb3
 800c116:	f7fe fcd0 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c11a:	2000      	movs	r0, #0
 800c11c:	f7fe fccd 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xBE);
 800c120:	20be      	movs	r0, #190	@ 0xbe
 800c122:	f7fe fcca 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c126:	2000      	movs	r0, #0
 800c128:	f7fe fcc7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xC4);
 800c12c:	20c4      	movs	r0, #196	@ 0xc4
 800c12e:	f7fe fcc4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c132:	2000      	movs	r0, #0
 800c134:	f7fe fcc1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xCD);
 800c138:	20cd      	movs	r0, #205	@ 0xcd
 800c13a:	f7fe fcbe 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c13e:	2000      	movs	r0, #0
 800c140:	f7fe fcbb 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xD3);
 800c144:	20d3      	movs	r0, #211	@ 0xd3
 800c146:	f7fe fcb8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c14a:	2000      	movs	r0, #0
 800c14c:	f7fe fcb5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xDC);
 800c150:	20dc      	movs	r0, #220	@ 0xdc
 800c152:	f7fe fcb2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c156:	2000      	movs	r0, #0
 800c158:	f7fe fcaf 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xF3);
 800c15c:	20f3      	movs	r0, #243	@ 0xf3
 800c15e:	f7fe fcac 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c162:	2000      	movs	r0, #0
 800c164:	f7fe fca9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xE6);
 800c168:	20e6      	movs	r0, #230	@ 0xe6
 800c16a:	f7fe fc95 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x11);
 800c16e:	2011      	movs	r0, #17
 800c170:	f7fe fca3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c174:	2000      	movs	r0, #0
 800c176:	f7fe fca0 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x34);
 800c17a:	2034      	movs	r0, #52	@ 0x34
 800c17c:	f7fe fc9d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c180:	2000      	movs	r0, #0
 800c182:	f7fe fc9a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x56);
 800c186:	2056      	movs	r0, #86	@ 0x56
 800c188:	f7fe fc97 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c18c:	2000      	movs	r0, #0
 800c18e:	f7fe fc94 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x76);
 800c192:	2076      	movs	r0, #118	@ 0x76
 800c194:	f7fe fc91 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c198:	2000      	movs	r0, #0
 800c19a:	f7fe fc8e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x77);
 800c19e:	2077      	movs	r0, #119	@ 0x77
 800c1a0:	f7fe fc8b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	f7fe fc88 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x66);
 800c1aa:	2066      	movs	r0, #102	@ 0x66
 800c1ac:	f7fe fc85 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	f7fe fc82 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x88);
 800c1b6:	2088      	movs	r0, #136	@ 0x88
 800c1b8:	f7fe fc7f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c1bc:	2000      	movs	r0, #0
 800c1be:	f7fe fc7c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x99);
 800c1c2:	2099      	movs	r0, #153	@ 0x99
 800c1c4:	f7fe fc79 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	f7fe fc76 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xBB);
 800c1ce:	20bb      	movs	r0, #187	@ 0xbb
 800c1d0:	f7fe fc73 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	f7fe fc70 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x99);
 800c1da:	2099      	movs	r0, #153	@ 0x99
 800c1dc:	f7fe fc6d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	f7fe fc6a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x66);
 800c1e6:	2066      	movs	r0, #102	@ 0x66
 800c1e8:	f7fe fc67 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	f7fe fc64 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x55);
 800c1f2:	2055      	movs	r0, #85	@ 0x55
 800c1f4:	f7fe fc61 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	f7fe fc5e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x55);
 800c1fe:	2055      	movs	r0, #85	@ 0x55
 800c200:	f7fe fc5b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c204:	2000      	movs	r0, #0
 800c206:	f7fe fc58 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x45);
 800c20a:	2045      	movs	r0, #69	@ 0x45
 800c20c:	f7fe fc55 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c210:	2000      	movs	r0, #0
 800c212:	f7fe fc52 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x43);
 800c216:	2043      	movs	r0, #67	@ 0x43
 800c218:	f7fe fc4f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c21c:	2000      	movs	r0, #0
 800c21e:	f7fe fc4c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x44);
 800c222:	2044      	movs	r0, #68	@ 0x44
 800c224:	f7fe fc49 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c228:	2000      	movs	r0, #0
 800c22a:	f7fe fc46 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xE7);
 800c22e:	20e7      	movs	r0, #231	@ 0xe7
 800c230:	f7fe fc32 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x32);
 800c234:	2032      	movs	r0, #50	@ 0x32
 800c236:	f7fe fc40 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c23a:	2000      	movs	r0, #0
 800c23c:	f7fe fc3d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x55);
 800c240:	2055      	movs	r0, #85	@ 0x55
 800c242:	f7fe fc3a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c246:	2000      	movs	r0, #0
 800c248:	f7fe fc37 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x76);
 800c24c:	2076      	movs	r0, #118	@ 0x76
 800c24e:	f7fe fc34 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c252:	2000      	movs	r0, #0
 800c254:	f7fe fc31 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x66);
 800c258:	2066      	movs	r0, #102	@ 0x66
 800c25a:	f7fe fc2e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c25e:	2000      	movs	r0, #0
 800c260:	f7fe fc2b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x67);
 800c264:	2067      	movs	r0, #103	@ 0x67
 800c266:	f7fe fc28 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c26a:	2000      	movs	r0, #0
 800c26c:	f7fe fc25 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x67);
 800c270:	2067      	movs	r0, #103	@ 0x67
 800c272:	f7fe fc22 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c276:	2000      	movs	r0, #0
 800c278:	f7fe fc1f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x87);
 800c27c:	2087      	movs	r0, #135	@ 0x87
 800c27e:	f7fe fc1c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c282:	2000      	movs	r0, #0
 800c284:	f7fe fc19 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x99);
 800c288:	2099      	movs	r0, #153	@ 0x99
 800c28a:	f7fe fc16 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c28e:	2000      	movs	r0, #0
 800c290:	f7fe fc13 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xBB);
 800c294:	20bb      	movs	r0, #187	@ 0xbb
 800c296:	f7fe fc10 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c29a:	2000      	movs	r0, #0
 800c29c:	f7fe fc0d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x99);
 800c2a0:	2099      	movs	r0, #153	@ 0x99
 800c2a2:	f7fe fc0a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	f7fe fc07 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x77);
 800c2ac:	2077      	movs	r0, #119	@ 0x77
 800c2ae:	f7fe fc04 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	f7fe fc01 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x44);
 800c2b8:	2044      	movs	r0, #68	@ 0x44
 800c2ba:	f7fe fbfe 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c2be:	2000      	movs	r0, #0
 800c2c0:	f7fe fbfb 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x56);
 800c2c4:	2056      	movs	r0, #86	@ 0x56
 800c2c6:	f7fe fbf8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f7fe fbf5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x23);
 800c2d0:	2023      	movs	r0, #35	@ 0x23
 800c2d2:	f7fe fbf2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	f7fe fbef 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x33);
 800c2dc:	2033      	movs	r0, #51	@ 0x33
 800c2de:	f7fe fbec 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	f7fe fbe9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x45);
 800c2e8:	2045      	movs	r0, #69	@ 0x45
 800c2ea:	f7fe fbe6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	f7fe fbe3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xE8);
 800c2f4:	20e8      	movs	r0, #232	@ 0xe8
 800c2f6:	f7fe fbcf 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	f7fe fbdd 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c300:	f7fe fbdb 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x99);
 800c304:	2099      	movs	r0, #153	@ 0x99
 800c306:	f7fe fbd8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c30a:	2000      	movs	r0, #0
 800c30c:	f7fe fbd5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x87);
 800c310:	2087      	movs	r0, #135	@ 0x87
 800c312:	f7fe fbd2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c316:	2000      	movs	r0, #0
 800c318:	f7fe fbcf 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x88);
 800c31c:	2088      	movs	r0, #136	@ 0x88
 800c31e:	f7fe fbcc 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c322:	2000      	movs	r0, #0
 800c324:	f7fe fbc9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x77);
 800c328:	2077      	movs	r0, #119	@ 0x77
 800c32a:	f7fe fbc6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c32e:	2000      	movs	r0, #0
 800c330:	f7fe fbc3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x66);
 800c334:	2066      	movs	r0, #102	@ 0x66
 800c336:	f7fe fbc0 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c33a:	2000      	movs	r0, #0
 800c33c:	f7fe fbbd 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x88);
 800c340:	2088      	movs	r0, #136	@ 0x88
 800c342:	f7fe fbba 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c346:	2000      	movs	r0, #0
 800c348:	f7fe fbb7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xAA);
 800c34c:	20aa      	movs	r0, #170	@ 0xaa
 800c34e:	f7fe fbb4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c352:	2000      	movs	r0, #0
 800c354:	f7fe fbb1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0xBB);
 800c358:	20bb      	movs	r0, #187	@ 0xbb
 800c35a:	f7fe fbae 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c35e:	2000      	movs	r0, #0
 800c360:	f7fe fbab 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x99);
 800c364:	2099      	movs	r0, #153	@ 0x99
 800c366:	f7fe fba8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c36a:	2000      	movs	r0, #0
 800c36c:	f7fe fba5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x66);
 800c370:	2066      	movs	r0, #102	@ 0x66
 800c372:	f7fe fba2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c376:	2000      	movs	r0, #0
 800c378:	f7fe fb9f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x55);
 800c37c:	2055      	movs	r0, #85	@ 0x55
 800c37e:	f7fe fb9c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c382:	2000      	movs	r0, #0
 800c384:	f7fe fb99 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x55);
 800c388:	2055      	movs	r0, #85	@ 0x55
 800c38a:	f7fe fb96 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c38e:	2000      	movs	r0, #0
 800c390:	f7fe fb93 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x44);
 800c394:	2044      	movs	r0, #68	@ 0x44
 800c396:	f7fe fb90 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c39a:	2000      	movs	r0, #0
 800c39c:	f7fe fb8d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x44);
 800c3a0:	2044      	movs	r0, #68	@ 0x44
 800c3a2:	f7fe fb8a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	f7fe fb87 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x55);
 800c3ac:	2055      	movs	r0, #85	@ 0x55
 800c3ae:	f7fe fb84 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	f7fe fb81 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xE9);
 800c3b8:	20e9      	movs	r0, #233	@ 0xe9
 800c3ba:	f7fe fb6d 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0xAA);
 800c3be:	20aa      	movs	r0, #170	@ 0xaa
 800c3c0:	f7fe fb7b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	f7fe fb78 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c3ca:	f7fe fb76 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c3ce:	f7fe fb74 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0x00);
 800c3d2:	f7fe fb61 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0xAA);
 800c3d6:	20aa      	movs	r0, #170	@ 0xaa
 800c3d8:	f7fe fb6f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xCF);
 800c3dc:	20cf      	movs	r0, #207	@ 0xcf
 800c3de:	f7fe fb5b 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	f7fe fb69 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c3e8:	f7fe fb67 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c3ec:	f7fe fb65 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c3f0:	f7fe fb63 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c3f4:	f7fe fb61 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c3f8:	f7fe fb5f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c3fc:	f7fe fb5d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c400:	f7fe fb5b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c404:	f7fe fb59 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c408:	f7fe fb57 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c40c:	f7fe fb55 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c410:	f7fe fb53 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c414:	f7fe fb51 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c418:	f7fe fb4f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c41c:	f7fe fb4d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c420:	f7fe fb4b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c424:	f7fe fb49 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xF0);
 800c428:	20f0      	movs	r0, #240	@ 0xf0
 800c42a:	f7fe fb35 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800c42e:	2000      	movs	r0, #0
 800c430:	f7fe fb43 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x50);
 800c434:	2050      	movs	r0, #80	@ 0x50
 800c436:	f7fe fb40 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c43a:	2000      	movs	r0, #0
 800c43c:	f7fe fb3d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c440:	f7fe fb3b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c444:	f7fe fb39 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xF3);
 800c448:	20f3      	movs	r0, #243	@ 0xf3
 800c44a:	f7fe fb25 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800c44e:	2000      	movs	r0, #0
 800c450:	f7fe fb33 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0xF9);
 800c454:	20f9      	movs	r0, #249	@ 0xf9
 800c456:	f7fe fb1f 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x06);
 800c45a:	2006      	movs	r0, #6
 800c45c:	f7fe fb2d 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x10);
 800c460:	2010      	movs	r0, #16
 800c462:	f7fe fb2a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x29);
 800c466:	2029      	movs	r0, #41	@ 0x29
 800c468:	f7fe fb27 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c46c:	2000      	movs	r0, #0
 800c46e:	f7fe fb24 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0x3A);
 800c472:	203a      	movs	r0, #58	@ 0x3a
 800c474:	f7fe fb10 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x55);	//66
 800c478:	2055      	movs	r0, #85	@ 0x55
 800c47a:	f7fe fb1e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0x11);
 800c47e:	2011      	movs	r0, #17
 800c480:	f7fe fb0a 	bl	800aa98 <LCD_WR_REG>
         wait_ms(100);
 800c484:	2064      	movs	r0, #100	@ 0x64
 800c486:	f7fb fea7 	bl	80081d8 <wait_ms>
         LCD_WR_REG(0x29);
 800c48a:	2029      	movs	r0, #41	@ 0x29
 800c48c:	f7fe fb04 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_REG(0x35);
 800c490:	2035      	movs	r0, #53	@ 0x35
 800c492:	f7fe fb01 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800c496:	2000      	movs	r0, #0
 800c498:	f7fe fb0f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0x51);
 800c49c:	2051      	movs	r0, #81	@ 0x51
 800c49e:	f7fe fafb 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0xFF);
 800c4a2:	20ff      	movs	r0, #255	@ 0xff
 800c4a4:	f7fe fb09 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0x53);
 800c4a8:	2053      	movs	r0, #83	@ 0x53
 800c4aa:	f7fe faf5 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x2C);
 800c4ae:	202c      	movs	r0, #44	@ 0x2c
 800c4b0:	f7fe fb03 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0x55);
 800c4b4:	2055      	movs	r0, #85	@ 0x55
 800c4b6:	f7fe faef 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x82);
 800c4ba:	2082      	movs	r0, #130	@ 0x82
 800c4bc:	f7fe fafd 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_REG(0x2c);
 800c4c0:	202c      	movs	r0, #44	@ 0x2c
 800c4c2:	f7fe fae9 	bl	800aa98 <LCD_WR_REG>
      }
      if (lcddev.id == 0x9481) {
 800c4c6:	88a2      	ldrh	r2, [r4, #4]
 800c4c8:	f249 4381 	movw	r3, #38017	@ 0x9481
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	f040 8093 	bne.w	800c5f8 <LCD_Init+0x130c>
         LCD_WR_REG(0x0021);		//InvertOff 0x0020, InvertOn 0x0021
         LCD_WR_REG(0x0013);
         */


         LCD_WR_REG(0x01); // SW reset
 800c4d2:	2001      	movs	r0, #1
 800c4d4:	f7fe fae0 	bl	800aa98 <LCD_WR_REG>
         wait_ms(120);
 800c4d8:	2078      	movs	r0, #120	@ 0x78
 800c4da:	f7fb fe7d 	bl	80081d8 <wait_ms>

         LCD_WR_REG(0x11); // Sleep out, also SW reset
 800c4de:	2011      	movs	r0, #17
 800c4e0:	f7fe fada 	bl	800aa98 <LCD_WR_REG>
         wait_ms(120);
 800c4e4:	2078      	movs	r0, #120	@ 0x78
 800c4e6:	f7fb fe77 	bl	80081d8 <wait_ms>

         LCD_WR_REG(0x3A);
 800c4ea:	203a      	movs	r0, #58	@ 0x3a
 800c4ec:	f7fe fad4 	bl	800aa98 <LCD_WR_REG>

         LCD_WR_DATA(0x55);           // 16 bit colour interface LCD_WR_DATA(0x66); <- 18 bit colour interface
 800c4f0:	2055      	movs	r0, #85	@ 0x55
 800c4f2:	f7fe fae2 	bl	800aaba <LCD_WR_DATA>

         LCD_WR_REG(0xC2);
 800c4f6:	20c2      	movs	r0, #194	@ 0xc2
 800c4f8:	f7fe face 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x44);
 800c4fc:	2044      	movs	r0, #68	@ 0x44
 800c4fe:	f7fe fadc 	bl	800aaba <LCD_WR_DATA>

         LCD_WR_REG(0xC5);
 800c502:	20c5      	movs	r0, #197	@ 0xc5
 800c504:	f7fe fac8 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x00);
 800c508:	2000      	movs	r0, #0
 800c50a:	f7fe fad6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c50e:	f7fe fad4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c512:	f7fe fad2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c516:	f7fe fad0 	bl	800aaba <LCD_WR_DATA>

         LCD_WR_REG(0xE0);
 800c51a:	20e0      	movs	r0, #224	@ 0xe0
 800c51c:	f7fe fabc 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x0F);
 800c520:	200f      	movs	r0, #15
 800c522:	f7fe faca 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x1F);
 800c526:	201f      	movs	r0, #31
 800c528:	f7fe fac7 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x1C);
 800c52c:	201c      	movs	r0, #28
 800c52e:	f7fe fac4 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x0C);
 800c532:	200c      	movs	r0, #12
 800c534:	f7fe fac1 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x0F);
 800c538:	200f      	movs	r0, #15
 800c53a:	f7fe fabe 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x08);
 800c53e:	2008      	movs	r0, #8
 800c540:	f7fe fabb 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x48);
 800c544:	2048      	movs	r0, #72	@ 0x48
 800c546:	f7fe fab8 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x98);
 800c54a:	2098      	movs	r0, #152	@ 0x98
 800c54c:	f7fe fab5 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x37);
 800c550:	2037      	movs	r0, #55	@ 0x37
 800c552:	f7fe fab2 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x0A);
 800c556:	200a      	movs	r0, #10
 800c558:	f7fe faaf 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x13);
 800c55c:	2013      	movs	r0, #19
 800c55e:	f7fe faac 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x04);
 800c562:	2004      	movs	r0, #4
 800c564:	f7fe faa9 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x11);
 800c568:	2011      	movs	r0, #17
 800c56a:	f7fe faa6 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x0D);
 800c56e:	200d      	movs	r0, #13
 800c570:	f7fe faa3 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c574:	2000      	movs	r0, #0
 800c576:	f7fe faa0 	bl	800aaba <LCD_WR_DATA>

         LCD_WR_REG(0xE1);
 800c57a:	20e1      	movs	r0, #225	@ 0xe1
 800c57c:	f7fe fa8c 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x0F);
 800c580:	200f      	movs	r0, #15
 800c582:	f7fe fa9a 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x32);
 800c586:	2032      	movs	r0, #50	@ 0x32
 800c588:	f7fe fa97 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x2E);
 800c58c:	202e      	movs	r0, #46	@ 0x2e
 800c58e:	f7fe fa94 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x0B);
 800c592:	200b      	movs	r0, #11
 800c594:	f7fe fa91 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x0D);
 800c598:	200d      	movs	r0, #13
 800c59a:	f7fe fa8e 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x05);
 800c59e:	2005      	movs	r0, #5
 800c5a0:	f7fe fa8b 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x47);
 800c5a4:	2047      	movs	r0, #71	@ 0x47
 800c5a6:	f7fe fa88 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x75);
 800c5aa:	2075      	movs	r0, #117	@ 0x75
 800c5ac:	f7fe fa85 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x37);
 800c5b0:	2037      	movs	r0, #55	@ 0x37
 800c5b2:	f7fe fa82 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x06);
 800c5b6:	2006      	movs	r0, #6
 800c5b8:	f7fe fa7f 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x10);
 800c5bc:	2010      	movs	r0, #16
 800c5be:	f7fe fa7c 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x03);
 800c5c2:	2003      	movs	r0, #3
 800c5c4:	f7fe fa79 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x24);
 800c5c8:	2024      	movs	r0, #36	@ 0x24
 800c5ca:	f7fe fa76 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x20);
 800c5ce:	2020      	movs	r0, #32
 800c5d0:	f7fe fa73 	bl	800aaba <LCD_WR_DATA>
         LCD_WR_DATA(0x00);
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	f7fe fa70 	bl	800aaba <LCD_WR_DATA>

         LCD_WR_REG(0x20);	//LCD_WR_REG(TFT_INVON);
 800c5da:	2020      	movs	r0, #32
 800c5dc:	f7fe fa5c 	bl	800aa98 <LCD_WR_REG>

         LCD_WR_REG(0x36);
 800c5e0:	2036      	movs	r0, #54	@ 0x36
 800c5e2:	f7fe fa59 	bl	800aa98 <LCD_WR_REG>
         LCD_WR_DATA(0x48);
 800c5e6:	2048      	movs	r0, #72	@ 0x48
 800c5e8:	f7fe fa67 	bl	800aaba <LCD_WR_DATA>

         LCD_WR_REG(0x29);                     // display on
 800c5ec:	2029      	movs	r0, #41	@ 0x29
 800c5ee:	f7fe fa53 	bl	800aa98 <LCD_WR_REG>
         wait_ms(150);         
 800c5f2:	2096      	movs	r0, #150	@ 0x96
 800c5f4:	f7fb fdf0 	bl	80081d8 <wait_ms>

      }
      LCD_Display_Dir(0);
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	f7fe fb35 	bl	800ac68 <LCD_Display_Dir>
      if (lcddev.id == 0x9481) ili_9481_rotation(0);      
 800c5fe:	88a2      	ldrh	r2, [r4, #4]
 800c600:	f249 4381 	movw	r3, #38017	@ 0x9481
 800c604:	429a      	cmp	r2, r3
 800c606:	d102      	bne.n	800c60e <LCD_Init+0x1322>
 800c608:	2000      	movs	r0, #0
 800c60a:	f7fe fe57 	bl	800b2bc <ili_9481_rotation>
      LCD_LED = 1;
 800c60e:	4b35      	ldr	r3, [pc, #212]	@ (800c6e4 <LCD_Init+0x13f8>)
      if (lcddev.dir == 0) {
         maxx = 320;
 800c610:	4935      	ldr	r1, [pc, #212]	@ (800c6e8 <LCD_Init+0x13fc>)
      LCD_LED = 1;
 800c612:	2201      	movs	r2, #1
 800c614:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
      if (lcddev.dir == 0) {
 800c618:	79a3      	ldrb	r3, [r4, #6]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	bf0c      	ite	eq
 800c61e:	f44f 72a0 	moveq.w	r2, #320	@ 0x140
 800c622:	f44f 72f0 	movne.w	r2, #480	@ 0x1e0
         maxx = 320;
 800c626:	800a      	strh	r2, [r1, #0]
         maxy = 480;
 800c628:	4930      	ldr	r1, [pc, #192]	@ (800c6ec <LCD_Init+0x1400>)
      if (lcddev.dir == 0) {
 800c62a:	bf0c      	ite	eq
 800c62c:	f44f 73f0 	moveq.w	r3, #480	@ 0x1e0
 800c630:	f44f 73a0 	movne.w	r3, #320	@ 0x140
         maxy = 480;
 800c634:	800b      	strh	r3, [r1, #0]
      } else {
         maxx = 480;
         maxy = 320;
      }
      ax = 0;
 800c636:	492e      	ldr	r1, [pc, #184]	@ (800c6f0 <LCD_Init+0x1404>)
 800c638:	2500      	movs	r5, #0
 800c63a:	800d      	strh	r5, [r1, #0]
      ay = 0;
 800c63c:	492d      	ldr	r1, [pc, #180]	@ (800c6f4 <LCD_Init+0x1408>)
 800c63e:	800d      	strh	r5, [r1, #0]
      page = 0;
 800c640:	492d      	ldr	r1, [pc, #180]	@ (800c6f8 <LCD_Init+0x140c>)
 800c642:	800d      	strh	r5, [r1, #0]
      eng_mode = 0;
 800c644:	492d      	ldr	r1, [pc, #180]	@ (800c6fc <LCD_Init+0x1410>)
 800c646:	800d      	strh	r5, [r1, #0]
      hangul_mode = 0;
 800c648:	492d      	ldr	r1, [pc, #180]	@ (800c700 <LCD_Init+0x1414>)
 800c64a:	700d      	strb	r5, [r1, #0]
      max_col = (maxx / 8);
 800c64c:	492d      	ldr	r1, [pc, #180]	@ (800c704 <LCD_Init+0x1418>)
 800c64e:	08d2      	lsrs	r2, r2, #3
 800c650:	800a      	strh	r2, [r1, #0]
      max_row = (maxy / 16);
 800c652:	4a2d      	ldr	r2, [pc, #180]	@ (800c708 <LCD_Init+0x141c>)
 800c654:	091b      	lsrs	r3, r3, #4
 800c656:	8013      	strh	r3, [r2, #0]
      random_display();
 800c658:	f000 fc54 	bl	800cf04 <random_display>
      foreground_color = WHITE;
 800c65c:	4b2b      	ldr	r3, [pc, #172]	@ (800c70c <LCD_Init+0x1420>)
 800c65e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c662:	801a      	strh	r2, [r3, #0]
      background_color = BLACK;
 800c664:	4b2a      	ldr	r3, [pc, #168]	@ (800c710 <LCD_Init+0x1424>)
      LCD_Clear(background_color);
 800c666:	4628      	mov	r0, r5
      background_color = BLACK;
 800c668:	801d      	strh	r5, [r3, #0]
      LCD_Clear(background_color);
 800c66a:	f7fe fb43 	bl	800acf4 <LCD_Clear>
      lcd_printf(0,0," ID: %.4X, xres %d yres %d",lcddev.id,lcddev.width,lcddev.height);
 800c66e:	8863      	ldrh	r3, [r4, #2]
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	8823      	ldrh	r3, [r4, #0]
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	88a3      	ldrh	r3, [r4, #4]
 800c678:	4a26      	ldr	r2, [pc, #152]	@ (800c714 <LCD_Init+0x1428>)
 800c67a:	4629      	mov	r1, r5
 800c67c:	4628      	mov	r0, r5
 800c67e:	f7fe fdff 	bl	800b280 <lcd_printf>
}
 800c682:	b021      	add	sp, #132	@ 0x84
 800c684:	bd30      	pop	{r4, r5, pc}
		  if (lcddev.id != 0x5510) {
 800c686:	4298      	cmp	r0, r3
 800c688:	80a0      	strh	r0, [r4, #4]
 800c68a:	f43e afd2 	beq.w	800b632 <LCD_Init+0x346>
		     LCD_WR_REG(0xA1);
 800c68e:	20a1      	movs	r0, #161	@ 0xa1
 800c690:	f7fe fa02 	bl	800aa98 <LCD_WR_REG>
		     lcddev.id = LCD_RD_DATA();
 800c694:	f7fe fa22 	bl	800aadc <LCD_RD_DATA>
		     lcddev.id = LCD_RD_DATA();
 800c698:	f7fe fa20 	bl	800aadc <LCD_RD_DATA>
 800c69c:	4602      	mov	r2, r0
		     lcddev.id |= LCD_RD_DATA();
 800c69e:	f7fe fa1d 	bl	800aadc <LCD_RD_DATA>
 800c6a2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
		     if (lcddev.id == 0x5761) lcddev.id = 0x1963;
 800c6a6:	f245 7361 	movw	r3, #22369	@ 0x5761
		     lcddev.id |= LCD_RD_DATA();
 800c6aa:	b280      	uxth	r0, r0
		     if (lcddev.id == 0x5761) lcddev.id = 0x1963;
 800c6ac:	4298      	cmp	r0, r3
 800c6ae:	f641 1363 	movw	r3, #6499	@ 0x1963
 800c6b2:	f43e afbd 	beq.w	800b630 <LCD_Init+0x344>
		     if (lcddev.id != 0x1963) {
 800c6b6:	4298      	cmp	r0, r3
 800c6b8:	80a0      	strh	r0, [r4, #4]
 800c6ba:	f43e afba 	beq.w	800b632 <LCD_Init+0x346>
                        LCD_WR_REG(0xBF);
 800c6be:	20bf      	movs	r0, #191	@ 0xbf
 800c6c0:	f7fe f9ea 	bl	800aa98 <LCD_WR_REG>
 		        lcddev.id = LCD_RD_DATA();
 800c6c4:	f7fe fa0a 	bl	800aadc <LCD_RD_DATA>
		        lcddev.id = LCD_RD_DATA();
 800c6c8:	f7fe fa08 	bl	800aadc <LCD_RD_DATA>
 		        lcddev.id = LCD_RD_DATA();
 800c6cc:	f7fe fa06 	bl	800aadc <LCD_RD_DATA>
		        lcddev.id = LCD_RD_DATA();
 800c6d0:	f7fe fa04 	bl	800aadc <LCD_RD_DATA>
 800c6d4:	4602      	mov	r2, r0
		        lcddev.id |= LCD_RD_DATA();
 800c6d6:	f7fe fa01 	bl	800aadc <LCD_RD_DATA>
 800c6da:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800c6de:	80a0      	strh	r0, [r4, #4]
 800c6e0:	f7fe bfa7 	b.w	800b632 <LCD_Init+0x346>
 800c6e4:	42408000 	.word	0x42408000
 800c6e8:	20002d48 	.word	0x20002d48
 800c6ec:	20002d46 	.word	0x20002d46
 800c6f0:	20002d44 	.word	0x20002d44
 800c6f4:	20002d42 	.word	0x20002d42
 800c6f8:	20002d36 	.word	0x20002d36
 800c6fc:	20002d38 	.word	0x20002d38
 800c700:	20002c14 	.word	0x20002c14
 800c704:	20002d40 	.word	0x20002d40
 800c708:	20002d3e 	.word	0x20002d3e
 800c70c:	20002d4c 	.word	0x20002d4c
 800c710:	20002d4a 	.word	0x20002d4a
 800c714:	0800f7c8 	.word	0x0800f7c8

0800c718 <_sputc>:

int _sputc(int ch, char *fp)
{
      StringOutputFile *sf = (StringOutputFile *)fp;      
      char *op = sf->ptr;
      int r = *op++ = ch;
 800c718:	680b      	ldr	r3, [r1, #0]
 800c71a:	f803 0b01 	strb.w	r0, [r3], #1
      sf->ptr = op;
      return r;
}
 800c71e:	b2c0      	uxtb	r0, r0
      sf->ptr = op;
 800c720:	600b      	str	r3, [r1, #0]
}
 800c722:	4770      	bx	lr

0800c724 <_serror>:

int _serror(char *f)
{
      IGNORE(f);
      return 0;
}
 800c724:	2000      	movs	r0, #0
 800c726:	4770      	bx	lr

0800c728 <__vfprintf>:
      }
}


int __vfprintf (char *p, const char *fmt, va_list args, printf_display_rec *dr)
{
 800c728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c72c:	b091      	sub	sp, #68	@ 0x44
 800c72e:	460e      	mov	r6, r1
 800c730:	9001      	str	r0, [sp, #4]
 800c732:	461c      	mov	r4, r3
 800c734:	4690      	mov	r8, r2
      int ch, charcount = 0;
 800c736:	f04f 0900 	mov.w	r9, #0
      while ((ch = *fmt++) != 0) {
 800c73a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c73e:	b94d      	cbnz	r5, 800c754 <__vfprintf+0x2c>
               dr->fpr.flags = flags;
               charcount += printf_display(p, ch, dr, v);
               continue;
            }
      }
      return dr->ferror(p) ? 0 : charcount;
 800c740:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c742:	9801      	ldr	r0, [sp, #4]
 800c744:	4798      	blx	r3
}
 800c746:	2800      	cmp	r0, #0
 800c748:	bf14      	ite	ne
 800c74a:	4628      	movne	r0, r5
 800c74c:	4648      	moveq	r0, r9
 800c74e:	b011      	add	sp, #68	@ 0x44
 800c750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      	    if (ch != '%') {
 800c754:	2d25      	cmp	r5, #37	@ 0x25
 800c756:	d007      	beq.n	800c768 <__vfprintf+0x40>
      	       xputc(dr, ch, p);
 800c758:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c75a:	9901      	ldr	r1, [sp, #4]
 800c75c:	4628      	mov	r0, r5
 800c75e:	4798      	blx	r3
      	       charcount++;
 800c760:	f109 0901 	add.w	r9, r9, #1
                    continue;
 800c764:	4645      	mov	r5, r8
 800c766:	e116      	b.n	800c996 <__vfprintf+0x26e>
      	       int flags = 0, width = 0;
 800c768:	f04f 0a00 	mov.w	sl, #0
 800c76c:	e016      	b.n	800c79c <__vfprintf+0x74>
                   switch (ch = *fmt++) {
 800c76e:	2a2d      	cmp	r2, #45	@ 0x2d
 800c770:	d00d      	beq.n	800c78e <__vfprintf+0x66>
 800c772:	2a30      	cmp	r2, #48	@ 0x30
 800c774:	d043      	beq.n	800c7fe <__vfprintf+0xd6>
 800c776:	460e      	mov	r6, r1
               int t = 0;
 800c778:	2300      	movs	r3, #0
                        t = t*10 + intofdigit(ch);
 800c77a:	200a      	movs	r0, #10
      return (unsigned int)(c - '0') <= 9;
 800c77c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
               	  while (is_digit(ch)) {
 800c780:	2909      	cmp	r1, #9
 800c782:	d820      	bhi.n	800c7c6 <__vfprintf+0x9e>
                        ch = *fmt++;
 800c784:	f816 2b01 	ldrb.w	r2, [r6], #1
                        t = t*10 + intofdigit(ch);
 800c788:	fb00 1303 	mla	r3, r0, r3, r1
                        ch = *fmt++;
 800c78c:	e7f6      	b.n	800c77c <__vfprintf+0x54>
                      case '-':   flags = _LJUSTIFY | (flags & ~_PADZERO);
 800c78e:	f42a 7a80 	bic.w	sl, sl, #256	@ 0x100
 800c792:	f02a 0a01 	bic.w	sl, sl, #1
 800c796:	f04a 0a01 	orr.w	sl, sl, #1
{
 800c79a:	460e      	mov	r6, r1
                   switch (ch = *fmt++) {
 800c79c:	4631      	mov	r1, r6
 800c79e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7a2:	2a2b      	cmp	r2, #43	@ 0x2b
 800c7a4:	d022      	beq.n	800c7ec <__vfprintf+0xc4>
 800c7a6:	d8e2      	bhi.n	800c76e <__vfprintf+0x46>
 800c7a8:	2a20      	cmp	r2, #32
 800c7aa:	d022      	beq.n	800c7f2 <__vfprintf+0xca>
 800c7ac:	2a23      	cmp	r2, #35	@ 0x23
 800c7ae:	d023      	beq.n	800c7f8 <__vfprintf+0xd0>
               if (ch == '*') {
 800c7b0:	2a2a      	cmp	r2, #42	@ 0x2a
 800c7b2:	d1e0      	bne.n	800c776 <__vfprintf+0x4e>
                  t = va_arg(args, int);
 800c7b4:	f858 3b04 	ldr.w	r3, [r8], #4
                  ch = *fmt++;
 800c7b8:	780a      	ldrb	r2, [r1, #0]
                  if (t < 0) {
 800c7ba:	2b00      	cmp	r3, #0
                     t = - t;
 800c7bc:	bfbc      	itt	lt
 800c7be:	425b      	neglt	r3, r3
                     flags ^= _LJUSTIFY;
 800c7c0:	f08a 0a01 	eorlt.w	sl, sl, #1
                  ch = *fmt++;
 800c7c4:	3602      	adds	r6, #2
               if (ch == '.') {                           /* precision spec */
 800c7c6:	2a2e      	cmp	r2, #46	@ 0x2e
               width = t>=0 ? t : 0;                 /* disallow -ve arg */
 800c7c8:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
               if (ch == '.') {                           /* precision spec */
 800c7cc:	d123      	bne.n	800c816 <__vfprintf+0xee>
                  ch = *fmt++;
 800c7ce:	7832      	ldrb	r2, [r6, #0]
                  if (ch == '*') {
 800c7d0:	2a2a      	cmp	r2, #42	@ 0x2a
 800c7d2:	d017      	beq.n	800c804 <__vfprintf+0xdc>
                  ch = *fmt++;
 800c7d4:	3601      	adds	r6, #1
                  int t = 0;
 800c7d6:	2100      	movs	r1, #0
                           t = t*10 + intofdigit(ch);
 800c7d8:	250a      	movs	r5, #10
      return (unsigned int)(c - '0') <= 9;
 800c7da:	f1a2 0030 	sub.w	r0, r2, #48	@ 0x30
                     while (is_digit(ch)) {
 800c7de:	2809      	cmp	r0, #9
 800c7e0:	d814      	bhi.n	800c80c <__vfprintf+0xe4>
                           ch = *fmt++;
 800c7e2:	f816 2b01 	ldrb.w	r2, [r6], #1
                           t = t*10 + intofdigit(ch);
 800c7e6:	fb05 0101 	mla	r1, r5, r1, r0
                           ch = *fmt++;
 800c7ea:	e7f6      	b.n	800c7da <__vfprintf+0xb2>
                      case '+':   flags |= _SIGNED;
 800c7ec:	f04a 0a02 	orr.w	sl, sl, #2
                        continue;
 800c7f0:	e7d3      	b.n	800c79a <__vfprintf+0x72>
                      case ' ':   flags |= _BLANKER;
 800c7f2:	f04a 0a04 	orr.w	sl, sl, #4
                        continue;
 800c7f6:	e7d0      	b.n	800c79a <__vfprintf+0x72>
                      case '#':   flags |= _VARIANT;
 800c7f8:	f04a 0a08 	orr.w	sl, sl, #8
                        continue;
 800c7fc:	e7cd      	b.n	800c79a <__vfprintf+0x72>
                      case '0':   flags |= _PADZERO;
 800c7fe:	f44a 7a80 	orr.w	sl, sl, #256	@ 0x100
                        continue;
 800c802:	e7ca      	b.n	800c79a <__vfprintf+0x72>
                     t = va_arg(args, int);
 800c804:	f858 1b04 	ldr.w	r1, [r8], #4
                     ch = *fmt++;
 800c808:	7872      	ldrb	r2, [r6, #1]
 800c80a:	3602      	adds	r6, #2
                  if (t >= 0) flags |= _PRECGIVEN, dr->fpr.precision = t;
 800c80c:	2900      	cmp	r1, #0
 800c80e:	bfa4      	itt	ge
 800c810:	f04a 0a10 	orrge.w	sl, sl, #16
 800c814:	60a1      	strge	r1, [r4, #8]
               if (ch == 'l' || ch == 'L') {
 800c816:	f022 0120 	bic.w	r1, r2, #32
 800c81a:	294c      	cmp	r1, #76	@ 0x4c
 800c81c:	d12e      	bne.n	800c87c <__vfprintf+0x154>
                  ch = *fmt++;
 800c81e:	7832      	ldrb	r2, [r6, #0]
                  if (ch == 'l' || ch == 'L') {
 800c820:	f002 01df 	and.w	r1, r2, #223	@ 0xdf
 800c824:	294c      	cmp	r1, #76	@ 0x4c
                     ch = *fmt++;
 800c826:	bf03      	ittte	eq
 800c828:	7872      	ldrbeq	r2, [r6, #1]
                     flags |= _LLSPEC;
 800c82a:	f04a 0a40 	orreq.w	sl, sl, #64	@ 0x40
                     ch = *fmt++;
 800c82e:	3602      	addeq	r6, #2
                  ch = *fmt++;
 800c830:	3601      	addne	r6, #1
                    flags |= _LONGSPEC;
 800c832:	bf18      	it	ne
 800c834:	f04a 0a20 	orrne.w	sl, sl, #32
               switch (ch) {
 800c838:	2a78      	cmp	r2, #120	@ 0x78
 800c83a:	dc6f      	bgt.n	800c91c <__vfprintf+0x1f4>
 800c83c:	2a57      	cmp	r2, #87	@ 0x57
 800c83e:	dc24      	bgt.n	800c88a <__vfprintf+0x162>
 800c840:	2a00      	cmp	r2, #0
 800c842:	f000 80aa 	beq.w	800c99a <__vfprintf+0x272>
 800c846:	f022 0102 	bic.w	r1, r2, #2
 800c84a:	2945      	cmp	r1, #69	@ 0x45
 800c84c:	d166      	bne.n	800c91c <__vfprintf+0x1f4>
                    if (!(flags & _PRECGIVEN)) dr->fpr.precision = 6;
 800c84e:	f01a 0f10 	tst.w	sl, #16
 800c852:	bf04      	itt	eq
 800c854:	2306      	moveq	r3, #6
 800c856:	60a3      	streq	r3, [r4, #8]
                    dr->fpr.prefix = (flags&_SIGNED) ? "+" : (flags&_BLANKER) ? " " : "";
 800c858:	f01a 0f02 	tst.w	sl, #2
                    flags |= _FPCONV;
 800c85c:	f44a 7100 	orr.w	r1, sl, #512	@ 0x200
                    va_arg(args, int);
 800c860:	f108 0504 	add.w	r5, r8, #4
                    dr->fpr.prefix = (flags&_SIGNED) ? "+" : (flags&_BLANKER) ? " " : "";
 800c864:	f040 81e6 	bne.w	800cc34 <__vfprintf+0x50c>
 800c868:	48b6      	ldr	r0, [pc, #728]	@ (800cb44 <__vfprintf+0x41c>)
 800c86a:	4bb7      	ldr	r3, [pc, #732]	@ (800cb48 <__vfprintf+0x420>)
 800c86c:	f01a 0f04 	tst.w	sl, #4
 800c870:	bf18      	it	ne
 800c872:	4603      	movne	r3, r0
 800c874:	6063      	str	r3, [r4, #4]
                    flags |= _FPCONV;
 800c876:	468a      	mov	sl, r1
               unsigned int v = 0;
 800c878:	2300      	movs	r3, #0
                    break;
 800c87a:	e139      	b.n	800caf0 <__vfprintf+0x3c8>
               } else if (ch == 'h') {
 800c87c:	2a68      	cmp	r2, #104	@ 0x68
                  ch = *fmt++;
 800c87e:	bf04      	itt	eq
 800c880:	f816 2b01 	ldrbeq.w	r2, [r6], #1
                  flags |= _SHORTSPEC;
 800c884:	f04a 0a80 	orreq.w	sl, sl, #128	@ 0x80
                  ch = *fmt++;
 800c888:	e7d6      	b.n	800c838 <__vfprintf+0x110>
               switch (ch) {
 800c88a:	f1a2 0158 	sub.w	r1, r2, #88	@ 0x58
 800c88e:	2920      	cmp	r1, #32
 800c890:	d844      	bhi.n	800c91c <__vfprintf+0x1f4>
 800c892:	a001      	add	r0, pc, #4	@ (adr r0, 800c898 <__vfprintf+0x170>)
 800c894:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c898:	0800ca5b 	.word	0x0800ca5b
 800c89c:	0800c91d 	.word	0x0800c91d
 800c8a0:	0800c91d 	.word	0x0800c91d
 800c8a4:	0800c91d 	.word	0x0800c91d
 800c8a8:	0800c91d 	.word	0x0800c91d
 800c8ac:	0800c91d 	.word	0x0800c91d
 800c8b0:	0800c91d 	.word	0x0800c91d
 800c8b4:	0800c91d 	.word	0x0800c91d
 800c8b8:	0800c91d 	.word	0x0800c91d
 800c8bc:	0800c91d 	.word	0x0800c91d
 800c8c0:	0800c91d 	.word	0x0800c91d
 800c8c4:	0800c91d 	.word	0x0800c91d
 800c8c8:	0800cbd3 	.word	0x0800cbd3
 800c8cc:	0800c84f 	.word	0x0800c84f
 800c8d0:	0800c84f 	.word	0x0800c84f
 800c8d4:	0800c84f 	.word	0x0800c84f
 800c8d8:	0800c91d 	.word	0x0800c91d
 800c8dc:	0800cbd3 	.word	0x0800cbd3
 800c8e0:	0800c91d 	.word	0x0800c91d
 800c8e4:	0800c91d 	.word	0x0800c91d
 800c8e8:	0800c91d 	.word	0x0800c91d
 800c8ec:	0800c91d 	.word	0x0800c91d
 800c8f0:	0800c99f 	.word	0x0800c99f
 800c8f4:	0800cb69 	.word	0x0800cb69
 800c8f8:	0800cad1 	.word	0x0800cad1
 800c8fc:	0800c91d 	.word	0x0800c91d
 800c900:	0800c91d 	.word	0x0800c91d
 800c904:	0800c9c7 	.word	0x0800c9c7
 800c908:	0800c91d 	.word	0x0800c91d
 800c90c:	0800cb9b 	.word	0x0800cb9b
 800c910:	0800c91d 	.word	0x0800c91d
 800c914:	0800c91d 	.word	0x0800c91d
 800c918:	0800ca99 	.word	0x0800ca99
                    ch = va_arg(args, int);
 800c91c:	4645      	mov	r5, r8
                    pre_padding(dr, p);
 800c91e:	f01a 0b01 	ands.w	fp, sl, #1
                    ch = va_arg(args, int);
 800c922:	f855 2b04 	ldr.w	r2, [r5], #4
 800c926:	9202      	str	r2, [sp, #8]
                    width--;                        /* char width is 1       */
 800c928:	f107 38ff 	add.w	r8, r7, #4294967295
                    pre_padding(dr, p);
 800c92c:	d118      	bne.n	800c960 <__vfprintf+0x238>
 800c92e:	f41a 7f80 	tst.w	sl, #256	@ 0x100
 800c932:	bf0c      	ite	eq
 800c934:	f04f 0a20 	moveq.w	sl, #32
 800c938:	f04f 0a30 	movne.w	sl, #48	@ 0x30
 800c93c:	f1b8 0801 	subs.w	r8, r8, #1
 800c940:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c942:	d518      	bpl.n	800c976 <__vfprintf+0x24e>
 800c944:	2f01      	cmp	r7, #1
 800c946:	463a      	mov	r2, r7
 800c948:	bfb8      	it	lt
 800c94a:	2201      	movlt	r2, #1
 800c94c:	3a01      	subs	r2, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f1c7 0801 	rsb	r8, r7, #1
 800c954:	4491      	add	r9, r2
 800c956:	bfd8      	it	le
 800c958:	f04f 0800 	movle.w	r8, #0
 800c95c:	1eba      	subs	r2, r7, #2
 800c95e:	4490      	add	r8, r2
                    xputc(dr, ch, p);
 800c960:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800c964:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c966:	4798      	blx	r3
                    charcount++;
 800c968:	f109 0901 	add.w	r9, r9, #1
                    post_padding(dr, p);
 800c96c:	f1bb 0f00 	cmp.w	fp, #0
 800c970:	d011      	beq.n	800c996 <__vfprintf+0x26e>
 800c972:	4647      	mov	r7, r8
 800c974:	e009      	b.n	800c98a <__vfprintf+0x262>
                    pre_padding(dr, p);
 800c976:	9901      	ldr	r1, [sp, #4]
 800c978:	9303      	str	r3, [sp, #12]
 800c97a:	4650      	mov	r0, sl
 800c97c:	4790      	blx	r2
 800c97e:	9b03      	ldr	r3, [sp, #12]
 800c980:	e7dc      	b.n	800c93c <__vfprintf+0x214>
                    post_padding(dr, p);
 800c982:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c984:	9901      	ldr	r1, [sp, #4]
 800c986:	2020      	movs	r0, #32
 800c988:	4798      	blx	r3
 800c98a:	3f01      	subs	r7, #1
 800c98c:	d5f9      	bpl.n	800c982 <__vfprintf+0x25a>
 800c98e:	f1b8 0f00 	cmp.w	r8, #0
 800c992:	bfa8      	it	ge
 800c994:	44c1      	addge	r9, r8
                    continue;
 800c996:	46a8      	mov	r8, r5
 800c998:	e6cf      	b.n	800c73a <__vfprintf+0x12>
                  case 0:     fmt--;
 800c99a:	3e01      	subs	r6, #1
 800c99c:	e6e2      	b.n	800c764 <__vfprintf+0x3c>
                    if (flags & _SHORTSPEC) *va_arg(args, short *) = (short)charcount;
 800c99e:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 800c9a2:	f8d8 3000 	ldr.w	r3, [r8]
                    ch = va_arg(args, int);
 800c9a6:	f108 0504 	add.w	r5, r8, #4
                    if (flags & _SHORTSPEC) *va_arg(args, short *) = (short)charcount;
 800c9aa:	d002      	beq.n	800c9b2 <__vfprintf+0x28a>
 800c9ac:	f8a3 9000 	strh.w	r9, [r3]
 800c9b0:	e7f1      	b.n	800c996 <__vfprintf+0x26e>
                    else if (flags & _LLSPEC) *va_arg(args, long long *) = charcount;
 800c9b2:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800c9b6:	bf1a      	itte	ne
 800c9b8:	ea4f 72e9 	movne.w	r2, r9, asr #31
 800c9bc:	e9c3 9200 	strdne	r9, r2, [r3]
                    else if (flags & _LONGSPEC) *va_arg(args, long *) = charcount;
 800c9c0:	f8c3 9000 	streq.w	r9, [r3]
 800c9c4:	e7e7      	b.n	800c996 <__vfprintf+0x26e>
                    char *str = va_arg(args, char *);
 800c9c6:	4645      	mov	r5, r8
                    if (flags & _PRECGIVEN) {
 800c9c8:	f01a 0f10 	tst.w	sl, #16
                    char *str = va_arg(args, char *);
 800c9cc:	f855 8b04 	ldr.w	r8, [r5], #4
                    if (flags & _PRECGIVEN) {
 800c9d0:	d00a      	beq.n	800c9e8 <__vfprintf+0x2c0>
                       int precision = dr->fpr.precision;
 800c9d2:	68a3      	ldr	r3, [r4, #8]
                       for (n = 0; n < precision && str[n] != 0; n++) continue;
 800c9d4:	f04f 0b00 	mov.w	fp, #0
 800c9d8:	459b      	cmp	fp, r3
 800c9da:	da09      	bge.n	800c9f0 <__vfprintf+0x2c8>
 800c9dc:	f818 200b 	ldrb.w	r2, [r8, fp]
 800c9e0:	b132      	cbz	r2, 800c9f0 <__vfprintf+0x2c8>
 800c9e2:	f10b 0b01 	add.w	fp, fp, #1
 800c9e6:	e7f7      	b.n	800c9d8 <__vfprintf+0x2b0>
                    } else n = strlen(str);
 800c9e8:	4640      	mov	r0, r8
 800c9ea:	f001 fea9 	bl	800e740 <strlen>
 800c9ee:	4683      	mov	fp, r0
                    pre_padding(dr, p);
 800c9f0:	f01a 0301 	ands.w	r3, sl, #1
                    width -= n;
 800c9f4:	eba7 070b 	sub.w	r7, r7, fp
                    pre_padding(dr, p);
 800c9f8:	9302      	str	r3, [sp, #8]
 800c9fa:	d10e      	bne.n	800ca1a <__vfprintf+0x2f2>
 800c9fc:	f41a 7f80 	tst.w	sl, #256	@ 0x100
 800ca00:	bf0c      	ite	eq
 800ca02:	2320      	moveq	r3, #32
 800ca04:	2330      	movne	r3, #48	@ 0x30
 800ca06:	9303      	str	r3, [sp, #12]
                    width -= n;
 800ca08:	46ba      	mov	sl, r7
                    pre_padding(dr, p);
 800ca0a:	f1ba 0a01 	subs.w	sl, sl, #1
 800ca0e:	d50e      	bpl.n	800ca2e <__vfprintf+0x306>
 800ca10:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 800ca14:	3f01      	subs	r7, #1
 800ca16:	4499      	add	r9, r3
 800ca18:	1aff      	subs	r7, r7, r3
                    for (i=0; i<n; i++) xputc(dr, str[i], p);
 800ca1a:	eb08 0a0b 	add.w	sl, r8, fp
 800ca1e:	45c2      	cmp	sl, r8
 800ca20:	d10a      	bne.n	800ca38 <__vfprintf+0x310>
                    post_padding(dr, p);
 800ca22:	9b02      	ldr	r3, [sp, #8]
                    charcount += n;
 800ca24:	44d9      	add	r9, fp
                    post_padding(dr, p);
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d0b5      	beq.n	800c996 <__vfprintf+0x26e>
 800ca2a:	46b8      	mov	r8, r7
 800ca2c:	e00e      	b.n	800ca4c <__vfprintf+0x324>
                    pre_padding(dr, p);
 800ca2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ca30:	9901      	ldr	r1, [sp, #4]
 800ca32:	9803      	ldr	r0, [sp, #12]
 800ca34:	4798      	blx	r3
 800ca36:	e7e8      	b.n	800ca0a <__vfprintf+0x2e2>
                    for (i=0; i<n; i++) xputc(dr, str[i], p);
 800ca38:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ca3a:	9901      	ldr	r1, [sp, #4]
 800ca3c:	f818 0b01 	ldrb.w	r0, [r8], #1
 800ca40:	4798      	blx	r3
 800ca42:	e7ec      	b.n	800ca1e <__vfprintf+0x2f6>
                    post_padding(dr, p);
 800ca44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ca46:	9901      	ldr	r1, [sp, #4]
 800ca48:	2020      	movs	r0, #32
 800ca4a:	4798      	blx	r3
 800ca4c:	f1b8 0801 	subs.w	r8, r8, #1
 800ca50:	d5f8      	bpl.n	800ca44 <__vfprintf+0x31c>
 800ca52:	2f00      	cmp	r7, #0
 800ca54:	bfa8      	it	ge
 800ca56:	44b9      	addge	r9, r7
 800ca58:	e79d      	b.n	800c996 <__vfprintf+0x26e>
                    if (flags & _LLSPEC) dr->llval = va_arg(args, long long);else v = va_arg(args, int);
 800ca5a:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ca5e:	bf1d      	ittte	ne
 800ca60:	f108 0807 	addne.w	r8, r8, #7
 800ca64:	f028 0507 	bicne.w	r5, r8, #7
 800ca68:	e8f5 0102 	ldrdne	r0, r1, [r5], #8
 800ca6c:	4645      	moveq	r5, r8
 800ca6e:	bf18      	it	ne
 800ca70:	e9c4 010e 	strdne	r0, r1, [r4, #56]	@ 0x38
                    dr->hextab = "0123456789ABCDEF";
 800ca74:	4935      	ldr	r1, [pc, #212]	@ (800cb4c <__vfprintf+0x424>)
                    if (flags & _LLSPEC) dr->llval = va_arg(args, long long);else v = va_arg(args, int);
 800ca76:	bf08      	it	eq
 800ca78:	f855 3b04 	ldreq.w	r3, [r5], #4
                    dr->fpr.prefix = (flags&_VARIANT) ? "0X" : "";
 800ca7c:	4834      	ldr	r0, [pc, #208]	@ (800cb50 <__vfprintf+0x428>)
                    dr->hextab = "0123456789ABCDEF";
 800ca7e:	62e1      	str	r1, [r4, #44]	@ 0x2c
               unsigned int v = 0;
 800ca80:	bf18      	it	ne
 800ca82:	2300      	movne	r3, #0
                    dr->fpr.prefix = (flags&_VARIANT) ? "0X" : "";
 800ca84:	4930      	ldr	r1, [pc, #192]	@ (800cb48 <__vfprintf+0x420>)
                    if (flags & _SHORTSPEC) v = (unsigned short)v;
 800ca86:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 800ca8a:	bf18      	it	ne
 800ca8c:	b29b      	uxthne	r3, r3
                    dr->fpr.prefix = (flags&_VARIANT) ? "0X" : "";
 800ca8e:	f01a 0f08 	tst.w	sl, #8
                    dr->fpr.prefix = (w < 0) ? "-" : (flags & _SIGNED) ? "+" : (flags & _BLANKER) ? " " : "";
 800ca92:	bf18      	it	ne
 800ca94:	4601      	movne	r1, r0
 800ca96:	e095      	b.n	800cbc4 <__vfprintf+0x49c>
                    if (flags & _LLSPEC) dr->llval = va_arg(args, long long);else v = va_arg(args, int);
 800ca98:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ca9c:	bf1d      	ittte	ne
 800ca9e:	f108 0807 	addne.w	r8, r8, #7
 800caa2:	f028 0507 	bicne.w	r5, r8, #7
 800caa6:	e8f5 0102 	ldrdne	r0, r1, [r5], #8
 800caaa:	4645      	moveq	r5, r8
 800caac:	bf14      	ite	ne
 800caae:	e9c4 010e 	strdne	r0, r1, [r4, #56]	@ 0x38
 800cab2:	f855 3b04 	ldreq.w	r3, [r5], #4
                    dr->hextab = "0123456789abcdef";
 800cab6:	4927      	ldr	r1, [pc, #156]	@ (800cb54 <__vfprintf+0x42c>)
 800cab8:	62e1      	str	r1, [r4, #44]	@ 0x2c
               unsigned int v = 0;
 800caba:	bf18      	it	ne
 800cabc:	2300      	movne	r3, #0
                    if (flags & _SHORTSPEC) v = (unsigned short)v;
 800cabe:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 800cac2:	bf18      	it	ne
 800cac4:	b29b      	uxthne	r3, r3
                    dr->fpr.prefix = (flags&_VARIANT) ? "0x" : "";
 800cac6:	4920      	ldr	r1, [pc, #128]	@ (800cb48 <__vfprintf+0x420>)
 800cac8:	4823      	ldr	r0, [pc, #140]	@ (800cb58 <__vfprintf+0x430>)
 800caca:	f01a 0f08 	tst.w	sl, #8
 800cace:	e7e0      	b.n	800ca92 <__vfprintf+0x36a>
                    dr->fpr.prefix = (flags&_VARIANT) ? "@" : "";
 800cad0:	4822      	ldr	r0, [pc, #136]	@ (800cb5c <__vfprintf+0x434>)
                    dr->hextab = "0123456789abcdef";
 800cad2:	4920      	ldr	r1, [pc, #128]	@ (800cb54 <__vfprintf+0x42c>)
                    v = (unsigned int)va_arg(args, void *);
 800cad4:	4645      	mov	r5, r8
                    dr->fpr.prefix = (flags&_VARIANT) ? "@" : "";
 800cad6:	f01a 0f08 	tst.w	sl, #8
                    v = (unsigned int)va_arg(args, void *);
 800cada:	f855 3b04 	ldr.w	r3, [r5], #4
                    dr->hextab = "0123456789abcdef";
 800cade:	62e1      	str	r1, [r4, #44]	@ 0x2c
                    dr->fpr.prefix = (flags&_VARIANT) ? "@" : "";
 800cae0:	4919      	ldr	r1, [pc, #100]	@ (800cb48 <__vfprintf+0x420>)
 800cae2:	bf18      	it	ne
 800cae4:	4601      	movne	r1, r0
 800cae6:	6061      	str	r1, [r4, #4]
                    dr->fpr.precision = 8;
 800cae8:	2108      	movs	r1, #8
 800caea:	60a1      	str	r1, [r4, #8]
                    flags |= _PRECGIVEN;
 800caec:	f04a 0a10 	orr.w	sl, sl, #16
      dr->fpr.before_dot = -1, dr->fpr.after_dot = -1;
 800caf0:	f04f 31ff 	mov.w	r1, #4294967295
      if (!(dr->fpr.flags & (_FPCONV + _PRECGIVEN))) dr->fpr.precision = 1;
 800caf4:	f41a 7f04 	tst.w	sl, #528	@ 0x210
      dr->fpr.before_dot = -1, dr->fpr.after_dot = -1;
 800caf8:	e9c4 1103 	strd	r1, r1, [r4, #12]
      if (!(dr->fpr.flags & (_FPCONV + _PRECGIVEN))) dr->fpr.precision = 1;
 800cafc:	bf04      	itt	eq
 800cafe:	2101      	moveq	r1, #1
 800cb00:	60a1      	streq	r1, [r4, #8]
      switch (ch) {
 800cb02:	2a58      	cmp	r2, #88	@ 0x58
               dr->width = width;
 800cb04:	6327      	str	r7, [r4, #48]	@ 0x30
               dr->fpr.flags = flags;
 800cb06:	f8c4 a000 	str.w	sl, [r4]
      switch (ch) {
 800cb0a:	f000 8095 	beq.w	800cc38 <__vfprintf+0x510>
 800cb0e:	3a64      	subs	r2, #100	@ 0x64
 800cb10:	2a14      	cmp	r2, #20
 800cb12:	d80d      	bhi.n	800cb30 <__vfprintf+0x408>
 800cb14:	4812      	ldr	r0, [pc, #72]	@ (800cb60 <__vfprintf+0x438>)
 800cb16:	2101      	movs	r1, #1
 800cb18:	4091      	lsls	r1, r2
 800cb1a:	4008      	ands	r0, r1
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	f040 8130 	bne.w	800cd82 <__vfprintf+0x65a>
 800cb22:	4810      	ldr	r0, [pc, #64]	@ (800cb64 <__vfprintf+0x43c>)
 800cb24:	4001      	ands	r1, r0
 800cb26:	f040 8087 	bne.w	800cc38 <__vfprintf+0x510>
 800cb2a:	2a0b      	cmp	r2, #11
 800cb2c:	f000 80ff 	beq.w	800cd2e <__vfprintf+0x606>
	   buff[0] = '0';
 800cb30:	f642 6330 	movw	r3, #11824	@ 0x2e30
 800cb34:	f8ad 3020 	strh.w	r3, [sp, #32]
           buff[2] = '0';
 800cb38:	2330      	movs	r3, #48	@ 0x30
 800cb3a:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
           len = 3;
 800cb3e:	f04f 0803 	mov.w	r8, #3
           break;
 800cb42:	e090      	b.n	800cc66 <__vfprintf+0x53e>
 800cb44:	0800f4c9 	.word	0x0800f4c9
 800cb48:	0800f621 	.word	0x0800f621
 800cb4c:	0800f7f1 	.word	0x0800f7f1
 800cb50:	0800f7e3 	.word	0x0800f7e3
 800cb54:	0800f802 	.word	0x0800f802
 800cb58:	0800f7e6 	.word	0x0800f7e6
 800cb5c:	0800f7e9 	.word	0x0800f7e9
 800cb60:	00020021 	.word	0x00020021
 800cb64:	00101000 	.word	0x00101000
                    if (flags & _LLSPEC) dr->llval = va_arg(args, long long);else v = va_arg(args, int);
 800cb68:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800cb6c:	bf1d      	ittte	ne
 800cb6e:	f108 0807 	addne.w	r8, r8, #7
 800cb72:	f028 0507 	bicne.w	r5, r8, #7
 800cb76:	e8f5 0102 	ldrdne	r0, r1, [r5], #8
 800cb7a:	4645      	moveq	r5, r8
 800cb7c:	bf1a      	itte	ne
 800cb7e:	e9c4 010e 	strdne	r0, r1, [r4, #56]	@ 0x38
               unsigned int v = 0;
 800cb82:	2300      	movne	r3, #0
                    if (flags & _LLSPEC) dr->llval = va_arg(args, long long);else v = va_arg(args, int);
 800cb84:	f855 3b04 	ldreq.w	r3, [r5], #4
                    dr->fpr.prefix = (flags&_VARIANT) ? "0" : "";
 800cb88:	49b0      	ldr	r1, [pc, #704]	@ (800ce4c <__vfprintf+0x724>)
 800cb8a:	48b1      	ldr	r0, [pc, #708]	@ (800ce50 <__vfprintf+0x728>)
                    if (flags & _SHORTSPEC) v = (unsigned short)v;
 800cb8c:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 800cb90:	bf18      	it	ne
 800cb92:	b29b      	uxthne	r3, r3
                    dr->fpr.prefix = (flags&_VARIANT) ? "0" : "";
 800cb94:	f01a 0f08 	tst.w	sl, #8
 800cb98:	e77b      	b.n	800ca92 <__vfprintf+0x36a>
                    if (flags & _LLSPEC) dr->llval = va_arg(args, long long);else v = va_arg(args, unsigned int);
 800cb9a:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800cb9e:	bf1d      	ittte	ne
 800cba0:	f108 0807 	addne.w	r8, r8, #7
 800cba4:	f028 0507 	bicne.w	r5, r8, #7
 800cba8:	e8f5 0102 	ldrdne	r0, r1, [r5], #8
 800cbac:	4645      	moveq	r5, r8
 800cbae:	bf1a      	itte	ne
 800cbb0:	e9c4 010e 	strdne	r0, r1, [r4, #56]	@ 0x38
               unsigned int v = 0;
 800cbb4:	2300      	movne	r3, #0
                    if (flags & _LLSPEC) dr->llval = va_arg(args, long long);else v = va_arg(args, unsigned int);
 800cbb6:	f855 3b04 	ldreq.w	r3, [r5], #4
                    dr->fpr.prefix = "";
 800cbba:	49a4      	ldr	r1, [pc, #656]	@ (800ce4c <__vfprintf+0x724>)
                    if (flags & _SHORTSPEC) v = (unsigned short)v;
 800cbbc:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 800cbc0:	bf18      	it	ne
 800cbc2:	b29b      	uxthne	r3, r3
                    if (flags & _PRECGIVEN) flags &= ~_PADZERO;
 800cbc4:	f01a 0f10 	tst.w	sl, #16
                    dr->fpr.prefix = (w < 0) ? "-" : (flags & _SIGNED) ? "+" : (flags & _BLANKER) ? " " : "";
 800cbc8:	6061      	str	r1, [r4, #4]
                    if (flags & _PRECGIVEN) flags &= ~_PADZERO;
 800cbca:	d091      	beq.n	800caf0 <__vfprintf+0x3c8>
 800cbcc:	f42a 7a80 	bic.w	sl, sl, #256	@ 0x100
 800cbd0:	e78e      	b.n	800caf0 <__vfprintf+0x3c8>
                    if (flags & _LLSPEC) {
 800cbd2:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800cbd6:	d01d      	beq.n	800cc14 <__vfprintf+0x4ec>
                       dr->llval = va_arg(args, long long);
 800cbd8:	f108 0807 	add.w	r8, r8, #7
 800cbdc:	f028 0807 	bic.w	r8, r8, #7
 800cbe0:	4645      	mov	r5, r8
 800cbe2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cbe6:	f855 1b08 	ldr.w	r1, [r5], #8
                       if ((long long)dr->llval < 0) {
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	db0a      	blt.n	800cc04 <__vfprintf+0x4dc>
                       dr->llval = va_arg(args, long long);
 800cbee:	e9c4 130e 	strd	r1, r3, [r4, #56]	@ 0x38
               unsigned int v = 0;
 800cbf2:	2300      	movs	r3, #0
                    dr->fpr.prefix = (w < 0) ? "-" : (flags & _SIGNED) ? "+" : (flags & _BLANKER) ? " " : "";
 800cbf4:	f01a 0f02 	tst.w	sl, #2
 800cbf8:	d11a      	bne.n	800cc30 <__vfprintf+0x508>
 800cbfa:	4994      	ldr	r1, [pc, #592]	@ (800ce4c <__vfprintf+0x724>)
 800cbfc:	4895      	ldr	r0, [pc, #596]	@ (800ce54 <__vfprintf+0x72c>)
 800cbfe:	f01a 0f04 	tst.w	sl, #4
 800cc02:	e746      	b.n	800ca92 <__vfprintf+0x36a>
                          dr->llval = -dr->llval;
 800cc04:	4249      	negs	r1, r1
 800cc06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800cc0a:	e9c4 130e 	strd	r1, r3, [r4, #56]	@ 0x38
               unsigned int v = 0;
 800cc0e:	2300      	movs	r3, #0
                    dr->fpr.prefix = (w < 0) ? "-" : (flags & _SIGNED) ? "+" : (flags & _BLANKER) ? " " : "";
 800cc10:	4991      	ldr	r1, [pc, #580]	@ (800ce58 <__vfprintf+0x730>)
 800cc12:	e7d7      	b.n	800cbc4 <__vfprintf+0x49c>
                       w = va_arg(args, int);
 800cc14:	4645      	mov	r5, r8
                       if (flags & _SHORTSPEC) w = (signed short)w;
 800cc16:	f01a 0f80 	tst.w	sl, #128	@ 0x80
                       w = va_arg(args, int);
 800cc1a:	f855 1b04 	ldr.w	r1, [r5], #4
                       if (flags & _SHORTSPEC) w = (signed short)w;
 800cc1e:	bf18      	it	ne
 800cc20:	b209      	sxthne	r1, r1
                       v = (w < 0) ? -w : w;
 800cc22:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
                    dr->fpr.prefix = (w < 0) ? "-" : (flags & _SIGNED) ? "+" : (flags & _BLANKER) ? " " : "";
 800cc26:	2900      	cmp	r1, #0
                       v = (w < 0) ? -w : w;
 800cc28:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
                    dr->fpr.prefix = (w < 0) ? "-" : (flags & _SIGNED) ? "+" : (flags & _BLANKER) ? " " : "";
 800cc2c:	dae2      	bge.n	800cbf4 <__vfprintf+0x4cc>
 800cc2e:	e7ef      	b.n	800cc10 <__vfprintf+0x4e8>
 800cc30:	498a      	ldr	r1, [pc, #552]	@ (800ce5c <__vfprintf+0x734>)
 800cc32:	e7c7      	b.n	800cbc4 <__vfprintf+0x49c>
                    dr->fpr.prefix = (flags&_SIGNED) ? "+" : (flags&_BLANKER) ? " " : "";
 800cc34:	4b89      	ldr	r3, [pc, #548]	@ (800ce5c <__vfprintf+0x734>)
 800cc36:	e61d      	b.n	800c874 <__vfprintf+0x14c>
	   if (flags & _LLSPEC) {
 800cc38:	f01a 0840 	ands.w	r8, sl, #64	@ 0x40
 800cc3c:	d10b      	bne.n	800cc56 <__vfprintf+0x52e>
 800cc3e:	aa08      	add	r2, sp, #32
	      while (v != 0) {
 800cc40:	b18b      	cbz	r3, 800cc66 <__vfprintf+0x53e>
		    buff[len++] = dr->hextab[v & 0xf];
 800cc42:	f003 010f 	and.w	r1, r3, #15
 800cc46:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800cc48:	5c41      	ldrb	r1, [r0, r1]
 800cc4a:	f802 1b01 	strb.w	r1, [r2], #1
 800cc4e:	f108 0801 	add.w	r8, r8, #1
		    v = v >> 4;
 800cc52:	091b      	lsrs	r3, r3, #4
 800cc54:	e7f4      	b.n	800cc40 <__vfprintf+0x518>
	      unsigned long long w = dr->llval;
 800cc56:	e9d4 310e 	ldrd	r3, r1, [r4, #56]	@ 0x38
	      while (w != 0) {
 800cc5a:	aa08      	add	r2, sp, #32
      int len = 0, charcount = 0;
 800cc5c:	f04f 0800 	mov.w	r8, #0
	      while (w != 0) {
 800cc60:	ea53 0001 	orrs.w	r0, r3, r1
 800cc64:	d155      	bne.n	800cd12 <__vfprintf+0x5ea>
      if (flags & _FPCONV) {
 800cc66:	f41a 7300 	ands.w	r3, sl, #512	@ 0x200
 800cc6a:	9305      	str	r3, [sp, #20]
         precision = dr->fpr.precision;
 800cc6c:	bf08      	it	eq
 800cc6e:	68a3      	ldreq	r3, [r4, #8]
      width -= (precision + len + strlen(dr->fpr.prefix));
 800cc70:	6860      	ldr	r0, [r4, #4]
         if ((precision -= len)<0) precision = 0;
 800cc72:	bf06      	itte	eq
 800cc74:	eba3 0308 	subeq.w	r3, r3, r8
 800cc78:	ea23 73e3 	biceq.w	r3, r3, r3, asr #31
 800cc7c:	2300      	movne	r3, #0
 800cc7e:	9302      	str	r3, [sp, #8]
      width -= (precision + len + strlen(dr->fpr.prefix));
 800cc80:	f001 fd5e 	bl	800e740 <strlen>
 800cc84:	9b02      	ldr	r3, [sp, #8]
 800cc86:	1a3f      	subs	r7, r7, r0
 800cc88:	4443      	add	r3, r8
 800cc8a:	eba7 0b03 	sub.w	fp, r7, r3
      if (!(flags & _PADZERO)) pre_padding(dr, p);
 800cc8e:	f00a 0301 	and.w	r3, sl, #1
 800cc92:	9304      	str	r3, [sp, #16]
 800cc94:	f240 1301 	movw	r3, #257	@ 0x101
 800cc98:	ea1a 0f03 	tst.w	sl, r3
 800cc9c:	f000 80a5 	beq.w	800cdea <__vfprintf+0x6c2>
      int len = 0, charcount = 0;
 800cca0:	2700      	movs	r7, #0
      char *prefix = dr->fpr.prefix;
 800cca2:	6863      	ldr	r3, [r4, #4]
 800cca4:	4619      	mov	r1, r3
      for (; (c=*prefix++)!=0; charcount++) xputc(dr, c, p);
 800cca6:	460a      	mov	r2, r1
 800cca8:	f812 0b01 	ldrb.w	r0, [r2], #1
 800ccac:	9003      	str	r0, [sp, #12]
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	f040 809d 	bne.w	800cdee <__vfprintf+0x6c6>
 800ccb4:	1afb      	subs	r3, r7, r3
 800ccb6:	18cf      	adds	r7, r1, r3
      pre_padding(dr, p);
 800ccb8:	9b04      	ldr	r3, [sp, #16]
 800ccba:	b98b      	cbnz	r3, 800cce0 <__vfprintf+0x5b8>
 800ccbc:	f41a 7f80 	tst.w	sl, #256	@ 0x100
 800ccc0:	bf0c      	ite	eq
 800ccc2:	2320      	moveq	r3, #32
 800ccc4:	2330      	movne	r3, #48	@ 0x30
 800ccc6:	9306      	str	r3, [sp, #24]
 800ccc8:	46da      	mov	sl, fp
 800ccca:	f1ba 0a01 	subs.w	sl, sl, #1
 800ccce:	f140 8098 	bpl.w	800ce02 <__vfprintf+0x6da>
 800ccd2:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 800ccd6:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ccda:	441f      	add	r7, r3
 800ccdc:	eba2 0b03 	sub.w	fp, r2, r3
      if (flags & _FPCONV) {
 800cce0:	9b05      	ldr	r3, [sp, #20]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f040 80ab 	bne.w	800ce3e <__vfprintf+0x716>
 800cce8:	f8dd a008 	ldr.w	sl, [sp, #8]
	 pr_padding(dr, '0', precision, p);
 800ccec:	f1ba 0a01 	subs.w	sl, sl, #1
 800ccf0:	f080 80c1 	bcs.w	800ce76 <__vfprintf+0x74e>
 800ccf4:	9b02      	ldr	r3, [sp, #8]
 800ccf6:	443b      	add	r3, r7
	 charcount += len;
 800ccf8:	eb08 0703 	add.w	r7, r8, r3
         while (len-- > 0) xputc(dr, buff[len], p);
 800ccfc:	f1b8 0801 	subs.w	r8, r8, #1
 800cd00:	f0c0 80a0 	bcc.w	800ce44 <__vfprintf+0x71c>
 800cd04:	aa08      	add	r2, sp, #32
 800cd06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cd08:	9901      	ldr	r1, [sp, #4]
 800cd0a:	f812 0008 	ldrb.w	r0, [r2, r8]
 800cd0e:	4798      	blx	r3
 800cd10:	e7f4      	b.n	800ccfc <__vfprintf+0x5d4>
		    buff[len++] = dr->hextab[(int)w & 0xf];
 800cd12:	f003 0c0f 	and.w	ip, r3, #15
 800cd16:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
		    w = w >> 4;
 800cd18:	091b      	lsrs	r3, r3, #4
		    buff[len++] = dr->hextab[(int)w & 0xf];
 800cd1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cd1e:	f802 0b01 	strb.w	r0, [r2], #1
		    w = w >> 4;
 800cd22:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		    buff[len++] = dr->hextab[(int)w & 0xf];
 800cd26:	f108 0801 	add.w	r8, r8, #1
		    w = w >> 4;
 800cd2a:	0909      	lsrs	r1, r1, #4
 800cd2c:	e798      	b.n	800cc60 <__vfprintf+0x538>
	   if (flags & _LLSPEC) {
 800cd2e:	f01a 0840 	ands.w	r8, sl, #64	@ 0x40
 800cd32:	d10a      	bne.n	800cd4a <__vfprintf+0x622>
 800cd34:	aa08      	add	r2, sp, #32
	      while (v != 0) {
 800cd36:	b17b      	cbz	r3, 800cd58 <__vfprintf+0x630>
		    buff[len++] = '0' + (v & 7);
 800cd38:	f003 0107 	and.w	r1, r3, #7
 800cd3c:	3130      	adds	r1, #48	@ 0x30
 800cd3e:	f802 1b01 	strb.w	r1, [r2], #1
 800cd42:	f108 0801 	add.w	r8, r8, #1
		    v = v >> 3;
 800cd46:	08db      	lsrs	r3, r3, #3
 800cd48:	e7f5      	b.n	800cd36 <__vfprintf+0x60e>
	      unsigned long long w = dr->llval;
 800cd4a:	e9d4 200e 	ldrd	r2, r0, [r4, #56]	@ 0x38
	      while (w != 0) {
 800cd4e:	ab08      	add	r3, sp, #32
      int len = 0, charcount = 0;
 800cd50:	4688      	mov	r8, r1
	      while (w != 0) {
 800cd52:	ea52 0100 	orrs.w	r1, r2, r0
 800cd56:	d106      	bne.n	800cd66 <__vfprintf+0x63e>
	   if (flags & _VARIANT) dr->fpr.precision--;
 800cd58:	f01a 0f08 	tst.w	sl, #8
 800cd5c:	d083      	beq.n	800cc66 <__vfprintf+0x53e>
 800cd5e:	68a3      	ldr	r3, [r4, #8]
 800cd60:	3b01      	subs	r3, #1
 800cd62:	60a3      	str	r3, [r4, #8]
 800cd64:	e77f      	b.n	800cc66 <__vfprintf+0x53e>
		    buff[len++] = dr->hextab[(int)w & 7];
 800cd66:	f002 0c07 	and.w	ip, r2, #7
 800cd6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
		    w = w >> 3;
 800cd6c:	08d2      	lsrs	r2, r2, #3
		    buff[len++] = dr->hextab[(int)w & 7];
 800cd6e:	f811 100c 	ldrb.w	r1, [r1, ip]
 800cd72:	f803 1b01 	strb.w	r1, [r3], #1
		    w = w >> 3;
 800cd76:	ea42 7240 	orr.w	r2, r2, r0, lsl #29
		    buff[len++] = dr->hextab[(int)w & 7];
 800cd7a:	f108 0801 	add.w	r8, r8, #1
		    w = w >> 3;
 800cd7e:	08c0      	lsrs	r0, r0, #3
 800cd80:	e7e7      	b.n	800cd52 <__vfprintf+0x62a>
	   if (flags & _LLSPEC) {
 800cd82:	f01a 0840 	ands.w	r8, sl, #64	@ 0x40
 800cd86:	d10f      	bne.n	800cda8 <__vfprintf+0x680>
 800cd88:	aa08      	add	r2, sp, #32
		    buff[len++] = '0' + (char)(v % 10);
 800cd8a:	210a      	movs	r1, #10
              while (v != 0) {
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f43f af6a 	beq.w	800cc66 <__vfprintf+0x53e>
		    buff[len++] = '0' + (char)(v % 10);
 800cd92:	fbb3 f0f1 	udiv	r0, r3, r1
 800cd96:	fb01 3310 	mls	r3, r1, r0, r3
 800cd9a:	3330      	adds	r3, #48	@ 0x30
 800cd9c:	f802 3b01 	strb.w	r3, [r2], #1
 800cda0:	f108 0801 	add.w	r8, r8, #1
		    v = v / 10;
 800cda4:	4603      	mov	r3, r0
 800cda6:	e7f1      	b.n	800cd8c <__vfprintf+0x664>
	      unsigned long long w = dr->llval;
 800cda8:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
	      while (w != 0) {
 800cdac:	f10d 0b20 	add.w	fp, sp, #32
      int len = 0, charcount = 0;
 800cdb0:	f04f 0800 	mov.w	r8, #0
	      while (w != 0) {
 800cdb4:	ea50 0301 	orrs.w	r3, r0, r1
 800cdb8:	f43f af55 	beq.w	800cc66 <__vfprintf+0x53e>
		    buff[len++] = '0' + (char)(w % 10);
 800cdbc:	220a      	movs	r2, #10
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f002 f9c8 	bl	800f154 <__aeabi_uldivmod>
 800cdc4:	3230      	adds	r2, #48	@ 0x30
 800cdc6:	f80b 2b01 	strb.w	r2, [fp], #1
 800cdca:	f108 0801 	add.w	r8, r8, #1
                    w = w / 10;
 800cdce:	e7f1      	b.n	800cdb4 <__vfprintf+0x68c>
      if (!(flags & _PADZERO)) pre_padding(dr, p);
 800cdd0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cdd2:	9901      	ldr	r1, [sp, #4]
 800cdd4:	2020      	movs	r0, #32
 800cdd6:	4798      	blx	r3
 800cdd8:	3f01      	subs	r7, #1
 800cdda:	d5f9      	bpl.n	800cdd0 <__vfprintf+0x6a8>
 800cddc:	ea2b 77eb 	bic.w	r7, fp, fp, asr #31
 800cde0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cde4:	eba3 0b07 	sub.w	fp, r3, r7
 800cde8:	e75b      	b.n	800cca2 <__vfprintf+0x57a>
      width -= (precision + len + strlen(dr->fpr.prefix));
 800cdea:	465f      	mov	r7, fp
 800cdec:	e7f4      	b.n	800cdd8 <__vfprintf+0x6b0>
 800cdee:	e9cd 3206 	strd	r3, r2, [sp, #24]
      for (; (c=*prefix++)!=0; charcount++) xputc(dr, c, p);
 800cdf2:	9901      	ldr	r1, [sp, #4]
 800cdf4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cdf6:	9803      	ldr	r0, [sp, #12]
 800cdf8:	4798      	blx	r3
 800cdfa:	9a07      	ldr	r2, [sp, #28]
 800cdfc:	9b06      	ldr	r3, [sp, #24]
 800cdfe:	4611      	mov	r1, r2
 800ce00:	e751      	b.n	800cca6 <__vfprintf+0x57e>
      pre_padding(dr, p);
 800ce02:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ce04:	9901      	ldr	r1, [sp, #4]
 800ce06:	9806      	ldr	r0, [sp, #24]
 800ce08:	4798      	blx	r3
 800ce0a:	e75e      	b.n	800ccca <__vfprintf+0x5a2>
	     switch (c = buff[i]) {
 800ce0c:	9b03      	ldr	r3, [sp, #12]
 800ce0e:	aa08      	add	r2, sp, #32
 800ce10:	5cd0      	ldrb	r0, [r2, r3]
 800ce12:	283c      	cmp	r0, #60	@ 0x3c
 800ce14:	d00b      	beq.n	800ce2e <__vfprintf+0x706>
 800ce16:	283e      	cmp	r0, #62	@ 0x3e
 800ce18:	d027      	beq.n	800ce6a <__vfprintf+0x742>
	      	  xputc(dr, c, p);
 800ce1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ce1c:	9901      	ldr	r1, [sp, #4]
 800ce1e:	4798      	blx	r3
	          charcount++;
 800ce20:	3701      	adds	r7, #1
	          break;
 800ce22:	e009      	b.n	800ce38 <__vfprintf+0x710>
		  pr_padding(dr, '0', dr->fpr.before_dot, p);
 800ce24:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ce26:	9901      	ldr	r1, [sp, #4]
 800ce28:	2030      	movs	r0, #48	@ 0x30
 800ce2a:	3701      	adds	r7, #1
 800ce2c:	4798      	blx	r3
 800ce2e:	68e3      	ldr	r3, [r4, #12]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	60e3      	str	r3, [r4, #12]
 800ce36:	daf5      	bge.n	800ce24 <__vfprintf+0x6fc>
         for (i = 0; i<len; i++) {
 800ce38:	9b03      	ldr	r3, [sp, #12]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	9303      	str	r3, [sp, #12]
 800ce3e:	9b03      	ldr	r3, [sp, #12]
 800ce40:	4598      	cmp	r8, r3
 800ce42:	d1e3      	bne.n	800ce0c <__vfprintf+0x6e4>
      post_padding(dr, p);
 800ce44:	9b04      	ldr	r3, [sp, #16]
 800ce46:	bb3b      	cbnz	r3, 800ce98 <__vfprintf+0x770>
               charcount += printf_display(p, ch, dr, v);
 800ce48:	44b9      	add	r9, r7
               continue;
 800ce4a:	e5a4      	b.n	800c996 <__vfprintf+0x26e>
 800ce4c:	0800f621 	.word	0x0800f621
 800ce50:	0800f7eb 	.word	0x0800f7eb
 800ce54:	0800f4c9 	.word	0x0800f4c9
 800ce58:	0800f7ef 	.word	0x0800f7ef
 800ce5c:	0800f7ed 	.word	0x0800f7ed
	       	  pr_padding(dr, '0', dr->fpr.after_dot, p);
 800ce60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ce62:	9901      	ldr	r1, [sp, #4]
 800ce64:	2030      	movs	r0, #48	@ 0x30
 800ce66:	3701      	adds	r7, #1
 800ce68:	4798      	blx	r3
 800ce6a:	6923      	ldr	r3, [r4, #16]
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	6123      	str	r3, [r4, #16]
 800ce72:	daf5      	bge.n	800ce60 <__vfprintf+0x738>
 800ce74:	e7e0      	b.n	800ce38 <__vfprintf+0x710>
	 pr_padding(dr, '0', precision, p);
 800ce76:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ce78:	9901      	ldr	r1, [sp, #4]
 800ce7a:	2030      	movs	r0, #48	@ 0x30
 800ce7c:	4798      	blx	r3
 800ce7e:	e735      	b.n	800ccec <__vfprintf+0x5c4>
      post_padding(dr, p);
 800ce80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ce82:	9901      	ldr	r1, [sp, #4]
 800ce84:	2020      	movs	r0, #32
 800ce86:	4798      	blx	r3
 800ce88:	f1b8 0801 	subs.w	r8, r8, #1
 800ce8c:	d5f8      	bpl.n	800ce80 <__vfprintf+0x758>
 800ce8e:	f1bb 0f00 	cmp.w	fp, #0
 800ce92:	bfa8      	it	ge
 800ce94:	445f      	addge	r7, fp
 800ce96:	e7d7      	b.n	800ce48 <__vfprintf+0x720>
 800ce98:	46d8      	mov	r8, fp
 800ce9a:	e7f5      	b.n	800ce88 <__vfprintf+0x760>

0800ce9c <sprintf>:


int sprintf (char *buff, const char *fmt, ...)
{
 800ce9c:	b40e      	push	{r1, r2, r3}
 800ce9e:	b510      	push	{r4, lr}
 800cea0:	b093      	sub	sp, #76	@ 0x4c
 800cea2:	aa15      	add	r2, sp, #84	@ 0x54
      va_list a;
      int length;
      printf_display_rec dr;
      va_start(a, fmt);
      sf.ptr = buff;
      dr.putc = _sputc;
 800cea4:	4b0a      	ldr	r3, [pc, #40]	@ (800ced0 <sprintf+0x34>)
{
 800cea6:	f852 1b04 	ldr.w	r1, [r2], #4
      dr.putc = _sputc;
 800ceaa:	930b      	str	r3, [sp, #44]	@ 0x2c
      dr.ferror = _serror;
 800ceac:	4b09      	ldr	r3, [pc, #36]	@ (800ced4 <sprintf+0x38>)
 800ceae:	930c      	str	r3, [sp, #48]	@ 0x30
      sf.ptr = buff;
 800ceb0:	e9cd 0200 	strd	r0, r2, [sp]
      dr.fn = 0;
 800ceb4:	2400      	movs	r4, #0
      length = __vfprintf((char *)&sf, fmt, a, &dr);
 800ceb6:	ab02      	add	r3, sp, #8
 800ceb8:	4668      	mov	r0, sp
      dr.fn = 0;
 800ceba:	940a      	str	r4, [sp, #40]	@ 0x28
      length = __vfprintf((char *)&sf, fmt, a, &dr);
 800cebc:	f7ff fc34 	bl	800c728 <__vfprintf>
      char *op = sf->ptr;
 800cec0:	9b00      	ldr	r3, [sp, #0]
      int r = *op++ = ch;
 800cec2:	701c      	strb	r4, [r3, #0]
      _sputc(0, (char *)&sf);
      va_end(a);
      return length;
}
 800cec4:	b013      	add	sp, #76	@ 0x4c
 800cec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceca:	b003      	add	sp, #12
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	0800c719 	.word	0x0800c719
 800ced4:	0800c725 	.word	0x0800c725

0800ced8 <vsprintf>:


int vsprintf (char *buff, const char *fmt, va_list a)
{
 800ced8:	b510      	push	{r4, lr}
 800ceda:	b092      	sub	sp, #72	@ 0x48
      StringOutputFile sf;
      int length;
      printf_display_rec dr;
      dr.putc = _sputc;
 800cedc:	4b07      	ldr	r3, [pc, #28]	@ (800cefc <vsprintf+0x24>)
 800cede:	930b      	str	r3, [sp, #44]	@ 0x2c
      dr.ferror = _serror;
 800cee0:	4b07      	ldr	r3, [pc, #28]	@ (800cf00 <vsprintf+0x28>)
 800cee2:	930c      	str	r3, [sp, #48]	@ 0x30
      dr.fn = 0;
 800cee4:	2400      	movs	r4, #0
      sf.ptr = buff;
 800cee6:	9001      	str	r0, [sp, #4]
      length = __vfprintf((char *)&sf, fmt, a, &dr);
 800cee8:	ab02      	add	r3, sp, #8
 800ceea:	a801      	add	r0, sp, #4
      dr.fn = 0;
 800ceec:	940a      	str	r4, [sp, #40]	@ 0x28
      length = __vfprintf((char *)&sf, fmt, a, &dr);
 800ceee:	f7ff fc1b 	bl	800c728 <__vfprintf>
      char *op = sf->ptr;
 800cef2:	9b01      	ldr	r3, [sp, #4]
      int r = *op++ = ch;
 800cef4:	701c      	strb	r4, [r3, #0]
      _sputc(0, (char *)&sf);
      return length;
}
 800cef6:	b012      	add	sp, #72	@ 0x48
 800cef8:	bd10      	pop	{r4, pc}
 800cefa:	bf00      	nop
 800cefc:	0800c719 	.word	0x0800c719
 800cf00:	0800c725 	.word	0x0800c725

0800cf04 <random_display>:
      reg565(0xFFFFFF)
};


void random_display (void)
{
 800cf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      unsigned short i = 0;
      unsigned short x_size = maxx;
 800cf08:	4b28      	ldr	r3, [pc, #160]	@ (800cfac <random_display+0xa8>)
      unsigned short y_size = maxy;
      unsigned short num_pixels = 0;
      short r_x0,r_x1,r_y0,r_y1;
      unsigned short a_color_index[8];
      for (i=0;i<8;i++) {
          a_color_index[i] = a_color[i];
 800cf0a:	4929      	ldr	r1, [pc, #164]	@ (800cfb0 <random_display+0xac>)
      unsigned short x_size = maxx;
 800cf0c:	881e      	ldrh	r6, [r3, #0]
      unsigned short y_size = maxy;
 800cf0e:	4b29      	ldr	r3, [pc, #164]	@ (800cfb4 <random_display+0xb0>)
 800cf10:	881f      	ldrh	r7, [r3, #0]
          a_color_index[i] = a_color[i];
 800cf12:	4b29      	ldr	r3, [pc, #164]	@ (800cfb8 <random_display+0xb4>)
{
 800cf14:	b087      	sub	sp, #28
          a_color_index[i] = a_color[i];
 800cf16:	f44f 12f8 	mov.w	r2, #2031616	@ 0x1f0000
 800cf1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf1e:	f06f 031f 	mvn.w	r3, #31
 800cf22:	e9cd 1304 	strd	r1, r3, [sp, #16]
      for (i=0;i<1000;i++) {
          /* Reload IWDG counter */
          IWDG_ReloadCounter();      	
          set_color(a_color_index[i & 7]);
          /* Calculate random positions */
          r_x0 = rand() % x_size - x_size / 2;
 800cf26:	ea4f 0b56 	mov.w	fp, r6, lsr #1
          r_y0 = rand() % y_size - y_size / 2;
 800cf2a:	ea4f 0a57 	mov.w	sl, r7, lsr #1
 800cf2e:	f04f 0800 	mov.w	r8, #0
          IWDG_ReloadCounter();      	
 800cf32:	f000 fe85 	bl	800dc40 <IWDG_ReloadCounter>
          set_color(a_color_index[i & 7]);
 800cf36:	aa06      	add	r2, sp, #24
 800cf38:	f008 0307 	and.w	r3, r8, #7
 800cf3c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
      for (i=0;i<1000;i++) {
 800cf40:	f108 0801 	add.w	r8, r8, #1
          set_color(a_color_index[i & 7]);
 800cf44:	f833 0c10 	ldrh.w	r0, [r3, #-16]
 800cf48:	f7fd ff0c 	bl	800ad64 <set_color>
          r_x0 = rand() % x_size - x_size / 2;
 800cf4c:	f001 f8b8 	bl	800e0c0 <rand>
 800cf50:	fb90 f3f6 	sdiv	r3, r0, r6
 800cf54:	fb03 0416 	mls	r4, r3, r6, r0
          r_y0 = rand() % y_size - y_size / 2;
 800cf58:	f001 f8b2 	bl	800e0c0 <rand>
 800cf5c:	fb90 f3f7 	sdiv	r3, r0, r7
 800cf60:	fb03 0517 	mls	r5, r3, r7, r0
          r_x1 = r_x0 + rand() % x_size;
 800cf64:	f001 f8ac 	bl	800e0c0 <rand>
 800cf68:	4681      	mov	r9, r0
          r_y1 = r_y0 + rand() % y_size;
 800cf6a:	f001 f8a9 	bl	800e0c0 <rand>
          r_x1 = r_x0 + rand() % x_size;
 800cf6e:	fb99 f1f6 	sdiv	r1, r9, r6
          r_x0 = rand() % x_size - x_size / 2;
 800cf72:	eba4 040b 	sub.w	r4, r4, fp
          r_x1 = r_x0 + rand() % x_size;
 800cf76:	fb06 9211 	mls	r2, r6, r1, r9
          r_y0 = rand() % y_size - y_size / 2;
 800cf7a:	eba5 050a 	sub.w	r5, r5, sl
          LCD_Fill(r_x0, r_y0, r_x1, r_y1,foreground_color);
 800cf7e:	490f      	ldr	r1, [pc, #60]	@ (800cfbc <random_display+0xb8>)
          r_y1 = r_y0 + rand() % y_size;
 800cf80:	fb90 f3f7 	sdiv	r3, r0, r7
          r_x0 = rand() % x_size - x_size / 2;
 800cf84:	b2a4      	uxth	r4, r4
          r_y0 = rand() % y_size - y_size / 2;
 800cf86:	b2ad      	uxth	r5, r5
          r_y1 = r_y0 + rand() % y_size;
 800cf88:	fb03 0017 	mls	r0, r3, r7, r0
          LCD_Fill(r_x0, r_y0, r_x1, r_y1,foreground_color);
 800cf8c:	8809      	ldrh	r1, [r1, #0]
 800cf8e:	9100      	str	r1, [sp, #0]
          r_y1 = r_y0 + rand() % y_size;
 800cf90:	182b      	adds	r3, r5, r0
          r_x1 = r_x0 + rand() % x_size;
 800cf92:	4422      	add	r2, r4
          LCD_Fill(r_x0, r_y0, r_x1, r_y1,foreground_color);
 800cf94:	b21b      	sxth	r3, r3
 800cf96:	b212      	sxth	r2, r2
 800cf98:	b229      	sxth	r1, r5
 800cf9a:	b220      	sxth	r0, r4
 800cf9c:	f7fd fec2 	bl	800ad24 <LCD_Fill>
      for (i=0;i<1000;i++) {
 800cfa0:	f5b8 7f7a 	cmp.w	r8, #1000	@ 0x3e8
 800cfa4:	d1c5      	bne.n	800cf32 <random_display+0x2e>
          if (r_y1 >= y_size) r_y1 = y_size - 1;
          if (r_x0 < 0) r_x0 = 0;
          if (r_y1 < 0) r_y1 = 0;
          num_pixels += (r_x1 - r_x0) * (r_y1 - r_y0);
      }
}
 800cfa6:	b007      	add	sp, #28
 800cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfac:	20002d48 	.word	0x20002d48
 800cfb0:	f81ff800 	.word	0xf81ff800
 800cfb4:	20002d46 	.word	0x20002d46
 800cfb8:	07ff07e0 	.word	0x07ff07e0
 800cfbc:	20002d4c 	.word	0x20002d4c

0800cfc0 <TIM1_UP_TIM10_IRQHandler>:
      ir_time = 0;
}


void TIM1_UP_TIM10_IRQHandler (void)
{
 800cfc0:	b508      	push	{r3, lr}
      if (TIM_GetITStatus(TIM1,TIM_IT_Update) == SET) {
 800cfc2:	4810      	ldr	r0, [pc, #64]	@ (800d004 <TIM1_UP_TIM10_IRQHandler+0x44>)
 800cfc4:	2101      	movs	r1, #1
 800cfc6:	f000 fedb 	bl	800dd80 <TIM_GetITStatus>
 800cfca:	2801      	cmp	r0, #1
 800cfcc:	d10e      	bne.n	800cfec <TIM1_UP_TIM10_IRQHandler+0x2c>
	 if (remocon_status & 0x80) {
 800cfce:	490e      	ldr	r1, [pc, #56]	@ (800d008 <TIM1_UP_TIM10_IRQHandler+0x48>)
 800cfd0:	f991 3000 	ldrsb.w	r3, [r1]
 800cfd4:	780a      	ldrb	r2, [r1, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	da08      	bge.n	800cfec <TIM1_UP_TIM10_IRQHandler+0x2c>
	    remocon_status &= ~(0x10);
 800cfda:	f002 03ef 	and.w	r3, r2, #239	@ 0xef
	    if ((remocon_status & 0x0F) == 0x00) remocon_status |= 1 << 6;
 800cfde:	f012 020f 	ands.w	r2, r2, #15
 800cfe2:	d009      	beq.n	800cff8 <TIM1_UP_TIM10_IRQHandler+0x38>
	    if ((remocon_status & 0x0F) < 14) {
 800cfe4:	2a0d      	cmp	r2, #13
 800cfe6:	d80a      	bhi.n	800cffe <TIM1_UP_TIM10_IRQHandler+0x3e>
	       remocon_status++;
 800cfe8:	3301      	adds	r3, #1
	    } else {
	       remocon_status &= ~(1 << 7);
	       remocon_status &= 0xF0;
 800cfea:	700b      	strb	r3, [r1, #0]
	    }
	 }
      }
      TIM_ClearITPendingBit(TIM1,TIM_IT_Update);
}
 800cfec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      TIM_ClearITPendingBit(TIM1,TIM_IT_Update);
 800cff0:	4804      	ldr	r0, [pc, #16]	@ (800d004 <TIM1_UP_TIM10_IRQHandler+0x44>)
 800cff2:	2101      	movs	r1, #1
 800cff4:	f000 becf 	b.w	800dd96 <TIM_ClearITPendingBit>
	    if ((remocon_status & 0x0F) < 14) {
 800cff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cffc:	e7f4      	b.n	800cfe8 <TIM1_UP_TIM10_IRQHandler+0x28>
	       remocon_status &= 0xF0;
 800cffe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d002:	e7f2      	b.n	800cfea <TIM1_UP_TIM10_IRQHandler+0x2a>
 800d004:	40010000 	.word	0x40010000
 800d008:	20002d56 	.word	0x20002d56

0800d00c <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler (void)
{
 800d00c:	b570      	push	{r4, r5, r6, lr}
      if (TIM_GetITStatus(TIM1,TIM_IT_CC1) == SET) {
 800d00e:	482f      	ldr	r0, [pc, #188]	@ (800d0cc <TIM1_CC_IRQHandler+0xc0>)
 800d010:	2102      	movs	r1, #2
 800d012:	f000 feb5 	bl	800dd80 <TIM_GetITStatus>
 800d016:	2801      	cmp	r0, #1
 800d018:	d110      	bne.n	800d03c <TIM1_CC_IRQHandler+0x30>
	 if (RDATA) {
 800d01a:	4b2d      	ldr	r3, [pc, #180]	@ (800d0d0 <TIM1_CC_IRQHandler+0xc4>)
 800d01c:	4c2d      	ldr	r4, [pc, #180]	@ (800d0d4 <TIM1_CC_IRQHandler+0xc8>)
 800d01e:	f8d3 5220 	ldr.w	r5, [r3, #544]	@ 0x220
 800d022:	b18d      	cbz	r5, 800d048 <TIM1_CC_IRQHandler+0x3c>
	    TIM_OC1PolarityConfig(TIM1,TIM_ICPolarity_Falling);				// CC1P = 1
 800d024:	4829      	ldr	r0, [pc, #164]	@ (800d0cc <TIM1_CC_IRQHandler+0xc0>)
 800d026:	2102      	movs	r1, #2
 800d028:	f000 fea0 	bl	800dd6c <TIM_OC1PolarityConfig>
	    TIM_SetCounter(TIM1,0);
 800d02c:	4827      	ldr	r0, [pc, #156]	@ (800d0cc <TIM1_CC_IRQHandler+0xc0>)
 800d02e:	2100      	movs	r1, #0
 800d030:	f000 fe9a 	bl	800dd68 <TIM_SetCounter>
	    remocon_status |= 0x10;
 800d034:	7823      	ldrb	r3, [r4, #0]
 800d036:	f043 0310 	orr.w	r3, r3, #16
		     remocon_status |= 1 << 7;
		     remote_count = 0;
		  }
	       }
	    }
	    remocon_status &= ~(1 << 4);
 800d03a:	7023      	strb	r3, [r4, #0]
	 }
      }
      TIM_ClearITPendingBit(TIM1,TIM_IT_CC1);
}
 800d03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      TIM_ClearITPendingBit(TIM1,TIM_IT_CC1);
 800d040:	4822      	ldr	r0, [pc, #136]	@ (800d0cc <TIM1_CC_IRQHandler+0xc0>)
 800d042:	2102      	movs	r1, #2
 800d044:	f000 bea7 	b.w	800dd96 <TIM_ClearITPendingBit>
	    remocon_time = TIM_GetCapture1(TIM1);
 800d048:	4820      	ldr	r0, [pc, #128]	@ (800d0cc <TIM1_CC_IRQHandler+0xc0>)
 800d04a:	4e23      	ldr	r6, [pc, #140]	@ (800d0d8 <TIM1_CC_IRQHandler+0xcc>)
 800d04c:	f000 fe96 	bl	800dd7c <TIM_GetCapture1>
	    TIM_OC1PolarityConfig(TIM1,TIM_ICPolarity_Rising);				// CC1P = 0
 800d050:	4629      	mov	r1, r5
	    remocon_time = TIM_GetCapture1(TIM1);
 800d052:	8030      	strh	r0, [r6, #0]
	    TIM_OC1PolarityConfig(TIM1,TIM_ICPolarity_Rising);				// CC1P = 0
 800d054:	481d      	ldr	r0, [pc, #116]	@ (800d0cc <TIM1_CC_IRQHandler+0xc0>)
 800d056:	f000 fe89 	bl	800dd6c <TIM_OC1PolarityConfig>
	    if (remocon_status & 0x10) {
 800d05a:	7822      	ldrb	r2, [r4, #0]
 800d05c:	06d3      	lsls	r3, r2, #27
 800d05e:	d50c      	bpl.n	800d07a <TIM1_CC_IRQHandler+0x6e>
		  if ((remocon_time > 300) && (remocon_time < 800)) {			// 560us
 800d060:	8833      	ldrh	r3, [r6, #0]
 	       if (remocon_status & 0x80) {
 800d062:	0616      	lsls	r6, r2, #24
 800d064:	d526      	bpl.n	800d0b4 <TIM1_CC_IRQHandler+0xa8>
		  if ((remocon_time > 300) && (remocon_time < 800)) {			// 560us
 800d066:	f46f 7096 	mvn.w	r0, #300	@ 0x12c
 800d06a:	1819      	adds	r1, r3, r0
 800d06c:	f5b1 7ff9 	cmp.w	r1, #498	@ 0x1f2
 800d070:	d807      	bhi.n	800d082 <TIM1_CC_IRQHandler+0x76>
		     remocon_recv <<= 1;
 800d072:	4a1a      	ldr	r2, [pc, #104]	@ (800d0dc <TIM1_CC_IRQHandler+0xd0>)
 800d074:	6813      	ldr	r3, [r2, #0]
 800d076:	005b      	lsls	r3, r3, #1
			remocon_recv |= 1;
 800d078:	6013      	str	r3, [r2, #0]
	    remocon_status &= ~(1 << 4);
 800d07a:	7823      	ldrb	r3, [r4, #0]
 800d07c:	f023 0310 	bic.w	r3, r3, #16
 800d080:	e7db      	b.n	800d03a <TIM1_CC_IRQHandler+0x2e>
		     if ((remocon_time > 1400) && (remocon_time < 1800)) {		// 1680us
 800d082:	f46f 61af 	mvn.w	r1, #1400	@ 0x578
 800d086:	1859      	adds	r1, r3, r1
 800d088:	f5b1 7fc7 	cmp.w	r1, #398	@ 0x18e
 800d08c:	d805      	bhi.n	800d09a <TIM1_CC_IRQHandler+0x8e>
			remocon_recv |= 1;
 800d08e:	4a13      	ldr	r2, [pc, #76]	@ (800d0dc <TIM1_CC_IRQHandler+0xd0>)
			remocon_recv <<= 1;
 800d090:	6813      	ldr	r3, [r2, #0]
 800d092:	005b      	lsls	r3, r3, #1
			remocon_recv |= 1;
 800d094:	f043 0301 	orr.w	r3, r3, #1
 800d098:	e7ee      	b.n	800d078 <TIM1_CC_IRQHandler+0x6c>
		        if ((remocon_time > 2200) && (remocon_time < 2600)) {		// 2500us = 2.5ms
 800d09a:	f6a3 0399 	subw	r3, r3, #2201	@ 0x899
 800d09e:	f5b3 7fc7 	cmp.w	r3, #398	@ 0x18e
 800d0a2:	d8ea      	bhi.n	800d07a <TIM1_CC_IRQHandler+0x6e>
			   remote_count++;
 800d0a4:	490e      	ldr	r1, [pc, #56]	@ (800d0e0 <TIM1_CC_IRQHandler+0xd4>)
 800d0a6:	780b      	ldrb	r3, [r1, #0]
			   remocon_status &= 0xF0;
 800d0a8:	f022 020f 	bic.w	r2, r2, #15
			   remote_count++;
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	700b      	strb	r3, [r1, #0]
			   remocon_status &= 0xF0;
 800d0b0:	7022      	strb	r2, [r4, #0]
 800d0b2:	e7e2      	b.n	800d07a <TIM1_CC_IRQHandler+0x6e>
		  if ((remocon_time > 4200) && (remocon_time < 4700)) {	// 4500us = 4.5ms
 800d0b4:	f5a3 5383 	sub.w	r3, r3, #4192	@ 0x1060
 800d0b8:	3b09      	subs	r3, #9
 800d0ba:	f5b3 7ff9 	cmp.w	r3, #498	@ 0x1f2
		     remote_count = 0;
 800d0be:	bf9f      	itttt	ls
 800d0c0:	4b07      	ldrls	r3, [pc, #28]	@ (800d0e0 <TIM1_CC_IRQHandler+0xd4>)
		     remocon_status |= 1 << 7;
 800d0c2:	f062 027f 	ornls	r2, r2, #127	@ 0x7f
 800d0c6:	7022      	strbls	r2, [r4, #0]
		     remote_count = 0;
 800d0c8:	701d      	strbls	r5, [r3, #0]
 800d0ca:	e7d6      	b.n	800d07a <TIM1_CC_IRQHandler+0x6e>
 800d0cc:	40010000 	.word	0x40010000
 800d0d0:	42400000 	.word	0x42400000
 800d0d4:	20002d56 	.word	0x20002d56
 800d0d8:	20002d54 	.word	0x20002d54
 800d0dc:	20002d50 	.word	0x20002d50
 800d0e0:	20002d57 	.word	0x20002d57
 800d0e4:	00000000 	.word	0x00000000

0800d0e8 <cal_temperature>:

}


short cal_temperature (unsigned short adc_data)
{
 800d0e8:	ee07 0a90 	vmov	s15, r0
      unsigned int adcx;
      short result;
      double temperate;
      adcx = adc_data;
      temperate = (float)adcx * (3.3 / 4096);
 800d0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 800d0f0:	b508      	push	{r3, lr}
      temperate = (float)adcx * (3.3 / 4096);
 800d0f2:	ee17 0a90 	vmov	r0, s15
 800d0f6:	f001 fcf3 	bl	800eae0 <__aeabi_f2d>
 800d0fa:	a30f      	add	r3, pc, #60	@ (adr r3, 800d138 <cal_temperature+0x50>)
 800d0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d100:	f001 fd46 	bl	800eb90 <__aeabi_dmul>
      temperate = (temperate - 0.76) / 0.0025 + (25 + T_OFFSET);
 800d104:	a30e      	add	r3, pc, #56	@ (adr r3, 800d140 <cal_temperature+0x58>)
 800d106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10a:	f001 fb89 	bl	800e820 <__aeabi_dsub>
 800d10e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d148 <cal_temperature+0x60>)
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	f001 fe66 	bl	800ede4 <__aeabi_ddiv>
 800d118:	4b05      	ldr	r3, [pc, #20]	@ (800d130 <cal_temperature+0x48>)
 800d11a:	2200      	movs	r2, #0
 800d11c:	f001 fb82 	bl	800e824 <__adddf3>
      result = temperate * 100;
 800d120:	4b04      	ldr	r3, [pc, #16]	@ (800d134 <cal_temperature+0x4c>)
 800d122:	2200      	movs	r2, #0
 800d124:	f001 fd34 	bl	800eb90 <__aeabi_dmul>
 800d128:	f001 ffcc 	bl	800f0c4 <__aeabi_d2iz>
      return result;
}
 800d12c:	b200      	sxth	r0, r0
 800d12e:	bd08      	pop	{r3, pc}
 800d130:	402e0000 	.word	0x402e0000
 800d134:	40590000 	.word	0x40590000
 800d138:	66666666 	.word	0x66666666
 800d13c:	3f4a6666 	.word	0x3f4a6666
 800d140:	851eb852 	.word	0x851eb852
 800d144:	3fe851eb 	.word	0x3fe851eb
 800d148:	47ae147b 	.word	0x47ae147b
 800d14c:	3f647ae1 	.word	0x3f647ae1

0800d150 <ADC_Config>:


void ADC_Config (void)
{
 800d150:	b5f0      	push	{r4, r5, r6, r7, lr}
      ADC_CommonInitTypeDef ADC_CommonInitStructure;
      ADC_InitTypeDef ADC_InitStruct;
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF,ENABLE);
 800d152:	2101      	movs	r1, #1
{
 800d154:	b08b      	sub	sp, #44	@ 0x2c
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF,ENABLE);
 800d156:	2020      	movs	r0, #32
 800d158:	f000 fdbe 	bl	800dcd8 <RCC_AHB1PeriphClockCmd>
      GPIO_Init_Pin(GPIOF,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_ADC);
 800d15c:	2303      	movs	r3, #3
 800d15e:	461a      	mov	r2, r3
 800d160:	483c      	ldr	r0, [pc, #240]	@ (800d254 <ADC_Config+0x104>)
      ADC_InitStruct.ADC_ScanConvMode = ENABLE;
      ADC_InitStruct.ADC_ContinuousConvMode = DISABLE;
      ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
      ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
      ADC_InitStruct.ADC_NbrOfConversion = 1;
      ADC_Init(ADC1,&ADC_InitStruct);
 800d162:	4f3d      	ldr	r7, [pc, #244]	@ (800d258 <ADC_Config+0x108>)
      ADC_Init(ADC2,&ADC_InitStruct);
 800d164:	4e3d      	ldr	r6, [pc, #244]	@ (800d25c <ADC_Config+0x10c>)
      GPIO_Init_Pin(GPIOF,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_ADC);
 800d166:	2180      	movs	r1, #128	@ 0x80
 800d168:	f000 fc82 	bl	800da70 <GPIO_Init_Pin>
      GPIO_Init_Pin(GPIOA,GPIO_Pin_5,GPIO_Speed_100MHz,GPIO_Mode_ADC);
 800d16c:	2303      	movs	r3, #3
 800d16e:	461a      	mov	r2, r3
 800d170:	483b      	ldr	r0, [pc, #236]	@ (800d260 <ADC_Config+0x110>)
 800d172:	2120      	movs	r1, #32
 800d174:	f000 fc7c 	bl	800da70 <GPIO_Init_Pin>
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3,ENABLE);
 800d178:	2101      	movs	r1, #1
 800d17a:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 800d17e:	f000 fdcf 	bl	800dd20 <RCC_APB2PeriphClockCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1,ENABLE);
 800d182:	2101      	movs	r1, #1
 800d184:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d188:	f000 fde2 	bl	800dd50 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1,DISABLE);
 800d18c:	2100      	movs	r1, #0
 800d18e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d192:	f000 fddd 	bl	800dd50 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2,ENABLE);
 800d196:	2101      	movs	r1, #1
 800d198:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d19c:	f000 fdd8 	bl	800dd50 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2,DISABLE);
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d1a6:	f000 fdd3 	bl	800dd50 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3,ENABLE);
 800d1aa:	2101      	movs	r1, #1
 800d1ac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d1b0:	f000 fdce 	bl	800dd50 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3,DISABLE);
 800d1b4:	2100      	movs	r1, #0
 800d1b6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d1ba:	f000 fdc9 	bl	800dd50 <RCC_APB2PeriphResetCmd>
      ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;
 800d1be:	2500      	movs	r5, #0
 800d1c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
      ADC_CommonInit(&ADC_CommonInitStructure);
 800d1c4:	4668      	mov	r0, sp
      ADC_InitStruct.ADC_ScanConvMode = ENABLE;
 800d1c6:	2401      	movs	r4, #1
      ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;
 800d1c8:	e9cd 5300 	strd	r5, r3, [sp]
      ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800d1cc:	e9cd 5502 	strd	r5, r5, [sp, #8]
      ADC_CommonInit(&ADC_CommonInitStructure);
 800d1d0:	f000 faba 	bl	800d748 <ADC_CommonInit>
      ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
 800d1d4:	9504      	str	r5, [sp, #16]
      ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800d1d6:	9506      	str	r5, [sp, #24]
      ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 800d1d8:	9508      	str	r5, [sp, #32]
      ADC_Init(ADC1,&ADC_InitStruct);
 800d1da:	a904      	add	r1, sp, #16
      ADC_Init(ADC3,&ADC_InitStruct);
 800d1dc:	4d21      	ldr	r5, [pc, #132]	@ (800d264 <ADC_Config+0x114>)
      ADC_InitStruct.ADC_ScanConvMode = ENABLE;
 800d1de:	f8ad 4014 	strh.w	r4, [sp, #20]
      ADC_Init(ADC1,&ADC_InitStruct);
 800d1e2:	4638      	mov	r0, r7
      ADC_InitStruct.ADC_NbrOfConversion = 1;
 800d1e4:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
      ADC_Init(ADC1,&ADC_InitStruct);
 800d1e8:	f000 fa88 	bl	800d6fc <ADC_Init>
      ADC_Init(ADC2,&ADC_InitStruct);
 800d1ec:	a904      	add	r1, sp, #16
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f000 fa84 	bl	800d6fc <ADC_Init>
      ADC_Init(ADC3,&ADC_InitStruct);
 800d1f4:	a904      	add	r1, sp, #16
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	f000 fa80 	bl	800d6fc <ADC_Init>
      ADC_TempSensorVrefintCmd(ENABLE);
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f000 fac1 	bl	800d784 <ADC_TempSensorVrefintCmd>
      ADC_Cmd(ADC1,ENABLE);
 800d202:	4621      	mov	r1, r4
 800d204:	4638      	mov	r0, r7
 800d206:	f000 fab3 	bl	800d770 <ADC_Cmd>
      ADC_Cmd(ADC2,ENABLE);
 800d20a:	4621      	mov	r1, r4
 800d20c:	4630      	mov	r0, r6
 800d20e:	f000 faaf 	bl	800d770 <ADC_Cmd>
      ADC_Cmd(ADC3,ENABLE);
 800d212:	4621      	mov	r1, r4
 800d214:	4628      	mov	r0, r5
 800d216:	f000 faab 	bl	800d770 <ADC_Cmd>
      ADC_RegularChannelConfig(ADC1,ADC_Channel_16,1,ADC_SampleTime_15Cycles);
 800d21a:	4623      	mov	r3, r4
 800d21c:	4622      	mov	r2, r4
 800d21e:	4638      	mov	r0, r7
 800d220:	2110      	movs	r1, #16
 800d222:	f000 fabb 	bl	800d79c <ADC_RegularChannelConfig>
      ADC_RegularChannelConfig(ADC2,ADC_Channel_5,1,ADC_SampleTime_15Cycles);
 800d226:	4623      	mov	r3, r4
 800d228:	4622      	mov	r2, r4
 800d22a:	4630      	mov	r0, r6
 800d22c:	2105      	movs	r1, #5
 800d22e:	f000 fab5 	bl	800d79c <ADC_RegularChannelConfig>
      ADC_RegularChannelConfig(ADC3,ADC_Channel_5,1,ADC_SampleTime_15Cycles);
 800d232:	4623      	mov	r3, r4
 800d234:	4622      	mov	r2, r4
 800d236:	2105      	movs	r1, #5
 800d238:	4628      	mov	r0, r5
 800d23a:	f000 faaf 	bl	800d79c <ADC_RegularChannelConfig>
      ADC_SoftwareStartConv(ADC1);
 800d23e:	4638      	mov	r0, r7
 800d240:	f000 faf2 	bl	800d828 <ADC_SoftwareStartConv>
      ADC_SoftwareStartConv(ADC2);
 800d244:	4630      	mov	r0, r6
 800d246:	f000 faef 	bl	800d828 <ADC_SoftwareStartConv>
      ADC_SoftwareStartConv(ADC3);
 800d24a:	4628      	mov	r0, r5
 800d24c:	f000 faec 	bl	800d828 <ADC_SoftwareStartConv>
}
 800d250:	b00b      	add	sp, #44	@ 0x2c
 800d252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d254:	40021400 	.word	0x40021400
 800d258:	40012000 	.word	0x40012000
 800d25c:	40012100 	.word	0x40012100
 800d260:	40020000 	.word	0x40020000
 800d264:	40012200 	.word	0x40012200

0800d268 <adc_process>:


void adc_process (void)
{
 800d268:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      if (ADC_GetFlagStatus(ADC3,ADC_FLAG_EOC)) {
 800d26c:	4857      	ldr	r0, [pc, #348]	@ (800d3cc <adc_process+0x164>)
 800d26e:	2102      	movs	r1, #2
 800d270:	f000 fae2 	bl	800d838 <ADC_GetFlagStatus>
 800d274:	2800      	cmp	r0, #0
 800d276:	d02d      	beq.n	800d2d4 <adc_process+0x6c>
         adc_vsum += ADC_GetConversionValue(ADC3);
 800d278:	4c55      	ldr	r4, [pc, #340]	@ (800d3d0 <adc_process+0x168>)
 800d27a:	4854      	ldr	r0, [pc, #336]	@ (800d3cc <adc_process+0x164>)
 800d27c:	f000 fad9 	bl	800d832 <ADC_GetConversionValue>
 800d280:	6823      	ldr	r3, [r4, #0]
         adc_count++;
 800d282:	4a54      	ldr	r2, [pc, #336]	@ (800d3d4 <adc_process+0x16c>)
         adc_vsum += ADC_GetConversionValue(ADC3);
 800d284:	4418      	add	r0, r3
 800d286:	6020      	str	r0, [r4, #0]
         adc_count++;
 800d288:	8813      	ldrh	r3, [r2, #0]
 800d28a:	3301      	adds	r3, #1
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	8013      	strh	r3, [r2, #0]
         if (adc_count >= 100) {
 800d290:	8813      	ldrh	r3, [r2, #0]
 800d292:	b29b      	uxth	r3, r3
 800d294:	2b63      	cmp	r3, #99	@ 0x63
 800d296:	d91a      	bls.n	800d2ce <adc_process+0x66>
      	    adc_count = 0;
            adc_voltage2 = simple_iir(adc_voltage2,convert_voltage(adc_vsum / 100));
 800d298:	494f      	ldr	r1, [pc, #316]	@ (800d3d8 <adc_process+0x170>)
      	    adc_count = 0;
 800d29a:	2500      	movs	r5, #0
 800d29c:	8015      	strh	r5, [r2, #0]
            adc_voltage2 = simple_iir(adc_voltage2,convert_voltage(adc_vsum / 100));
 800d29e:	880a      	ldrh	r2, [r1, #0]
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	2064      	movs	r0, #100	@ 0x64
 800d2a4:	fbb3 f3f0 	udiv	r3, r3, r0
      value = (unsigned int)((adc_data * 26406) >> 15);
 800d2a8:	f246 7026 	movw	r0, #26406	@ 0x6726
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	4343      	muls	r3, r0
 800d2b0:	13db      	asrs	r3, r3, #15
      filter_value = (ALPHA * orginal_value) + (ONE_MINUS_ALPHA * new_value);
 800d2b2:	2007      	movs	r0, #7
 800d2b4:	fb12 3300 	smlabb	r3, r2, r0, r3
            adc_voltage2 = simple_iir(adc_voltage2,convert_voltage(adc_vsum / 100));
 800d2b8:	f343 03cf 	sbfx	r3, r3, #3, #16
 800d2bc:	800b      	strh	r3, [r1, #0]
            lcd_printf(1,5,"ADC3 CDS %4d mV ",adc_voltage2);
 800d2be:	880b      	ldrh	r3, [r1, #0]
 800d2c0:	4a46      	ldr	r2, [pc, #280]	@ (800d3dc <adc_process+0x174>)
 800d2c2:	b21b      	sxth	r3, r3
 800d2c4:	2105      	movs	r1, #5
 800d2c6:	2001      	movs	r0, #1
 800d2c8:	f7fd ffda 	bl	800b280 <lcd_printf>
            adc_vsum = 0;
 800d2cc:	6025      	str	r5, [r4, #0]
         }
         ADC_SoftwareStartConv(ADC3);
 800d2ce:	483f      	ldr	r0, [pc, #252]	@ (800d3cc <adc_process+0x164>)
 800d2d0:	f000 faaa 	bl	800d828 <ADC_SoftwareStartConv>
      }
      if (ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)) {
 800d2d4:	4842      	ldr	r0, [pc, #264]	@ (800d3e0 <adc_process+0x178>)
 800d2d6:	2102      	movs	r1, #2
 800d2d8:	f000 faae 	bl	800d838 <ADC_GetFlagStatus>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d03a      	beq.n	800d356 <adc_process+0xee>
         adc_tsum += ADC_GetConversionValue(ADC1);
 800d2e0:	4d40      	ldr	r5, [pc, #256]	@ (800d3e4 <adc_process+0x17c>)
 800d2e2:	483f      	ldr	r0, [pc, #252]	@ (800d3e0 <adc_process+0x178>)
 800d2e4:	f000 faa5 	bl	800d832 <ADC_GetConversionValue>
 800d2e8:	682b      	ldr	r3, [r5, #0]
         adc_tcount++;
 800d2ea:	4a3f      	ldr	r2, [pc, #252]	@ (800d3e8 <adc_process+0x180>)
         adc_tsum += ADC_GetConversionValue(ADC1);
 800d2ec:	4418      	add	r0, r3
 800d2ee:	6028      	str	r0, [r5, #0]
         adc_tcount++;
 800d2f0:	8813      	ldrh	r3, [r2, #0]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	8013      	strh	r3, [r2, #0]
         if (adc_tcount >= 100) {
 800d2f8:	8813      	ldrh	r3, [r2, #0]
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	2b63      	cmp	r3, #99	@ 0x63
 800d2fe:	d927      	bls.n	800d350 <adc_process+0xe8>
      	    adc_tcount = 0;
            adc_temperature = simple_iir(adc_temperature,cal_temperature(adc_tsum / 100));
 800d300:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 800d404 <adc_process+0x19c>
      	    adc_tcount = 0;
 800d304:	2600      	movs	r6, #0
 800d306:	8016      	strh	r6, [r2, #0]
            adc_temperature = simple_iir(adc_temperature,cal_temperature(adc_tsum / 100));
 800d308:	f8b8 4000 	ldrh.w	r4, [r8]
 800d30c:	6828      	ldr	r0, [r5, #0]
 800d30e:	2764      	movs	r7, #100	@ 0x64
 800d310:	fbb0 f0f7 	udiv	r0, r0, r7
 800d314:	b280      	uxth	r0, r0
 800d316:	f7ff fee7 	bl	800d0e8 <cal_temperature>
      filter_value = (ALPHA * orginal_value) + (ONE_MINUS_ALPHA * new_value);
 800d31a:	2307      	movs	r3, #7
 800d31c:	fb14 0403 	smlabb	r4, r4, r3, r0
            adc_temperature = simple_iir(adc_temperature,cal_temperature(adc_tsum / 100));
 800d320:	f344 04cf 	sbfx	r4, r4, #3, #16
 800d324:	f8a8 4000 	strh.w	r4, [r8]
            lcd_printf(1,4,"ADC1 Temperature %3d.%.2d ",adc_temperature / 100,adc_temperature % 100);
 800d328:	f8b8 3000 	ldrh.w	r3, [r8]
 800d32c:	f8b8 2000 	ldrh.w	r2, [r8]
 800d330:	b212      	sxth	r2, r2
 800d332:	fb92 f1f7 	sdiv	r1, r2, r7
 800d336:	fb07 2211 	mls	r2, r7, r1, r2
 800d33a:	b212      	sxth	r2, r2
 800d33c:	9200      	str	r2, [sp, #0]
 800d33e:	b21b      	sxth	r3, r3
 800d340:	4a2a      	ldr	r2, [pc, #168]	@ (800d3ec <adc_process+0x184>)
 800d342:	fb93 f3f7 	sdiv	r3, r3, r7
 800d346:	2104      	movs	r1, #4
 800d348:	2001      	movs	r0, #1
 800d34a:	f7fd ff99 	bl	800b280 <lcd_printf>
            adc_tsum = 0;
 800d34e:	602e      	str	r6, [r5, #0]
         }
         ADC_SoftwareStartConv(ADC1);
 800d350:	4823      	ldr	r0, [pc, #140]	@ (800d3e0 <adc_process+0x178>)
 800d352:	f000 fa69 	bl	800d828 <ADC_SoftwareStartConv>
      }
      if (ADC_GetFlagStatus(ADC2,ADC_FLAG_EOC)) {
 800d356:	4826      	ldr	r0, [pc, #152]	@ (800d3f0 <adc_process+0x188>)
 800d358:	2102      	movs	r1, #2
 800d35a:	f000 fa6d 	bl	800d838 <ADC_GetFlagStatus>
 800d35e:	2800      	cmp	r0, #0
 800d360:	d030      	beq.n	800d3c4 <adc_process+0x15c>
         adc_lsum += ADC_GetConversionValue(ADC2);
 800d362:	4c24      	ldr	r4, [pc, #144]	@ (800d3f4 <adc_process+0x18c>)
 800d364:	4822      	ldr	r0, [pc, #136]	@ (800d3f0 <adc_process+0x188>)
 800d366:	f000 fa64 	bl	800d832 <ADC_GetConversionValue>
 800d36a:	6823      	ldr	r3, [r4, #0]
         adc_lcount++;
 800d36c:	4a22      	ldr	r2, [pc, #136]	@ (800d3f8 <adc_process+0x190>)
         adc_lsum += ADC_GetConversionValue(ADC2);
 800d36e:	4418      	add	r0, r3
 800d370:	6020      	str	r0, [r4, #0]
         adc_lcount++;
 800d372:	8813      	ldrh	r3, [r2, #0]
 800d374:	3301      	adds	r3, #1
 800d376:	b29b      	uxth	r3, r3
 800d378:	8013      	strh	r3, [r2, #0]
         if (adc_lcount >= 100) {
 800d37a:	8813      	ldrh	r3, [r2, #0]
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	2b63      	cmp	r3, #99	@ 0x63
 800d380:	d91a      	bls.n	800d3b8 <adc_process+0x150>
      	    adc_lcount = 0;
            adc_voltage1 = simple_iir(adc_voltage1,convert_voltage(adc_lsum / 100));
 800d382:	491e      	ldr	r1, [pc, #120]	@ (800d3fc <adc_process+0x194>)
      	    adc_lcount = 0;
 800d384:	2500      	movs	r5, #0
 800d386:	8015      	strh	r5, [r2, #0]
            adc_voltage1 = simple_iir(adc_voltage1,convert_voltage(adc_lsum / 100));
 800d388:	880a      	ldrh	r2, [r1, #0]
 800d38a:	6823      	ldr	r3, [r4, #0]
 800d38c:	2064      	movs	r0, #100	@ 0x64
 800d38e:	fbb3 f3f0 	udiv	r3, r3, r0
      value = (unsigned int)((adc_data * 26406) >> 15);
 800d392:	f246 7026 	movw	r0, #26406	@ 0x6726
 800d396:	b29b      	uxth	r3, r3
 800d398:	4343      	muls	r3, r0
 800d39a:	13db      	asrs	r3, r3, #15
      filter_value = (ALPHA * orginal_value) + (ONE_MINUS_ALPHA * new_value);
 800d39c:	2007      	movs	r0, #7
 800d39e:	fb12 3300 	smlabb	r3, r2, r0, r3
            adc_voltage1 = simple_iir(adc_voltage1,convert_voltage(adc_lsum / 100));
 800d3a2:	f343 03cf 	sbfx	r3, r3, #3, #16
 800d3a6:	800b      	strh	r3, [r1, #0]
            lcd_printf(1,3,"ADC2 Volume %4d mV ",adc_voltage1);
 800d3a8:	880b      	ldrh	r3, [r1, #0]
 800d3aa:	4a15      	ldr	r2, [pc, #84]	@ (800d400 <adc_process+0x198>)
 800d3ac:	b21b      	sxth	r3, r3
 800d3ae:	2103      	movs	r1, #3
 800d3b0:	2001      	movs	r0, #1
 800d3b2:	f7fd ff65 	bl	800b280 <lcd_printf>
            adc_lsum = 0;
 800d3b6:	6025      	str	r5, [r4, #0]
         }
         ADC_SoftwareStartConv(ADC2);
 800d3b8:	480d      	ldr	r0, [pc, #52]	@ (800d3f0 <adc_process+0x188>)
      }
 800d3ba:	b002      	add	sp, #8
 800d3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
         ADC_SoftwareStartConv(ADC2);
 800d3c0:	f000 ba32 	b.w	800d828 <ADC_SoftwareStartConv>
 800d3c4:	b002      	add	sp, #8
 800d3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ca:	bf00      	nop
 800d3cc:	40012200 	.word	0x40012200
 800d3d0:	20002d68 	.word	0x20002d68
 800d3d4:	20002d70 	.word	0x20002d70
 800d3d8:	20002d5a 	.word	0x20002d5a
 800d3dc:	0800f813 	.word	0x0800f813
 800d3e0:	40012000 	.word	0x40012000
 800d3e4:	20002d64 	.word	0x20002d64
 800d3e8:	20002d6e 	.word	0x20002d6e
 800d3ec:	0800f824 	.word	0x0800f824
 800d3f0:	40012100 	.word	0x40012100
 800d3f4:	20002d60 	.word	0x20002d60
 800d3f8:	20002d6c 	.word	0x20002d6c
 800d3fc:	20002d5c 	.word	0x20002d5c
 800d400:	0800f83f 	.word	0x0800f83f
 800d404:	20002d58 	.word	0x20002d58

0800d408 <Dac1_Set_Voltage>:
volatile unsigned short send_dac;



void Dac1_Set_Voltage (unsigned short voltage)
{
 800d408:	b5d0      	push	{r4, r6, r7, lr}
 800d40a:	4604      	mov	r4, r0
      double temp = voltage;	// 1mV Range 3.3V = 3300
 800d40c:	f001 fb46 	bl	800ea9c <__aeabi_ui2d>
      if (voltage > 3300) voltage = 3300;
 800d410:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800d414:	429c      	cmp	r4, r3
 800d416:	bf28      	it	cs
 800d418:	461c      	movcs	r4, r3
      temp /= 1000;
 800d41a:	2200      	movs	r2, #0
 800d41c:	4b18      	ldr	r3, [pc, #96]	@ (800d480 <Dac1_Set_Voltage+0x78>)
 800d41e:	f001 fce1 	bl	800ede4 <__aeabi_ddiv>
      temp = temp * 4096 / 3.3;
 800d422:	4b18      	ldr	r3, [pc, #96]	@ (800d484 <Dac1_Set_Voltage+0x7c>)
 800d424:	2200      	movs	r2, #0
 800d426:	f001 fbb3 	bl	800eb90 <__aeabi_dmul>
 800d42a:	a311      	add	r3, pc, #68	@ (adr r3, 800d470 <Dac1_Set_Voltage+0x68>)
 800d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d430:	f001 fcd8 	bl	800ede4 <__aeabi_ddiv>
      if (temp > 4095.0) temp = 4095.0;
 800d434:	a310      	add	r3, pc, #64	@ (adr r3, 800d478 <Dac1_Set_Voltage+0x70>)
 800d436:	e9d3 2300 	ldrd	r2, r3, [r3]
      temp = temp * 4096 / 3.3;
 800d43a:	4606      	mov	r6, r0
 800d43c:	460f      	mov	r7, r1
      if (temp > 4095.0) temp = 4095.0;
 800d43e:	f001 fe37 	bl	800f0b0 <__aeabi_dcmpgt>
 800d442:	b110      	cbz	r0, 800d44a <Dac1_Set_Voltage+0x42>
 800d444:	a70c      	add	r7, pc, #48	@ (adr r7, 800d478 <Dac1_Set_Voltage+0x70>)
 800d446:	e9d7 6700 	ldrd	r6, r7, [r7]
      DAC_SetChannel1Data(DAC_Align_12b_R,temp);
 800d44a:	4639      	mov	r1, r7
 800d44c:	4630      	mov	r0, r6
 800d44e:	f001 fe61 	bl	800f114 <__aeabi_d2uiz>
 800d452:	b281      	uxth	r1, r0
 800d454:	2000      	movs	r0, #0
 800d456:	f000 fa19 	bl	800d88c <DAC_SetChannel1Data>
      lcd_printf(1,6,"DAC1 %4d mV ",voltage);
 800d45a:	4623      	mov	r3, r4
 800d45c:	4a0a      	ldr	r2, [pc, #40]	@ (800d488 <Dac1_Set_Voltage+0x80>)
 800d45e:	2106      	movs	r1, #6
 800d460:	2001      	movs	r0, #1
 800d462:	f7fd ff0d 	bl	800b280 <lcd_printf>
      send_dac = voltage;
 800d466:	4b09      	ldr	r3, [pc, #36]	@ (800d48c <Dac1_Set_Voltage+0x84>)
 800d468:	801c      	strh	r4, [r3, #0]
}
 800d46a:	bdd0      	pop	{r4, r6, r7, pc}
 800d46c:	f3af 8000 	nop.w
 800d470:	66666666 	.word	0x66666666
 800d474:	400a6666 	.word	0x400a6666
 800d478:	00000000 	.word	0x00000000
 800d47c:	40affe00 	.word	0x40affe00
 800d480:	408f4000 	.word	0x408f4000
 800d484:	40b00000 	.word	0x40b00000
 800d488:	0800f853 	.word	0x0800f853
 800d48c:	20002d72 	.word	0x20002d72

0800d490 <Dac1_Init>:


void Dac1_Init (void)
{  
 800d490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      DAC_InitTypeDef DAC_InitType;	
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 800d492:	2101      	movs	r1, #1
 800d494:	4608      	mov	r0, r1
 800d496:	f000 fc1f 	bl	800dcd8 <RCC_AHB1PeriphClockCmd>
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC,ENABLE);
 800d49a:	2101      	movs	r1, #1
 800d49c:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 800d4a0:	f000 fc32 	bl	800dd08 <RCC_APB1PeriphClockCmd>
      GPIO_Init_Pin(GPIOA,GPIO_Pin_4,GPIO_Speed_100MHz,GPIO_Mode_ADC);   
 800d4a4:	2303      	movs	r3, #3
      DAC_InitType.DAC_Trigger = DAC_Trigger_None;
 800d4a6:	2400      	movs	r4, #0
      GPIO_Init_Pin(GPIOA,GPIO_Pin_4,GPIO_Speed_100MHz,GPIO_Mode_ADC);   
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	480b      	ldr	r0, [pc, #44]	@ (800d4d8 <Dac1_Init+0x48>)
 800d4ac:	2110      	movs	r1, #16
 800d4ae:	f000 fadf 	bl	800da70 <GPIO_Init_Pin>
      DAC_InitType.DAC_WaveGeneration = DAC_WaveGeneration_None;
      DAC_InitType.DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
      DAC_InitType.DAC_OutputBuffer = DAC_OutputBuffer_Disable;
 800d4b2:	2302      	movs	r3, #2
      DAC_Init(DAC_Channel_1,&DAC_InitType);
 800d4b4:	4669      	mov	r1, sp
 800d4b6:	4620      	mov	r0, r4
      DAC_InitType.DAC_OutputBuffer = DAC_OutputBuffer_Disable;
 800d4b8:	9303      	str	r3, [sp, #12]
      DAC_InitType.DAC_WaveGeneration = DAC_WaveGeneration_None;
 800d4ba:	e9cd 4400 	strd	r4, r4, [sp]
      DAC_InitType.DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 800d4be:	9402      	str	r4, [sp, #8]
      DAC_Init(DAC_Channel_1,&DAC_InitType);
 800d4c0:	f000 f9c0 	bl	800d844 <DAC_Init>
      DAC_Cmd(DAC_Channel_1,ENABLE);  
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	2101      	movs	r1, #1
 800d4c8:	f000 f9d2 	bl	800d870 <DAC_Cmd>
      DAC_SetChannel1Data(DAC_Align_12b_R,0);
 800d4cc:	4621      	mov	r1, r4
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f000 f9dc 	bl	800d88c <DAC_SetChannel1Data>
}
 800d4d4:	b004      	add	sp, #16
 800d4d6:	bd10      	pop	{r4, pc}
 800d4d8:	40020000 	.word	0x40020000

0800d4dc <Default_Handler>:
};


void Default_Handler (void)
{
      HL2IRW = 0xAA550408;
 800d4dc:	4b07      	ldr	r3, [pc, #28]	@ (800d4fc <Default_Handler+0x20>)
 800d4de:	4a08      	ldr	r2, [pc, #32]	@ (800d500 <Default_Handler+0x24>)
 800d4e0:	601a      	str	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d4e2:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d4e6:	4907      	ldr	r1, [pc, #28]	@ (800d504 <Default_Handler+0x28>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d4e8:	4b07      	ldr	r3, [pc, #28]	@ (800d508 <Default_Handler+0x2c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d4ea:	68ca      	ldr	r2, [r1, #12]
 800d4ec:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	60cb      	str	r3, [r1, #12]
 800d4f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800d4f8:	bf00      	nop
 800d4fa:	e7fd      	b.n	800d4f8 <Default_Handler+0x1c>
 800d4fc:	20002d74 	.word	0x20002d74
 800d500:	aa550408 	.word	0xaa550408
 800d504:	e000ed00 	.word	0xe000ed00
 800d508:	05fa0004 	.word	0x05fa0004

0800d50c <__Init_Data_and_BSS>:
{
      unsigned long *pulSrc,*pulDest;
      /* Copy the data segment initializers from flash to SRAM */
      pulSrc  = &_sidata;
      pulDest = &_sdata;
      if (pulSrc != pulDest) {
 800d50c:	490f      	ldr	r1, [pc, #60]	@ (800d54c <__Init_Data_and_BSS+0x40>)
 800d50e:	4810      	ldr	r0, [pc, #64]	@ (800d550 <__Init_Data_and_BSS+0x44>)
 800d510:	4281      	cmp	r1, r0
{
 800d512:	b510      	push	{r4, lr}
      if (pulSrc != pulDest) {
 800d514:	d00a      	beq.n	800d52c <__Init_Data_and_BSS+0x20>
         for (;pulDest<&_edata;) {
             *(pulDest++) = *(pulSrc++);
 800d516:	4b0f      	ldr	r3, [pc, #60]	@ (800d554 <__Init_Data_and_BSS+0x48>)
 800d518:	1cda      	adds	r2, r3, #3
 800d51a:	1a12      	subs	r2, r2, r0
 800d51c:	f022 0203 	bic.w	r2, r2, #3
 800d520:	1ec4      	subs	r4, r0, #3
 800d522:	42a3      	cmp	r3, r4
 800d524:	bf38      	it	cc
 800d526:	2200      	movcc	r2, #0
 800d528:	f001 f858 	bl	800e5dc <memcpy>
         }
      }
      /* Zero fill the bss segment. */
      for (pulDest=&_sbss;pulDest<&_ebss;) {
          *(pulDest++) = 0;
 800d52c:	4b0a      	ldr	r3, [pc, #40]	@ (800d558 <__Init_Data_and_BSS+0x4c>)
 800d52e:	480b      	ldr	r0, [pc, #44]	@ (800d55c <__Init_Data_and_BSS+0x50>)
 800d530:	1cda      	adds	r2, r3, #3
 800d532:	1a12      	subs	r2, r2, r0
 800d534:	1ec1      	subs	r1, r0, #3
 800d536:	f022 0203 	bic.w	r2, r2, #3
 800d53a:	4299      	cmp	r1, r3
 800d53c:	bf88      	it	hi
 800d53e:	2200      	movhi	r2, #0
      }
}
 800d540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          *(pulDest++) = 0;
 800d544:	2100      	movs	r1, #0
 800d546:	f000 bddb 	b.w	800e100 <memset>
 800d54a:	bf00      	nop
 800d54c:	08014168 	.word	0x08014168
 800d550:	20000000 	.word	0x20000000
 800d554:	20000208 	.word	0x20000208
 800d558:	20002eb0 	.word	0x20002eb0
 800d55c:	20000208 	.word	0x20000208

0800d560 <Reset_Handler>:


void Reset_Handler (void)
{
 800d560:	4668      	mov	r0, sp
 800d562:	f020 0107 	bic.w	r1, r0, #7
 800d566:	468d      	mov	sp, r1
 800d568:	b508      	push	{r3, lr}
      volatile unsigned long i;
      for (i=0;i<500000;i++) {
      }
#endif
      /* Initialize data and bss */
      __Init_Data_and_BSS();
 800d56a:	f7ff ffcf 	bl	800d50c <__Init_Data_and_BSS>
#ifdef __FPU_USED
      /* Enable FPU.*/
      __asm("  LDR.W R0, =0xE000ED88\n"
 800d56e:	f8df 0014 	ldr.w	r0, [pc, #20]	@ 800d584 <Reset_Handler+0x24>
 800d572:	6801      	ldr	r1, [r0, #0]
 800d574:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d578:	6001      	str	r1, [r0, #0]
            "  LDR R1, [R0]\n"
            "  ORR R1, R1, #(0xF << 20)\n"
            "  STR R1, [R0]");
#endif
      /* Setup the microcontroller system. */
      SystemInit();
 800d57a:	f000 f805 	bl	800d588 <SystemInit>
      /* Call the application's entry point.*/
      main();
 800d57e:	f7fa feef 	bl	8008360 <main>
      while (1) {
 800d582:	e7fe      	b.n	800d582 <Reset_Handler+0x22>
 800d584:	e000ed88 	.word	0xe000ed88

0800d588 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d588:	4a36      	ldr	r2, [pc, #216]	@ (800d664 <SystemInit+0xdc>)
 800d58a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800d58e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d592:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d596:	4b34      	ldr	r3, [pc, #208]	@ (800d668 <SystemInit+0xe0>)
 800d598:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d59a:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 800d59c:	f042 0201 	orr.w	r2, r2, #1
 800d5a0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800d5a2:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 800d5aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d5ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d5b0:	4a2e      	ldr	r2, [pc, #184]	@ (800d66c <SystemInit+0xe4>)
 800d5b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d5b4:	681a      	ldr	r2, [r3, #0]
{
 800d5b6:	b082      	sub	sp, #8
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d5b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d5bc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d5be:	60d9      	str	r1, [r3, #12]
{
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800d5c0:	9100      	str	r1, [sp, #0]
 800d5c2:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800d5ca:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800d5d2:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 800d5d4:	9a00      	ldr	r2, [sp, #0]
 800d5d6:	3201      	adds	r2, #1
 800d5d8:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800d5da:	9a01      	ldr	r2, [sp, #4]
 800d5dc:	b91a      	cbnz	r2, 800d5e6 <SystemInit+0x5e>
 800d5de:	9a00      	ldr	r2, [sp, #0]
 800d5e0:	f5b2 4fa0 	cmp.w	r2, #20480	@ 0x5000
 800d5e4:	d1f2      	bne.n	800d5cc <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800d5ec:	bf18      	it	ne
 800d5ee:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800d5f0:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 800d5f2:	9b01      	ldr	r3, [sp, #4]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d12e      	bne.n	800d656 <SystemInit+0xce>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800d5f8:	4b1b      	ldr	r3, [pc, #108]	@ (800d668 <SystemInit+0xe0>)
    PWR->CR |= PWR_CR_VOS;
 800d5fa:	491d      	ldr	r1, [pc, #116]	@ (800d670 <SystemInit+0xe8>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800d5fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d5fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800d602:	641a      	str	r2, [r3, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS;
 800d604:	680a      	ldr	r2, [r1, #0]
 800d606:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800d60a:	600a      	str	r2, [r1, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800d60c:	689a      	ldr	r2, [r3, #8]
 800d60e:	609a      	str	r2, [r3, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800d610:	689a      	ldr	r2, [r3, #8]
 800d612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d616:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800d618:	689a      	ldr	r2, [r3, #8]
 800d61a:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 800d61e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800d620:	4a14      	ldr	r2, [pc, #80]	@ (800d674 <SystemInit+0xec>)
 800d622:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800d62a:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	0192      	lsls	r2, r2, #6
 800d630:	d5fc      	bpl.n	800d62c <SystemInit+0xa4>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800d632:	4a11      	ldr	r2, [pc, #68]	@ (800d678 <SystemInit+0xf0>)
 800d634:	f240 7105 	movw	r1, #1797	@ 0x705
 800d638:	6011      	str	r1, [r2, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800d63a:	689a      	ldr	r2, [r3, #8]
 800d63c:	f022 0203 	bic.w	r2, r2, #3
 800d640:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800d642:	689a      	ldr	r2, [r3, #8]
 800d644:	f042 0202 	orr.w	r2, r2, #2
 800d648:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800d64a:	4a07      	ldr	r2, [pc, #28]	@ (800d668 <SystemInit+0xe0>)
 800d64c:	6893      	ldr	r3, [r2, #8]
 800d64e:	f003 030c 	and.w	r3, r3, #12
 800d652:	2b08      	cmp	r3, #8
 800d654:	d1fa      	bne.n	800d64c <SystemInit+0xc4>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d656:	4b03      	ldr	r3, [pc, #12]	@ (800d664 <SystemInit+0xdc>)
 800d658:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800d65c:	609a      	str	r2, [r3, #8]
}
 800d65e:	b002      	add	sp, #8
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	e000ed00 	.word	0xe000ed00
 800d668:	40023800 	.word	0x40023800
 800d66c:	24003010 	.word	0x24003010
 800d670:	40007000 	.word	0x40007000
 800d674:	07405408 	.word	0x07405408
 800d678:	40023c00 	.word	0x40023c00

0800d67c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800d67c:	4b03      	ldr	r3, [pc, #12]	@ (800d68c <NVIC_PriorityGroupConfig+0x10>)
 800d67e:	f040 60bf 	orr.w	r0, r0, #100139008	@ 0x5f80000
 800d682:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800d686:	60d8      	str	r0, [r3, #12]
}
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	e000ed00 	.word	0xe000ed00

0800d690 <NVIC_Init>:
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800d690:	7801      	ldrb	r1, [r0, #0]
{
 800d692:	b570      	push	{r4, r5, r6, lr}
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800d694:	f001 031f 	and.w	r3, r1, #31
 800d698:	2601      	movs	r6, #1
 800d69a:	409e      	lsls	r6, r3
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800d69c:	78c3      	ldrb	r3, [r0, #3]
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800d69e:	094d      	lsrs	r5, r1, #5
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800d6a0:	b1cb      	cbz	r3, 800d6d6 <NVIC_Init+0x46>
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800d6a2:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e0 <NVIC_Init+0x50>)
 800d6a4:	68da      	ldr	r2, [r3, #12]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800d6a6:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800d6a8:	43d2      	mvns	r2, r2
 800d6aa:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 800d6ae:	f1c2 0404 	rsb	r4, r2, #4
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800d6b2:	b2e4      	uxtb	r4, r4
 800d6b4:	40a3      	lsls	r3, r4
 800d6b6:	b2dc      	uxtb	r4, r3
    tmpsub = tmpsub >> tmppriority;
 800d6b8:	230f      	movs	r3, #15
 800d6ba:	fa43 f202 	asr.w	r2, r3, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800d6be:	7883      	ldrb	r3, [r0, #2]
 800d6c0:	4013      	ands	r3, r2
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800d6c2:	4a08      	ldr	r2, [pc, #32]	@ (800d6e4 <NVIC_Init+0x54>)
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800d6c4:	4323      	orrs	r3, r4
    tmppriority = tmppriority << 0x04;
 800d6c6:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800d6c8:	4411      	add	r1, r2
    tmppriority = tmppriority << 0x04;
 800d6ca:	b2db      	uxtb	r3, r3
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800d6cc:	f881 3300 	strb.w	r3, [r1, #768]	@ 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800d6d0:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800d6d4:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800d6d6:	4b03      	ldr	r3, [pc, #12]	@ (800d6e4 <NVIC_Init+0x54>)
 800d6d8:	3520      	adds	r5, #32
 800d6da:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
}
 800d6de:	e7f9      	b.n	800d6d4 <NVIC_Init+0x44>
 800d6e0:	e000ed00 	.word	0xe000ed00
 800d6e4:	e000e100 	.word	0xe000e100

0800d6e8 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800d6e8:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
 800d6ec:	4b02      	ldr	r3, [pc, #8]	@ (800d6f8 <NVIC_SetVectorTable+0x10>)
 800d6ee:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800d6f2:	4308      	orrs	r0, r1
 800d6f4:	6098      	str	r0, [r3, #8]
}
 800d6f6:	4770      	bx	lr
 800d6f8:	e000ed00 	.word	0xe000ed00

0800d6fc <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800d6fc:	6843      	ldr	r3, [r0, #4]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800d6fe:	790a      	ldrb	r2, [r1, #4]
  tmpreg1 &= CR1_CLEAR_MASK;
 800d700:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800d704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d708:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800d70c:	680a      	ldr	r2, [r1, #0]
 800d70e:	4313      	orrs	r3, r2
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800d710:	6043      	str	r3, [r0, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800d712:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 800d716:	4313      	orrs	r3, r2
 800d718:	688a      	ldr	r2, [r1, #8]
{
 800d71a:	b510      	push	{r4, lr}
 800d71c:	4313      	orrs	r3, r2
  tmpreg1 = ADCx->CR2;
 800d71e:	6884      	ldr	r4, [r0, #8]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800d720:	4a08      	ldr	r2, [pc, #32]	@ (800d744 <ADC_Init+0x48>)
 800d722:	4022      	ands	r2, r4
 800d724:	4313      	orrs	r3, r2
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800d726:	794a      	ldrb	r2, [r1, #5]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800d728:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800d72c:	6083      	str	r3, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800d72e:	7d0a      	ldrb	r2, [r1, #20]
  tmpreg1 = ADCx->SQR1;
 800d730:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800d732:	3a01      	subs	r2, #1
  tmpreg1 &= SQR1_L_RESET;
 800d734:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800d738:	b2d2      	uxtb	r2, r2
 800d73a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800d73e:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 800d740:	bd10      	pop	{r4, pc}
 800d742:	bf00      	nop
 800d744:	c0fff7fd 	.word	0xc0fff7fd

0800d748 <ADC_CommonInit>:
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800d748:	e9d0 3200 	ldrd	r3, r2, [r0]
  tmpreg1 = ADC->CCR;
 800d74c:	4906      	ldr	r1, [pc, #24]	@ (800d768 <ADC_CommonInit+0x20>)
{
 800d74e:	b510      	push	{r4, lr}
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800d750:	4313      	orrs	r3, r2
  tmpreg1 = ADC->CCR;
 800d752:	684c      	ldr	r4, [r1, #4]
  tmpreg1 &= CR_CLEAR_MASK;
 800d754:	4a05      	ldr	r2, [pc, #20]	@ (800d76c <ADC_CommonInit+0x24>)
 800d756:	4022      	ands	r2, r4
 800d758:	4313      	orrs	r3, r2
 800d75a:	6882      	ldr	r2, [r0, #8]
 800d75c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800d75e:	68c2      	ldr	r2, [r0, #12]
 800d760:	4313      	orrs	r3, r2
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 800d762:	604b      	str	r3, [r1, #4]
}
 800d764:	bd10      	pop	{r4, pc}
 800d766:	bf00      	nop
 800d768:	40012300 	.word	0x40012300
 800d76c:	fffc30e0 	.word	0xfffc30e0

0800d770 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800d770:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 800d772:	b119      	cbz	r1, 800d77c <ADC_Cmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800d774:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800d778:	6083      	str	r3, [r0, #8]
  }
}
 800d77a:	4770      	bx	lr
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800d77c:	f023 0301 	bic.w	r3, r3, #1
 800d780:	e7fa      	b.n	800d778 <ADC_Cmd+0x8>
	...

0800d784 <ADC_TempSensorVrefintCmd>:
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d784:	4b04      	ldr	r3, [pc, #16]	@ (800d798 <ADC_TempSensorVrefintCmd+0x14>)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 800d786:	685a      	ldr	r2, [r3, #4]
  if (NewState != DISABLE)
 800d788:	b118      	cbz	r0, 800d792 <ADC_TempSensorVrefintCmd+0xe>
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 800d78a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 800d78e:	605a      	str	r2, [r3, #4]
  }
}
 800d790:	4770      	bx	lr
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 800d792:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800d796:	e7fa      	b.n	800d78e <ADC_TempSensorVrefintCmd+0xa>
 800d798:	40012300 	.word	0x40012300

0800d79c <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800d79c:	2909      	cmp	r1, #9
{
 800d79e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_Channel > ADC_Channel_9)
 800d7a0:	d91a      	bls.n	800d7d8 <ADC_RegularChannelConfig+0x3c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800d7a2:	f1a1 040a 	sub.w	r4, r1, #10
    tmpreg1 = ADCx->SMPR1;
 800d7a6:	68c5      	ldr	r5, [r0, #12]
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800d7a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d7ac:	2607      	movs	r6, #7
 800d7ae:	40a6      	lsls	r6, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800d7b0:	ea25 0506 	bic.w	r5, r5, r6
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800d7b4:	fa03 f404 	lsl.w	r4, r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800d7b8:	432c      	orrs	r4, r5
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800d7ba:	60c4      	str	r4, [r0, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800d7bc:	2a06      	cmp	r2, #6
 800d7be:	d817      	bhi.n	800d7f0 <ADC_RegularChannelConfig+0x54>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800d7c0:	1e54      	subs	r4, r2, #1
    tmpreg1 = ADCx->SQR3;
 800d7c2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800d7c4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d7c8:	221f      	movs	r2, #31
 800d7ca:	40a2      	lsls	r2, r4
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800d7cc:	ea23 0202 	bic.w	r2, r3, r2
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800d7d0:	40a1      	lsls	r1, r4
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800d7d2:	430a      	orrs	r2, r1
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800d7d4:	6342      	str	r2, [r0, #52]	@ 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800d7d6:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = ADCx->SMPR2;
 800d7d8:	6905      	ldr	r5, [r0, #16]
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800d7da:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 800d7de:	2407      	movs	r4, #7
 800d7e0:	40b4      	lsls	r4, r6
    tmpreg1 &= ~tmpreg2;
 800d7e2:	ea25 0504 	bic.w	r5, r5, r4
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800d7e6:	fa03 f406 	lsl.w	r4, r3, r6
    tmpreg1 |= tmpreg2;
 800d7ea:	432c      	orrs	r4, r5
    ADCx->SMPR2 = tmpreg1;
 800d7ec:	6104      	str	r4, [r0, #16]
 800d7ee:	e7e5      	b.n	800d7bc <ADC_RegularChannelConfig+0x20>
  else if (Rank < 13)
 800d7f0:	2a0c      	cmp	r2, #12
 800d7f2:	d80b      	bhi.n	800d80c <ADC_RegularChannelConfig+0x70>
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800d7f4:	1fd3      	subs	r3, r2, #7
    tmpreg1 = ADCx->SQR2;
 800d7f6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800d7f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d7fc:	221f      	movs	r2, #31
 800d7fe:	409a      	lsls	r2, r3
    tmpreg1 &= ~tmpreg2;
 800d800:	ea24 0202 	bic.w	r2, r4, r2
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800d804:	4099      	lsls	r1, r3
    tmpreg1 |= tmpreg2;
 800d806:	430a      	orrs	r2, r1
    ADCx->SQR2 = tmpreg1;
 800d808:	6302      	str	r2, [r0, #48]	@ 0x30
 800d80a:	e7e4      	b.n	800d7d6 <ADC_RegularChannelConfig+0x3a>
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800d80c:	f1a2 030d 	sub.w	r3, r2, #13
    tmpreg1 = ADCx->SQR1;
 800d810:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800d812:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d816:	221f      	movs	r2, #31
 800d818:	409a      	lsls	r2, r3
    tmpreg1 &= ~tmpreg2;
 800d81a:	ea24 0402 	bic.w	r4, r4, r2
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800d81e:	fa01 f203 	lsl.w	r2, r1, r3
    tmpreg1 |= tmpreg2;
 800d822:	4322      	orrs	r2, r4
    ADCx->SQR1 = tmpreg1;
 800d824:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800d826:	e7d6      	b.n	800d7d6 <ADC_RegularChannelConfig+0x3a>

0800d828 <ADC_SoftwareStartConv>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800d828:	6883      	ldr	r3, [r0, #8]
 800d82a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d82e:	6083      	str	r3, [r0, #8]
}
 800d830:	4770      	bx	lr

0800d832 <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 800d832:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
}
 800d834:	b280      	uxth	r0, r0
 800d836:	4770      	bx	lr

0800d838 <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800d838:	6803      	ldr	r3, [r0, #0]
 800d83a:	4219      	tst	r1, r3
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 800d83c:	bf14      	ite	ne
 800d83e:	2001      	movne	r0, #1
 800d840:	2000      	moveq	r0, #0
 800d842:	4770      	bx	lr

0800d844 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 800d844:	b530      	push	{r4, r5, lr}
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800d846:	4c09      	ldr	r4, [pc, #36]	@ (800d86c <DAC_Init+0x28>)
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 800d848:	f640 73fe 	movw	r3, #4094	@ 0xffe
  tmpreg1 = DAC->CR;
 800d84c:	6822      	ldr	r2, [r4, #0]
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 800d84e:	4083      	lsls	r3, r0
 800d850:	ea22 0203 	bic.w	r2, r2, r3
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800d854:	e9d1 3500 	ldrd	r3, r5, [r1]
 800d858:	432b      	orrs	r3, r5
 800d85a:	688d      	ldr	r5, [r1, #8]
 800d85c:	68c9      	ldr	r1, [r1, #12]
 800d85e:	432b      	orrs	r3, r5
 800d860:	430b      	orrs	r3, r1
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800d862:	fa03 f000 	lsl.w	r0, r3, r0
 800d866:	4310      	orrs	r0, r2
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 800d868:	6020      	str	r0, [r4, #0]
}
 800d86a:	bd30      	pop	{r4, r5, pc}
 800d86c:	40007400 	.word	0x40007400

0800d870 <DAC_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800d870:	2301      	movs	r3, #1
 800d872:	fa03 f000 	lsl.w	r0, r3, r0
 800d876:	4b04      	ldr	r3, [pc, #16]	@ (800d888 <DAC_Cmd+0x18>)
 800d878:	681a      	ldr	r2, [r3, #0]
  if (NewState != DISABLE)
 800d87a:	b111      	cbz	r1, 800d882 <DAC_Cmd+0x12>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800d87c:	4310      	orrs	r0, r2
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800d87e:	6018      	str	r0, [r3, #0]
  }
}
 800d880:	4770      	bx	lr
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800d882:	ea22 0000 	bic.w	r0, r2, r0
 800d886:	e7fa      	b.n	800d87e <DAC_Cmd+0xe>
 800d888:	40007400 	.word	0x40007400

0800d88c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800d88c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800d88e:	2300      	movs	r3, #0
 800d890:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800d892:	4b05      	ldr	r3, [pc, #20]	@ (800d8a8 <DAC_SetChannel1Data+0x1c>)
 800d894:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800d896:	9b01      	ldr	r3, [sp, #4]
 800d898:	3308      	adds	r3, #8
 800d89a:	4418      	add	r0, r3
 800d89c:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800d89e:	9b01      	ldr	r3, [sp, #4]
 800d8a0:	6019      	str	r1, [r3, #0]
}
 800d8a2:	b002      	add	sp, #8
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	40007400 	.word	0x40007400

0800d8ac <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800d8ac:	4b04      	ldr	r3, [pc, #16]	@ (800d8c0 <FLASH_Unlock+0x14>)
 800d8ae:	691a      	ldr	r2, [r3, #16]
 800d8b0:	2a00      	cmp	r2, #0
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800d8b2:	bfbf      	itttt	lt
 800d8b4:	4a03      	ldrlt	r2, [pc, #12]	@ (800d8c4 <FLASH_Unlock+0x18>)
 800d8b6:	605a      	strlt	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800d8b8:	f102 3288 	addlt.w	r2, r2, #2290649224	@ 0x88888888
 800d8bc:	605a      	strlt	r2, [r3, #4]
  }  
}
 800d8be:	4770      	bx	lr
 800d8c0:	40023c00 	.word	0x40023c00
 800d8c4:	45670123 	.word	0x45670123

0800d8c8 <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800d8c8:	4a02      	ldr	r2, [pc, #8]	@ (800d8d4 <FLASH_Lock+0xc>)
 800d8ca:	6913      	ldr	r3, [r2, #16]
 800d8cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d8d0:	6113      	str	r3, [r2, #16]
}
 800d8d2:	4770      	bx	lr
 800d8d4:	40023c00 	.word	0x40023c00

0800d8d8 <FLASH_OB_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800d8d8:	4b04      	ldr	r3, [pc, #16]	@ (800d8ec <FLASH_OB_Unlock+0x14>)
 800d8da:	695a      	ldr	r2, [r3, #20]
 800d8dc:	07d2      	lsls	r2, r2, #31
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800d8de:	bf41      	itttt	mi
 800d8e0:	4a03      	ldrmi	r2, [pc, #12]	@ (800d8f0 <FLASH_OB_Unlock+0x18>)
 800d8e2:	609a      	strmi	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800d8e4:	f102 3244 	addmi.w	r2, r2, #1145324612	@ 0x44444444
 800d8e8:	609a      	strmi	r2, [r3, #8]
  }  
}
 800d8ea:	4770      	bx	lr
 800d8ec:	40023c00 	.word	0x40023c00
 800d8f0:	08192a3b 	.word	0x08192a3b

0800d8f4 <FLASH_OB_Lock>:
  * @retval None
  */
void FLASH_OB_Lock(void)
{
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800d8f4:	4a02      	ldr	r2, [pc, #8]	@ (800d900 <FLASH_OB_Lock+0xc>)
 800d8f6:	6953      	ldr	r3, [r2, #20]
 800d8f8:	f043 0301 	orr.w	r3, r3, #1
 800d8fc:	6153      	str	r3, [r2, #20]
}
 800d8fe:	4770      	bx	lr
 800d900:	40023c00 	.word	0x40023c00

0800d904 <FLASH_OB_GetRDP>:
  */
FlagStatus FLASH_OB_GetRDP(void)
{
  FlagStatus readstatus = RESET;

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 800d904:	4b02      	ldr	r3, [pc, #8]	@ (800d910 <FLASH_OB_GetRDP+0xc>)
 800d906:	7d58      	ldrb	r0, [r3, #21]
  else
  {
    readstatus = RESET;
  }
  return readstatus;
}
 800d908:	38aa      	subs	r0, #170	@ 0xaa
 800d90a:	bf18      	it	ne
 800d90c:	2001      	movne	r0, #1
 800d90e:	4770      	bx	lr
 800d910:	40023c00 	.word	0x40023c00

0800d914 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800d914:	4b0e      	ldr	r3, [pc, #56]	@ (800d950 <FLASH_GetStatus+0x3c>)
 800d916:	68da      	ldr	r2, [r3, #12]
 800d918:	03d2      	lsls	r2, r2, #15
 800d91a:	d410      	bmi.n	800d93e <FLASH_GetStatus+0x2a>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800d91c:	68da      	ldr	r2, [r3, #12]
 800d91e:	06d1      	lsls	r1, r2, #27
 800d920:	d40f      	bmi.n	800d942 <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_WRP;
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 800d922:	68da      	ldr	r2, [r3, #12]
 800d924:	05d2      	lsls	r2, r2, #23
 800d926:	d40e      	bmi.n	800d946 <FLASH_GetStatus+0x32>
      { 
        flashstatus = FLASH_ERROR_RD;
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 800d928:	68da      	ldr	r2, [r3, #12]
 800d92a:	f012 0fe0 	tst.w	r2, #224	@ 0xe0
 800d92e:	d10c      	bne.n	800d94a <FLASH_GetStatus+0x36>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800d930:	68db      	ldr	r3, [r3, #12]
          {
            flashstatus = FLASH_ERROR_OPERATION;
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 800d932:	f013 0f02 	tst.w	r3, #2
 800d936:	bf14      	ite	ne
 800d938:	2008      	movne	r0, #8
 800d93a:	2009      	moveq	r0, #9
 800d93c:	4770      	bx	lr
    flashstatus = FLASH_BUSY;
 800d93e:	2001      	movs	r0, #1
 800d940:	4770      	bx	lr
      flashstatus = FLASH_ERROR_WRP;
 800d942:	2006      	movs	r0, #6
 800d944:	4770      	bx	lr
        flashstatus = FLASH_ERROR_RD;
 800d946:	2002      	movs	r0, #2
 800d948:	4770      	bx	lr
          flashstatus = FLASH_ERROR_PROGRAM; 
 800d94a:	2007      	movs	r0, #7
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop
 800d950:	40023c00 	.word	0x40023c00

0800d954 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 800d954:	b507      	push	{r0, r1, r2, lr}
  __IO FLASH_Status status = FLASH_COMPLETE;
 800d956:	2309      	movs	r3, #9
 800d958:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
  {
    status = FLASH_GetStatus();
 800d95c:	f7ff ffda 	bl	800d914 <FLASH_GetStatus>
 800d960:	f88d 0007 	strb.w	r0, [sp, #7]
  while(status == FLASH_BUSY)
 800d964:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d0f7      	beq.n	800d95c <FLASH_WaitForLastOperation+0x8>
  }
  /* Return the operation status */
  return status;
 800d96c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800d970:	b003      	add	sp, #12
 800d972:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d978 <FLASH_EraseSector>:
{
 800d978:	b570      	push	{r4, r5, r6, lr}
 800d97a:	4606      	mov	r6, r0
  if(VoltageRange == VoltageRange_1)
 800d97c:	b359      	cbz	r1, 800d9d6 <FLASH_EraseSector+0x5e>
  else if(VoltageRange == VoltageRange_2)
 800d97e:	2901      	cmp	r1, #1
 800d980:	d02b      	beq.n	800d9da <FLASH_EraseSector+0x62>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800d982:	2902      	cmp	r1, #2
 800d984:	bf0c      	ite	eq
 800d986:	f44f 7500 	moveq.w	r5, #512	@ 0x200
 800d98a:	f44f 7540 	movne.w	r5, #768	@ 0x300
  status = FLASH_WaitForLastOperation();
 800d98e:	f7ff ffe1 	bl	800d954 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800d992:	2809      	cmp	r0, #9
 800d994:	d11e      	bne.n	800d9d4 <FLASH_EraseSector+0x5c>
    FLASH->CR &= CR_PSIZE_MASK;
 800d996:	4c12      	ldr	r4, [pc, #72]	@ (800d9e0 <FLASH_EraseSector+0x68>)
 800d998:	6923      	ldr	r3, [r4, #16]
 800d99a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d99e:	6123      	str	r3, [r4, #16]
    FLASH->CR |= tmp_psize;
 800d9a0:	6921      	ldr	r1, [r4, #16]
 800d9a2:	4329      	orrs	r1, r5
 800d9a4:	6121      	str	r1, [r4, #16]
    FLASH->CR &= SECTOR_MASK;
 800d9a6:	6923      	ldr	r3, [r4, #16]
 800d9a8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d9ac:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800d9ae:	6920      	ldr	r0, [r4, #16]
 800d9b0:	4330      	orrs	r0, r6
 800d9b2:	f040 0002 	orr.w	r0, r0, #2
 800d9b6:	6120      	str	r0, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800d9b8:	6923      	ldr	r3, [r4, #16]
 800d9ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d9be:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation();
 800d9c0:	f7ff ffc8 	bl	800d954 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_SER);
 800d9c4:	6923      	ldr	r3, [r4, #16]
 800d9c6:	f023 0302 	bic.w	r3, r3, #2
 800d9ca:	6123      	str	r3, [r4, #16]
    FLASH->CR &= SECTOR_MASK; 
 800d9cc:	6923      	ldr	r3, [r4, #16]
 800d9ce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d9d2:	6123      	str	r3, [r4, #16]
}
 800d9d4:	bd70      	pop	{r4, r5, r6, pc}
     tmp_psize = FLASH_PSIZE_BYTE;
 800d9d6:	460d      	mov	r5, r1
 800d9d8:	e7d9      	b.n	800d98e <FLASH_EraseSector+0x16>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800d9da:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800d9de:	e7d6      	b.n	800d98e <FLASH_EraseSector+0x16>
 800d9e0:	40023c00 	.word	0x40023c00

0800d9e4 <FLASH_ProgramWord>:
{
 800d9e4:	b570      	push	{r4, r5, r6, lr}
 800d9e6:	4605      	mov	r5, r0
 800d9e8:	460e      	mov	r6, r1
  status = FLASH_WaitForLastOperation();
 800d9ea:	f7ff ffb3 	bl	800d954 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800d9ee:	2809      	cmp	r0, #9
 800d9f0:	d113      	bne.n	800da1a <FLASH_ProgramWord+0x36>
    FLASH->CR &= CR_PSIZE_MASK;
 800d9f2:	4c0a      	ldr	r4, [pc, #40]	@ (800da1c <FLASH_ProgramWord+0x38>)
 800d9f4:	6923      	ldr	r3, [r4, #16]
 800d9f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9fa:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 800d9fc:	6923      	ldr	r3, [r4, #16]
 800d9fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800da02:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_PG;
 800da04:	6923      	ldr	r3, [r4, #16]
 800da06:	f043 0301 	orr.w	r3, r3, #1
 800da0a:	6123      	str	r3, [r4, #16]
    *(__IO uint32_t*)Address = Data;
 800da0c:	602e      	str	r6, [r5, #0]
    status = FLASH_WaitForLastOperation();
 800da0e:	f7ff ffa1 	bl	800d954 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800da12:	6923      	ldr	r3, [r4, #16]
 800da14:	f023 0301 	bic.w	r3, r3, #1
 800da18:	6123      	str	r3, [r4, #16]
}
 800da1a:	bd70      	pop	{r4, r5, r6, pc}
 800da1c:	40023c00 	.word	0x40023c00

0800da20 <FLASH_OB_RDPConfig>:
{
 800da20:	b510      	push	{r4, lr}
 800da22:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation();
 800da24:	f7ff ff96 	bl	800d954 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800da28:	2809      	cmp	r0, #9
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 800da2a:	bf04      	itt	eq
 800da2c:	4b01      	ldreq	r3, [pc, #4]	@ (800da34 <FLASH_OB_RDPConfig+0x14>)
 800da2e:	755c      	strbeq	r4, [r3, #21]
}
 800da30:	bd10      	pop	{r4, pc}
 800da32:	bf00      	nop
 800da34:	40023c00 	.word	0x40023c00

0800da38 <FLASH_OB_Launch>:
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800da38:	4a03      	ldr	r2, [pc, #12]	@ (800da48 <FLASH_OB_Launch+0x10>)
 800da3a:	7d13      	ldrb	r3, [r2, #20]
 800da3c:	f043 0302 	orr.w	r3, r3, #2
 800da40:	7513      	strb	r3, [r2, #20]
  status = FLASH_WaitForLastOperation();
 800da42:	f7ff bf87 	b.w	800d954 <FLASH_WaitForLastOperation>
 800da46:	bf00      	nop
 800da48:	40023c00 	.word	0x40023c00

0800da4c <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800da4c:	f001 0307 	and.w	r3, r1, #7
 800da50:	08c9      	lsrs	r1, r1, #3
 800da52:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{
 800da56:	b510      	push	{r4, lr}
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800da58:	6a01      	ldr	r1, [r0, #32]
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800da5a:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800da5c:	240f      	movs	r4, #15
 800da5e:	409c      	lsls	r4, r3
 800da60:	ea21 0104 	bic.w	r1, r1, r4
 800da64:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800da66:	6a01      	ldr	r1, [r0, #32]
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800da68:	409a      	lsls	r2, r3
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800da6a:	430a      	orrs	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800da6c:	6202      	str	r2, [r0, #32]
}
 800da6e:	bd10      	pop	{r4, pc}

0800da70 <GPIO_Init_Pin>:


void GPIO_Init_Pin (GPIO_TypeDef *GPIOx, unsigned short GPIO_Pin,unsigned char GPIO_Speed,unsigned char GPIO_Mode)
{
 800da70:	b5f0      	push	{r4, r5, r6, r7, lr}
      uint32_t pinpos = 0x00,pos = 0x00,currentpin = 0x00;
      unsigned char pmode, pupd, ptype;
      pmode = GPIO_Mode & 0x03;
 800da72:	f003 0603 	and.w	r6, r3, #3
      pupd = (GPIO_Mode >> 4) & 0x03;
 800da76:	f3c3 1501 	ubfx	r5, r3, #4, #2
      ptype = (GPIO_Mode >> 6) & 0x03;
      for (pinpos = 0x00; pinpos < 0x10; pinpos++) {
 800da7a:	2400      	movs	r4, #0
          pos = ((uint32_t)0x01) << pinpos;
 800da7c:	2701      	movs	r7, #1
 800da7e:	fa07 fc04 	lsl.w	ip, r7, r4
          /* Get the port pins position */
          currentpin = (GPIO_Pin) & pos;
          if (currentpin == pos) break;
 800da82:	ea3c 0c01 	bics.w	ip, ip, r1
 800da86:	d002      	beq.n	800da8e <GPIO_Init_Pin+0x1e>
      for (pinpos = 0x00; pinpos < 0x10; pinpos++) {
 800da88:	3401      	adds	r4, #1
 800da8a:	2c10      	cmp	r4, #16
 800da8c:	d1f7      	bne.n	800da7e <GPIO_Init_Pin+0xe>
      }
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800da8e:	f8d0 e000 	ldr.w	lr, [r0]
 800da92:	0061      	lsls	r1, r4, #1
 800da94:	2703      	movs	r7, #3
 800da96:	408f      	lsls	r7, r1
 800da98:	ea6f 0c07 	mvn.w	ip, r7
 800da9c:	ea2e 0707 	bic.w	r7, lr, r7
 800daa0:	6007      	str	r7, [r0, #0]
      GPIOx->MODER |= (((uint32_t)pmode) << (pinpos * 2));
 800daa2:	f8d0 e000 	ldr.w	lr, [r0]
 800daa6:	fa06 f701 	lsl.w	r7, r6, r1
      if ((pmode == GPIO_Mode_OUT) || (pmode == GPIO_Mode_AF)) {
 800daaa:	3e01      	subs	r6, #1
      GPIOx->MODER |= (((uint32_t)pmode) << (pinpos * 2));
 800daac:	ea47 070e 	orr.w	r7, r7, lr
      if ((pmode == GPIO_Mode_OUT) || (pmode == GPIO_Mode_AF)) {
 800dab0:	2e01      	cmp	r6, #1
      GPIOx->MODER |= (((uint32_t)pmode) << (pinpos * 2));
 800dab2:	6007      	str	r7, [r0, #0]
      if ((pmode == GPIO_Mode_OUT) || (pmode == GPIO_Mode_AF)) {
 800dab4:	d813      	bhi.n	800dade <GPIO_Init_Pin+0x6e>
         /* Speed mode configuration */
         GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800dab6:	6886      	ldr	r6, [r0, #8]
 800dab8:	ea0c 0606 	and.w	r6, ip, r6
 800dabc:	6086      	str	r6, [r0, #8]
         GPIOx->OSPEEDR |= ((uint32_t)(GPIO_Speed) << (pinpos * 2));
 800dabe:	6886      	ldr	r6, [r0, #8]
 800dac0:	408a      	lsls	r2, r1
 800dac2:	4332      	orrs	r2, r6
 800dac4:	6082      	str	r2, [r0, #8]
         /* Output mode configuration*/
         GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800dac6:	6842      	ldr	r2, [r0, #4]
 800dac8:	2601      	movs	r6, #1
 800daca:	40a6      	lsls	r6, r4
 800dacc:	ea22 0206 	bic.w	r2, r2, r6
 800dad0:	6042      	str	r2, [r0, #4]
         GPIOx->OTYPER |= (uint16_t)(((uint16_t)ptype) << ((uint16_t)pinpos));
 800dad2:	099b      	lsrs	r3, r3, #6
 800dad4:	6842      	ldr	r2, [r0, #4]
 800dad6:	40a3      	lsls	r3, r4
 800dad8:	b29b      	uxth	r3, r3
 800dada:	4313      	orrs	r3, r2
 800dadc:	6043      	str	r3, [r0, #4]
      }
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800dade:	68c3      	ldr	r3, [r0, #12]
 800dae0:	2203      	movs	r2, #3
 800dae2:	408a      	lsls	r2, r1
 800dae4:	ea23 0302 	bic.w	r3, r3, r2
 800dae8:	60c3      	str	r3, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)pupd) << (pinpos * 2));
 800daea:	68c2      	ldr	r2, [r0, #12]
 800daec:	fa05 f301 	lsl.w	r3, r5, r1
 800daf0:	4313      	orrs	r3, r2
 800daf2:	60c3      	str	r3, [r0, #12]
}
 800daf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800daf8 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800daf8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800dafa:	4b14      	ldr	r3, [pc, #80]	@ (800db4c <I2C_DeInit+0x54>)
 800dafc:	4298      	cmp	r0, r3
 800dafe:	d10b      	bne.n	800db18 <I2C_DeInit+0x20>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800db00:	2101      	movs	r1, #1
 800db02:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800db06:	f000 f917 	bl	800dd38 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800db0a:	2100      	movs	r1, #0
 800db0c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800db10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800db14:	f000 b910 	b.w	800dd38 <RCC_APB1PeriphResetCmd>
  else if (I2Cx == I2C2)
 800db18:	4b0d      	ldr	r3, [pc, #52]	@ (800db50 <I2C_DeInit+0x58>)
 800db1a:	4298      	cmp	r0, r3
 800db1c:	d108      	bne.n	800db30 <I2C_DeInit+0x38>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800db1e:	2101      	movs	r1, #1
 800db20:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800db24:	f000 f908 	bl	800dd38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800db28:	2100      	movs	r1, #0
 800db2a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800db2e:	e7ef      	b.n	800db10 <I2C_DeInit+0x18>
    if (I2Cx == I2C3)
 800db30:	4b08      	ldr	r3, [pc, #32]	@ (800db54 <I2C_DeInit+0x5c>)
 800db32:	4298      	cmp	r0, r3
 800db34:	d108      	bne.n	800db48 <I2C_DeInit+0x50>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800db36:	2101      	movs	r1, #1
 800db38:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800db3c:	f000 f8fc 	bl	800dd38 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800db40:	2100      	movs	r1, #0
 800db42:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800db46:	e7e3      	b.n	800db10 <I2C_DeInit+0x18>
}
 800db48:	bd08      	pop	{r3, pc}
 800db4a:	bf00      	nop
 800db4c:	40005400 	.word	0x40005400
 800db50:	40005800 	.word	0x40005800
 800db54:	40005c00 	.word	0x40005c00

0800db58 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800db58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800db5a:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800db5c:	f026 063f 	bic.w	r6, r6, #63	@ 0x3f
{
 800db60:	4604      	mov	r4, r0
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800db62:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800db64:	4668      	mov	r0, sp
{
 800db66:	460d      	mov	r5, r1
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800db68:	0c36      	lsrs	r6, r6, #16
  RCC_GetClocksFreq(&rcc_clocks);
 800db6a:	f000 f871 	bl	800dc50 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800db6e:	9a02      	ldr	r2, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800db70:	492b      	ldr	r1, [pc, #172]	@ (800dc20 <I2C_Init+0xc8>)
 800db72:	fbb2 f1f1 	udiv	r1, r2, r1
 800db76:	b288      	uxth	r0, r1
  tmpreg |= freqrange;
 800db78:	4306      	orrs	r6, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800db7a:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800db7c:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800db7e:	4e29      	ldr	r6, [pc, #164]	@ (800dc24 <I2C_Init+0xcc>)
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800db80:	f023 0301 	bic.w	r3, r3, #1
 800db84:	041b      	lsls	r3, r3, #16
 800db86:	0c1b      	lsrs	r3, r3, #16
 800db88:	8023      	strh	r3, [r4, #0]
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800db8a:	682b      	ldr	r3, [r5, #0]
 800db8c:	42b3      	cmp	r3, r6
 800db8e:	d823      	bhi.n	800dbd8 <I2C_Init+0x80>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800db90:	005b      	lsls	r3, r3, #1
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800db92:	3001      	adds	r0, #1
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800db94:	fbb2 f3f3 	udiv	r3, r2, r3
 800db98:	b29b      	uxth	r3, r3
    if (result < 0x04)
 800db9a:	2b04      	cmp	r3, #4
    I2Cx->TRISE = freqrange + 1; 
 800db9c:	b280      	uxth	r0, r0
 800db9e:	bf38      	it	cc
 800dba0:	2304      	movcc	r3, #4
 800dba2:	8420      	strh	r0, [r4, #32]
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800dba4:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800dba6:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800dba8:	88aa      	ldrh	r2, [r5, #4]
 800dbaa:	8969      	ldrh	r1, [r5, #10]
  I2Cx->CR1 |= I2C_CR1_PE;
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	f043 0301 	orr.w	r3, r3, #1
 800dbb2:	8023      	strh	r3, [r4, #0]
  tmpreg = I2Cx->CR1;
 800dbb4:	8823      	ldrh	r3, [r4, #0]
  tmpreg &= CR1_CLEAR_MASK;
 800dbb6:	f423 6381 	bic.w	r3, r3, #1032	@ 0x408
 800dbba:	f023 0302 	bic.w	r3, r3, #2
 800dbbe:	041b      	lsls	r3, r3, #16
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800dbc0:	430a      	orrs	r2, r1
  tmpreg &= CR1_CLEAR_MASK;
 800dbc2:	0c1b      	lsrs	r3, r3, #16
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800dbc8:	892a      	ldrh	r2, [r5, #8]
  I2Cx->CR1 = tmpreg;
 800dbca:	8023      	strh	r3, [r4, #0]
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800dbcc:	89ab      	ldrh	r3, [r5, #12]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	8123      	strh	r3, [r4, #8]
}
 800dbd4:	b004      	add	sp, #16
 800dbd6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800dbd8:	88ee      	ldrh	r6, [r5, #6]
 800dbda:	f64b 70ff 	movw	r0, #49151	@ 0xbfff
 800dbde:	4286      	cmp	r6, r0
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800dbe0:	bf1b      	ittet	ne
 800dbe2:	2019      	movne	r0, #25
 800dbe4:	4343      	mulne	r3, r0
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800dbe6:	eb03 0343 	addeq.w	r3, r3, r3, lsl #1
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800dbea:	fbb2 f3f3 	udivne	r3, r2, r3
 800dbee:	bf15      	itete	ne
 800dbf0:	b29b      	uxthne	r3, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800dbf2:	fbb2 f3f3 	udiveq	r3, r2, r3
      result |= I2C_DutyCycle_16_9;
 800dbf6:	f443 4380 	orrne.w	r3, r3, #16384	@ 0x4000
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800dbfa:	b29b      	uxtheq	r3, r3
    if ((result & I2C_CCR_CCR) == 0)
 800dbfc:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800dc00:	b90a      	cbnz	r2, 800dc06 <I2C_Init+0xae>
      result |= (uint16_t)0x0001;  
 800dc02:	f043 0301 	orr.w	r3, r3, #1
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800dc06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dc0a:	4351      	muls	r1, r2
 800dc0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dc10:	fbb1 f1f2 	udiv	r1, r1, r2
 800dc14:	3101      	adds	r1, #1
 800dc16:	b289      	uxth	r1, r1
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800dc18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800dc1c:	8421      	strh	r1, [r4, #32]
 800dc1e:	e7c1      	b.n	800dba4 <I2C_Init+0x4c>
 800dc20:	000f4240 	.word	0x000f4240
 800dc24:	000186a0 	.word	0x000186a0

0800dc28 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800dc28:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 800dc2a:	b121      	cbz	r1, 800dc36 <I2C_Cmd+0xe>
    I2Cx->CR1 |= I2C_CR1_PE;
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800dc32:	8003      	strh	r3, [r0, #0]
  }
}
 800dc34:	4770      	bx	lr
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800dc36:	f023 0301 	bic.w	r3, r3, #1
 800dc3a:	041b      	lsls	r3, r3, #16
 800dc3c:	0c1b      	lsrs	r3, r3, #16
 800dc3e:	e7f8      	b.n	800dc32 <I2C_Cmd+0xa>

0800dc40 <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_RELOAD;
 800dc40:	4b02      	ldr	r3, [pc, #8]	@ (800dc4c <IWDG_ReloadCounter+0xc>)
 800dc42:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800dc46:	601a      	str	r2, [r3, #0]
}
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	40003000 	.word	0x40003000

0800dc50 <RCC_GetClocksFreq>:
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800dc50:	4a1d      	ldr	r2, [pc, #116]	@ (800dcc8 <RCC_GetClocksFreq+0x78>)
 800dc52:	6893      	ldr	r3, [r2, #8]
 800dc54:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 800dc58:	2b04      	cmp	r3, #4
{
 800dc5a:	b510      	push	{r4, lr}
  switch (tmp)
 800dc5c:	d01a      	beq.n	800dc94 <RCC_GetClocksFreq+0x44>
 800dc5e:	2b08      	cmp	r3, #8
 800dc60:	d01a      	beq.n	800dc98 <RCC_GetClocksFreq+0x48>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800dc62:	4b1a      	ldr	r3, [pc, #104]	@ (800dccc <RCC_GetClocksFreq+0x7c>)
    break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800dc64:	4a18      	ldr	r2, [pc, #96]	@ (800dcc8 <RCC_GetClocksFreq+0x78>)
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800dc66:	6003      	str	r3, [r0, #0]
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800dc68:	6893      	ldr	r3, [r2, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 800dc6a:	4919      	ldr	r1, [pc, #100]	@ (800dcd0 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
 800dc6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 800dc70:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800dc72:	6803      	ldr	r3, [r0, #0]
 800dc74:	40e3      	lsrs	r3, r4
 800dc76:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800dc78:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 800dc7a:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 800dc7e:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800dc80:	fa23 f404 	lsr.w	r4, r3, r4
 800dc84:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800dc86:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
 800dc88:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 800dc8c:	5c8a      	ldrb	r2, [r1, r2]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800dc8e:	40d3      	lsrs	r3, r2
 800dc90:	60c3      	str	r3, [r0, #12]
}
 800dc92:	bd10      	pop	{r4, pc}
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800dc94:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd4 <RCC_GetClocksFreq+0x84>)
 800dc96:	e7e5      	b.n	800dc64 <RCC_GetClocksFreq+0x14>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800dc98:	6853      	ldr	r3, [r2, #4]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dc9a:	6851      	ldr	r1, [r2, #4]
    if (pllsource != 0)
 800dc9c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dca0:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800dca4:	6853      	ldr	r3, [r2, #4]
 800dca6:	bf14      	ite	ne
 800dca8:	4a0a      	ldrne	r2, [pc, #40]	@ (800dcd4 <RCC_GetClocksFreq+0x84>)
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800dcaa:	4a08      	ldreq	r2, [pc, #32]	@ (800dccc <RCC_GetClocksFreq+0x7c>)
 800dcac:	fbb2 f1f1 	udiv	r1, r2, r1
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800dcb0:	4a05      	ldr	r2, [pc, #20]	@ (800dcc8 <RCC_GetClocksFreq+0x78>)
 800dcb2:	6852      	ldr	r2, [r2, #4]
 800dcb4:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800dcb8:	f3c3 1388 	ubfx	r3, r3, #6, #9
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800dcbc:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800dcbe:	434b      	muls	r3, r1
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800dcc0:	0052      	lsls	r2, r2, #1
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800dcc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcc6:	e7cd      	b.n	800dc64 <RCC_GetClocksFreq+0x14>
 800dcc8:	40023800 	.word	0x40023800
 800dccc:	00f42400 	.word	0x00f42400
 800dcd0:	20000008 	.word	0x20000008
 800dcd4:	007a1200 	.word	0x007a1200

0800dcd8 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dcd8:	4b04      	ldr	r3, [pc, #16]	@ (800dcec <RCC_AHB1PeriphClockCmd+0x14>)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800dcda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  if (NewState != DISABLE)
 800dcdc:	b111      	cbz	r1, 800dce4 <RCC_AHB1PeriphClockCmd+0xc>
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800dcde:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800dce0:	6318      	str	r0, [r3, #48]	@ 0x30
  }
}
 800dce2:	4770      	bx	lr
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800dce4:	ea22 0000 	bic.w	r0, r2, r0
 800dce8:	e7fa      	b.n	800dce0 <RCC_AHB1PeriphClockCmd+0x8>
 800dcea:	bf00      	nop
 800dcec:	40023800 	.word	0x40023800

0800dcf0 <RCC_AHB3PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800dcf0:	4b04      	ldr	r3, [pc, #16]	@ (800dd04 <RCC_AHB3PeriphClockCmd+0x14>)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800dcf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  if (NewState != DISABLE)
 800dcf4:	b111      	cbz	r1, 800dcfc <RCC_AHB3PeriphClockCmd+0xc>
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800dcf6:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800dcf8:	6398      	str	r0, [r3, #56]	@ 0x38
  }
}
 800dcfa:	4770      	bx	lr
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800dcfc:	ea22 0000 	bic.w	r0, r2, r0
 800dd00:	e7fa      	b.n	800dcf8 <RCC_AHB3PeriphClockCmd+0x8>
 800dd02:	bf00      	nop
 800dd04:	40023800 	.word	0x40023800

0800dd08 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800dd08:	4b04      	ldr	r3, [pc, #16]	@ (800dd1c <RCC_APB1PeriphClockCmd+0x14>)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800dd0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  if (NewState != DISABLE)
 800dd0c:	b111      	cbz	r1, 800dd14 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 800dd0e:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800dd10:	6418      	str	r0, [r3, #64]	@ 0x40
  }
}
 800dd12:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800dd14:	ea22 0000 	bic.w	r0, r2, r0
 800dd18:	e7fa      	b.n	800dd10 <RCC_APB1PeriphClockCmd+0x8>
 800dd1a:	bf00      	nop
 800dd1c:	40023800 	.word	0x40023800

0800dd20 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800dd20:	4b04      	ldr	r3, [pc, #16]	@ (800dd34 <RCC_APB2PeriphClockCmd+0x14>)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800dd22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  if (NewState != DISABLE)
 800dd24:	b111      	cbz	r1, 800dd2c <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 800dd26:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800dd28:	6458      	str	r0, [r3, #68]	@ 0x44
  }
}
 800dd2a:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800dd2c:	ea22 0000 	bic.w	r0, r2, r0
 800dd30:	e7fa      	b.n	800dd28 <RCC_APB2PeriphClockCmd+0x8>
 800dd32:	bf00      	nop
 800dd34:	40023800 	.word	0x40023800

0800dd38 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dd38:	4b04      	ldr	r3, [pc, #16]	@ (800dd4c <RCC_APB1PeriphResetCmd+0x14>)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800dd3a:	6a1a      	ldr	r2, [r3, #32]
  if (NewState != DISABLE)
 800dd3c:	b111      	cbz	r1, 800dd44 <RCC_APB1PeriphResetCmd+0xc>
    RCC->APB1RSTR |= RCC_APB1Periph;
 800dd3e:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800dd40:	6218      	str	r0, [r3, #32]
  }
}
 800dd42:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800dd44:	ea22 0000 	bic.w	r0, r2, r0
 800dd48:	e7fa      	b.n	800dd40 <RCC_APB1PeriphResetCmd+0x8>
 800dd4a:	bf00      	nop
 800dd4c:	40023800 	.word	0x40023800

0800dd50 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dd50:	4b04      	ldr	r3, [pc, #16]	@ (800dd64 <RCC_APB2PeriphResetCmd+0x14>)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800dd52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  if (NewState != DISABLE)
 800dd54:	b111      	cbz	r1, 800dd5c <RCC_APB2PeriphResetCmd+0xc>
    RCC->APB2RSTR |= RCC_APB2Periph;
 800dd56:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800dd58:	6258      	str	r0, [r3, #36]	@ 0x24
  }
}
 800dd5a:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800dd5c:	ea22 0000 	bic.w	r0, r2, r0
 800dd60:	e7fa      	b.n	800dd58 <RCC_APB2PeriphResetCmd+0x8>
 800dd62:	bf00      	nop
 800dd64:	40023800 	.word	0x40023800

0800dd68 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800dd68:	6241      	str	r1, [r0, #36]	@ 0x24
}
 800dd6a:	4770      	bx	lr

0800dd6c <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800dd6c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800dd6e:	f023 0302 	bic.w	r3, r3, #2
 800dd72:	041b      	lsls	r3, r3, #16
 800dd74:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 800dd76:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800dd78:	8401      	strh	r1, [r0, #32]
}
 800dd7a:	4770      	bx	lr

0800dd7c <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800dd7c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
}
 800dd7e:	4770      	bx	lr

0800dd80 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800dd80:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800dd82:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800dd84:	ea11 0003 	ands.w	r0, r1, r3
  itenable = TIMx->DIER & TIM_IT;
 800dd88:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800dd8a:	d003      	beq.n	800dd94 <TIM_GetITStatus+0x14>
 800dd8c:	420a      	tst	r2, r1
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 800dd8e:	bf14      	ite	ne
 800dd90:	2001      	movne	r0, #1
 800dd92:	2000      	moveq	r0, #0
  }
  return bitstatus;
}
 800dd94:	4770      	bx	lr

0800dd96 <TIM_ClearITPendingBit>:
 800dd96:	43c9      	mvns	r1, r1
 800dd98:	b289      	uxth	r1, r1
 800dd9a:	8201      	strh	r1, [r0, #16]
 800dd9c:	4770      	bx	lr
	...

0800dda0 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800dda0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800dda2:	4b31      	ldr	r3, [pc, #196]	@ (800de68 <USART_DeInit+0xc8>)
 800dda4:	4298      	cmp	r0, r3
 800dda6:	d109      	bne.n	800ddbc <USART_DeInit+0x1c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800dda8:	2101      	movs	r1, #1
 800ddaa:	2010      	movs	r0, #16
 800ddac:	f7ff ffd0 	bl	800dd50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	2010      	movs	r0, #16
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800ddb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800ddb8:	f7ff bfca 	b.w	800dd50 <RCC_APB2PeriphResetCmd>
  else if (USARTx == USART2)
 800ddbc:	4b2b      	ldr	r3, [pc, #172]	@ (800de6c <USART_DeInit+0xcc>)
 800ddbe:	4298      	cmp	r0, r3
 800ddc0:	d10b      	bne.n	800ddda <USART_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800ddc2:	2101      	movs	r1, #1
 800ddc4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800ddc8:	f7ff ffb6 	bl	800dd38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800ddcc:	2100      	movs	r1, #0
 800ddce:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
}
 800ddd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 800ddd6:	f7ff bfaf 	b.w	800dd38 <RCC_APB1PeriphResetCmd>
  else if (USARTx == USART3)
 800ddda:	4b25      	ldr	r3, [pc, #148]	@ (800de70 <USART_DeInit+0xd0>)
 800dddc:	4298      	cmp	r0, r3
 800ddde:	d108      	bne.n	800ddf2 <USART_DeInit+0x52>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800dde0:	2101      	movs	r1, #1
 800dde2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800dde6:	f7ff ffa7 	bl	800dd38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800ddea:	2100      	movs	r1, #0
 800ddec:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800ddf0:	e7ef      	b.n	800ddd2 <USART_DeInit+0x32>
  else if (USARTx == UART4)
 800ddf2:	4b20      	ldr	r3, [pc, #128]	@ (800de74 <USART_DeInit+0xd4>)
 800ddf4:	4298      	cmp	r0, r3
 800ddf6:	d108      	bne.n	800de0a <USART_DeInit+0x6a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800ddf8:	2101      	movs	r1, #1
 800ddfa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ddfe:	f7ff ff9b 	bl	800dd38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800de02:	2100      	movs	r1, #0
 800de04:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800de08:	e7e3      	b.n	800ddd2 <USART_DeInit+0x32>
  else if (USARTx == UART5)
 800de0a:	4b1b      	ldr	r3, [pc, #108]	@ (800de78 <USART_DeInit+0xd8>)
 800de0c:	4298      	cmp	r0, r3
 800de0e:	d108      	bne.n	800de22 <USART_DeInit+0x82>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800de10:	2101      	movs	r1, #1
 800de12:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800de16:	f7ff ff8f 	bl	800dd38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800de1a:	2100      	movs	r1, #0
 800de1c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800de20:	e7d7      	b.n	800ddd2 <USART_DeInit+0x32>
  else if (USARTx == USART6)
 800de22:	4b16      	ldr	r3, [pc, #88]	@ (800de7c <USART_DeInit+0xdc>)
 800de24:	4298      	cmp	r0, r3
 800de26:	d106      	bne.n	800de36 <USART_DeInit+0x96>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800de28:	2101      	movs	r1, #1
 800de2a:	2020      	movs	r0, #32
 800de2c:	f7ff ff90 	bl	800dd50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800de30:	2100      	movs	r1, #0
 800de32:	2020      	movs	r0, #32
 800de34:	e7be      	b.n	800ddb4 <USART_DeInit+0x14>
  else if (USARTx == UART7)
 800de36:	4b12      	ldr	r3, [pc, #72]	@ (800de80 <USART_DeInit+0xe0>)
 800de38:	4298      	cmp	r0, r3
 800de3a:	d108      	bne.n	800de4e <USART_DeInit+0xae>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 800de3c:	2101      	movs	r1, #1
 800de3e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800de42:	f7ff ff79 	bl	800dd38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 800de46:	2100      	movs	r1, #0
 800de48:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800de4c:	e7c1      	b.n	800ddd2 <USART_DeInit+0x32>
    if (USARTx == UART8)
 800de4e:	4b0d      	ldr	r3, [pc, #52]	@ (800de84 <USART_DeInit+0xe4>)
 800de50:	4298      	cmp	r0, r3
 800de52:	d108      	bne.n	800de66 <USART_DeInit+0xc6>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 800de54:	2101      	movs	r1, #1
 800de56:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800de5a:	f7ff ff6d 	bl	800dd38 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 800de5e:	2100      	movs	r1, #0
 800de60:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800de64:	e7b5      	b.n	800ddd2 <USART_DeInit+0x32>
}
 800de66:	bd08      	pop	{r3, pc}
 800de68:	40011000 	.word	0x40011000
 800de6c:	40004400 	.word	0x40004400
 800de70:	40004800 	.word	0x40004800
 800de74:	40004c00 	.word	0x40004c00
 800de78:	40005000 	.word	0x40005000
 800de7c:	40011400 	.word	0x40011400
 800de80:	40007800 	.word	0x40007800
 800de84:	40007c00 	.word	0x40007c00

0800de88 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800de88:	8a03      	ldrh	r3, [r0, #16]
{
 800de8a:	b530      	push	{r4, r5, lr}
 800de8c:	460d      	mov	r5, r1
  tmpreg = USARTx->CR2;
 800de8e:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800de90:	88ea      	ldrh	r2, [r5, #6]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 800de92:	8989      	ldrh	r1, [r1, #12]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800de94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800de98:	4313      	orrs	r3, r2
 800de9a:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800de9c:	8983      	ldrh	r3, [r0, #12]
{
 800de9e:	4604      	mov	r4, r0

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800dea0:	f423 52b0 	bic.w	r2, r3, #5632	@ 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800dea4:	8928      	ldrh	r0, [r5, #8]
 800dea6:	88ab      	ldrh	r3, [r5, #4]
 800dea8:	4303      	orrs	r3, r0
 800deaa:	8968      	ldrh	r0, [r5, #10]
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800deac:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800deb0:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800deb2:	0412      	lsls	r2, r2, #16
 800deb4:	0c12      	lsrs	r2, r2, #16
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800deb6:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800deb8:	4313      	orrs	r3, r2
 800deba:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800debc:	8aa3      	ldrh	r3, [r4, #20]
 800debe:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800dec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800dec4:	430b      	orrs	r3, r1
{
 800dec6:	b085      	sub	sp, #20
  USARTx->CR3 = (uint16_t)tmpreg;
 800dec8:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800deca:	4668      	mov	r0, sp
 800decc:	f7ff fec0 	bl	800dc50 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800ded0:	4b17      	ldr	r3, [pc, #92]	@ (800df30 <USART_Init+0xa8>)
 800ded2:	429c      	cmp	r4, r3
 800ded4:	d003      	beq.n	800dede <USART_Init+0x56>
 800ded6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800deda:	429c      	cmp	r4, r3
 800dedc:	d126      	bne.n	800df2c <USART_Init+0xa4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800dede:	9b03      	ldr	r3, [sp, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800dee0:	89a1      	ldrh	r1, [r4, #12]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800dee2:	2219      	movs	r2, #25
 800dee4:	4353      	muls	r3, r2
 800dee6:	682a      	ldr	r2, [r5, #0]
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800dee8:	040d      	lsls	r5, r1, #16
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 800deea:	f04f 0164 	mov.w	r1, #100	@ 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800deee:	bf4c      	ite	mi
 800def0:	0052      	lslmi	r2, r2, #1
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800def2:	0092      	lslpl	r2, r2, #2
 800def4:	fbb3 f3f2 	udiv	r3, r3, r2
  tmpreg = (integerdivider / 100) << 4;
 800def8:	fbb3 f0f1 	udiv	r0, r3, r1
 800defc:	fb01 3310 	mls	r3, r1, r0, r3
 800df00:	0102      	lsls	r2, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800df02:	89a0      	ldrh	r0, [r4, #12]
 800df04:	0400      	lsls	r0, r0, #16
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800df06:	bf4b      	itete	mi
 800df08:	00db      	lslmi	r3, r3, #3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800df0a:	011b      	lslpl	r3, r3, #4
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800df0c:	3332      	addmi	r3, #50	@ 0x32
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800df0e:	3332      	addpl	r3, #50	@ 0x32
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800df10:	bf4b      	itete	mi
 800df12:	fbb3 f3f1 	udivmi	r3, r3, r1
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800df16:	fbb3 f3f1 	udivpl	r3, r3, r1
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800df1a:	f003 0307 	andmi.w	r3, r3, #7
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800df1e:	f003 030f 	andpl.w	r3, r3, #15
 800df22:	4313      	orrs	r3, r2
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800df24:	b29b      	uxth	r3, r3
 800df26:	8123      	strh	r3, [r4, #8]
}
 800df28:	b005      	add	sp, #20
 800df2a:	bd30      	pop	{r4, r5, pc}
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800df2c:	9b02      	ldr	r3, [sp, #8]
 800df2e:	e7d7      	b.n	800dee0 <USART_Init+0x58>
 800df30:	40011000 	.word	0x40011000

0800df34 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800df34:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 800df36:	b121      	cbz	r1, 800df42 <USART_Cmd+0xe>
    USARTx->CR1 |= USART_CR1_UE;
 800df38:	b29b      	uxth	r3, r3
 800df3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800df3e:	8183      	strh	r3, [r0, #12]
  }
}
 800df40:	4770      	bx	lr
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800df42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800df46:	041b      	lsls	r3, r3, #16
 800df48:	0c1b      	lsrs	r3, r3, #16
 800df4a:	e7f8      	b.n	800df3e <USART_Cmd+0xa>

0800df4c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800df4c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800df50:	8081      	strh	r1, [r0, #4]
}
 800df52:	4770      	bx	lr

0800df54 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800df54:	8880      	ldrh	r0, [r0, #4]
}
 800df56:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800df5a:	4770      	bx	lr

0800df5c <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800df5c:	2301      	movs	r3, #1
{
 800df5e:	b510      	push	{r4, lr}
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800df60:	f3c1 1442 	ubfx	r4, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800df64:	429c      	cmp	r4, r3
  itpos = USART_IT & IT_MASK;
 800df66:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 800df6a:	fa03 f101 	lsl.w	r1, r3, r1
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800df6e:	d105      	bne.n	800df7c <USART_ITConfig+0x20>
  {
    usartxbase += 0x0C;
 800df70:	300c      	adds	r0, #12
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800df72:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 800df74:	b13a      	cbz	r2, 800df86 <USART_ITConfig+0x2a>
    *(__IO uint32_t*)usartxbase  |= itmask;
 800df76:	4319      	orrs	r1, r3
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800df78:	6001      	str	r1, [r0, #0]
  }
}
 800df7a:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800df7c:	2c02      	cmp	r4, #2
    usartxbase += 0x10;
 800df7e:	bf0c      	ite	eq
 800df80:	3010      	addeq	r0, #16
    usartxbase += 0x14; 
 800df82:	3014      	addne	r0, #20
 800df84:	e7f5      	b.n	800df72 <USART_ITConfig+0x16>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800df86:	ea23 0101 	bic.w	r1, r3, r1
 800df8a:	e7f5      	b.n	800df78 <USART_ITConfig+0x1c>

0800df8c <USART_GetITStatus>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800df8c:	f3c1 1242 	ubfx	r2, r1, #5, #3
{
 800df90:	b510      	push	{r4, lr}
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800df92:	2301      	movs	r3, #1
  itmask = USART_IT & IT_MASK;
 800df94:	f001 041f 	and.w	r4, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800df98:	2a01      	cmp	r2, #1
  itmask = (uint32_t)0x01 << itmask;
 800df9a:	fa03 f304 	lsl.w	r3, r3, r4
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800df9e:	d10e      	bne.n	800dfbe <USART_GetITStatus+0x32>
  {
    itmask &= USARTx->CR1;
 800dfa0:	8982      	ldrh	r2, [r0, #12]
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800dfa2:	b292      	uxth	r2, r2
 800dfa4:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 800dfa6:	8802      	ldrh	r2, [r0, #0]
 800dfa8:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800dfaa:	b16b      	cbz	r3, 800dfc8 <USART_GetITStatus+0x3c>
  bitpos = (uint32_t)0x01 << bitpos;
 800dfac:	2301      	movs	r3, #1
  bitpos = USART_IT >> 0x08;
 800dfae:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 800dfb0:	fa03 f101 	lsl.w	r1, r3, r1
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800dfb4:	420a      	tst	r2, r1
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 800dfb6:	bf14      	ite	ne
 800dfb8:	4618      	movne	r0, r3
 800dfba:	2000      	moveq	r0, #0
  }
  
  return bitstatus;  
}
 800dfbc:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800dfbe:	2a02      	cmp	r2, #2
    itmask &= USARTx->CR2;
 800dfc0:	bf0c      	ite	eq
 800dfc2:	8a02      	ldrheq	r2, [r0, #16]
    itmask &= USARTx->CR3;
 800dfc4:	8a82      	ldrhne	r2, [r0, #20]
 800dfc6:	e7ec      	b.n	800dfa2 <USART_GetITStatus+0x16>
    bitstatus = RESET;
 800dfc8:	4618      	mov	r0, r3
 800dfca:	e7f7      	b.n	800dfbc <USART_GetITStatus+0x30>

0800dfcc <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800dfcc:	0a09      	lsrs	r1, r1, #8
 800dfce:	2301      	movs	r3, #1
 800dfd0:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 800dfd2:	43db      	mvns	r3, r3
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	8003      	strh	r3, [r0, #0]
}
 800dfd8:	4770      	bx	lr
	...

0800dfdc <FSMC_NORSRAMInit>:
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 

  /* Get the BTCR register value */
  tmpbcr = FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank];
 800dfdc:	6802      	ldr	r2, [r0, #0]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800dfde:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800dfe0:	0092      	lsls	r2, r2, #2
 800dfe2:	f102 4220 	add.w	r2, r2, #2684354560	@ 0xa0000000
{ 
 800dfe6:	b570      	push	{r4, r5, r6, lr}
  tmpbcr = FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank];
 800dfe8:	6813      	ldr	r3, [r2, #0]
  tmpbcr &= ((uint32_t)~(FSMC_BCR1_MBKEN    | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800dfea:	4d2a      	ldr	r5, [pc, #168]	@ (800e094 <FSMC_NORSRAMInit+0xb8>)
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800dfec:	6884      	ldr	r4, [r0, #8]
 800dfee:	68c6      	ldr	r6, [r0, #12]
  tmpbcr &= ((uint32_t)~(FSMC_BCR1_MBKEN    | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800dff0:	401d      	ands	r5, r3
  tmpbcr |= (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 800dff2:	6843      	ldr	r3, [r0, #4]
 800dff4:	4323      	orrs	r3, r4
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800dff6:	4333      	orrs	r3, r6
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 800dff8:	6906      	ldr	r6, [r0, #16]
 800dffa:	4333      	orrs	r3, r6
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 800dffc:	6946      	ldr	r6, [r0, #20]
 800dffe:	4333      	orrs	r3, r6
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 800e000:	6986      	ldr	r6, [r0, #24]
 800e002:	4333      	orrs	r3, r6
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800e004:	69c6      	ldr	r6, [r0, #28]
 800e006:	4333      	orrs	r3, r6
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 800e008:	6a06      	ldr	r6, [r0, #32]
 800e00a:	4333      	orrs	r3, r6
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 800e00c:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 800e00e:	4333      	orrs	r3, r6
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 800e010:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 800e012:	4333      	orrs	r3, r6
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800e014:	6b06      	ldr	r6, [r0, #48]	@ 0x30
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 800e016:	430b      	orrs	r3, r1
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800e018:	4333      	orrs	r3, r6
  tmpbcr |= (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 800e01a:	432b      	orrs	r3, r5
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
			
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = tmpbcr;
 800e01c:	6013      	str	r3, [r2, #0]
  
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 800e01e:	2c08      	cmp	r4, #8
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 800e020:	bf08      	it	eq
 800e022:	6813      	ldreq	r3, [r2, #0]
  tmpbtr &= ((uint32_t)~(FSMC_BTR1_ADDSET | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
					   
  /* Bank1 NOR/SRAM timing register configuration */
  tmpbtr |= (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 800e024:	6b44      	ldr	r4, [r0, #52]	@ 0x34
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 800e026:	bf08      	it	eq
 800e028:	f043 0340 	orreq.w	r3, r3, #64	@ 0x40
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800e02c:	69a6      	ldr	r6, [r4, #24]
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 800e02e:	bf08      	it	eq
 800e030:	6013      	streq	r3, [r2, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800e032:	6823      	ldr	r3, [r4, #0]
  tmpbtr = FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1];
 800e034:	6855      	ldr	r5, [r2, #4]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800e036:	4333      	orrs	r3, r6
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 800e038:	6866      	ldr	r6, [r4, #4]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800e03a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 800e03e:	68a6      	ldr	r6, [r4, #8]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800e040:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 800e044:	68e6      	ldr	r6, [r4, #12]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800e046:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 800e04a:	6926      	ldr	r6, [r4, #16]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800e04c:	6964      	ldr	r4, [r4, #20]
 800e04e:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  tmpbtr &= ((uint32_t)~(FSMC_BTR1_ADDSET | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800e052:	f005 4540 	and.w	r5, r5, #3221225472	@ 0xc0000000
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800e056:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  tmpbtr |= (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 800e05a:	432b      	orrs	r3, r5
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = tmpbtr;
	
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 800e05c:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = tmpbtr;
 800e060:	6053      	str	r3, [r2, #4]
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 800e062:	d114      	bne.n	800e08e <FSMC_NORSRAMInit+0xb2>
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, and ACCMOD bits */
    tmpbwr &= ((uint32_t)~(FSMC_BWTR1_ADDSET | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
                           FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));
    
    tmpbwr |= (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800e064:	6b81      	ldr	r1, [r0, #56]	@ 0x38
    tmpbwr = FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank];
 800e066:	f8d2 4104 	ldr.w	r4, [r2, #260]	@ 0x104
    tmpbwr |= (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800e06a:	6988      	ldr	r0, [r1, #24]
 800e06c:	680b      	ldr	r3, [r1, #0]
 800e06e:	4303      	orrs	r3, r0
    tmpbwr &= ((uint32_t)~(FSMC_BWTR1_ADDSET | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800e070:	4809      	ldr	r0, [pc, #36]	@ (800e098 <FSMC_NORSRAMInit+0xbc>)
 800e072:	4020      	ands	r0, r4
 800e074:	4303      	orrs	r3, r0
                       (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 800e076:	6848      	ldr	r0, [r1, #4]
 800e078:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                       (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 800e07c:	6888      	ldr	r0, [r1, #8]
                       (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 800e07e:	68c9      	ldr	r1, [r1, #12]
 800e080:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    tmpbwr |= (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800e084:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = tmpbwr;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 800e088:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  }
}
 800e08c:	bd70      	pop	{r4, r5, r6, pc}
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 800e08e:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800e092:	e7f9      	b.n	800e088 <FSMC_NORSRAMInit+0xac>
 800e094:	fff70080 	.word	0xfff70080
 800e098:	cff00000 	.word	0xcff00000

0800e09c <FSMC_NORSRAMCmd>:
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e09c:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 800e0a0:	b131      	cbz	r1, 800e0b0 <FSMC_NORSRAMCmd+0x14>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 800e0a2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800e0a6:	f042 0201 	orr.w	r2, r2, #1
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 800e0aa:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  }
}
 800e0ae:	4770      	bx	lr
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 800e0b0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800e0b4:	4a01      	ldr	r2, [pc, #4]	@ (800e0bc <FSMC_NORSRAMCmd+0x20>)
 800e0b6:	400a      	ands	r2, r1
 800e0b8:	e7f7      	b.n	800e0aa <FSMC_NORSRAMCmd+0xe>
 800e0ba:	bf00      	nop
 800e0bc:	000ffffe 	.word	0x000ffffe

0800e0c0 <rand>:
 800e0c0:	4b0c      	ldr	r3, [pc, #48]	@ (800e0f4 <rand+0x34>)
 800e0c2:	480d      	ldr	r0, [pc, #52]	@ (800e0f8 <rand+0x38>)
 800e0c4:	6819      	ldr	r1, [r3, #0]
 800e0c6:	4a0d      	ldr	r2, [pc, #52]	@ (800e0fc <rand+0x3c>)
 800e0c8:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 800e0cc:	b410      	push	{r4}
 800e0ce:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 800e0d2:	fb03 f000 	mul.w	r0, r3, r0
 800e0d6:	fb02 0004 	mla	r0, r2, r4, r0
 800e0da:	fba3 3202 	umull	r3, r2, r3, r2
 800e0de:	3301      	adds	r3, #1
 800e0e0:	eb40 0002 	adc.w	r0, r0, r2
 800e0e4:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 800e0e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0ec:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	20000018 	.word	0x20000018
 800e0f8:	5851f42d 	.word	0x5851f42d
 800e0fc:	4c957f2d 	.word	0x4c957f2d

0800e100 <memset>:
 800e100:	0783      	lsls	r3, r0, #30
 800e102:	b530      	push	{r4, r5, lr}
 800e104:	d047      	beq.n	800e196 <memset+0x96>
 800e106:	1e54      	subs	r4, r2, #1
 800e108:	2a00      	cmp	r2, #0
 800e10a:	d03e      	beq.n	800e18a <memset+0x8a>
 800e10c:	b2ca      	uxtb	r2, r1
 800e10e:	4603      	mov	r3, r0
 800e110:	e001      	b.n	800e116 <memset+0x16>
 800e112:	3c01      	subs	r4, #1
 800e114:	d339      	bcc.n	800e18a <memset+0x8a>
 800e116:	f803 2b01 	strb.w	r2, [r3], #1
 800e11a:	079d      	lsls	r5, r3, #30
 800e11c:	d1f9      	bne.n	800e112 <memset+0x12>
 800e11e:	2c03      	cmp	r4, #3
 800e120:	d92c      	bls.n	800e17c <memset+0x7c>
 800e122:	b2cd      	uxtb	r5, r1
 800e124:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800e128:	2c0f      	cmp	r4, #15
 800e12a:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 800e12e:	d935      	bls.n	800e19c <memset+0x9c>
 800e130:	f1a4 0210 	sub.w	r2, r4, #16
 800e134:	f022 0c0f 	bic.w	ip, r2, #15
 800e138:	f103 0e10 	add.w	lr, r3, #16
 800e13c:	44e6      	add	lr, ip
 800e13e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800e142:	461a      	mov	r2, r3
 800e144:	e9c2 5500 	strd	r5, r5, [r2]
 800e148:	e9c2 5502 	strd	r5, r5, [r2, #8]
 800e14c:	3210      	adds	r2, #16
 800e14e:	4572      	cmp	r2, lr
 800e150:	d1f8      	bne.n	800e144 <memset+0x44>
 800e152:	f10c 0201 	add.w	r2, ip, #1
 800e156:	f014 0f0c 	tst.w	r4, #12
 800e15a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800e15e:	f004 0c0f 	and.w	ip, r4, #15
 800e162:	d013      	beq.n	800e18c <memset+0x8c>
 800e164:	f1ac 0304 	sub.w	r3, ip, #4
 800e168:	f023 0303 	bic.w	r3, r3, #3
 800e16c:	3304      	adds	r3, #4
 800e16e:	4413      	add	r3, r2
 800e170:	f842 5b04 	str.w	r5, [r2], #4
 800e174:	4293      	cmp	r3, r2
 800e176:	d1fb      	bne.n	800e170 <memset+0x70>
 800e178:	f00c 0403 	and.w	r4, ip, #3
 800e17c:	b12c      	cbz	r4, 800e18a <memset+0x8a>
 800e17e:	b2c9      	uxtb	r1, r1
 800e180:	441c      	add	r4, r3
 800e182:	f803 1b01 	strb.w	r1, [r3], #1
 800e186:	42a3      	cmp	r3, r4
 800e188:	d1fb      	bne.n	800e182 <memset+0x82>
 800e18a:	bd30      	pop	{r4, r5, pc}
 800e18c:	4664      	mov	r4, ip
 800e18e:	4613      	mov	r3, r2
 800e190:	2c00      	cmp	r4, #0
 800e192:	d1f4      	bne.n	800e17e <memset+0x7e>
 800e194:	e7f9      	b.n	800e18a <memset+0x8a>
 800e196:	4603      	mov	r3, r0
 800e198:	4614      	mov	r4, r2
 800e19a:	e7c0      	b.n	800e11e <memset+0x1e>
 800e19c:	461a      	mov	r2, r3
 800e19e:	46a4      	mov	ip, r4
 800e1a0:	e7e0      	b.n	800e164 <memset+0x64>
 800e1a2:	bf00      	nop

0800e1a4 <strncmp>:
 800e1a4:	2a00      	cmp	r2, #0
 800e1a6:	d03e      	beq.n	800e226 <strncmp+0x82>
 800e1a8:	b530      	push	{r4, r5, lr}
 800e1aa:	4684      	mov	ip, r0
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	4308      	orrs	r0, r1
 800e1b0:	0780      	lsls	r0, r0, #30
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	d12e      	bne.n	800e214 <strncmp+0x70>
 800e1b6:	2a03      	cmp	r2, #3
 800e1b8:	d807      	bhi.n	800e1ca <strncmp+0x26>
 800e1ba:	e02b      	b.n	800e214 <strncmp+0x70>
 800e1bc:	3a04      	subs	r2, #4
 800e1be:	d025      	beq.n	800e20c <strncmp+0x68>
 800e1c0:	f01e 3f80 	tst.w	lr, #2155905152	@ 0x80808080
 800e1c4:	d122      	bne.n	800e20c <strncmp+0x68>
 800e1c6:	2a03      	cmp	r2, #3
 800e1c8:	d922      	bls.n	800e210 <strncmp+0x6c>
 800e1ca:	6820      	ldr	r0, [r4, #0]
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	f853 5b04 	ldr.w	r5, [r3], #4
 800e1d2:	f1a0 3e01 	sub.w	lr, r0, #16843009	@ 0x1010101
 800e1d6:	42a8      	cmp	r0, r5
 800e1d8:	46a4      	mov	ip, r4
 800e1da:	ea2e 0e00 	bic.w	lr, lr, r0
 800e1de:	f104 0404 	add.w	r4, r4, #4
 800e1e2:	d0eb      	beq.n	800e1bc <strncmp+0x18>
 800e1e4:	f89c 0000 	ldrb.w	r0, [ip]
 800e1e8:	780c      	ldrb	r4, [r1, #0]
 800e1ea:	4284      	cmp	r4, r0
 800e1ec:	d11d      	bne.n	800e22a <strncmp+0x86>
 800e1ee:	46e6      	mov	lr, ip
 800e1f0:	b168      	cbz	r0, 800e20e <strncmp+0x6a>
 800e1f2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 800e1f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e1fa:	eba2 030e 	sub.w	r3, r2, lr
 800e1fe:	42a0      	cmp	r0, r4
 800e200:	f103 33ff 	add.w	r3, r3, #4294967295
 800e204:	d111      	bne.n	800e22a <strncmp+0x86>
 800e206:	eb1c 0303 	adds.w	r3, ip, r3
 800e20a:	d1f1      	bne.n	800e1f0 <strncmp+0x4c>
 800e20c:	2000      	movs	r0, #0
 800e20e:	bd30      	pop	{r4, r5, pc}
 800e210:	46a4      	mov	ip, r4
 800e212:	4619      	mov	r1, r3
 800e214:	f89c 0000 	ldrb.w	r0, [ip]
 800e218:	780c      	ldrb	r4, [r1, #0]
 800e21a:	42a0      	cmp	r0, r4
 800e21c:	d105      	bne.n	800e22a <strncmp+0x86>
 800e21e:	2a01      	cmp	r2, #1
 800e220:	d0f4      	beq.n	800e20c <strncmp+0x68>
 800e222:	46e6      	mov	lr, ip
 800e224:	e7e4      	b.n	800e1f0 <strncmp+0x4c>
 800e226:	4610      	mov	r0, r2
 800e228:	4770      	bx	lr
 800e22a:	1b00      	subs	r0, r0, r4
 800e22c:	bd30      	pop	{r4, r5, pc}
 800e22e:	bf00      	nop
	...

0800e240 <strcmp>:
 800e240:	7802      	ldrb	r2, [r0, #0]
 800e242:	780b      	ldrb	r3, [r1, #0]
 800e244:	2a01      	cmp	r2, #1
 800e246:	bf28      	it	cs
 800e248:	429a      	cmpcs	r2, r3
 800e24a:	f040 80d8 	bne.w	800e3fe <strcmp+0x1be>
 800e24e:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 800e252:	ea40 0401 	orr.w	r4, r0, r1
 800e256:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e25a:	f06f 0c00 	mvn.w	ip, #0
 800e25e:	ea4f 7244 	mov.w	r2, r4, lsl #29
 800e262:	b31a      	cbz	r2, 800e2ac <strcmp+0x6c>
 800e264:	ea80 0401 	eor.w	r4, r0, r1
 800e268:	f014 0f07 	tst.w	r4, #7
 800e26c:	d16b      	bne.n	800e346 <strcmp+0x106>
 800e26e:	f000 0407 	and.w	r4, r0, #7
 800e272:	f020 0007 	bic.w	r0, r0, #7
 800e276:	f004 0503 	and.w	r5, r4, #3
 800e27a:	f021 0107 	bic.w	r1, r1, #7
 800e27e:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800e282:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800e286:	f014 0f04 	tst.w	r4, #4
 800e28a:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800e28e:	fa0c f405 	lsl.w	r4, ip, r5
 800e292:	ea62 0204 	orn	r2, r2, r4
 800e296:	ea66 0604 	orn	r6, r6, r4
 800e29a:	d00b      	beq.n	800e2b4 <strcmp+0x74>
 800e29c:	ea63 0304 	orn	r3, r3, r4
 800e2a0:	4662      	mov	r2, ip
 800e2a2:	ea67 0704 	orn	r7, r7, r4
 800e2a6:	4666      	mov	r6, ip
 800e2a8:	e004      	b.n	800e2b4 <strcmp+0x74>
 800e2aa:	bf00      	nop
 800e2ac:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800e2b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800e2b4:	fa82 f54c 	uadd8	r5, r2, ip
 800e2b8:	ea82 0406 	eor.w	r4, r2, r6
 800e2bc:	faa4 f48c 	sel	r4, r4, ip
 800e2c0:	bb6c      	cbnz	r4, 800e31e <strcmp+0xde>
 800e2c2:	fa83 f54c 	uadd8	r5, r3, ip
 800e2c6:	ea83 0507 	eor.w	r5, r3, r7
 800e2ca:	faa5 f58c 	sel	r5, r5, ip
 800e2ce:	b995      	cbnz	r5, 800e2f6 <strcmp+0xb6>
 800e2d0:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 800e2d4:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800e2d8:	fa82 f54c 	uadd8	r5, r2, ip
 800e2dc:	ea82 0406 	eor.w	r4, r2, r6
 800e2e0:	faa4 f48c 	sel	r4, r4, ip
 800e2e4:	fa83 f54c 	uadd8	r5, r3, ip
 800e2e8:	ea83 0507 	eor.w	r5, r3, r7
 800e2ec:	faa5 f58c 	sel	r5, r5, ip
 800e2f0:	4325      	orrs	r5, r4
 800e2f2:	d0db      	beq.n	800e2ac <strcmp+0x6c>
 800e2f4:	b99c      	cbnz	r4, 800e31e <strcmp+0xde>
 800e2f6:	ba2d      	rev	r5, r5
 800e2f8:	fab5 f485 	clz	r4, r5
 800e2fc:	f024 0407 	bic.w	r4, r4, #7
 800e300:	fa27 f104 	lsr.w	r1, r7, r4
 800e304:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e308:	fa23 f304 	lsr.w	r3, r3, r4
 800e30c:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
 800e310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800e314:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800e318:	eba0 0001 	sub.w	r0, r0, r1
 800e31c:	4770      	bx	lr
 800e31e:	ba24      	rev	r4, r4
 800e320:	fab4 f484 	clz	r4, r4
 800e324:	f024 0407 	bic.w	r4, r4, #7
 800e328:	fa26 f104 	lsr.w	r1, r6, r4
 800e32c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e330:	fa22 f204 	lsr.w	r2, r2, r4
 800e334:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
 800e338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800e33c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800e340:	eba0 0001 	sub.w	r0, r0, r1
 800e344:	4770      	bx	lr
 800e346:	f014 0f03 	tst.w	r4, #3
 800e34a:	d13c      	bne.n	800e3c6 <strcmp+0x186>
 800e34c:	f010 0403 	ands.w	r4, r0, #3
 800e350:	d128      	bne.n	800e3a4 <strcmp+0x164>
 800e352:	f850 2b08 	ldr.w	r2, [r0], #8
 800e356:	f851 3b08 	ldr.w	r3, [r1], #8
 800e35a:	fa82 f54c 	uadd8	r5, r2, ip
 800e35e:	ea82 0503 	eor.w	r5, r2, r3
 800e362:	faa5 f58c 	sel	r5, r5, ip
 800e366:	b95d      	cbnz	r5, 800e380 <strcmp+0x140>
 800e368:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e370:	fa82 f54c 	uadd8	r5, r2, ip
 800e374:	ea82 0503 	eor.w	r5, r2, r3
 800e378:	faa5 f58c 	sel	r5, r5, ip
 800e37c:	2d00      	cmp	r5, #0
 800e37e:	d0e8      	beq.n	800e352 <strcmp+0x112>
 800e380:	ba2d      	rev	r5, r5
 800e382:	fab5 f485 	clz	r4, r5
 800e386:	f024 0407 	bic.w	r4, r4, #7
 800e38a:	fa23 f104 	lsr.w	r1, r3, r4
 800e38e:	fa22 f204 	lsr.w	r2, r2, r4
 800e392:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
 800e396:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800e39a:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800e39e:	eba0 0001 	sub.w	r0, r0, r1
 800e3a2:	4770      	bx	lr
 800e3a4:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800e3a8:	f020 0003 	bic.w	r0, r0, #3
 800e3ac:	f850 2b08 	ldr.w	r2, [r0], #8
 800e3b0:	f021 0103 	bic.w	r1, r1, #3
 800e3b4:	f851 3b08 	ldr.w	r3, [r1], #8
 800e3b8:	fa0c f404 	lsl.w	r4, ip, r4
 800e3bc:	ea62 0204 	orn	r2, r2, r4
 800e3c0:	ea63 0304 	orn	r3, r3, r4
 800e3c4:	e7c9      	b.n	800e35a <strcmp+0x11a>
 800e3c6:	f010 0403 	ands.w	r4, r0, #3
 800e3ca:	d01d      	beq.n	800e408 <strcmp+0x1c8>
 800e3cc:	eba1 0104 	sub.w	r1, r1, r4
 800e3d0:	f020 0003 	bic.w	r0, r0, #3
 800e3d4:	07e4      	lsls	r4, r4, #31
 800e3d6:	f850 2b04 	ldr.w	r2, [r0], #4
 800e3da:	d006      	beq.n	800e3ea <strcmp+0x1aa>
 800e3dc:	d212      	bcs.n	800e404 <strcmp+0x1c4>
 800e3de:	788b      	ldrb	r3, [r1, #2]
 800e3e0:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 800e3e4:	1ae4      	subs	r4, r4, r3
 800e3e6:	d106      	bne.n	800e3f6 <strcmp+0x1b6>
 800e3e8:	b12b      	cbz	r3, 800e3f6 <strcmp+0x1b6>
 800e3ea:	78cb      	ldrb	r3, [r1, #3]
 800e3ec:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 800e3f0:	1ae4      	subs	r4, r4, r3
 800e3f2:	d100      	bne.n	800e3f6 <strcmp+0x1b6>
 800e3f4:	b933      	cbnz	r3, 800e404 <strcmp+0x1c4>
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	f85d 4b10 	ldr.w	r4, [sp], #16
 800e3fc:	4770      	bx	lr
 800e3fe:	eba2 0003 	sub.w	r0, r2, r3
 800e402:	4770      	bx	lr
 800e404:	f101 0104 	add.w	r1, r1, #4
 800e408:	f850 2b04 	ldr.w	r2, [r0], #4
 800e40c:	07cc      	lsls	r4, r1, #31
 800e40e:	f021 0103 	bic.w	r1, r1, #3
 800e412:	f851 3b04 	ldr.w	r3, [r1], #4
 800e416:	d848      	bhi.n	800e4aa <strcmp+0x26a>
 800e418:	d224      	bcs.n	800e464 <strcmp+0x224>
 800e41a:	f022 447f 	bic.w	r4, r2, #4278190080	@ 0xff000000
 800e41e:	fa82 f54c 	uadd8	r5, r2, ip
 800e422:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 800e426:	faa5 f58c 	sel	r5, r5, ip
 800e42a:	d10a      	bne.n	800e442 <strcmp+0x202>
 800e42c:	b965      	cbnz	r5, 800e448 <strcmp+0x208>
 800e42e:	f851 3b04 	ldr.w	r3, [r1], #4
 800e432:	ea84 0402 	eor.w	r4, r4, r2
 800e436:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 800e43a:	d10e      	bne.n	800e45a <strcmp+0x21a>
 800e43c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e440:	e7eb      	b.n	800e41a <strcmp+0x1da>
 800e442:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800e446:	e055      	b.n	800e4f4 <strcmp+0x2b4>
 800e448:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800e44c:	d14d      	bne.n	800e4ea <strcmp+0x2aa>
 800e44e:	7808      	ldrb	r0, [r1, #0]
 800e450:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800e454:	f1c0 0000 	rsb	r0, r0, #0
 800e458:	4770      	bx	lr
 800e45a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800e45e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 800e462:	e047      	b.n	800e4f4 <strcmp+0x2b4>
 800e464:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 800e468:	fa82 f54c 	uadd8	r5, r2, ip
 800e46c:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800e470:	faa5 f58c 	sel	r5, r5, ip
 800e474:	d10a      	bne.n	800e48c <strcmp+0x24c>
 800e476:	b965      	cbnz	r5, 800e492 <strcmp+0x252>
 800e478:	f851 3b04 	ldr.w	r3, [r1], #4
 800e47c:	ea84 0402 	eor.w	r4, r4, r2
 800e480:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 800e484:	d10c      	bne.n	800e4a0 <strcmp+0x260>
 800e486:	f850 2b04 	ldr.w	r2, [r0], #4
 800e48a:	e7eb      	b.n	800e464 <strcmp+0x224>
 800e48c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e490:	e030      	b.n	800e4f4 <strcmp+0x2b4>
 800e492:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 800e496:	d128      	bne.n	800e4ea <strcmp+0x2aa>
 800e498:	880b      	ldrh	r3, [r1, #0]
 800e49a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e49e:	e029      	b.n	800e4f4 <strcmp+0x2b4>
 800e4a0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e4a4:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 800e4a8:	e024      	b.n	800e4f4 <strcmp+0x2b4>
 800e4aa:	f002 04ff 	and.w	r4, r2, #255	@ 0xff
 800e4ae:	fa82 f54c 	uadd8	r5, r2, ip
 800e4b2:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 800e4b6:	faa5 f58c 	sel	r5, r5, ip
 800e4ba:	d10a      	bne.n	800e4d2 <strcmp+0x292>
 800e4bc:	b965      	cbnz	r5, 800e4d8 <strcmp+0x298>
 800e4be:	f851 3b04 	ldr.w	r3, [r1], #4
 800e4c2:	ea84 0402 	eor.w	r4, r4, r2
 800e4c6:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 800e4ca:	d109      	bne.n	800e4e0 <strcmp+0x2a0>
 800e4cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800e4d0:	e7eb      	b.n	800e4aa <strcmp+0x26a>
 800e4d2:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800e4d6:	e00d      	b.n	800e4f4 <strcmp+0x2b4>
 800e4d8:	f015 0fff 	tst.w	r5, #255	@ 0xff
 800e4dc:	d105      	bne.n	800e4ea <strcmp+0x2aa>
 800e4de:	680b      	ldr	r3, [r1, #0]
 800e4e0:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800e4e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e4e8:	e004      	b.n	800e4f4 <strcmp+0x2b4>
 800e4ea:	f04f 0000 	mov.w	r0, #0
 800e4ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800e4f2:	4770      	bx	lr
 800e4f4:	ba12      	rev	r2, r2
 800e4f6:	ba1b      	rev	r3, r3
 800e4f8:	fa82 f44c 	uadd8	r4, r2, ip
 800e4fc:	ea82 0403 	eor.w	r4, r2, r3
 800e500:	faa4 f58c 	sel	r5, r4, ip
 800e504:	fab5 f485 	clz	r4, r5
 800e508:	fa02 f204 	lsl.w	r2, r2, r4
 800e50c:	fa03 f304 	lsl.w	r3, r3, r4
 800e510:	ea4f 6012 	mov.w	r0, r2, lsr #24
 800e514:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800e518:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop

0800e520 <strcpy>:
 800e520:	ea80 0201 	eor.w	r2, r0, r1
 800e524:	4684      	mov	ip, r0
 800e526:	f012 0f03 	tst.w	r2, #3
 800e52a:	d14f      	bne.n	800e5cc <strcpy+0xac>
 800e52c:	f011 0f03 	tst.w	r1, #3
 800e530:	d132      	bne.n	800e598 <strcpy+0x78>
 800e532:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800e536:	f011 0f04 	tst.w	r1, #4
 800e53a:	f851 3b04 	ldr.w	r3, [r1], #4
 800e53e:	d00b      	beq.n	800e558 <strcpy+0x38>
 800e540:	f1a3 3201 	sub.w	r2, r3, #16843009	@ 0x1010101
 800e544:	439a      	bics	r2, r3
 800e546:	f012 3f80 	tst.w	r2, #2155905152	@ 0x80808080
 800e54a:	bf04      	itt	eq
 800e54c:	f84c 3b04 	streq.w	r3, [ip], #4
 800e550:	f851 3b04 	ldreq.w	r3, [r1], #4
 800e554:	d116      	bne.n	800e584 <strcpy+0x64>
 800e556:	bf00      	nop
 800e558:	f851 4b04 	ldr.w	r4, [r1], #4
 800e55c:	f1a3 3201 	sub.w	r2, r3, #16843009	@ 0x1010101
 800e560:	439a      	bics	r2, r3
 800e562:	f012 3f80 	tst.w	r2, #2155905152	@ 0x80808080
 800e566:	f1a4 3201 	sub.w	r2, r4, #16843009	@ 0x1010101
 800e56a:	d10b      	bne.n	800e584 <strcpy+0x64>
 800e56c:	f84c 3b04 	str.w	r3, [ip], #4
 800e570:	43a2      	bics	r2, r4
 800e572:	f012 3f80 	tst.w	r2, #2155905152	@ 0x80808080
 800e576:	bf04      	itt	eq
 800e578:	f851 3b04 	ldreq.w	r3, [r1], #4
 800e57c:	f84c 4b04 	streq.w	r4, [ip], #4
 800e580:	d0ea      	beq.n	800e558 <strcpy+0x38>
 800e582:	4623      	mov	r3, r4
 800e584:	f80c 3b01 	strb.w	r3, [ip], #1
 800e588:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800e58c:	ea4f 2333 	mov.w	r3, r3, ror #8
 800e590:	d1f8      	bne.n	800e584 <strcpy+0x64>
 800e592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e596:	4770      	bx	lr
 800e598:	f011 0f01 	tst.w	r1, #1
 800e59c:	d006      	beq.n	800e5ac <strcpy+0x8c>
 800e59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5a2:	f80c 2b01 	strb.w	r2, [ip], #1
 800e5a6:	2a00      	cmp	r2, #0
 800e5a8:	bf08      	it	eq
 800e5aa:	4770      	bxeq	lr
 800e5ac:	f011 0f02 	tst.w	r1, #2
 800e5b0:	d0bf      	beq.n	800e532 <strcpy+0x12>
 800e5b2:	f831 2b02 	ldrh.w	r2, [r1], #2
 800e5b6:	f012 0fff 	tst.w	r2, #255	@ 0xff
 800e5ba:	bf16      	itet	ne
 800e5bc:	f82c 2b02 	strhne.w	r2, [ip], #2
 800e5c0:	f88c 2000 	strbeq.w	r2, [ip]
 800e5c4:	f412 4f7f 	tstne.w	r2, #65280	@ 0xff00
 800e5c8:	d1b3      	bne.n	800e532 <strcpy+0x12>
 800e5ca:	4770      	bx	lr
 800e5cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5d0:	f80c 2b01 	strb.w	r2, [ip], #1
 800e5d4:	2a00      	cmp	r2, #0
 800e5d6:	d1f9      	bne.n	800e5cc <strcpy+0xac>
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop

0800e5dc <memcpy>:
 800e5dc:	4684      	mov	ip, r0
 800e5de:	ea41 0300 	orr.w	r3, r1, r0
 800e5e2:	f013 0303 	ands.w	r3, r3, #3
 800e5e6:	d16d      	bne.n	800e6c4 <memcpy+0xe8>
 800e5e8:	3a40      	subs	r2, #64	@ 0x40
 800e5ea:	d341      	bcc.n	800e670 <memcpy+0x94>
 800e5ec:	f851 3b04 	ldr.w	r3, [r1], #4
 800e5f0:	f840 3b04 	str.w	r3, [r0], #4
 800e5f4:	f851 3b04 	ldr.w	r3, [r1], #4
 800e5f8:	f840 3b04 	str.w	r3, [r0], #4
 800e5fc:	f851 3b04 	ldr.w	r3, [r1], #4
 800e600:	f840 3b04 	str.w	r3, [r0], #4
 800e604:	f851 3b04 	ldr.w	r3, [r1], #4
 800e608:	f840 3b04 	str.w	r3, [r0], #4
 800e60c:	f851 3b04 	ldr.w	r3, [r1], #4
 800e610:	f840 3b04 	str.w	r3, [r0], #4
 800e614:	f851 3b04 	ldr.w	r3, [r1], #4
 800e618:	f840 3b04 	str.w	r3, [r0], #4
 800e61c:	f851 3b04 	ldr.w	r3, [r1], #4
 800e620:	f840 3b04 	str.w	r3, [r0], #4
 800e624:	f851 3b04 	ldr.w	r3, [r1], #4
 800e628:	f840 3b04 	str.w	r3, [r0], #4
 800e62c:	f851 3b04 	ldr.w	r3, [r1], #4
 800e630:	f840 3b04 	str.w	r3, [r0], #4
 800e634:	f851 3b04 	ldr.w	r3, [r1], #4
 800e638:	f840 3b04 	str.w	r3, [r0], #4
 800e63c:	f851 3b04 	ldr.w	r3, [r1], #4
 800e640:	f840 3b04 	str.w	r3, [r0], #4
 800e644:	f851 3b04 	ldr.w	r3, [r1], #4
 800e648:	f840 3b04 	str.w	r3, [r0], #4
 800e64c:	f851 3b04 	ldr.w	r3, [r1], #4
 800e650:	f840 3b04 	str.w	r3, [r0], #4
 800e654:	f851 3b04 	ldr.w	r3, [r1], #4
 800e658:	f840 3b04 	str.w	r3, [r0], #4
 800e65c:	f851 3b04 	ldr.w	r3, [r1], #4
 800e660:	f840 3b04 	str.w	r3, [r0], #4
 800e664:	f851 3b04 	ldr.w	r3, [r1], #4
 800e668:	f840 3b04 	str.w	r3, [r0], #4
 800e66c:	3a40      	subs	r2, #64	@ 0x40
 800e66e:	d2bd      	bcs.n	800e5ec <memcpy+0x10>
 800e670:	3230      	adds	r2, #48	@ 0x30
 800e672:	d311      	bcc.n	800e698 <memcpy+0xbc>
 800e674:	f851 3b04 	ldr.w	r3, [r1], #4
 800e678:	f840 3b04 	str.w	r3, [r0], #4
 800e67c:	f851 3b04 	ldr.w	r3, [r1], #4
 800e680:	f840 3b04 	str.w	r3, [r0], #4
 800e684:	f851 3b04 	ldr.w	r3, [r1], #4
 800e688:	f840 3b04 	str.w	r3, [r0], #4
 800e68c:	f851 3b04 	ldr.w	r3, [r1], #4
 800e690:	f840 3b04 	str.w	r3, [r0], #4
 800e694:	3a10      	subs	r2, #16
 800e696:	d2ed      	bcs.n	800e674 <memcpy+0x98>
 800e698:	320c      	adds	r2, #12
 800e69a:	d305      	bcc.n	800e6a8 <memcpy+0xcc>
 800e69c:	f851 3b04 	ldr.w	r3, [r1], #4
 800e6a0:	f840 3b04 	str.w	r3, [r0], #4
 800e6a4:	3a04      	subs	r2, #4
 800e6a6:	d2f9      	bcs.n	800e69c <memcpy+0xc0>
 800e6a8:	3204      	adds	r2, #4
 800e6aa:	d008      	beq.n	800e6be <memcpy+0xe2>
 800e6ac:	07d2      	lsls	r2, r2, #31
 800e6ae:	bf1c      	itt	ne
 800e6b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800e6b4:	f800 3b01 	strbne.w	r3, [r0], #1
 800e6b8:	d301      	bcc.n	800e6be <memcpy+0xe2>
 800e6ba:	880b      	ldrh	r3, [r1, #0]
 800e6bc:	8003      	strh	r3, [r0, #0]
 800e6be:	4660      	mov	r0, ip
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop
 800e6c4:	2a08      	cmp	r2, #8
 800e6c6:	d313      	bcc.n	800e6f0 <memcpy+0x114>
 800e6c8:	078b      	lsls	r3, r1, #30
 800e6ca:	d08d      	beq.n	800e5e8 <memcpy+0xc>
 800e6cc:	f010 0303 	ands.w	r3, r0, #3
 800e6d0:	d08a      	beq.n	800e5e8 <memcpy+0xc>
 800e6d2:	f1c3 0304 	rsb	r3, r3, #4
 800e6d6:	1ad2      	subs	r2, r2, r3
 800e6d8:	07db      	lsls	r3, r3, #31
 800e6da:	bf1c      	itt	ne
 800e6dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800e6e0:	f800 3b01 	strbne.w	r3, [r0], #1
 800e6e4:	d380      	bcc.n	800e5e8 <memcpy+0xc>
 800e6e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 800e6ea:	f820 3b02 	strh.w	r3, [r0], #2
 800e6ee:	e77b      	b.n	800e5e8 <memcpy+0xc>
 800e6f0:	3a04      	subs	r2, #4
 800e6f2:	d3d9      	bcc.n	800e6a8 <memcpy+0xcc>
 800e6f4:	3a01      	subs	r2, #1
 800e6f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6fa:	f800 3b01 	strb.w	r3, [r0], #1
 800e6fe:	d2f9      	bcs.n	800e6f4 <memcpy+0x118>
 800e700:	780b      	ldrb	r3, [r1, #0]
 800e702:	7003      	strb	r3, [r0, #0]
 800e704:	784b      	ldrb	r3, [r1, #1]
 800e706:	7043      	strb	r3, [r0, #1]
 800e708:	788b      	ldrb	r3, [r1, #2]
 800e70a:	7083      	strb	r3, [r0, #2]
 800e70c:	4660      	mov	r0, ip
 800e70e:	4770      	bx	lr
	...

0800e740 <strlen>:
 800e740:	b430      	push	{r4, r5}
 800e742:	f890 f000 	pld	[r0]
 800e746:	f020 0107 	bic.w	r1, r0, #7
 800e74a:	f06f 0c00 	mvn.w	ip, #0
 800e74e:	f010 0407 	ands.w	r4, r0, #7
 800e752:	f891 f020 	pld	[r1, #32]
 800e756:	f040 8048 	bne.w	800e7ea <strlen+0xaa>
 800e75a:	f04f 0400 	mov.w	r4, #0
 800e75e:	f06f 0007 	mvn.w	r0, #7
 800e762:	e9d1 2300 	ldrd	r2, r3, [r1]
 800e766:	f891 f040 	pld	[r1, #64]	@ 0x40
 800e76a:	f100 0008 	add.w	r0, r0, #8
 800e76e:	fa82 f24c 	uadd8	r2, r2, ip
 800e772:	faa4 f28c 	sel	r2, r4, ip
 800e776:	fa83 f34c 	uadd8	r3, r3, ip
 800e77a:	faa2 f38c 	sel	r3, r2, ip
 800e77e:	bb4b      	cbnz	r3, 800e7d4 <strlen+0x94>
 800e780:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800e784:	fa82 f24c 	uadd8	r2, r2, ip
 800e788:	f100 0008 	add.w	r0, r0, #8
 800e78c:	faa4 f28c 	sel	r2, r4, ip
 800e790:	fa83 f34c 	uadd8	r3, r3, ip
 800e794:	faa2 f38c 	sel	r3, r2, ip
 800e798:	b9e3      	cbnz	r3, 800e7d4 <strlen+0x94>
 800e79a:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 800e79e:	fa82 f24c 	uadd8	r2, r2, ip
 800e7a2:	f100 0008 	add.w	r0, r0, #8
 800e7a6:	faa4 f28c 	sel	r2, r4, ip
 800e7aa:	fa83 f34c 	uadd8	r3, r3, ip
 800e7ae:	faa2 f38c 	sel	r3, r2, ip
 800e7b2:	b97b      	cbnz	r3, 800e7d4 <strlen+0x94>
 800e7b4:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800e7b8:	f101 0120 	add.w	r1, r1, #32
 800e7bc:	fa82 f24c 	uadd8	r2, r2, ip
 800e7c0:	f100 0008 	add.w	r0, r0, #8
 800e7c4:	faa4 f28c 	sel	r2, r4, ip
 800e7c8:	fa83 f34c 	uadd8	r3, r3, ip
 800e7cc:	faa2 f38c 	sel	r3, r2, ip
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d0c6      	beq.n	800e762 <strlen+0x22>
 800e7d4:	2a00      	cmp	r2, #0
 800e7d6:	bf04      	itt	eq
 800e7d8:	3004      	addeq	r0, #4
 800e7da:	461a      	moveq	r2, r3
 800e7dc:	ba12      	rev	r2, r2
 800e7de:	fab2 f282 	clz	r2, r2
 800e7e2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800e7e6:	bc30      	pop	{r4, r5}
 800e7e8:	4770      	bx	lr
 800e7ea:	e9d1 2300 	ldrd	r2, r3, [r1]
 800e7ee:	f004 0503 	and.w	r5, r4, #3
 800e7f2:	f1c4 0000 	rsb	r0, r4, #0
 800e7f6:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800e7fa:	f014 0f04 	tst.w	r4, #4
 800e7fe:	f891 f040 	pld	[r1, #64]	@ 0x40
 800e802:	fa0c f505 	lsl.w	r5, ip, r5
 800e806:	ea62 0205 	orn	r2, r2, r5
 800e80a:	bf1c      	itt	ne
 800e80c:	ea63 0305 	ornne	r3, r3, r5
 800e810:	4662      	movne	r2, ip
 800e812:	f04f 0400 	mov.w	r4, #0
 800e816:	e7aa      	b.n	800e76e <strlen+0x2e>

0800e818 <__aeabi_drsub>:
 800e818:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800e81c:	e002      	b.n	800e824 <__adddf3>
 800e81e:	bf00      	nop

0800e820 <__aeabi_dsub>:
 800e820:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800e824 <__adddf3>:
 800e824:	b530      	push	{r4, r5, lr}
 800e826:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800e82a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800e82e:	ea94 0f05 	teq	r4, r5
 800e832:	bf08      	it	eq
 800e834:	ea90 0f02 	teqeq	r0, r2
 800e838:	bf1f      	itttt	ne
 800e83a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800e83e:	ea55 0c02 	orrsne.w	ip, r5, r2
 800e842:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800e846:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800e84a:	f000 80e2 	beq.w	800ea12 <__adddf3+0x1ee>
 800e84e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800e852:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800e856:	bfb8      	it	lt
 800e858:	426d      	neglt	r5, r5
 800e85a:	dd0c      	ble.n	800e876 <__adddf3+0x52>
 800e85c:	442c      	add	r4, r5
 800e85e:	ea80 0202 	eor.w	r2, r0, r2
 800e862:	ea81 0303 	eor.w	r3, r1, r3
 800e866:	ea82 0000 	eor.w	r0, r2, r0
 800e86a:	ea83 0101 	eor.w	r1, r3, r1
 800e86e:	ea80 0202 	eor.w	r2, r0, r2
 800e872:	ea81 0303 	eor.w	r3, r1, r3
 800e876:	2d36      	cmp	r5, #54	@ 0x36
 800e878:	bf88      	it	hi
 800e87a:	bd30      	pophi	{r4, r5, pc}
 800e87c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800e880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e884:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800e888:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800e88c:	d002      	beq.n	800e894 <__adddf3+0x70>
 800e88e:	4240      	negs	r0, r0
 800e890:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e894:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800e898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e89c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800e8a0:	d002      	beq.n	800e8a8 <__adddf3+0x84>
 800e8a2:	4252      	negs	r2, r2
 800e8a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800e8a8:	ea94 0f05 	teq	r4, r5
 800e8ac:	f000 80a7 	beq.w	800e9fe <__adddf3+0x1da>
 800e8b0:	f1a4 0401 	sub.w	r4, r4, #1
 800e8b4:	f1d5 0e20 	rsbs	lr, r5, #32
 800e8b8:	db0d      	blt.n	800e8d6 <__adddf3+0xb2>
 800e8ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 800e8be:	fa22 f205 	lsr.w	r2, r2, r5
 800e8c2:	1880      	adds	r0, r0, r2
 800e8c4:	f141 0100 	adc.w	r1, r1, #0
 800e8c8:	fa03 f20e 	lsl.w	r2, r3, lr
 800e8cc:	1880      	adds	r0, r0, r2
 800e8ce:	fa43 f305 	asr.w	r3, r3, r5
 800e8d2:	4159      	adcs	r1, r3
 800e8d4:	e00e      	b.n	800e8f4 <__adddf3+0xd0>
 800e8d6:	f1a5 0520 	sub.w	r5, r5, #32
 800e8da:	f10e 0e20 	add.w	lr, lr, #32
 800e8de:	2a01      	cmp	r2, #1
 800e8e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 800e8e4:	bf28      	it	cs
 800e8e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 800e8ea:	fa43 f305 	asr.w	r3, r3, r5
 800e8ee:	18c0      	adds	r0, r0, r3
 800e8f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800e8f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800e8f8:	d507      	bpl.n	800e90a <__adddf3+0xe6>
 800e8fa:	f04f 0e00 	mov.w	lr, #0
 800e8fe:	f1dc 0c00 	rsbs	ip, ip, #0
 800e902:	eb7e 0000 	sbcs.w	r0, lr, r0
 800e906:	eb6e 0101 	sbc.w	r1, lr, r1
 800e90a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800e90e:	d31b      	bcc.n	800e948 <__adddf3+0x124>
 800e910:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800e914:	d30c      	bcc.n	800e930 <__adddf3+0x10c>
 800e916:	0849      	lsrs	r1, r1, #1
 800e918:	ea5f 0030 	movs.w	r0, r0, rrx
 800e91c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800e920:	f104 0401 	add.w	r4, r4, #1
 800e924:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800e928:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800e92c:	f080 809a 	bcs.w	800ea64 <__adddf3+0x240>
 800e930:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800e934:	bf08      	it	eq
 800e936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e93a:	f150 0000 	adcs.w	r0, r0, #0
 800e93e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e942:	ea41 0105 	orr.w	r1, r1, r5
 800e946:	bd30      	pop	{r4, r5, pc}
 800e948:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800e94c:	4140      	adcs	r0, r0
 800e94e:	eb41 0101 	adc.w	r1, r1, r1
 800e952:	3c01      	subs	r4, #1
 800e954:	bf28      	it	cs
 800e956:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800e95a:	d2e9      	bcs.n	800e930 <__adddf3+0x10c>
 800e95c:	f091 0f00 	teq	r1, #0
 800e960:	bf04      	itt	eq
 800e962:	4601      	moveq	r1, r0
 800e964:	2000      	moveq	r0, #0
 800e966:	fab1 f381 	clz	r3, r1
 800e96a:	bf08      	it	eq
 800e96c:	3320      	addeq	r3, #32
 800e96e:	f1a3 030b 	sub.w	r3, r3, #11
 800e972:	f1b3 0220 	subs.w	r2, r3, #32
 800e976:	da0c      	bge.n	800e992 <__adddf3+0x16e>
 800e978:	320c      	adds	r2, #12
 800e97a:	dd08      	ble.n	800e98e <__adddf3+0x16a>
 800e97c:	f102 0c14 	add.w	ip, r2, #20
 800e980:	f1c2 020c 	rsb	r2, r2, #12
 800e984:	fa01 f00c 	lsl.w	r0, r1, ip
 800e988:	fa21 f102 	lsr.w	r1, r1, r2
 800e98c:	e00c      	b.n	800e9a8 <__adddf3+0x184>
 800e98e:	f102 0214 	add.w	r2, r2, #20
 800e992:	bfd8      	it	le
 800e994:	f1c2 0c20 	rsble	ip, r2, #32
 800e998:	fa01 f102 	lsl.w	r1, r1, r2
 800e99c:	fa20 fc0c 	lsr.w	ip, r0, ip
 800e9a0:	bfdc      	itt	le
 800e9a2:	ea41 010c 	orrle.w	r1, r1, ip
 800e9a6:	4090      	lslle	r0, r2
 800e9a8:	1ae4      	subs	r4, r4, r3
 800e9aa:	bfa2      	ittt	ge
 800e9ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800e9b0:	4329      	orrge	r1, r5
 800e9b2:	bd30      	popge	{r4, r5, pc}
 800e9b4:	ea6f 0404 	mvn.w	r4, r4
 800e9b8:	3c1f      	subs	r4, #31
 800e9ba:	da1c      	bge.n	800e9f6 <__adddf3+0x1d2>
 800e9bc:	340c      	adds	r4, #12
 800e9be:	dc0e      	bgt.n	800e9de <__adddf3+0x1ba>
 800e9c0:	f104 0414 	add.w	r4, r4, #20
 800e9c4:	f1c4 0220 	rsb	r2, r4, #32
 800e9c8:	fa20 f004 	lsr.w	r0, r0, r4
 800e9cc:	fa01 f302 	lsl.w	r3, r1, r2
 800e9d0:	ea40 0003 	orr.w	r0, r0, r3
 800e9d4:	fa21 f304 	lsr.w	r3, r1, r4
 800e9d8:	ea45 0103 	orr.w	r1, r5, r3
 800e9dc:	bd30      	pop	{r4, r5, pc}
 800e9de:	f1c4 040c 	rsb	r4, r4, #12
 800e9e2:	f1c4 0220 	rsb	r2, r4, #32
 800e9e6:	fa20 f002 	lsr.w	r0, r0, r2
 800e9ea:	fa01 f304 	lsl.w	r3, r1, r4
 800e9ee:	ea40 0003 	orr.w	r0, r0, r3
 800e9f2:	4629      	mov	r1, r5
 800e9f4:	bd30      	pop	{r4, r5, pc}
 800e9f6:	fa21 f004 	lsr.w	r0, r1, r4
 800e9fa:	4629      	mov	r1, r5
 800e9fc:	bd30      	pop	{r4, r5, pc}
 800e9fe:	f094 0f00 	teq	r4, #0
 800ea02:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800ea06:	bf06      	itte	eq
 800ea08:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800ea0c:	3401      	addeq	r4, #1
 800ea0e:	3d01      	subne	r5, #1
 800ea10:	e74e      	b.n	800e8b0 <__adddf3+0x8c>
 800ea12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800ea16:	bf18      	it	ne
 800ea18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800ea1c:	d029      	beq.n	800ea72 <__adddf3+0x24e>
 800ea1e:	ea94 0f05 	teq	r4, r5
 800ea22:	bf08      	it	eq
 800ea24:	ea90 0f02 	teqeq	r0, r2
 800ea28:	d005      	beq.n	800ea36 <__adddf3+0x212>
 800ea2a:	ea54 0c00 	orrs.w	ip, r4, r0
 800ea2e:	bf04      	itt	eq
 800ea30:	4619      	moveq	r1, r3
 800ea32:	4610      	moveq	r0, r2
 800ea34:	bd30      	pop	{r4, r5, pc}
 800ea36:	ea91 0f03 	teq	r1, r3
 800ea3a:	bf1e      	ittt	ne
 800ea3c:	2100      	movne	r1, #0
 800ea3e:	2000      	movne	r0, #0
 800ea40:	bd30      	popne	{r4, r5, pc}
 800ea42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800ea46:	d105      	bne.n	800ea54 <__adddf3+0x230>
 800ea48:	0040      	lsls	r0, r0, #1
 800ea4a:	4149      	adcs	r1, r1
 800ea4c:	bf28      	it	cs
 800ea4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800ea52:	bd30      	pop	{r4, r5, pc}
 800ea54:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800ea58:	bf3c      	itt	cc
 800ea5a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800ea5e:	bd30      	popcc	{r4, r5, pc}
 800ea60:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800ea64:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800ea68:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ea6c:	f04f 0000 	mov.w	r0, #0
 800ea70:	bd30      	pop	{r4, r5, pc}
 800ea72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800ea76:	bf1a      	itte	ne
 800ea78:	4619      	movne	r1, r3
 800ea7a:	4610      	movne	r0, r2
 800ea7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800ea80:	bf1c      	itt	ne
 800ea82:	460b      	movne	r3, r1
 800ea84:	4602      	movne	r2, r0
 800ea86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800ea8a:	bf06      	itte	eq
 800ea8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800ea90:	ea91 0f03 	teqeq	r1, r3
 800ea94:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800ea98:	bd30      	pop	{r4, r5, pc}
 800ea9a:	bf00      	nop

0800ea9c <__aeabi_ui2d>:
 800ea9c:	f090 0f00 	teq	r0, #0
 800eaa0:	bf04      	itt	eq
 800eaa2:	2100      	moveq	r1, #0
 800eaa4:	4770      	bxeq	lr
 800eaa6:	b530      	push	{r4, r5, lr}
 800eaa8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800eaac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800eab0:	f04f 0500 	mov.w	r5, #0
 800eab4:	f04f 0100 	mov.w	r1, #0
 800eab8:	e750      	b.n	800e95c <__adddf3+0x138>
 800eaba:	bf00      	nop

0800eabc <__aeabi_i2d>:
 800eabc:	f090 0f00 	teq	r0, #0
 800eac0:	bf04      	itt	eq
 800eac2:	2100      	moveq	r1, #0
 800eac4:	4770      	bxeq	lr
 800eac6:	b530      	push	{r4, r5, lr}
 800eac8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800eacc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800ead0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800ead4:	bf48      	it	mi
 800ead6:	4240      	negmi	r0, r0
 800ead8:	f04f 0100 	mov.w	r1, #0
 800eadc:	e73e      	b.n	800e95c <__adddf3+0x138>
 800eade:	bf00      	nop

0800eae0 <__aeabi_f2d>:
 800eae0:	0042      	lsls	r2, r0, #1
 800eae2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800eae6:	ea4f 0131 	mov.w	r1, r1, rrx
 800eaea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800eaee:	bf1f      	itttt	ne
 800eaf0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800eaf4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800eaf8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800eafc:	4770      	bxne	lr
 800eafe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800eb02:	bf08      	it	eq
 800eb04:	4770      	bxeq	lr
 800eb06:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800eb0a:	bf04      	itt	eq
 800eb0c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800eb10:	4770      	bxeq	lr
 800eb12:	b530      	push	{r4, r5, lr}
 800eb14:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800eb18:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800eb1c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800eb20:	e71c      	b.n	800e95c <__adddf3+0x138>
 800eb22:	bf00      	nop

0800eb24 <__aeabi_ul2d>:
 800eb24:	ea50 0201 	orrs.w	r2, r0, r1
 800eb28:	bf08      	it	eq
 800eb2a:	4770      	bxeq	lr
 800eb2c:	b530      	push	{r4, r5, lr}
 800eb2e:	f04f 0500 	mov.w	r5, #0
 800eb32:	e00a      	b.n	800eb4a <__aeabi_l2d+0x16>

0800eb34 <__aeabi_l2d>:
 800eb34:	ea50 0201 	orrs.w	r2, r0, r1
 800eb38:	bf08      	it	eq
 800eb3a:	4770      	bxeq	lr
 800eb3c:	b530      	push	{r4, r5, lr}
 800eb3e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800eb42:	d502      	bpl.n	800eb4a <__aeabi_l2d+0x16>
 800eb44:	4240      	negs	r0, r0
 800eb46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800eb4a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800eb4e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800eb52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800eb56:	f43f aed8 	beq.w	800e90a <__adddf3+0xe6>
 800eb5a:	f04f 0203 	mov.w	r2, #3
 800eb5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800eb62:	bf18      	it	ne
 800eb64:	3203      	addne	r2, #3
 800eb66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800eb6a:	bf18      	it	ne
 800eb6c:	3203      	addne	r2, #3
 800eb6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800eb72:	f1c2 0320 	rsb	r3, r2, #32
 800eb76:	fa00 fc03 	lsl.w	ip, r0, r3
 800eb7a:	fa20 f002 	lsr.w	r0, r0, r2
 800eb7e:	fa01 fe03 	lsl.w	lr, r1, r3
 800eb82:	ea40 000e 	orr.w	r0, r0, lr
 800eb86:	fa21 f102 	lsr.w	r1, r1, r2
 800eb8a:	4414      	add	r4, r2
 800eb8c:	e6bd      	b.n	800e90a <__adddf3+0xe6>
 800eb8e:	bf00      	nop

0800eb90 <__aeabi_dmul>:
 800eb90:	b570      	push	{r4, r5, r6, lr}
 800eb92:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800eb96:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800eb9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800eb9e:	bf1d      	ittte	ne
 800eba0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800eba4:	ea94 0f0c 	teqne	r4, ip
 800eba8:	ea95 0f0c 	teqne	r5, ip
 800ebac:	f000 f8de 	bleq	800ed6c <__aeabi_dmul+0x1dc>
 800ebb0:	442c      	add	r4, r5
 800ebb2:	ea81 0603 	eor.w	r6, r1, r3
 800ebb6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800ebba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800ebbe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800ebc2:	bf18      	it	ne
 800ebc4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800ebc8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800ebcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ebd0:	d038      	beq.n	800ec44 <__aeabi_dmul+0xb4>
 800ebd2:	fba0 ce02 	umull	ip, lr, r0, r2
 800ebd6:	f04f 0500 	mov.w	r5, #0
 800ebda:	fbe1 e502 	umlal	lr, r5, r1, r2
 800ebde:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800ebe2:	fbe0 e503 	umlal	lr, r5, r0, r3
 800ebe6:	f04f 0600 	mov.w	r6, #0
 800ebea:	fbe1 5603 	umlal	r5, r6, r1, r3
 800ebee:	f09c 0f00 	teq	ip, #0
 800ebf2:	bf18      	it	ne
 800ebf4:	f04e 0e01 	orrne.w	lr, lr, #1
 800ebf8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800ebfc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800ec00:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800ec04:	d204      	bcs.n	800ec10 <__aeabi_dmul+0x80>
 800ec06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800ec0a:	416d      	adcs	r5, r5
 800ec0c:	eb46 0606 	adc.w	r6, r6, r6
 800ec10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800ec14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800ec18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800ec1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800ec20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800ec24:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800ec28:	bf88      	it	hi
 800ec2a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800ec2e:	d81e      	bhi.n	800ec6e <__aeabi_dmul+0xde>
 800ec30:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800ec34:	bf08      	it	eq
 800ec36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800ec3a:	f150 0000 	adcs.w	r0, r0, #0
 800ec3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ec42:	bd70      	pop	{r4, r5, r6, pc}
 800ec44:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800ec48:	ea46 0101 	orr.w	r1, r6, r1
 800ec4c:	ea40 0002 	orr.w	r0, r0, r2
 800ec50:	ea81 0103 	eor.w	r1, r1, r3
 800ec54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800ec58:	bfc2      	ittt	gt
 800ec5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ec5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ec62:	bd70      	popgt	{r4, r5, r6, pc}
 800ec64:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800ec68:	f04f 0e00 	mov.w	lr, #0
 800ec6c:	3c01      	subs	r4, #1
 800ec6e:	f300 80ab 	bgt.w	800edc8 <__aeabi_dmul+0x238>
 800ec72:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800ec76:	bfde      	ittt	le
 800ec78:	2000      	movle	r0, #0
 800ec7a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800ec7e:	bd70      	pople	{r4, r5, r6, pc}
 800ec80:	f1c4 0400 	rsb	r4, r4, #0
 800ec84:	3c20      	subs	r4, #32
 800ec86:	da35      	bge.n	800ecf4 <__aeabi_dmul+0x164>
 800ec88:	340c      	adds	r4, #12
 800ec8a:	dc1b      	bgt.n	800ecc4 <__aeabi_dmul+0x134>
 800ec8c:	f104 0414 	add.w	r4, r4, #20
 800ec90:	f1c4 0520 	rsb	r5, r4, #32
 800ec94:	fa00 f305 	lsl.w	r3, r0, r5
 800ec98:	fa20 f004 	lsr.w	r0, r0, r4
 800ec9c:	fa01 f205 	lsl.w	r2, r1, r5
 800eca0:	ea40 0002 	orr.w	r0, r0, r2
 800eca4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800eca8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800ecac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800ecb0:	fa21 f604 	lsr.w	r6, r1, r4
 800ecb4:	eb42 0106 	adc.w	r1, r2, r6
 800ecb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ecbc:	bf08      	it	eq
 800ecbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ecc2:	bd70      	pop	{r4, r5, r6, pc}
 800ecc4:	f1c4 040c 	rsb	r4, r4, #12
 800ecc8:	f1c4 0520 	rsb	r5, r4, #32
 800eccc:	fa00 f304 	lsl.w	r3, r0, r4
 800ecd0:	fa20 f005 	lsr.w	r0, r0, r5
 800ecd4:	fa01 f204 	lsl.w	r2, r1, r4
 800ecd8:	ea40 0002 	orr.w	r0, r0, r2
 800ecdc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800ece0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800ece4:	f141 0100 	adc.w	r1, r1, #0
 800ece8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ecec:	bf08      	it	eq
 800ecee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}
 800ecf4:	f1c4 0520 	rsb	r5, r4, #32
 800ecf8:	fa00 f205 	lsl.w	r2, r0, r5
 800ecfc:	ea4e 0e02 	orr.w	lr, lr, r2
 800ed00:	fa20 f304 	lsr.w	r3, r0, r4
 800ed04:	fa01 f205 	lsl.w	r2, r1, r5
 800ed08:	ea43 0302 	orr.w	r3, r3, r2
 800ed0c:	fa21 f004 	lsr.w	r0, r1, r4
 800ed10:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800ed14:	fa21 f204 	lsr.w	r2, r1, r4
 800ed18:	ea20 0002 	bic.w	r0, r0, r2
 800ed1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800ed20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ed24:	bf08      	it	eq
 800ed26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}
 800ed2c:	f094 0f00 	teq	r4, #0
 800ed30:	d10f      	bne.n	800ed52 <__aeabi_dmul+0x1c2>
 800ed32:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800ed36:	0040      	lsls	r0, r0, #1
 800ed38:	eb41 0101 	adc.w	r1, r1, r1
 800ed3c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800ed40:	bf08      	it	eq
 800ed42:	3c01      	subeq	r4, #1
 800ed44:	d0f7      	beq.n	800ed36 <__aeabi_dmul+0x1a6>
 800ed46:	ea41 0106 	orr.w	r1, r1, r6
 800ed4a:	f095 0f00 	teq	r5, #0
 800ed4e:	bf18      	it	ne
 800ed50:	4770      	bxne	lr
 800ed52:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800ed56:	0052      	lsls	r2, r2, #1
 800ed58:	eb43 0303 	adc.w	r3, r3, r3
 800ed5c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800ed60:	bf08      	it	eq
 800ed62:	3d01      	subeq	r5, #1
 800ed64:	d0f7      	beq.n	800ed56 <__aeabi_dmul+0x1c6>
 800ed66:	ea43 0306 	orr.w	r3, r3, r6
 800ed6a:	4770      	bx	lr
 800ed6c:	ea94 0f0c 	teq	r4, ip
 800ed70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800ed74:	bf18      	it	ne
 800ed76:	ea95 0f0c 	teqne	r5, ip
 800ed7a:	d00c      	beq.n	800ed96 <__aeabi_dmul+0x206>
 800ed7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ed80:	bf18      	it	ne
 800ed82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ed86:	d1d1      	bne.n	800ed2c <__aeabi_dmul+0x19c>
 800ed88:	ea81 0103 	eor.w	r1, r1, r3
 800ed8c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800ed90:	f04f 0000 	mov.w	r0, #0
 800ed94:	bd70      	pop	{r4, r5, r6, pc}
 800ed96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ed9a:	bf06      	itte	eq
 800ed9c:	4610      	moveq	r0, r2
 800ed9e:	4619      	moveq	r1, r3
 800eda0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800eda4:	d019      	beq.n	800edda <__aeabi_dmul+0x24a>
 800eda6:	ea94 0f0c 	teq	r4, ip
 800edaa:	d102      	bne.n	800edb2 <__aeabi_dmul+0x222>
 800edac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800edb0:	d113      	bne.n	800edda <__aeabi_dmul+0x24a>
 800edb2:	ea95 0f0c 	teq	r5, ip
 800edb6:	d105      	bne.n	800edc4 <__aeabi_dmul+0x234>
 800edb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800edbc:	bf1c      	itt	ne
 800edbe:	4610      	movne	r0, r2
 800edc0:	4619      	movne	r1, r3
 800edc2:	d10a      	bne.n	800edda <__aeabi_dmul+0x24a>
 800edc4:	ea81 0103 	eor.w	r1, r1, r3
 800edc8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800edcc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800edd0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800edd4:	f04f 0000 	mov.w	r0, #0
 800edd8:	bd70      	pop	{r4, r5, r6, pc}
 800edda:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800edde:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800ede2:	bd70      	pop	{r4, r5, r6, pc}

0800ede4 <__aeabi_ddiv>:
 800ede4:	b570      	push	{r4, r5, r6, lr}
 800ede6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800edea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800edee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800edf2:	bf1d      	ittte	ne
 800edf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800edf8:	ea94 0f0c 	teqne	r4, ip
 800edfc:	ea95 0f0c 	teqne	r5, ip
 800ee00:	f000 f8a7 	bleq	800ef52 <__aeabi_ddiv+0x16e>
 800ee04:	eba4 0405 	sub.w	r4, r4, r5
 800ee08:	ea81 0e03 	eor.w	lr, r1, r3
 800ee0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ee10:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800ee14:	f000 8088 	beq.w	800ef28 <__aeabi_ddiv+0x144>
 800ee18:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ee1c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800ee20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800ee24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800ee28:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800ee2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800ee30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800ee34:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800ee38:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800ee3c:	429d      	cmp	r5, r3
 800ee3e:	bf08      	it	eq
 800ee40:	4296      	cmpeq	r6, r2
 800ee42:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800ee46:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800ee4a:	d202      	bcs.n	800ee52 <__aeabi_ddiv+0x6e>
 800ee4c:	085b      	lsrs	r3, r3, #1
 800ee4e:	ea4f 0232 	mov.w	r2, r2, rrx
 800ee52:	1ab6      	subs	r6, r6, r2
 800ee54:	eb65 0503 	sbc.w	r5, r5, r3
 800ee58:	085b      	lsrs	r3, r3, #1
 800ee5a:	ea4f 0232 	mov.w	r2, r2, rrx
 800ee5e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ee62:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800ee66:	ebb6 0e02 	subs.w	lr, r6, r2
 800ee6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ee6e:	bf22      	ittt	cs
 800ee70:	1ab6      	subcs	r6, r6, r2
 800ee72:	4675      	movcs	r5, lr
 800ee74:	ea40 000c 	orrcs.w	r0, r0, ip
 800ee78:	085b      	lsrs	r3, r3, #1
 800ee7a:	ea4f 0232 	mov.w	r2, r2, rrx
 800ee7e:	ebb6 0e02 	subs.w	lr, r6, r2
 800ee82:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ee86:	bf22      	ittt	cs
 800ee88:	1ab6      	subcs	r6, r6, r2
 800ee8a:	4675      	movcs	r5, lr
 800ee8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800ee90:	085b      	lsrs	r3, r3, #1
 800ee92:	ea4f 0232 	mov.w	r2, r2, rrx
 800ee96:	ebb6 0e02 	subs.w	lr, r6, r2
 800ee9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800ee9e:	bf22      	ittt	cs
 800eea0:	1ab6      	subcs	r6, r6, r2
 800eea2:	4675      	movcs	r5, lr
 800eea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800eea8:	085b      	lsrs	r3, r3, #1
 800eeaa:	ea4f 0232 	mov.w	r2, r2, rrx
 800eeae:	ebb6 0e02 	subs.w	lr, r6, r2
 800eeb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800eeb6:	bf22      	ittt	cs
 800eeb8:	1ab6      	subcs	r6, r6, r2
 800eeba:	4675      	movcs	r5, lr
 800eebc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800eec0:	ea55 0e06 	orrs.w	lr, r5, r6
 800eec4:	d018      	beq.n	800eef8 <__aeabi_ddiv+0x114>
 800eec6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800eeca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800eece:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800eed2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800eed6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800eeda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800eede:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800eee2:	d1c0      	bne.n	800ee66 <__aeabi_ddiv+0x82>
 800eee4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800eee8:	d10b      	bne.n	800ef02 <__aeabi_ddiv+0x11e>
 800eeea:	ea41 0100 	orr.w	r1, r1, r0
 800eeee:	f04f 0000 	mov.w	r0, #0
 800eef2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800eef6:	e7b6      	b.n	800ee66 <__aeabi_ddiv+0x82>
 800eef8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800eefc:	bf04      	itt	eq
 800eefe:	4301      	orreq	r1, r0
 800ef00:	2000      	moveq	r0, #0
 800ef02:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800ef06:	bf88      	it	hi
 800ef08:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800ef0c:	f63f aeaf 	bhi.w	800ec6e <__aeabi_dmul+0xde>
 800ef10:	ebb5 0c03 	subs.w	ip, r5, r3
 800ef14:	bf04      	itt	eq
 800ef16:	ebb6 0c02 	subseq.w	ip, r6, r2
 800ef1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800ef1e:	f150 0000 	adcs.w	r0, r0, #0
 800ef22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ef26:	bd70      	pop	{r4, r5, r6, pc}
 800ef28:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800ef2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800ef30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800ef34:	bfc2      	ittt	gt
 800ef36:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ef3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ef3e:	bd70      	popgt	{r4, r5, r6, pc}
 800ef40:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800ef44:	f04f 0e00 	mov.w	lr, #0
 800ef48:	3c01      	subs	r4, #1
 800ef4a:	e690      	b.n	800ec6e <__aeabi_dmul+0xde>
 800ef4c:	ea45 0e06 	orr.w	lr, r5, r6
 800ef50:	e68d      	b.n	800ec6e <__aeabi_dmul+0xde>
 800ef52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800ef56:	ea94 0f0c 	teq	r4, ip
 800ef5a:	bf08      	it	eq
 800ef5c:	ea95 0f0c 	teqeq	r5, ip
 800ef60:	f43f af3b 	beq.w	800edda <__aeabi_dmul+0x24a>
 800ef64:	ea94 0f0c 	teq	r4, ip
 800ef68:	d10a      	bne.n	800ef80 <__aeabi_ddiv+0x19c>
 800ef6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800ef6e:	f47f af34 	bne.w	800edda <__aeabi_dmul+0x24a>
 800ef72:	ea95 0f0c 	teq	r5, ip
 800ef76:	f47f af25 	bne.w	800edc4 <__aeabi_dmul+0x234>
 800ef7a:	4610      	mov	r0, r2
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	e72c      	b.n	800edda <__aeabi_dmul+0x24a>
 800ef80:	ea95 0f0c 	teq	r5, ip
 800ef84:	d106      	bne.n	800ef94 <__aeabi_ddiv+0x1b0>
 800ef86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ef8a:	f43f aefd 	beq.w	800ed88 <__aeabi_dmul+0x1f8>
 800ef8e:	4610      	mov	r0, r2
 800ef90:	4619      	mov	r1, r3
 800ef92:	e722      	b.n	800edda <__aeabi_dmul+0x24a>
 800ef94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ef98:	bf18      	it	ne
 800ef9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ef9e:	f47f aec5 	bne.w	800ed2c <__aeabi_dmul+0x19c>
 800efa2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800efa6:	f47f af0d 	bne.w	800edc4 <__aeabi_dmul+0x234>
 800efaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800efae:	f47f aeeb 	bne.w	800ed88 <__aeabi_dmul+0x1f8>
 800efb2:	e712      	b.n	800edda <__aeabi_dmul+0x24a>

0800efb4 <__gedf2>:
 800efb4:	f04f 3cff 	mov.w	ip, #4294967295
 800efb8:	e006      	b.n	800efc8 <__cmpdf2+0x4>
 800efba:	bf00      	nop

0800efbc <__ledf2>:
 800efbc:	f04f 0c01 	mov.w	ip, #1
 800efc0:	e002      	b.n	800efc8 <__cmpdf2+0x4>
 800efc2:	bf00      	nop

0800efc4 <__cmpdf2>:
 800efc4:	f04f 0c01 	mov.w	ip, #1
 800efc8:	f84d cd04 	str.w	ip, [sp, #-4]!
 800efcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800efd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800efd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800efd8:	bf18      	it	ne
 800efda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800efde:	d01b      	beq.n	800f018 <__cmpdf2+0x54>
 800efe0:	b001      	add	sp, #4
 800efe2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800efe6:	bf0c      	ite	eq
 800efe8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800efec:	ea91 0f03 	teqne	r1, r3
 800eff0:	bf02      	ittt	eq
 800eff2:	ea90 0f02 	teqeq	r0, r2
 800eff6:	2000      	moveq	r0, #0
 800eff8:	4770      	bxeq	lr
 800effa:	f110 0f00 	cmn.w	r0, #0
 800effe:	ea91 0f03 	teq	r1, r3
 800f002:	bf58      	it	pl
 800f004:	4299      	cmppl	r1, r3
 800f006:	bf08      	it	eq
 800f008:	4290      	cmpeq	r0, r2
 800f00a:	bf2c      	ite	cs
 800f00c:	17d8      	asrcs	r0, r3, #31
 800f00e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800f012:	f040 0001 	orr.w	r0, r0, #1
 800f016:	4770      	bx	lr
 800f018:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800f01c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800f020:	d102      	bne.n	800f028 <__cmpdf2+0x64>
 800f022:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800f026:	d107      	bne.n	800f038 <__cmpdf2+0x74>
 800f028:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800f02c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800f030:	d1d6      	bne.n	800efe0 <__cmpdf2+0x1c>
 800f032:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800f036:	d0d3      	beq.n	800efe0 <__cmpdf2+0x1c>
 800f038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800f03c:	4770      	bx	lr
 800f03e:	bf00      	nop

0800f040 <__aeabi_cdrcmple>:
 800f040:	4684      	mov	ip, r0
 800f042:	4610      	mov	r0, r2
 800f044:	4662      	mov	r2, ip
 800f046:	468c      	mov	ip, r1
 800f048:	4619      	mov	r1, r3
 800f04a:	4663      	mov	r3, ip
 800f04c:	e000      	b.n	800f050 <__aeabi_cdcmpeq>
 800f04e:	bf00      	nop

0800f050 <__aeabi_cdcmpeq>:
 800f050:	b501      	push	{r0, lr}
 800f052:	f7ff ffb7 	bl	800efc4 <__cmpdf2>
 800f056:	2800      	cmp	r0, #0
 800f058:	bf48      	it	mi
 800f05a:	f110 0f00 	cmnmi.w	r0, #0
 800f05e:	bd01      	pop	{r0, pc}

0800f060 <__aeabi_dcmpeq>:
 800f060:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f064:	f7ff fff4 	bl	800f050 <__aeabi_cdcmpeq>
 800f068:	bf0c      	ite	eq
 800f06a:	2001      	moveq	r0, #1
 800f06c:	2000      	movne	r0, #0
 800f06e:	f85d fb08 	ldr.w	pc, [sp], #8
 800f072:	bf00      	nop

0800f074 <__aeabi_dcmplt>:
 800f074:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f078:	f7ff ffea 	bl	800f050 <__aeabi_cdcmpeq>
 800f07c:	bf34      	ite	cc
 800f07e:	2001      	movcc	r0, #1
 800f080:	2000      	movcs	r0, #0
 800f082:	f85d fb08 	ldr.w	pc, [sp], #8
 800f086:	bf00      	nop

0800f088 <__aeabi_dcmple>:
 800f088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f08c:	f7ff ffe0 	bl	800f050 <__aeabi_cdcmpeq>
 800f090:	bf94      	ite	ls
 800f092:	2001      	movls	r0, #1
 800f094:	2000      	movhi	r0, #0
 800f096:	f85d fb08 	ldr.w	pc, [sp], #8
 800f09a:	bf00      	nop

0800f09c <__aeabi_dcmpge>:
 800f09c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f0a0:	f7ff ffce 	bl	800f040 <__aeabi_cdrcmple>
 800f0a4:	bf94      	ite	ls
 800f0a6:	2001      	movls	r0, #1
 800f0a8:	2000      	movhi	r0, #0
 800f0aa:	f85d fb08 	ldr.w	pc, [sp], #8
 800f0ae:	bf00      	nop

0800f0b0 <__aeabi_dcmpgt>:
 800f0b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f0b4:	f7ff ffc4 	bl	800f040 <__aeabi_cdrcmple>
 800f0b8:	bf34      	ite	cc
 800f0ba:	2001      	movcc	r0, #1
 800f0bc:	2000      	movcs	r0, #0
 800f0be:	f85d fb08 	ldr.w	pc, [sp], #8
 800f0c2:	bf00      	nop

0800f0c4 <__aeabi_d2iz>:
 800f0c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800f0c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800f0cc:	d215      	bcs.n	800f0fa <__aeabi_d2iz+0x36>
 800f0ce:	d511      	bpl.n	800f0f4 <__aeabi_d2iz+0x30>
 800f0d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800f0d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800f0d8:	d912      	bls.n	800f100 <__aeabi_d2iz+0x3c>
 800f0da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800f0de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f0e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800f0e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800f0ea:	fa23 f002 	lsr.w	r0, r3, r2
 800f0ee:	bf18      	it	ne
 800f0f0:	4240      	negne	r0, r0
 800f0f2:	4770      	bx	lr
 800f0f4:	f04f 0000 	mov.w	r0, #0
 800f0f8:	4770      	bx	lr
 800f0fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800f0fe:	d105      	bne.n	800f10c <__aeabi_d2iz+0x48>
 800f100:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800f104:	bf08      	it	eq
 800f106:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800f10a:	4770      	bx	lr
 800f10c:	f04f 0000 	mov.w	r0, #0
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop

0800f114 <__aeabi_d2uiz>:
 800f114:	004a      	lsls	r2, r1, #1
 800f116:	d211      	bcs.n	800f13c <__aeabi_d2uiz+0x28>
 800f118:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800f11c:	d211      	bcs.n	800f142 <__aeabi_d2uiz+0x2e>
 800f11e:	d50d      	bpl.n	800f13c <__aeabi_d2uiz+0x28>
 800f120:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800f124:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800f128:	d40e      	bmi.n	800f148 <__aeabi_d2uiz+0x34>
 800f12a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800f12e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f132:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800f136:	fa23 f002 	lsr.w	r0, r3, r2
 800f13a:	4770      	bx	lr
 800f13c:	f04f 0000 	mov.w	r0, #0
 800f140:	4770      	bx	lr
 800f142:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800f146:	d102      	bne.n	800f14e <__aeabi_d2uiz+0x3a>
 800f148:	f04f 30ff 	mov.w	r0, #4294967295
 800f14c:	4770      	bx	lr
 800f14e:	f04f 0000 	mov.w	r0, #0
 800f152:	4770      	bx	lr

0800f154 <__aeabi_uldivmod>:
 800f154:	b953      	cbnz	r3, 800f16c <__aeabi_uldivmod+0x18>
 800f156:	b94a      	cbnz	r2, 800f16c <__aeabi_uldivmod+0x18>
 800f158:	2900      	cmp	r1, #0
 800f15a:	bf08      	it	eq
 800f15c:	2800      	cmpeq	r0, #0
 800f15e:	bf1c      	itt	ne
 800f160:	f04f 31ff 	movne.w	r1, #4294967295
 800f164:	f04f 30ff 	movne.w	r0, #4294967295
 800f168:	f000 b96a 	b.w	800f440 <__aeabi_idiv0>
 800f16c:	f1ad 0c08 	sub.w	ip, sp, #8
 800f170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800f174:	f000 f806 	bl	800f184 <__udivmoddi4>
 800f178:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f180:	b004      	add	sp, #16
 800f182:	4770      	bx	lr

0800f184 <__udivmoddi4>:
 800f184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f188:	9d08      	ldr	r5, [sp, #32]
 800f18a:	460e      	mov	r6, r1
 800f18c:	4604      	mov	r4, r0
 800f18e:	460f      	mov	r7, r1
 800f190:	2b00      	cmp	r3, #0
 800f192:	d14a      	bne.n	800f22a <__udivmoddi4+0xa6>
 800f194:	4694      	mov	ip, r2
 800f196:	458c      	cmp	ip, r1
 800f198:	fab2 f282 	clz	r2, r2
 800f19c:	d960      	bls.n	800f260 <__udivmoddi4+0xdc>
 800f19e:	b142      	cbz	r2, 800f1b2 <__udivmoddi4+0x2e>
 800f1a0:	f1c2 0320 	rsb	r3, r2, #32
 800f1a4:	4097      	lsls	r7, r2
 800f1a6:	fa20 f303 	lsr.w	r3, r0, r3
 800f1aa:	fa0c fc02 	lsl.w	ip, ip, r2
 800f1ae:	431f      	orrs	r7, r3
 800f1b0:	4094      	lsls	r4, r2
 800f1b2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800f1b6:	fa1f f68c 	uxth.w	r6, ip
 800f1ba:	fbb7 f1fe 	udiv	r1, r7, lr
 800f1be:	0c23      	lsrs	r3, r4, #16
 800f1c0:	fb0e 7711 	mls	r7, lr, r1, r7
 800f1c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f1c8:	fb01 f006 	mul.w	r0, r1, r6
 800f1cc:	4298      	cmp	r0, r3
 800f1ce:	d90a      	bls.n	800f1e6 <__udivmoddi4+0x62>
 800f1d0:	eb1c 0303 	adds.w	r3, ip, r3
 800f1d4:	f101 37ff 	add.w	r7, r1, #4294967295
 800f1d8:	f080 8115 	bcs.w	800f406 <__udivmoddi4+0x282>
 800f1dc:	4298      	cmp	r0, r3
 800f1de:	f240 8112 	bls.w	800f406 <__udivmoddi4+0x282>
 800f1e2:	3902      	subs	r1, #2
 800f1e4:	4463      	add	r3, ip
 800f1e6:	1a1b      	subs	r3, r3, r0
 800f1e8:	b2a4      	uxth	r4, r4
 800f1ea:	fbb3 f0fe 	udiv	r0, r3, lr
 800f1ee:	fb0e 3310 	mls	r3, lr, r0, r3
 800f1f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800f1f6:	fb00 f606 	mul.w	r6, r0, r6
 800f1fa:	42a6      	cmp	r6, r4
 800f1fc:	d90a      	bls.n	800f214 <__udivmoddi4+0x90>
 800f1fe:	eb1c 0404 	adds.w	r4, ip, r4
 800f202:	f100 33ff 	add.w	r3, r0, #4294967295
 800f206:	f080 8100 	bcs.w	800f40a <__udivmoddi4+0x286>
 800f20a:	42a6      	cmp	r6, r4
 800f20c:	f240 80fd 	bls.w	800f40a <__udivmoddi4+0x286>
 800f210:	4464      	add	r4, ip
 800f212:	3802      	subs	r0, #2
 800f214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800f218:	1ba4      	subs	r4, r4, r6
 800f21a:	2100      	movs	r1, #0
 800f21c:	b11d      	cbz	r5, 800f226 <__udivmoddi4+0xa2>
 800f21e:	40d4      	lsrs	r4, r2
 800f220:	2300      	movs	r3, #0
 800f222:	e9c5 4300 	strd	r4, r3, [r5]
 800f226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f22a:	428b      	cmp	r3, r1
 800f22c:	d905      	bls.n	800f23a <__udivmoddi4+0xb6>
 800f22e:	b10d      	cbz	r5, 800f234 <__udivmoddi4+0xb0>
 800f230:	e9c5 0100 	strd	r0, r1, [r5]
 800f234:	2100      	movs	r1, #0
 800f236:	4608      	mov	r0, r1
 800f238:	e7f5      	b.n	800f226 <__udivmoddi4+0xa2>
 800f23a:	fab3 f183 	clz	r1, r3
 800f23e:	2900      	cmp	r1, #0
 800f240:	d146      	bne.n	800f2d0 <__udivmoddi4+0x14c>
 800f242:	42b3      	cmp	r3, r6
 800f244:	d302      	bcc.n	800f24c <__udivmoddi4+0xc8>
 800f246:	4282      	cmp	r2, r0
 800f248:	f200 80f5 	bhi.w	800f436 <__udivmoddi4+0x2b2>
 800f24c:	1a84      	subs	r4, r0, r2
 800f24e:	eb66 0203 	sbc.w	r2, r6, r3
 800f252:	2001      	movs	r0, #1
 800f254:	4617      	mov	r7, r2
 800f256:	2d00      	cmp	r5, #0
 800f258:	d0e5      	beq.n	800f226 <__udivmoddi4+0xa2>
 800f25a:	e9c5 4700 	strd	r4, r7, [r5]
 800f25e:	e7e2      	b.n	800f226 <__udivmoddi4+0xa2>
 800f260:	2a00      	cmp	r2, #0
 800f262:	f040 8093 	bne.w	800f38c <__udivmoddi4+0x208>
 800f266:	eba1 030c 	sub.w	r3, r1, ip
 800f26a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800f26e:	fa1f fe8c 	uxth.w	lr, ip
 800f272:	2101      	movs	r1, #1
 800f274:	fbb3 f6f7 	udiv	r6, r3, r7
 800f278:	fb07 3016 	mls	r0, r7, r6, r3
 800f27c:	0c23      	lsrs	r3, r4, #16
 800f27e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f282:	fb0e f006 	mul.w	r0, lr, r6
 800f286:	4298      	cmp	r0, r3
 800f288:	d908      	bls.n	800f29c <__udivmoddi4+0x118>
 800f28a:	eb1c 0303 	adds.w	r3, ip, r3
 800f28e:	f106 38ff 	add.w	r8, r6, #4294967295
 800f292:	d202      	bcs.n	800f29a <__udivmoddi4+0x116>
 800f294:	4298      	cmp	r0, r3
 800f296:	f200 80d0 	bhi.w	800f43a <__udivmoddi4+0x2b6>
 800f29a:	4646      	mov	r6, r8
 800f29c:	1a1b      	subs	r3, r3, r0
 800f29e:	b2a4      	uxth	r4, r4
 800f2a0:	fbb3 f0f7 	udiv	r0, r3, r7
 800f2a4:	fb07 3310 	mls	r3, r7, r0, r3
 800f2a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800f2ac:	fb0e fe00 	mul.w	lr, lr, r0
 800f2b0:	45a6      	cmp	lr, r4
 800f2b2:	d908      	bls.n	800f2c6 <__udivmoddi4+0x142>
 800f2b4:	eb1c 0404 	adds.w	r4, ip, r4
 800f2b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f2bc:	d202      	bcs.n	800f2c4 <__udivmoddi4+0x140>
 800f2be:	45a6      	cmp	lr, r4
 800f2c0:	f200 80b6 	bhi.w	800f430 <__udivmoddi4+0x2ac>
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	eba4 040e 	sub.w	r4, r4, lr
 800f2ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800f2ce:	e7a5      	b.n	800f21c <__udivmoddi4+0x98>
 800f2d0:	f1c1 0720 	rsb	r7, r1, #32
 800f2d4:	408b      	lsls	r3, r1
 800f2d6:	fa22 fc07 	lsr.w	ip, r2, r7
 800f2da:	ea4c 0c03 	orr.w	ip, ip, r3
 800f2de:	fa06 fe01 	lsl.w	lr, r6, r1
 800f2e2:	fa20 f407 	lsr.w	r4, r0, r7
 800f2e6:	fa26 f307 	lsr.w	r3, r6, r7
 800f2ea:	ea44 040e 	orr.w	r4, r4, lr
 800f2ee:	fa00 f801 	lsl.w	r8, r0, r1
 800f2f2:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800f2f6:	ea4f 4914 	mov.w	r9, r4, lsr #16
 800f2fa:	fbb3 fef0 	udiv	lr, r3, r0
 800f2fe:	fa1f f68c 	uxth.w	r6, ip
 800f302:	fb00 331e 	mls	r3, r0, lr, r3
 800f306:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800f30a:	fb0e f906 	mul.w	r9, lr, r6
 800f30e:	4599      	cmp	r9, r3
 800f310:	fa02 f201 	lsl.w	r2, r2, r1
 800f314:	d90b      	bls.n	800f32e <__udivmoddi4+0x1aa>
 800f316:	eb1c 0303 	adds.w	r3, ip, r3
 800f31a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800f31e:	f080 8085 	bcs.w	800f42c <__udivmoddi4+0x2a8>
 800f322:	4599      	cmp	r9, r3
 800f324:	f240 8082 	bls.w	800f42c <__udivmoddi4+0x2a8>
 800f328:	f1ae 0e02 	sub.w	lr, lr, #2
 800f32c:	4463      	add	r3, ip
 800f32e:	eba3 0909 	sub.w	r9, r3, r9
 800f332:	b2a4      	uxth	r4, r4
 800f334:	fbb9 f3f0 	udiv	r3, r9, r0
 800f338:	fb00 9913 	mls	r9, r0, r3, r9
 800f33c:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800f340:	fb03 f606 	mul.w	r6, r3, r6
 800f344:	42a6      	cmp	r6, r4
 800f346:	d908      	bls.n	800f35a <__udivmoddi4+0x1d6>
 800f348:	eb1c 0404 	adds.w	r4, ip, r4
 800f34c:	f103 30ff 	add.w	r0, r3, #4294967295
 800f350:	d268      	bcs.n	800f424 <__udivmoddi4+0x2a0>
 800f352:	42a6      	cmp	r6, r4
 800f354:	d966      	bls.n	800f424 <__udivmoddi4+0x2a0>
 800f356:	3b02      	subs	r3, #2
 800f358:	4464      	add	r4, ip
 800f35a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800f35e:	1ba4      	subs	r4, r4, r6
 800f360:	fba0 e602 	umull	lr, r6, r0, r2
 800f364:	42b4      	cmp	r4, r6
 800f366:	4673      	mov	r3, lr
 800f368:	46b1      	mov	r9, r6
 800f36a:	d352      	bcc.n	800f412 <__udivmoddi4+0x28e>
 800f36c:	d04f      	beq.n	800f40e <__udivmoddi4+0x28a>
 800f36e:	b15d      	cbz	r5, 800f388 <__udivmoddi4+0x204>
 800f370:	ebb8 0203 	subs.w	r2, r8, r3
 800f374:	eb64 0409 	sbc.w	r4, r4, r9
 800f378:	fa04 f707 	lsl.w	r7, r4, r7
 800f37c:	fa22 f301 	lsr.w	r3, r2, r1
 800f380:	431f      	orrs	r7, r3
 800f382:	40cc      	lsrs	r4, r1
 800f384:	e9c5 7400 	strd	r7, r4, [r5]
 800f388:	2100      	movs	r1, #0
 800f38a:	e74c      	b.n	800f226 <__udivmoddi4+0xa2>
 800f38c:	f1c2 0120 	rsb	r1, r2, #32
 800f390:	fa20 f301 	lsr.w	r3, r0, r1
 800f394:	fa0c fc02 	lsl.w	ip, ip, r2
 800f398:	fa26 f101 	lsr.w	r1, r6, r1
 800f39c:	4096      	lsls	r6, r2
 800f39e:	4333      	orrs	r3, r6
 800f3a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800f3a4:	fa1f fe8c 	uxth.w	lr, ip
 800f3a8:	fbb1 f0f7 	udiv	r0, r1, r7
 800f3ac:	fb07 1610 	mls	r6, r7, r0, r1
 800f3b0:	0c19      	lsrs	r1, r3, #16
 800f3b2:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 800f3b6:	fb00 f60e 	mul.w	r6, r0, lr
 800f3ba:	428e      	cmp	r6, r1
 800f3bc:	fa04 f402 	lsl.w	r4, r4, r2
 800f3c0:	d908      	bls.n	800f3d4 <__udivmoddi4+0x250>
 800f3c2:	eb1c 0101 	adds.w	r1, ip, r1
 800f3c6:	f100 38ff 	add.w	r8, r0, #4294967295
 800f3ca:	d22d      	bcs.n	800f428 <__udivmoddi4+0x2a4>
 800f3cc:	428e      	cmp	r6, r1
 800f3ce:	d92b      	bls.n	800f428 <__udivmoddi4+0x2a4>
 800f3d0:	3802      	subs	r0, #2
 800f3d2:	4461      	add	r1, ip
 800f3d4:	1b89      	subs	r1, r1, r6
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	fbb1 f6f7 	udiv	r6, r1, r7
 800f3dc:	fb07 1116 	mls	r1, r7, r6, r1
 800f3e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f3e4:	fb06 f10e 	mul.w	r1, r6, lr
 800f3e8:	4299      	cmp	r1, r3
 800f3ea:	d908      	bls.n	800f3fe <__udivmoddi4+0x27a>
 800f3ec:	eb1c 0303 	adds.w	r3, ip, r3
 800f3f0:	f106 38ff 	add.w	r8, r6, #4294967295
 800f3f4:	d214      	bcs.n	800f420 <__udivmoddi4+0x29c>
 800f3f6:	4299      	cmp	r1, r3
 800f3f8:	d912      	bls.n	800f420 <__udivmoddi4+0x29c>
 800f3fa:	3e02      	subs	r6, #2
 800f3fc:	4463      	add	r3, ip
 800f3fe:	1a5b      	subs	r3, r3, r1
 800f400:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 800f404:	e736      	b.n	800f274 <__udivmoddi4+0xf0>
 800f406:	4639      	mov	r1, r7
 800f408:	e6ed      	b.n	800f1e6 <__udivmoddi4+0x62>
 800f40a:	4618      	mov	r0, r3
 800f40c:	e702      	b.n	800f214 <__udivmoddi4+0x90>
 800f40e:	45f0      	cmp	r8, lr
 800f410:	d2ad      	bcs.n	800f36e <__udivmoddi4+0x1ea>
 800f412:	ebbe 0302 	subs.w	r3, lr, r2
 800f416:	eb66 060c 	sbc.w	r6, r6, ip
 800f41a:	3801      	subs	r0, #1
 800f41c:	46b1      	mov	r9, r6
 800f41e:	e7a6      	b.n	800f36e <__udivmoddi4+0x1ea>
 800f420:	4646      	mov	r6, r8
 800f422:	e7ec      	b.n	800f3fe <__udivmoddi4+0x27a>
 800f424:	4603      	mov	r3, r0
 800f426:	e798      	b.n	800f35a <__udivmoddi4+0x1d6>
 800f428:	4640      	mov	r0, r8
 800f42a:	e7d3      	b.n	800f3d4 <__udivmoddi4+0x250>
 800f42c:	46d6      	mov	lr, sl
 800f42e:	e77e      	b.n	800f32e <__udivmoddi4+0x1aa>
 800f430:	4464      	add	r4, ip
 800f432:	3802      	subs	r0, #2
 800f434:	e747      	b.n	800f2c6 <__udivmoddi4+0x142>
 800f436:	4608      	mov	r0, r1
 800f438:	e70d      	b.n	800f256 <__udivmoddi4+0xd2>
 800f43a:	3e02      	subs	r6, #2
 800f43c:	4463      	add	r3, ip
 800f43e:	e72d      	b.n	800f29c <__udivmoddi4+0x118>

0800f440 <__aeabi_idiv0>:
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop

Disassembly of section .data:

20000000 <FLASHStatus>:
20000000:	                                             .

20000001 <I2C1_PORT>:
20000001:	0001                                         ...

20000004 <SystemCoreClock>:
20000004:	7a00 0a03                                   .z..

20000008 <APBAHBPrescTable>:
20000008:	0000 0000 0201 0403 0201 0403 0706 0908     ................

20000018 <_impure_ptr>:
20000018:	0020 2000 0000 0000                          .. ....

20000020 <_impure_data>:
20000020:	0000 0000 2d78 2000 2de0 2000 2e48 2000     ....x-. .-. H.. 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000160 <SysTick_Handler>:
      cnt++;
20000160:	4a1e      	ldr	r2, [pc, #120]	@ (200001dc <SysTick_Handler+0x7c>)
20000162:	8813      	ldrh	r3, [r2, #0]
20000164:	3301      	adds	r3, #1
20000166:	b29b      	uxth	r3, r3
      if (cnt >= 500) {
20000168:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
2000016c:	d226      	bcs.n	200001bc <SysTick_Handler+0x5c>
      cnt++;
2000016e:	8013      	strh	r3, [r2, #0]
      tick++;
20000170:	4a1b      	ldr	r2, [pc, #108]	@ (200001e0 <SysTick_Handler+0x80>)
20000172:	8813      	ldrh	r3, [r2, #0]
20000174:	3301      	adds	r3, #1
20000176:	b29b      	uxth	r3, r3
20000178:	8013      	strh	r3, [r2, #0]
      jiffes++;
2000017a:	4a1a      	ldr	r2, [pc, #104]	@ (200001e4 <SysTick_Handler+0x84>)
2000017c:	8813      	ldrh	r3, [r2, #0]
2000017e:	3301      	adds	r3, #1
20000180:	b29b      	uxth	r3, r3
20000182:	8013      	strh	r3, [r2, #0]
      if (rxcnt1) rxck1++;
20000184:	4b18      	ldr	r3, [pc, #96]	@ (200001e8 <SysTick_Handler+0x88>)
20000186:	881b      	ldrh	r3, [r3, #0]
20000188:	b29b      	uxth	r3, r3
2000018a:	b123      	cbz	r3, 20000196 <SysTick_Handler+0x36>
2000018c:	4a17      	ldr	r2, [pc, #92]	@ (200001ec <SysTick_Handler+0x8c>)
2000018e:	7813      	ldrb	r3, [r2, #0]
20000190:	3301      	adds	r3, #1
20000192:	b2db      	uxtb	r3, r3
20000194:	7013      	strb	r3, [r2, #0]
      if (rxcnt2) rxck2++;
20000196:	4b16      	ldr	r3, [pc, #88]	@ (200001f0 <SysTick_Handler+0x90>)
20000198:	881b      	ldrh	r3, [r3, #0]
2000019a:	b29b      	uxth	r3, r3
2000019c:	b123      	cbz	r3, 200001a8 <SysTick_Handler+0x48>
2000019e:	4a15      	ldr	r2, [pc, #84]	@ (200001f4 <SysTick_Handler+0x94>)
200001a0:	7813      	ldrb	r3, [r2, #0]
200001a2:	3301      	adds	r3, #1
200001a4:	b2db      	uxtb	r3, r3
200001a6:	7013      	strb	r3, [r2, #0]
      if (rxcnt3) rxck3++;
200001a8:	4b13      	ldr	r3, [pc, #76]	@ (200001f8 <SysTick_Handler+0x98>)
200001aa:	881b      	ldrh	r3, [r3, #0]
200001ac:	b29b      	uxth	r3, r3
200001ae:	b123      	cbz	r3, 200001ba <SysTick_Handler+0x5a>
200001b0:	4a12      	ldr	r2, [pc, #72]	@ (200001fc <SysTick_Handler+0x9c>)
200001b2:	7813      	ldrb	r3, [r2, #0]
200001b4:	3301      	adds	r3, #1
200001b6:	b2db      	uxtb	r3, r3
200001b8:	7013      	strb	r3, [r2, #0]
}
200001ba:	4770      	bx	lr
         cnt = 0;
200001bc:	2300      	movs	r3, #0
200001be:	8013      	strh	r3, [r2, #0]
         if (flip) {
200001c0:	4a0f      	ldr	r2, [pc, #60]	@ (20000200 <SysTick_Handler+0xa0>)
200001c2:	4910      	ldr	r1, [pc, #64]	@ (20000204 <SysTick_Handler+0xa4>)
200001c4:	7813      	ldrb	r3, [r2, #0]
200001c6:	b133      	cbz	r3, 200001d6 <SysTick_Handler+0x76>
            time_led = ON;
200001c8:	2001      	movs	r0, #1
200001ca:	7008      	strb	r0, [r1, #0]
      	 flip = !flip;
200001cc:	fab3 f383 	clz	r3, r3
200001d0:	095b      	lsrs	r3, r3, #5
200001d2:	7013      	strb	r3, [r2, #0]
200001d4:	e7cc      	b.n	20000170 <SysTick_Handler+0x10>
            time_led = OFF;
200001d6:	700b      	strb	r3, [r1, #0]
200001d8:	e7f8      	b.n	200001cc <SysTick_Handler+0x6c>
200001da:	bf00      	nop
200001dc:	2000020a 	.word	0x2000020a
200001e0:	20000212 	.word	0x20000212
200001e4:	20000210 	.word	0x20000210
200001e8:	20002bf2 	.word	0x20002bf2
200001ec:	20002be1 	.word	0x20002be1
200001f0:	20002bec 	.word	0x20002bec
200001f4:	20002be0 	.word	0x20002be0
200001f8:	20002be6 	.word	0x20002be6
200001fc:	20002bdf 	.word	0x20002bdf
20000200:	20000208 	.word	0x20000208
20000204:	2000020f 	.word	0x2000020f
