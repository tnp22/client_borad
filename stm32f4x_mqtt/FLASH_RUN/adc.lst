   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "source\\adc_dac\\adc.c"
  20              		.section	.text.simple_iir,"ax",%progbits
  21              		.align	1
  22              		.global	simple_iir
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	simple_iir:
  28              	.LVL0:
  29              	.LFB123:
   1:source\adc_dac/adc.c **** /********************************************************************************/
   2:source\adc_dac/adc.c **** /* adc.c                                                                        */
   3:source\adc_dac/adc.c **** /* STM32F407ZGT6                                                                */
   4:source\adc_dac/adc.c **** /* (Lee ChangWoo HL2IRW  hl2irw@daum.net 010-8573-6860)                 	*/
   5:source\adc_dac/adc.c **** /* stm32f4x_test								*/
   6:source\adc_dac/adc.c **** /********************************************************************************/
   7:source\adc_dac/adc.c **** #include "../../hwdefs.h"
   8:source\adc_dac/adc.c **** #include "../prototype.h"
   9:source\adc_dac/adc.c **** 
  10:source\adc_dac/adc.c **** #define ALPHA 				7			/* Q3: alpha = 0.875 */
  11:source\adc_dac/adc.c **** #define ONE_MINUS_ALPHA			1			/* Q3: 1-alpha = 0.125 */
  12:source\adc_dac/adc.c **** #define T_OFFSET			-10
  13:source\adc_dac/adc.c **** 
  14:source\adc_dac/adc.c **** volatile unsigned short adc_count,adc_tcount,adc_lcount;
  15:source\adc_dac/adc.c **** volatile unsigned int adc_vsum,adc_tsum,adc_lsum;
  16:source\adc_dac/adc.c **** volatile short adc_voltage1,adc_voltage2,adc_temperature;
  17:source\adc_dac/adc.c **** 
  18:source\adc_dac/adc.c **** 
  19:source\adc_dac/adc.c **** 
  20:source\adc_dac/adc.c **** 
  21:source\adc_dac/adc.c **** int simple_iir (int orginal_value, int new_value)
  22:source\adc_dac/adc.c **** {
  30              		.loc 1 22 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  23:source\adc_dac/adc.c ****       int filter_value,return_value;
  35              		.loc 1 23 7 view .LVU1
  24:source\adc_dac/adc.c ****       filter_value = (ALPHA * orginal_value) + (ONE_MINUS_ALPHA * new_value);
  36              		.loc 1 24 7 view .LVU2
  25:source\adc_dac/adc.c ****       return_value = (filter_value >> 3);
  37              		.loc 1 25 7 view .LVU3
  26:source\adc_dac/adc.c ****       return return_value;
  38              		.loc 1 26 7 view .LVU4
  24:source\adc_dac/adc.c ****       filter_value = (ALPHA * orginal_value) + (ONE_MINUS_ALPHA * new_value);
  39              		.loc 1 24 29 is_stmt 0 view .LVU5
  40 0000 C0EBC000 		rsb	r0, r0, r0, lsl #3
  41              	.LVL1:
  24:source\adc_dac/adc.c ****       filter_value = (ALPHA * orginal_value) + (ONE_MINUS_ALPHA * new_value);
  42              		.loc 1 24 20 view .LVU6
  43 0004 0844     		add	r0, r0, r1
  27:source\adc_dac/adc.c **** }
  44              		.loc 1 27 1 view .LVU7
  45 0006 C010     		asrs	r0, r0, #3
  46 0008 7047     		bx	lr
  47              		.cfi_endproc
  48              	.LFE123:
  50              		.section	.text.convert_voltage,"ax",%progbits
  51              		.align	1
  52              		.global	convert_voltage
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  57              	convert_voltage:
  58              	.LVL2:
  59              	.LFB124:
  28:source\adc_dac/adc.c **** 
  29:source\adc_dac/adc.c **** 
  30:source\adc_dac/adc.c **** unsigned short convert_voltage (unsigned short adc_data)
  31:source\adc_dac/adc.c **** {
  60              		.loc 1 31 1 is_stmt 1 view -0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  32:source\adc_dac/adc.c ****       unsigned int value;
  65              		.loc 1 32 7 view .LVU9
  33:source\adc_dac/adc.c ****       value = (unsigned int)((adc_data * 26406) >> 15);
  66              		.loc 1 33 7 view .LVU10
  34:source\adc_dac/adc.c ****       return (unsigned short)value;
  67              		.loc 1 34 7 view .LVU11
  33:source\adc_dac/adc.c ****       value = (unsigned int)((adc_data * 26406) >> 15);
  68              		.loc 1 33 40 is_stmt 0 view .LVU12
  69 0000 46F22673 		movw	r3, #26406
  70 0004 5843     		muls	r0, r3, r0
  71              	.LVL3:
  35:source\adc_dac/adc.c **** 
  36:source\adc_dac/adc.c **** }
  72              		.loc 1 36 1 view .LVU13
  73 0006 C00B     		lsrs	r0, r0, #15
  74 0008 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE124:
  78              		.global	__aeabi_f2d
  79              		.global	__aeabi_dmul
  80              		.global	__aeabi_dsub
  81              		.global	__aeabi_ddiv
  82              		.global	__aeabi_dadd
  83              		.global	__aeabi_d2iz
  84              		.section	.text.cal_temperature,"ax",%progbits
  85              		.align	1
  86              		.global	cal_temperature
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  91              	cal_temperature:
  92              	.LVL4:
  93              	.LFB125:
  37:source\adc_dac/adc.c **** 
  38:source\adc_dac/adc.c **** 
  39:source\adc_dac/adc.c **** short cal_temperature (unsigned short adc_data)
  40:source\adc_dac/adc.c **** {
  94              		.loc 1 40 1 is_stmt 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  41:source\adc_dac/adc.c ****       unsigned int adcx;
  98              		.loc 1 41 7 view .LVU15
  42:source\adc_dac/adc.c ****       short result;
  99              		.loc 1 42 7 view .LVU16
  43:source\adc_dac/adc.c ****       double temperate;
 100              		.loc 1 43 7 view .LVU17
  44:source\adc_dac/adc.c ****       adcx = adc_data;
 101              		.loc 1 44 7 view .LVU18
  40:source\adc_dac/adc.c ****       unsigned int adcx;
 102              		.loc 1 40 1 is_stmt 0 view .LVU19
 103 0000 07EE900A 		vmov	s15, r0	@ int
 104              	.LVL5:
  45:source\adc_dac/adc.c ****       temperate = (float)adcx * (3.3 / 4096);
 105              		.loc 1 45 7 is_stmt 1 view .LVU20
  46:source\adc_dac/adc.c ****       temperate = (temperate - 0.76) / 0.0025 + (25 + T_OFFSET);
 106              		.loc 1 46 7 view .LVU21
  45:source\adc_dac/adc.c ****       temperate = (float)adcx * (3.3 / 4096);
 107              		.loc 1 45 19 is_stmt 0 view .LVU22
 108 0004 F8EE677A 		vcvt.f32.u32	s15, s15
 109              	.LVL6:
  40:source\adc_dac/adc.c ****       unsigned int adcx;
 110              		.loc 1 40 1 view .LVU23
 111 0008 08B5     		push	{r3, lr}
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 3, -8
 114              		.cfi_offset 14, -4
  45:source\adc_dac/adc.c ****       temperate = (float)adcx * (3.3 / 4096);
 115              		.loc 1 45 19 view .LVU24
 116 000a 17EE900A 		vmov	r0, s15
 117              	.LVL7:
  45:source\adc_dac/adc.c ****       temperate = (float)adcx * (3.3 / 4096);
 118              		.loc 1 45 19 view .LVU25
 119 000e FFF7FEFF 		bl	__aeabi_f2d
 120              	.LVL8:
  45:source\adc_dac/adc.c ****       temperate = (float)adcx * (3.3 / 4096);
 121              		.loc 1 45 17 view .LVU26
 122 0012 0FA3     		adr	r3, .L4+8
 123 0014 D3E90023 		ldrd	r2, [r3]
 124 0018 FFF7FEFF 		bl	__aeabi_dmul
 125              	.LVL9:
 126              		.loc 1 46 30 view .LVU27
 127 001c 0EA3     		adr	r3, .L4+16
 128 001e D3E90023 		ldrd	r2, [r3]
 129 0022 FFF7FEFF 		bl	__aeabi_dsub
 130              	.LVL10:
 131              		.loc 1 46 38 view .LVU28
 132 0026 0EA3     		adr	r3, .L4+24
 133 0028 D3E90023 		ldrd	r2, [r3]
 134 002c FFF7FEFF 		bl	__aeabi_ddiv
 135              	.LVL11:
  47:source\adc_dac/adc.c ****       result = temperate * 100;
 136              		.loc 1 47 7 is_stmt 1 view .LVU29
  48:source\adc_dac/adc.c ****       return result;
 137              		.loc 1 48 7 view .LVU30
  46:source\adc_dac/adc.c ****       temperate = (temperate - 0.76) / 0.0025 + (25 + T_OFFSET);
 138              		.loc 1 46 17 is_stmt 0 view .LVU31
 139 0030 054B     		ldr	r3, .L4
 140 0032 0022     		movs	r2, #0
 141 0034 FFF7FEFF 		bl	__aeabi_dadd
 142              	.LVL12:
  47:source\adc_dac/adc.c ****       result = temperate * 100;
 143              		.loc 1 47 26 view .LVU32
 144 0038 044B     		ldr	r3, .L4+4
 145 003a 0022     		movs	r2, #0
 146 003c FFF7FEFF 		bl	__aeabi_dmul
 147              	.LVL13:
  47:source\adc_dac/adc.c ****       result = temperate * 100;
 148              		.loc 1 47 14 view .LVU33
 149 0040 FFF7FEFF 		bl	__aeabi_d2iz
 150              	.LVL14:
  49:source\adc_dac/adc.c **** }
 151              		.loc 1 49 1 view .LVU34
 152 0044 00B2     		sxth	r0, r0
 153 0046 08BD     		pop	{r3, pc}
 154              	.L5:
 155              		.align	3
 156              	.L4:
 157 0048 00002E40 		.word	1076756480
 158 004c 00005940 		.word	1079574528
 159 0050 66666666 		.word	1717986918
 160 0054 66664A3F 		.word	1061840486
 161 0058 52B81E85 		.word	-2061584302
 162 005c EB51E83F 		.word	1072189931
 163 0060 7B14AE47 		.word	1202590843
 164 0064 E17A643F 		.word	1063549665
 165              		.cfi_endproc
 166              	.LFE125:
 168              		.section	.text.ADC_Config,"ax",%progbits
 169              		.align	1
 170              		.global	ADC_Config
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 175              	ADC_Config:
 176              	.LFB126:
  50:source\adc_dac/adc.c **** 
  51:source\adc_dac/adc.c **** 
  52:source\adc_dac/adc.c **** void ADC_Config (void)
  53:source\adc_dac/adc.c **** {
 177              		.loc 1 53 1 is_stmt 1 view -0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 40
 180              		@ frame_needed = 0, uses_anonymous_args = 0
  54:source\adc_dac/adc.c ****       ADC_CommonInitTypeDef ADC_CommonInitStructure;
 181              		.loc 1 54 7 view .LVU36
  55:source\adc_dac/adc.c ****       ADC_InitTypeDef ADC_InitStruct;
 182              		.loc 1 55 7 view .LVU37
  56:source\adc_dac/adc.c ****       RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF,ENABLE);
 183              		.loc 1 56 7 view .LVU38
  53:source\adc_dac/adc.c ****       ADC_CommonInitTypeDef ADC_CommonInitStructure;
 184              		.loc 1 53 1 is_stmt 0 view .LVU39
 185 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 186              		.cfi_def_cfa_offset 20
 187              		.cfi_offset 4, -20
 188              		.cfi_offset 5, -16
 189              		.cfi_offset 6, -12
 190              		.cfi_offset 7, -8
 191              		.cfi_offset 14, -4
 192              		.loc 1 56 7 view .LVU40
 193 0002 0121     		movs	r1, #1
  53:source\adc_dac/adc.c ****       ADC_CommonInitTypeDef ADC_CommonInitStructure;
 194              		.loc 1 53 1 view .LVU41
 195 0004 8BB0     		sub	sp, sp, #44
 196              		.cfi_def_cfa_offset 64
 197              		.loc 1 56 7 view .LVU42
 198 0006 2020     		movs	r0, #32
 199 0008 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 200              	.LVL15:
  57:source\adc_dac/adc.c ****       GPIO_Init_Pin(GPIOF,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_ADC);
 201              		.loc 1 57 7 is_stmt 1 view .LVU43
 202 000c 0323     		movs	r3, #3
 203 000e 1A46     		mov	r2, r3
 204 0010 3C48     		ldr	r0, .L7
  58:source\adc_dac/adc.c ****       GPIO_Init_Pin(GPIOA,GPIO_Pin_5,GPIO_Speed_100MHz,GPIO_Mode_ADC);
  59:source\adc_dac/adc.c ****       RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3,ENABLE
  60:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1,ENABLE);
  61:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1,DISABLE);
  62:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2,ENABLE);
  63:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2,DISABLE);
  64:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3,ENABLE);
  65:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3,DISABLE);
  66:source\adc_dac/adc.c ****       ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
  67:source\adc_dac/adc.c ****       ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;
  68:source\adc_dac/adc.c ****       ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
  69:source\adc_dac/adc.c ****       ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
  70:source\adc_dac/adc.c ****       ADC_CommonInit(&ADC_CommonInitStructure);
  71:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
  72:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_ScanConvMode = ENABLE;
  73:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_ContinuousConvMode = DISABLE;
  74:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
  75:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
  76:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_NbrOfConversion = 1;
  77:source\adc_dac/adc.c ****       ADC_Init(ADC1,&ADC_InitStruct);
 205              		.loc 1 77 7 is_stmt 0 view .LVU44
 206 0012 3D4F     		ldr	r7, .L7+4
  78:source\adc_dac/adc.c ****       ADC_Init(ADC2,&ADC_InitStruct);
 207              		.loc 1 78 7 view .LVU45
 208 0014 3D4E     		ldr	r6, .L7+8
  57:source\adc_dac/adc.c ****       GPIO_Init_Pin(GPIOF,GPIO_Pin_7,GPIO_Speed_100MHz,GPIO_Mode_ADC);
 209              		.loc 1 57 7 view .LVU46
 210 0016 8021     		movs	r1, #128
 211 0018 FFF7FEFF 		bl	GPIO_Init_Pin
 212              	.LVL16:
  58:source\adc_dac/adc.c ****       GPIO_Init_Pin(GPIOA,GPIO_Pin_5,GPIO_Speed_100MHz,GPIO_Mode_ADC);
 213              		.loc 1 58 7 is_stmt 1 view .LVU47
 214 001c 0323     		movs	r3, #3
 215 001e 1A46     		mov	r2, r3
 216 0020 3B48     		ldr	r0, .L7+12
 217 0022 2021     		movs	r1, #32
 218 0024 FFF7FEFF 		bl	GPIO_Init_Pin
 219              	.LVL17:
  59:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1,ENABLE);
 220              		.loc 1 59 7 view .LVU48
 221 0028 0121     		movs	r1, #1
 222 002a 4FF4E060 		mov	r0, #1792
 223 002e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 224              	.LVL18:
  60:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1,DISABLE);
 225              		.loc 1 60 7 view .LVU49
 226 0032 0121     		movs	r1, #1
 227 0034 4FF48070 		mov	r0, #256
 228 0038 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 229              	.LVL19:
  61:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2,ENABLE);
 230              		.loc 1 61 7 view .LVU50
 231 003c 0021     		movs	r1, #0
 232 003e 4FF48070 		mov	r0, #256
 233 0042 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 234              	.LVL20:
  62:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2,DISABLE);
 235              		.loc 1 62 7 view .LVU51
 236 0046 0121     		movs	r1, #1
 237 0048 4FF40070 		mov	r0, #512
 238 004c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 239              	.LVL21:
  63:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3,ENABLE);
 240              		.loc 1 63 7 view .LVU52
 241 0050 0021     		movs	r1, #0
 242 0052 4FF40070 		mov	r0, #512
 243 0056 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 244              	.LVL22:
  64:source\adc_dac/adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3,DISABLE);
 245              		.loc 1 64 7 view .LVU53
 246 005a 0121     		movs	r1, #1
 247 005c 4FF48060 		mov	r0, #1024
 248 0060 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 249              	.LVL23:
  65:source\adc_dac/adc.c ****       ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 250              		.loc 1 65 7 view .LVU54
 251 0064 0021     		movs	r1, #0
 252 0066 4FF48060 		mov	r0, #1024
 253 006a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 254              	.LVL24:
  66:source\adc_dac/adc.c ****       ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;
 255              		.loc 1 66 7 view .LVU55
  67:source\adc_dac/adc.c ****       ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 256              		.loc 1 67 45 is_stmt 0 view .LVU56
 257 006e 0025     		movs	r5, #0
 258 0070 4FF48033 		mov	r3, #65536
  70:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
 259              		.loc 1 70 7 view .LVU57
 260 0074 6846     		mov	r0, sp
  72:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_ContinuousConvMode = DISABLE;
 261              		.loc 1 72 39 view .LVU58
 262 0076 0124     		movs	r4, #1
  67:source\adc_dac/adc.c ****       ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 263              		.loc 1 67 45 view .LVU59
 264 0078 CDE90053 		strd	r5, r3, [sp]
  68:source\adc_dac/adc.c ****       ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 265              		.loc 1 68 7 is_stmt 1 view .LVU60
  69:source\adc_dac/adc.c ****       ADC_CommonInit(&ADC_CommonInitStructure);
 266              		.loc 1 69 52 is_stmt 0 view .LVU61
 267 007c CDE90255 		strd	r5, r5, [sp, #8]
  70:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
 268              		.loc 1 70 7 is_stmt 1 view .LVU62
 269 0080 FFF7FEFF 		bl	ADC_CommonInit
 270              	.LVL25:
  71:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_ScanConvMode = ENABLE;
 271              		.loc 1 71 7 view .LVU63
  72:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_ContinuousConvMode = DISABLE;
 272              		.loc 1 72 7 view .LVU64
  73:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 273              		.loc 1 73 7 view .LVU65
  71:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_ScanConvMode = ENABLE;
 274              		.loc 1 71 37 is_stmt 0 view .LVU66
 275 0084 0495     		str	r5, [sp, #16]
  74:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 276              		.loc 1 74 47 view .LVU67
 277 0086 0695     		str	r5, [sp, #24]
  75:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_NbrOfConversion = 1;
 278              		.loc 1 75 36 view .LVU68
 279 0088 0895     		str	r5, [sp, #32]
  77:source\adc_dac/adc.c ****       ADC_Init(ADC2,&ADC_InitStruct);
 280              		.loc 1 77 7 view .LVU69
 281 008a 04A9     		add	r1, sp, #16
  79:source\adc_dac/adc.c ****       ADC_Init(ADC3,&ADC_InitStruct);
 282              		.loc 1 79 7 view .LVU70
 283 008c 214D     		ldr	r5, .L7+16
  72:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_ContinuousConvMode = DISABLE;
 284              		.loc 1 72 39 view .LVU71
 285 008e ADF81440 		strh	r4, [sp, #20]	@ movhi
  74:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 286              		.loc 1 74 7 is_stmt 1 view .LVU72
  75:source\adc_dac/adc.c ****       ADC_InitStruct.ADC_NbrOfConversion = 1;
 287              		.loc 1 75 7 view .LVU73
  76:source\adc_dac/adc.c ****       ADC_Init(ADC1,&ADC_InitStruct);
 288              		.loc 1 76 7 view .LVU74
  77:source\adc_dac/adc.c ****       ADC_Init(ADC2,&ADC_InitStruct);
 289              		.loc 1 77 7 is_stmt 0 view .LVU75
 290 0092 3846     		mov	r0, r7
  76:source\adc_dac/adc.c ****       ADC_Init(ADC1,&ADC_InitStruct);
 291              		.loc 1 76 42 view .LVU76
 292 0094 8DF82440 		strb	r4, [sp, #36]
  77:source\adc_dac/adc.c ****       ADC_Init(ADC2,&ADC_InitStruct);
 293              		.loc 1 77 7 is_stmt 1 view .LVU77
 294 0098 FFF7FEFF 		bl	ADC_Init
 295              	.LVL26:
  78:source\adc_dac/adc.c ****       ADC_Init(ADC3,&ADC_InitStruct);
 296              		.loc 1 78 7 view .LVU78
 297 009c 04A9     		add	r1, sp, #16
 298 009e 3046     		mov	r0, r6
 299 00a0 FFF7FEFF 		bl	ADC_Init
 300              	.LVL27:
 301              		.loc 1 79 7 view .LVU79
 302 00a4 04A9     		add	r1, sp, #16
 303 00a6 2846     		mov	r0, r5
 304 00a8 FFF7FEFF 		bl	ADC_Init
 305              	.LVL28:
  80:source\adc_dac/adc.c ****       ADC_TempSensorVrefintCmd(ENABLE);
 306              		.loc 1 80 7 view .LVU80
 307 00ac 2046     		mov	r0, r4
 308 00ae FFF7FEFF 		bl	ADC_TempSensorVrefintCmd
 309              	.LVL29:
  81:source\adc_dac/adc.c ****       ADC_Cmd(ADC1,ENABLE);
 310              		.loc 1 81 7 view .LVU81
 311 00b2 2146     		mov	r1, r4
 312 00b4 3846     		mov	r0, r7
 313 00b6 FFF7FEFF 		bl	ADC_Cmd
 314              	.LVL30:
  82:source\adc_dac/adc.c ****       ADC_Cmd(ADC2,ENABLE);
 315              		.loc 1 82 7 view .LVU82
 316 00ba 2146     		mov	r1, r4
 317 00bc 3046     		mov	r0, r6
 318 00be FFF7FEFF 		bl	ADC_Cmd
 319              	.LVL31:
  83:source\adc_dac/adc.c ****       ADC_Cmd(ADC3,ENABLE);
 320              		.loc 1 83 7 view .LVU83
 321 00c2 2146     		mov	r1, r4
 322 00c4 2846     		mov	r0, r5
 323 00c6 FFF7FEFF 		bl	ADC_Cmd
 324              	.LVL32:
  84:source\adc_dac/adc.c ****       ADC_RegularChannelConfig(ADC1,ADC_Channel_16,1,ADC_SampleTime_15Cycles);
 325              		.loc 1 84 7 view .LVU84
 326 00ca 2346     		mov	r3, r4
 327 00cc 2246     		mov	r2, r4
 328 00ce 3846     		mov	r0, r7
 329 00d0 1021     		movs	r1, #16
 330 00d2 FFF7FEFF 		bl	ADC_RegularChannelConfig
 331              	.LVL33:
  85:source\adc_dac/adc.c ****       ADC_RegularChannelConfig(ADC2,ADC_Channel_5,1,ADC_SampleTime_15Cycles);
 332              		.loc 1 85 7 view .LVU85
 333 00d6 2346     		mov	r3, r4
 334 00d8 2246     		mov	r2, r4
 335 00da 3046     		mov	r0, r6
 336 00dc 0521     		movs	r1, #5
 337 00de FFF7FEFF 		bl	ADC_RegularChannelConfig
 338              	.LVL34:
  86:source\adc_dac/adc.c ****       ADC_RegularChannelConfig(ADC3,ADC_Channel_5,1,ADC_SampleTime_15Cycles);
 339              		.loc 1 86 7 view .LVU86
 340 00e2 2346     		mov	r3, r4
 341 00e4 2246     		mov	r2, r4
 342 00e6 0521     		movs	r1, #5
 343 00e8 2846     		mov	r0, r5
 344 00ea FFF7FEFF 		bl	ADC_RegularChannelConfig
 345              	.LVL35:
  87:source\adc_dac/adc.c ****       ADC_SoftwareStartConv(ADC1);
 346              		.loc 1 87 7 view .LVU87
 347 00ee 3846     		mov	r0, r7
 348 00f0 FFF7FEFF 		bl	ADC_SoftwareStartConv
 349              	.LVL36:
  88:source\adc_dac/adc.c ****       ADC_SoftwareStartConv(ADC2);
 350              		.loc 1 88 7 view .LVU88
 351 00f4 3046     		mov	r0, r6
 352 00f6 FFF7FEFF 		bl	ADC_SoftwareStartConv
 353              	.LVL37:
  89:source\adc_dac/adc.c ****       ADC_SoftwareStartConv(ADC3);
 354              		.loc 1 89 7 view .LVU89
 355 00fa 2846     		mov	r0, r5
 356 00fc FFF7FEFF 		bl	ADC_SoftwareStartConv
 357              	.LVL38:
  90:source\adc_dac/adc.c **** }
 358              		.loc 1 90 1 is_stmt 0 view .LVU90
 359 0100 0BB0     		add	sp, sp, #44
 360              		.cfi_def_cfa_offset 20
 361              		@ sp needed
 362 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 363              	.L8:
 364              		.align	2
 365              	.L7:
 366 0104 00140240 		.word	1073878016
 367 0108 00200140 		.word	1073815552
 368 010c 00210140 		.word	1073815808
 369 0110 00000240 		.word	1073872896
 370 0114 00220140 		.word	1073816064
 371              		.cfi_endproc
 372              	.LFE126:
 374              		.section	.rodata.adc_process.str1.1,"aMS",%progbits,1
 375              	.LC0:
 376 0000 41444333 		.ascii	"ADC3 CDS %4d mV \000"
 376      20434453 
 376      20253464 
 376      206D5620 
 376      00
 377              	.LC1:
 378 0011 41444331 		.ascii	"ADC1 Temperature %3d.%.2d \000"
 378      2054656D 
 378      70657261 
 378      74757265 
 378      20253364 
 379              	.LC2:
 380 002c 41444332 		.ascii	"ADC2 Volume %4d mV \000"
 380      20566F6C 
 380      756D6520 
 380      25346420 
 380      6D562000 
 381              		.section	.text.adc_process,"ax",%progbits
 382              		.align	1
 383              		.global	adc_process
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 388              	adc_process:
 389              	.LFB127:
  91:source\adc_dac/adc.c **** 
  92:source\adc_dac/adc.c **** 
  93:source\adc_dac/adc.c **** void adc_process (void)
  94:source\adc_dac/adc.c **** {
 390              		.loc 1 94 1 is_stmt 1 view -0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
  95:source\adc_dac/adc.c ****       if (ADC_GetFlagStatus(ADC3,ADC_FLAG_EOC)) {
 394              		.loc 1 95 7 view .LVU92
  94:source\adc_dac/adc.c ****       if (ADC_GetFlagStatus(ADC3,ADC_FLAG_EOC)) {
 395              		.loc 1 94 1 is_stmt 0 view .LVU93
 396 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 397              		.cfi_def_cfa_offset 32
 398              		.cfi_offset 4, -24
 399              		.cfi_offset 5, -20
 400              		.cfi_offset 6, -16
 401              		.cfi_offset 7, -12
 402              		.cfi_offset 8, -8
 403              		.cfi_offset 14, -4
 404              		.loc 1 95 11 view .LVU94
 405 0004 5748     		ldr	r0, .L22
 406 0006 0221     		movs	r1, #2
 407 0008 FFF7FEFF 		bl	ADC_GetFlagStatus
 408              	.LVL39:
 409              		.loc 1 95 10 discriminator 1 view .LVU95
 410 000c 0028     		cmp	r0, #0
 411 000e 2DD0     		beq	.L10
  96:source\adc_dac/adc.c ****          adc_vsum += ADC_GetConversionValue(ADC3);
 412              		.loc 1 96 10 is_stmt 1 view .LVU96
 413              		.loc 1 96 19 is_stmt 0 discriminator 1 view .LVU97
 414 0010 554C     		ldr	r4, .L22+4
 415              		.loc 1 96 22 view .LVU98
 416 0012 5448     		ldr	r0, .L22
 417 0014 FFF7FEFF 		bl	ADC_GetConversionValue
 418              	.LVL40:
 419              		.loc 1 96 19 discriminator 1 view .LVU99
 420 0018 2368     		ldr	r3, [r4]
  97:source\adc_dac/adc.c ****          adc_count++;
 421              		.loc 1 97 19 view .LVU100
 422 001a 544A     		ldr	r2, .L22+8
  96:source\adc_dac/adc.c ****          adc_vsum += ADC_GetConversionValue(ADC3);
 423              		.loc 1 96 19 discriminator 1 view .LVU101
 424 001c 1844     		add	r0, r0, r3
 425 001e 2060     		str	r0, [r4]
 426              		.loc 1 97 10 is_stmt 1 view .LVU102
 427              		.loc 1 97 19 is_stmt 0 view .LVU103
 428 0020 1388     		ldrh	r3, [r2]
 429 0022 0133     		adds	r3, r3, #1
 430 0024 9BB2     		uxth	r3, r3
 431 0026 1380     		strh	r3, [r2]	@ movhi
  98:source\adc_dac/adc.c ****          if (adc_count >= 100) {
 432              		.loc 1 98 10 is_stmt 1 view .LVU104
 433              		.loc 1 98 24 is_stmt 0 view .LVU105
 434 0028 1388     		ldrh	r3, [r2]
 435 002a 9BB2     		uxth	r3, r3
 436              		.loc 1 98 13 view .LVU106
 437 002c 632B     		cmp	r3, #99
 438 002e 1AD9     		bls	.L11
  99:source\adc_dac/adc.c ****       	    adc_count = 0;
 439              		.loc 1 99 12 is_stmt 1 view .LVU107
 100:source\adc_dac/adc.c ****             adc_voltage2 = simple_iir(adc_voltage2,convert_voltage(adc_vsum / 100));
 440              		.loc 1 100 28 is_stmt 0 view .LVU108
 441 0030 4F49     		ldr	r1, .L22+12
  99:source\adc_dac/adc.c ****       	    adc_count = 0;
 442              		.loc 1 99 22 view .LVU109
 443 0032 0025     		movs	r5, #0
 444 0034 1580     		strh	r5, [r2]	@ movhi
 445              		.loc 1 100 13 is_stmt 1 view .LVU110
 446              		.loc 1 100 28 is_stmt 0 view .LVU111
 447 0036 0A88     		ldrh	r2, [r1]
 448              		.loc 1 100 77 view .LVU112
 449 0038 2368     		ldr	r3, [r4]
 450              	.LVL41:
 451              	.LBB12:
 452              	.LBI12:
  30:source\adc_dac/adc.c **** {
 453              		.loc 1 30 16 is_stmt 1 view .LVU113
 454              	.LBB13:
  32:source\adc_dac/adc.c ****       value = (unsigned int)((adc_data * 26406) >> 15);
 455              		.loc 1 32 7 view .LVU114
  33:source\adc_dac/adc.c ****       return (unsigned short)value;
 456              		.loc 1 33 7 view .LVU115
  34:source\adc_dac/adc.c **** 
 457              		.loc 1 34 7 view .LVU116
  34:source\adc_dac/adc.c **** 
 458              		.loc 1 34 7 is_stmt 0 view .LVU117
 459              	.LBE13:
 460              	.LBE12:
 461              	.LBB15:
 462              	.LBI15:
  21:source\adc_dac/adc.c **** {
 463              		.loc 1 21 5 is_stmt 1 view .LVU118
 464              	.LBB16:
  23:source\adc_dac/adc.c ****       filter_value = (ALPHA * orginal_value) + (ONE_MINUS_ALPHA * new_value);
 465              		.loc 1 23 7 view .LVU119
  24:source\adc_dac/adc.c ****       return_value = (filter_value >> 3);
 466              		.loc 1 24 7 view .LVU120
  25:source\adc_dac/adc.c ****       return return_value;
 467              		.loc 1 25 7 view .LVU121
  26:source\adc_dac/adc.c **** }
 468              		.loc 1 26 7 view .LVU122
  26:source\adc_dac/adc.c **** }
 469              		.loc 1 26 7 is_stmt 0 view .LVU123
 470              	.LBE16:
 471              	.LBE15:
 472              		.loc 1 100 77 view .LVU124
 473 003a 6420     		movs	r0, #100
 474 003c B3FBF0F3 		udiv	r3, r3, r0
 475              	.LVL42:
 476              	.LBB18:
 477              	.LBB14:
  33:source\adc_dac/adc.c ****       return (unsigned short)value;
 478              		.loc 1 33 40 view .LVU125
 479 0040 46F22670 		movw	r0, #26406
 480 0044 9BB2     		uxth	r3, r3
 481 0046 4343     		muls	r3, r0, r3
  33:source\adc_dac/adc.c ****       return (unsigned short)value;
 482              		.loc 1 33 49 view .LVU126
 483 0048 DB13     		asrs	r3, r3, #15
 484              	.LBE14:
 485              	.LBE18:
 486              	.LBB19:
 487              	.LBB17:
  24:source\adc_dac/adc.c ****       return_value = (filter_value >> 3);
 488              		.loc 1 24 20 view .LVU127
 489 004a 0720     		movs	r0, #7
 490 004c 12FB0033 		smlabb	r3, r2, r0, r3
 491              	.LBE17:
 492              	.LBE19:
 493              		.loc 1 100 26 discriminator 2 view .LVU128
 494 0050 43F3CF03 		sbfx	r3, r3, #3, #16
 495 0054 0B80     		strh	r3, [r1]	@ movhi
 101:source\adc_dac/adc.c ****             lcd_printf(1,5,"ADC3 CDS %4d mV ",adc_voltage2);
 496              		.loc 1 101 13 is_stmt 1 view .LVU129
 497 0056 0B88     		ldrh	r3, [r1]
 498 0058 464A     		ldr	r2, .L22+16
 499 005a 1BB2     		sxth	r3, r3
 500 005c 0521     		movs	r1, #5
 501 005e 0120     		movs	r0, #1
 502 0060 FFF7FEFF 		bl	lcd_printf
 503              	.LVL43:
 102:source\adc_dac/adc.c ****             adc_vsum = 0;
 504              		.loc 1 102 13 view .LVU130
 505              		.loc 1 102 22 is_stmt 0 view .LVU131
 506 0064 2560     		str	r5, [r4]
 507              	.LVL44:
 508              	.L11:
 103:source\adc_dac/adc.c ****          }
 104:source\adc_dac/adc.c ****          ADC_SoftwareStartConv(ADC3);
 509              		.loc 1 104 10 is_stmt 1 view .LVU132
 510 0066 3F48     		ldr	r0, .L22
 511 0068 FFF7FEFF 		bl	ADC_SoftwareStartConv
 512              	.LVL45:
 513              	.L10:
 105:source\adc_dac/adc.c ****       }
 106:source\adc_dac/adc.c ****       if (ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)) {
 514              		.loc 1 106 7 view .LVU133
 515              		.loc 1 106 11 is_stmt 0 view .LVU134
 516 006c 4248     		ldr	r0, .L22+20
 517 006e 0221     		movs	r1, #2
 518 0070 FFF7FEFF 		bl	ADC_GetFlagStatus
 519              	.LVL46:
 520              		.loc 1 106 10 discriminator 1 view .LVU135
 521 0074 0028     		cmp	r0, #0
 522 0076 3AD0     		beq	.L12
 107:source\adc_dac/adc.c ****          adc_tsum += ADC_GetConversionValue(ADC1);
 523              		.loc 1 107 10 is_stmt 1 view .LVU136
 524              		.loc 1 107 19 is_stmt 0 discriminator 1 view .LVU137
 525 0078 404D     		ldr	r5, .L22+24
 526              		.loc 1 107 22 view .LVU138
 527 007a 3F48     		ldr	r0, .L22+20
 528 007c FFF7FEFF 		bl	ADC_GetConversionValue
 529              	.LVL47:
 530              		.loc 1 107 19 discriminator 1 view .LVU139
 531 0080 2B68     		ldr	r3, [r5]
 108:source\adc_dac/adc.c ****          adc_tcount++;
 532              		.loc 1 108 20 view .LVU140
 533 0082 3F4A     		ldr	r2, .L22+28
 107:source\adc_dac/adc.c ****          adc_tsum += ADC_GetConversionValue(ADC1);
 534              		.loc 1 107 19 discriminator 1 view .LVU141
 535 0084 1844     		add	r0, r0, r3
 536 0086 2860     		str	r0, [r5]
 537              		.loc 1 108 10 is_stmt 1 view .LVU142
 538              		.loc 1 108 20 is_stmt 0 view .LVU143
 539 0088 1388     		ldrh	r3, [r2]
 540 008a 0133     		adds	r3, r3, #1
 541 008c 9BB2     		uxth	r3, r3
 542 008e 1380     		strh	r3, [r2]	@ movhi
 109:source\adc_dac/adc.c ****          if (adc_tcount >= 100) {
 543              		.loc 1 109 10 is_stmt 1 view .LVU144
 544              		.loc 1 109 25 is_stmt 0 view .LVU145
 545 0090 1388     		ldrh	r3, [r2]
 546 0092 9BB2     		uxth	r3, r3
 547              		.loc 1 109 13 view .LVU146
 548 0094 632B     		cmp	r3, #99
 549 0096 27D9     		bls	.L13
 110:source\adc_dac/adc.c ****       	    adc_tcount = 0;
 550              		.loc 1 110 12 is_stmt 1 view .LVU147
 111:source\adc_dac/adc.c ****             adc_temperature = simple_iir(adc_temperature,cal_temperature(adc_tsum / 100));
 551              		.loc 1 111 31 is_stmt 0 view .LVU148
 552 0098 DFF80081 		ldr	r8, .L22+56
 110:source\adc_dac/adc.c ****       	    adc_tcount = 0;
 553              		.loc 1 110 23 view .LVU149
 554 009c 0026     		movs	r6, #0
 555 009e 1680     		strh	r6, [r2]	@ movhi
 556              		.loc 1 111 13 is_stmt 1 view .LVU150
 557              		.loc 1 111 31 is_stmt 0 view .LVU151
 558 00a0 B8F80040 		ldrh	r4, [r8]
 559              		.loc 1 111 83 view .LVU152
 560 00a4 2868     		ldr	r0, [r5]
 561 00a6 6427     		movs	r7, #100
 562 00a8 B0FBF7F0 		udiv	r0, r0, r7
 563              		.loc 1 111 58 view .LVU153
 564 00ac 80B2     		uxth	r0, r0
 565 00ae FFF7FEFF 		bl	cal_temperature
 566              	.LVL48:
 567              	.LBB20:
 568              	.LBI20:
  21:source\adc_dac/adc.c **** {
 569              		.loc 1 21 5 is_stmt 1 view .LVU154
 570              	.LBB21:
  23:source\adc_dac/adc.c ****       filter_value = (ALPHA * orginal_value) + (ONE_MINUS_ALPHA * new_value);
 571              		.loc 1 23 7 view .LVU155
  24:source\adc_dac/adc.c ****       return_value = (filter_value >> 3);
 572              		.loc 1 24 7 view .LVU156
  25:source\adc_dac/adc.c ****       return return_value;
 573              		.loc 1 25 7 view .LVU157
  26:source\adc_dac/adc.c **** }
 574              		.loc 1 26 7 view .LVU158
  24:source\adc_dac/adc.c ****       return_value = (filter_value >> 3);
 575              		.loc 1 24 20 is_stmt 0 view .LVU159
 576 00b2 0723     		movs	r3, #7
 577 00b4 14FB0304 		smlabb	r4, r4, r3, r0
 578              	.LBE21:
 579              	.LBE20:
 580              		.loc 1 111 29 discriminator 2 view .LVU160
 581 00b8 44F3CF04 		sbfx	r4, r4, #3, #16
 582 00bc A8F80040 		strh	r4, [r8]	@ movhi
 112:source\adc_dac/adc.c ****             lcd_printf(1,4,"ADC1 Temperature %3d.%.2d ",adc_temperature / 100,adc_temperature % 100
 583              		.loc 1 112 13 is_stmt 1 view .LVU161
 584 00c0 B8F80030 		ldrh	r3, [r8]
 585 00c4 B8F80020 		ldrh	r2, [r8]
 586 00c8 12B2     		sxth	r2, r2
 587 00ca 92FBF7F1 		sdiv	r1, r2, r7
 588 00ce 07FB1122 		mls	r2, r7, r1, r2
 589 00d2 12B2     		sxth	r2, r2
 590 00d4 0092     		str	r2, [sp]
 591 00d6 1BB2     		sxth	r3, r3
 592 00d8 2A4A     		ldr	r2, .L22+32
 593 00da 93FBF7F3 		sdiv	r3, r3, r7
 594 00de 0421     		movs	r1, #4
 595 00e0 0120     		movs	r0, #1
 596 00e2 FFF7FEFF 		bl	lcd_printf
 597              	.LVL49:
 113:source\adc_dac/adc.c ****             adc_tsum = 0;
 598              		.loc 1 113 13 view .LVU162
 599              		.loc 1 113 22 is_stmt 0 view .LVU163
 600 00e6 2E60     		str	r6, [r5]
 601              	.L13:
 114:source\adc_dac/adc.c ****          }
 115:source\adc_dac/adc.c ****          ADC_SoftwareStartConv(ADC1);
 602              		.loc 1 115 10 is_stmt 1 view .LVU164
 603 00e8 2348     		ldr	r0, .L22+20
 604 00ea FFF7FEFF 		bl	ADC_SoftwareStartConv
 605              	.LVL50:
 606              	.L12:
 116:source\adc_dac/adc.c ****       }
 117:source\adc_dac/adc.c ****       if (ADC_GetFlagStatus(ADC2,ADC_FLAG_EOC)) {
 607              		.loc 1 117 7 view .LVU165
 608              		.loc 1 117 11 is_stmt 0 view .LVU166
 609 00ee 2648     		ldr	r0, .L22+36
 610 00f0 0221     		movs	r1, #2
 611 00f2 FFF7FEFF 		bl	ADC_GetFlagStatus
 612              	.LVL51:
 613              		.loc 1 117 10 discriminator 1 view .LVU167
 614 00f6 0028     		cmp	r0, #0
 615 00f8 30D0     		beq	.L9
 118:source\adc_dac/adc.c ****          adc_lsum += ADC_GetConversionValue(ADC2);
 616              		.loc 1 118 10 is_stmt 1 view .LVU168
 617              		.loc 1 118 19 is_stmt 0 discriminator 1 view .LVU169
 618 00fa 244C     		ldr	r4, .L22+40
 619              		.loc 1 118 22 view .LVU170
 620 00fc 2248     		ldr	r0, .L22+36
 621 00fe FFF7FEFF 		bl	ADC_GetConversionValue
 622              	.LVL52:
 623              		.loc 1 118 19 discriminator 1 view .LVU171
 624 0102 2368     		ldr	r3, [r4]
 119:source\adc_dac/adc.c ****          adc_lcount++;
 625              		.loc 1 119 20 view .LVU172
 626 0104 224A     		ldr	r2, .L22+44
 118:source\adc_dac/adc.c ****          adc_lsum += ADC_GetConversionValue(ADC2);
 627              		.loc 1 118 19 discriminator 1 view .LVU173
 628 0106 1844     		add	r0, r0, r3
 629 0108 2060     		str	r0, [r4]
 630              		.loc 1 119 10 is_stmt 1 view .LVU174
 631              		.loc 1 119 20 is_stmt 0 view .LVU175
 632 010a 1388     		ldrh	r3, [r2]
 633 010c 0133     		adds	r3, r3, #1
 634 010e 9BB2     		uxth	r3, r3
 635 0110 1380     		strh	r3, [r2]	@ movhi
 120:source\adc_dac/adc.c ****          if (adc_lcount >= 100) {
 636              		.loc 1 120 10 is_stmt 1 view .LVU176
 637              		.loc 1 120 25 is_stmt 0 view .LVU177
 638 0112 1388     		ldrh	r3, [r2]
 639 0114 9BB2     		uxth	r3, r3
 640              		.loc 1 120 13 view .LVU178
 641 0116 632B     		cmp	r3, #99
 642 0118 1AD9     		bls	.L15
 121:source\adc_dac/adc.c ****       	    adc_lcount = 0;
 643              		.loc 1 121 12 is_stmt 1 view .LVU179
 122:source\adc_dac/adc.c ****             adc_voltage1 = simple_iir(adc_voltage1,convert_voltage(adc_lsum / 100));
 644              		.loc 1 122 28 is_stmt 0 view .LVU180
 645 011a 1E49     		ldr	r1, .L22+48
 121:source\adc_dac/adc.c ****       	    adc_lcount = 0;
 646              		.loc 1 121 23 view .LVU181
 647 011c 0025     		movs	r5, #0
 648 011e 1580     		strh	r5, [r2]	@ movhi
 649              		.loc 1 122 13 is_stmt 1 view .LVU182
 650              		.loc 1 122 28 is_stmt 0 view .LVU183
 651 0120 0A88     		ldrh	r2, [r1]
 652              		.loc 1 122 77 view .LVU184
 653 0122 2368     		ldr	r3, [r4]
 654              	.LVL53:
 655              	.LBB22:
 656              	.LBI22:
  30:source\adc_dac/adc.c **** {
 657              		.loc 1 30 16 is_stmt 1 view .LVU185
 658              	.LBB23:
  32:source\adc_dac/adc.c ****       value = (unsigned int)((adc_data * 26406) >> 15);
 659              		.loc 1 32 7 view .LVU186
  33:source\adc_dac/adc.c ****       return (unsigned short)value;
 660              		.loc 1 33 7 view .LVU187
  34:source\adc_dac/adc.c **** 
 661              		.loc 1 34 7 view .LVU188
  34:source\adc_dac/adc.c **** 
 662              		.loc 1 34 7 is_stmt 0 view .LVU189
 663              	.LBE23:
 664              	.LBE22:
 665              	.LBB25:
 666              	.LBI25:
  21:source\adc_dac/adc.c **** {
 667              		.loc 1 21 5 is_stmt 1 view .LVU190
 668              	.LBB26:
  23:source\adc_dac/adc.c ****       filter_value = (ALPHA * orginal_value) + (ONE_MINUS_ALPHA * new_value);
 669              		.loc 1 23 7 view .LVU191
  24:source\adc_dac/adc.c ****       return_value = (filter_value >> 3);
 670              		.loc 1 24 7 view .LVU192
  25:source\adc_dac/adc.c ****       return return_value;
 671              		.loc 1 25 7 view .LVU193
  26:source\adc_dac/adc.c **** }
 672              		.loc 1 26 7 view .LVU194
  26:source\adc_dac/adc.c **** }
 673              		.loc 1 26 7 is_stmt 0 view .LVU195
 674              	.LBE26:
 675              	.LBE25:
 676              		.loc 1 122 77 view .LVU196
 677 0124 6420     		movs	r0, #100
 678 0126 B3FBF0F3 		udiv	r3, r3, r0
 679              	.LVL54:
 680              	.LBB28:
 681              	.LBB24:
  33:source\adc_dac/adc.c ****       return (unsigned short)value;
 682              		.loc 1 33 40 view .LVU197
 683 012a 46F22670 		movw	r0, #26406
 684 012e 9BB2     		uxth	r3, r3
 685 0130 4343     		muls	r3, r0, r3
  33:source\adc_dac/adc.c ****       return (unsigned short)value;
 686              		.loc 1 33 49 view .LVU198
 687 0132 DB13     		asrs	r3, r3, #15
 688              	.LBE24:
 689              	.LBE28:
 690              	.LBB29:
 691              	.LBB27:
  24:source\adc_dac/adc.c ****       return_value = (filter_value >> 3);
 692              		.loc 1 24 20 view .LVU199
 693 0134 0720     		movs	r0, #7
 694 0136 12FB0033 		smlabb	r3, r2, r0, r3
 695              	.LBE27:
 696              	.LBE29:
 697              		.loc 1 122 26 discriminator 2 view .LVU200
 698 013a 43F3CF03 		sbfx	r3, r3, #3, #16
 699 013e 0B80     		strh	r3, [r1]	@ movhi
 123:source\adc_dac/adc.c ****             lcd_printf(1,3,"ADC2 Volume %4d mV ",adc_voltage1);
 700              		.loc 1 123 13 is_stmt 1 view .LVU201
 701 0140 0B88     		ldrh	r3, [r1]
 702 0142 154A     		ldr	r2, .L22+52
 703 0144 1BB2     		sxth	r3, r3
 704 0146 0321     		movs	r1, #3
 705 0148 0120     		movs	r0, #1
 706 014a FFF7FEFF 		bl	lcd_printf
 707              	.LVL55:
 124:source\adc_dac/adc.c ****             adc_lsum = 0;
 708              		.loc 1 124 13 view .LVU202
 709              		.loc 1 124 22 is_stmt 0 view .LVU203
 710 014e 2560     		str	r5, [r4]
 711              	.LVL56:
 712              	.L15:
 125:source\adc_dac/adc.c ****          }
 126:source\adc_dac/adc.c ****          ADC_SoftwareStartConv(ADC2);
 713              		.loc 1 126 10 is_stmt 1 view .LVU204
 714 0150 0D48     		ldr	r0, .L22+36
 127:source\adc_dac/adc.c ****       }
 128:source\adc_dac/adc.c **** }...
 715              		.loc 1 128 1 is_stmt 0 view .LVU205
 716 0152 02B0     		add	sp, sp, #8
 717              		.cfi_remember_state
 718              		.cfi_def_cfa_offset 24
 719              		@ sp needed
 720 0154 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 721              		.cfi_restore 14
 722              		.cfi_restore 8
 723              		.cfi_restore 7
 724              		.cfi_restore 6
 725              		.cfi_restore 5
 726              		.cfi_restore 4
 727              		.cfi_def_cfa_offset 0
 126:source\adc_dac/adc.c ****          ADC_SoftwareStartConv(ADC2);
 728              		.loc 1 126 10 view .LVU206
 729 0158 FFF7FEBF 		b	ADC_SoftwareStartConv
 730              	.LVL57:
 731              	.L9:
 732              		.cfi_restore_state
 733              		.loc 1 128 1 view .LVU207
 734 015c 02B0     		add	sp, sp, #8
 735              		.cfi_def_cfa_offset 24
 736              		@ sp needed
 737 015e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 738              	.L23:
 739 0162 00BF     		.align	2
 740              	.L22:
 741 0164 00220140 		.word	1073816064
 742 0168 00000000 		.word	adc_vsum
 743 016c 00000000 		.word	adc_count
 744 0170 00000000 		.word	adc_voltage2
 745 0174 00000000 		.word	.LC0
 746 0178 00200140 		.word	1073815552
 747 017c 00000000 		.word	adc_tsum
 748 0180 00000000 		.word	adc_tcount
 749 0184 11000000 		.word	.LC1
 750 0188 00210140 		.word	1073815808
 751 018c 00000000 		.word	adc_lsum
 752 0190 00000000 		.word	adc_lcount
 753 0194 00000000 		.word	adc_voltage1
 754 0198 2C000000 		.word	.LC2
 755 019c 00000000 		.word	adc_temperature
 756              		.cfi_endproc
 757              	.LFE127:
 759              		.global	adc_temperature
 760              		.section	.bss.adc_temperature,"aw",%nobits
 761              		.align	1
 764              	adc_temperature:
 765 0000 0000     		.space	2
 766              		.global	adc_voltage2
 767              		.section	.bss.adc_voltage2,"aw",%nobits
 768              		.align	1
 771              	adc_voltage2:
 772 0000 0000     		.space	2
 773              		.global	adc_voltage1
 774              		.section	.bss.adc_voltage1,"aw",%nobits
 775              		.align	1
 778              	adc_voltage1:
 779 0000 0000     		.space	2
 780              		.global	adc_lsum
 781              		.section	.bss.adc_lsum,"aw",%nobits
 782              		.align	2
 785              	adc_lsum:
 786 0000 00000000 		.space	4
 787              		.global	adc_tsum
 788              		.section	.bss.adc_tsum,"aw",%nobits
 789              		.align	2
 792              	adc_tsum:
 793 0000 00000000 		.space	4
 794              		.global	adc_vsum
 795              		.section	.bss.adc_vsum,"aw",%nobits
 796              		.align	2
 799              	adc_vsum:
 800 0000 00000000 		.space	4
 801              		.global	adc_lcount
 802              		.section	.bss.adc_lcount,"aw",%nobits
 803              		.align	1
 806              	adc_lcount:
 807 0000 0000     		.space	2
 808              		.global	adc_tcount
 809              		.section	.bss.adc_tcount,"aw",%nobits
 810              		.align	1
 813              	adc_tcount:
 814 0000 0000     		.space	2
 815              		.global	adc_count
 816              		.section	.bss.adc_count,"aw",%nobits
 817              		.align	1
 820              	adc_count:
 821 0000 0000     		.space	2
 822              		.text
 823              	.Letext0:
 824              		.file 2 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.3 rel1/arm-none-eabi/include/ma
 825              		.file 3 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.3 rel1/arm-none-eabi/include/sy
 826              		.file 4 "/project/stm32fx_iolib/stm32fxxx/stm32f4xx/stm32f4xx.h"
 827              		.file 5 "/project/stm32fx_iolib/stm32f4x_iolib/include/stm32f4xx_adc.h"
 828              		.file 6 "/project/stm32fx_iolib/stm32f4x_iolib/include/stm32f4xx_gpio.h"
 829              		.file 7 "source\\adc_dac\\../prototype.h"
 830              		.file 8 "/project/stm32fx_iolib/stm32f4x_iolib/include/stm32f4xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:21     .text.simple_iir:00000000 $t
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:27     .text.simple_iir:00000000 simple_iir
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:51     .text.convert_voltage:00000000 $t
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:57     .text.convert_voltage:00000000 convert_voltage
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:85     .text.cal_temperature:00000000 $t
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:91     .text.cal_temperature:00000000 cal_temperature
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:157    .text.cal_temperature:00000048 $d
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:169    .text.ADC_Config:00000000 $t
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:175    .text.ADC_Config:00000000 ADC_Config
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:366    .text.ADC_Config:00000104 $d
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:382    .text.adc_process:00000000 $t
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:388    .text.adc_process:00000000 adc_process
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:741    .text.adc_process:00000164 $d
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:799    .bss.adc_vsum:00000000 adc_vsum
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:820    .bss.adc_count:00000000 adc_count
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:771    .bss.adc_voltage2:00000000 adc_voltage2
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:792    .bss.adc_tsum:00000000 adc_tsum
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:813    .bss.adc_tcount:00000000 adc_tcount
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:785    .bss.adc_lsum:00000000 adc_lsum
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:806    .bss.adc_lcount:00000000 adc_lcount
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:778    .bss.adc_voltage1:00000000 adc_voltage1
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:764    .bss.adc_temperature:00000000 adc_temperature
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:761    .bss.adc_temperature:00000000 $d
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:768    .bss.adc_voltage2:00000000 $d
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:775    .bss.adc_voltage1:00000000 $d
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:782    .bss.adc_lsum:00000000 $d
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:789    .bss.adc_tsum:00000000 $d
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:796    .bss.adc_vsum:00000000 $d
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:803    .bss.adc_lcount:00000000 $d
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:810    .bss.adc_tcount:00000000 $d
C:\Users\gedha\AppData\Local\Temp\cca8Nvgu.s:817    .bss.adc_count:00000000 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dmul
__aeabi_dsub
__aeabi_ddiv
__aeabi_dadd
__aeabi_d2iz
RCC_AHB1PeriphClockCmd
GPIO_Init_Pin
RCC_APB2PeriphClockCmd
RCC_APB2PeriphResetCmd
ADC_CommonInit
ADC_Init
ADC_TempSensorVrefintCmd
ADC_Cmd
ADC_RegularChannelConfig
ADC_SoftwareStartConv
ADC_GetFlagStatus
ADC_GetConversionValue
lcd_printf
